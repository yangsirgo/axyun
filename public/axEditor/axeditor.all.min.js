/*
默认配置项
*/
/* eslint-disable */
(function() {
  /**
   * 编辑器资源文件根路径。它所表示的含义是：以编辑器实例化页面为当前路径，指向编辑器资源文件（即dialog等文件夹）的路径。
   * 鉴于很多同学在使用编辑器的时候出现的种种路径问题，此处强烈建议大家使用"相对于网站根目录的相对路径"进行配置。
   * "相对于网站根目录的相对路径"也就是以斜杠开头的形如"/myProject/axeditor/"这样的路径。
   * 如果站点中有多个不在同一层级的页面需要实例化编辑器，且引用了同一axeditor的时候，此处的URL可能不适用于每个页面的编辑器。
   * 因此，axeditor提供了针对不同页面的编辑器可单独配置的根路径，具体来说，在需要实例化编辑器的页面最顶部写上如下代码即可。当然，需要令此处的URL等于对应的配置。
   * window.AXEDITOR_HOME_URL = "/xxxx/xxxx/"
   */
  window.AXEDITOR_HOME_URL = window.AXEDITOR_HOME_URL || "./axEditor/";
  var URL = window.AXEDITOR_HOME_URL || getUEBasePath();

  /**
   * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。
   */
  window.AXEDITOR_CONFIG = {
    $: null,
    product: true, //正式版与测试版切换
    AXEDITOR_HOME_URL: URL, // 为编辑器实例添加一个路径，这个不能被注释
    serverUrl: "", // 服务器统一请求接口路径
    apiUrl: "", //弹窗中与业务交互的接口地址
    fileUrl: "http://192.168.198.131:8762", // 文件服务器接口
    // apiUrl: "http://192.168.198.250:8762", //弹窗中与业务交互的接口地址192.168.197.101:8762
    editorModel: "design",
    defaultModel: "design",
    confirmMsg: function() {console.warn("请自定义confirmMsg方法")},
    selectParagraphType: "", //当前选中选区的段落类型
    clickSignature: null, // 点击签名元素方法
    svgeditorMethod: null, // 矢量图编辑器触发方法
    saveImgLib: null, // 图片库保存方法
    saveMethod: null, // 保存病历方法
    submitMethod: null, // 提交病历方法
    recallMethod: null, // 撤回病历方法
    saveTemplMethod: null, // 存为模板方法
    prescriptionMethod: null, // 调用编辑处方方法
    refreshPrescriptionMethod: null, // 调用刷新处方方法
    diagnoseMethod: null, // 调用编辑诊断方法
    refreshDiagnoseMethod: null, // 调用刷新诊断方法
    refreshHistoryMethod: null, // 调用刷新第三方既往史方法
    highBloodFollowUpMethod: null, // 切换高血压随访
    refreshMacrosMethod: null, // 调用刷新基本元素方法
    synchronizeMethod: null, // 调用同步信息方法
    saveEleMethod: null, // 元素存库方法
    savePhraseMethod: null, // 保存片语方法
    showContinuePrint: null, // 显示续打窗口
    printMethod: null, // 保存片语方法
    printStatus: null, // 更新打印状态
    printResult: null, // 打印结果
    printWhiteCm: 0.45, // 打印预留边距，是由于打印机起墨位置不同
    savePdf: null, // 保存为pdf
    saveXml: null, // 保存为xml
    saveCda: null, // 保存为cda
    getServerDate: null, // 获取服务器时间接口
    getUUID: null, // 获取UUID接口
    setContentReady: null, // 文书内容修改回调方法
    clickElement: null, // 点击元素返回元素类型
    dateObj: {
      serverDate: +new Date(), // 编辑器初始化 服务器时间戳
      localDate: +new Date()  // 编辑器初始化 本地时间戳
    },
    signatureType: "text", // 签章方式：text：文字签名；img：图片签名；key：电子签章签名
    signatureUrl: "http://192.168.0.1:8080/", // 图片签名时的图片地址
    // signatureName: '赵颖', // 文字签名时的姓名
    userInfo: {
      //json至少包含一下三项key，否则留痕记录信息会出现错误
      id: "10001",
      name: "张三1",
      priv: 1,
      token: "+cNGS4gWVKYdgecBLy7Bs5iYKaG8Fv0mqDuGCMaX1bwN9SzjmE97EaPkEYVQC52G9V7mxmaNlhb/LF7Hp4EJRwAHIZn1CRNQkWaQXy5Ui+/WSo0XAAfblR3oBUggNenzA1bNtKJUm16yz+/bnNVl5UekMyDAoAlfpuMnbK8QL4SOrfxENp3EtJ2IoRD5qwHkvJVwX2Q3slh8y7IWNs6hlUAkco3U7Dx3DXiElwtG3oVhDpQE/Rk4/gnvIHEURgfccUI3OzYXdi7PWURGPNbSryFRUHdQ+WtQjFzBUbCw1AXT4JDtdhsSIokrN5QOIueAVrwqO6Ak4kAkB95QXuuhDzm/SKouoZOsEnTe0oN7H4hsviF7yAfs64BWLClhtzBU+C7c8/hmiOd9yYHuWtZhHQ=="
    },
    sensitiveSetting: null, // 敏感词远程配置
    allSensitiveSetting: null,
    readOnlyEditBtns: [
      "updatemacros",
      "structuretree",
      "structuretreeclick",
      "pure",
      "dirty",
      "secret",
      "setmodel",
      "recall",
      "print",
      "continueprint",
      "docontinueprint",
      "printpreview",
      "numcount",
      "resettabindex",
      "resetmarkflag",
      "papersize",
      "pagemargin",
      "paperscale",
      "recordinitcontent"
    ], //浏览模式下可用按钮列表
    maleSensitiveWords: [
      "射精",
      "阴茎",
      "睾丸",
      "包皮",
      "冠状沟",
      "附睾",
      "输精管",
      "前列腺"
    ], //男性体征
    femaleSensitiveWords: [
      "初潮",
      "经期",
      "月经",
      "绝经",
      "哺乳",
      "流产",
      "人流",
      "引产",
      "妊娠",
      "死胎",
      "分娩",
      "胎盘",
      "子宫",
      "卵巢",
      "输卵管",
      "阴道",
      "白带"
    ], //女性体征
    autoClearinitialContent: false, // 是否自动清除编辑器初始内容，注意：如果focus属性设置为true,这个也为真，那么编辑器一上来就会触发导致初始化的内容看不到了
    iframeJsUrl: "third-party/date/laydate/laydate.js?temp=" + new Date().getTime(), //给编辑区域的iframe引入一个js文件
    iframeCssUrl: "themes/default/css/ax.ctrl.css?temp=" + new Date().getTime(), //给编辑区域的iframe引入一个css文件
    jqJsUrl: "third-party/jquery-1.10.2.min.js",
    allowDivTransToP: false, // 允许进入编辑器的div标签自动变成p标签
    wordCount: false, // 关闭字数统计
    copySwitch: true, // 是否允许复制粘贴编辑器外的内容
    copyNumber: false, // 允许复制内容最大文本数
    elementPathEnabled: false, // 关闭elementPath
    imageScaleEnabled: true,
    imagePopup: true,
    focus: true,
    zIndex: 999,
    fixedWidth: true,  // fasle -> 编辑器内容区域自适应， true -> 编辑器内容区域根据选择的纸张大小居中显示
    // initialFrameWidth: 900,
    // initialFrameHeight: 624,
    autoHeightEnabled: false,
    autoFloatEnabled: false,
    saveInterval: 60000,
    enableAutoSave: false, // 关闭自动保存
    /* labelMap: {
      'text': '文本域',
      'select': '下拉域',
      'recortar': '剪切',
      'colar': '粘贴',
      'copiar': '复制',
      'upsize': '增大字体',
      'downsize': '缩小字体',
      'tablelowerframeline': '下框线',
      'tableupperframeline': '上框线',
      'tableleftframeline': '左框线',
      'tablerightframeline': '右框线',
      'tablenoborder': '无框线',
      'tableinternaltransverseline': '内部横线',
      'tableinternalverticalline': '内部竖线',
      'tableinsideborder': '内部框线',
      'tablelateralframeline': '外侧框线',
      'tableallframelines': '所有框线'
    }, */
    // 医学公式配置
    formulaList: {},
    // 数字元素单位
    eleUnits: [
      {
        name: "年、月、日"
      },
      {
        name: "时、分、秒"
      },
      {
        name: "kg"
      },
      {
        name: "m"
      },
      {
        name: "km"
      }
    ],
    pagemargin: [
      {
        label: "窄：上1.27厘米,下1.27厘米,左1.27厘米,右1.27厘米",
        value: [1.27, 1.27, 1.27, 1.27]
      },
      {
        label: "常用：上1厘米,下1厘米,左3.18厘米,右3.18厘米",
        value: [1, 3.18, 1, 3.18]
      },
      {
        label: "普通：上2.54厘米,下2.54厘米,左3.18厘米,右3.18厘米",
        value: [2.54, 3.18, 2.54, 3.18]
      },
      {
        label: "适中：上2.54厘米,下2.54厘米,左1.91厘米,右1.91厘米",
        value: [2.54, 1.91, 2.54, 1.91]
      },
      {
        label: "宽：上2.54厘米,下2.54厘米,左5.08厘米,右5.08厘米",
        value: [2.54, 5.08, 2.54, 5.08]
      },
      {
        label: "自定义页边距",
        value: "custom"
      }
    ],
    papersize: [
      {
        label: "A4 21cm × 29.7cm",
        value: [21, 29.7, 'A4'],
        name: "A4"
      },
      {
        label: "A3 29.7cm × 42cm",
        value: [29.7, 42, 'A3'],
        name: "A3"
      },
      {
        label: "A5 14.8cm × 21cm",
        value: [14.8, 21, 'A5'],
        name: "A5"
      },
      {
        label: "B4 25.7cm x 36.4cm",
        value: [25.7, 36.4, 'B4'],
        name: "B4"
      },
      {
        label: "B5 18.2cm x 25.7cm",
        value: [18.2, 25.7, 'B5'],
        name: "B5"
      },
      {
        label: "宽版 40cm × 100cm",
        value: [40, 50],
        name: "宽版"
      },
      {
        label: "横版 29.7cm × 21cm",
        value: [29.7, 21],
        name: "横版"
      }
    ],
    paperscale: [
      {
        label: "x1",
        value: 1,
        name: "1倍"
      },
      {
        label: "x1.25",
        value: 1.25,
        name: "1.25倍"
      },
      {
        label: "x1.5",
        value: 1.5,
        name: "1.5倍"
      }
    ],
    //基本元素设置
    macrosData: [
      {
        groupName: "人员信息",
        groupItem: [
          {
            code: "username",
            text: "姓名",
            value: "张三"
          },
          {
            code: "sex",
            text: "性别",
            value: "男"
          },
          {
            code: "inHospitailNo",
            text: "住院号",
            value: "121"
          }
        ]
      },
      {
        groupName: "就诊信息",
        groupItem: [
          {
            code: "doctorNo",
            text: "医师号",
            value: "1212"
          }
        ]
      },
      {
        groupName: "就诊信息",
        groupItem: [
          {
            code: "signature",
            text: "医师签名",
            value: "我是医师"
          }
        ]
      }
    ],
    focusInEnd: false, //光标是否定位到尾部
    maxUndoCount: 2000000, //可以最多回退的次数
    showTabBar: true, //开启tab类型菜单
    activeTabNum: 1, //tab计数从1开始
    tabToolbars: [
      {
        id: "edit",
        name: "编辑",
        widgets: [
          [
            {
              id: "savexml",
              name: "保存xml"
            },
            {
              id: "openxml",
              name: "打开xml"
            },
            {
              id: "savepdf",
              name: "打开pdf"
            },
            {
              id: "save",
              name: "保存"
            },
            {
              id: "submit",
              name: "提交"
            },
            {
              id: "recall",
              name: "撤回"
            },
            {
              id: "savetempl",
              name: "另存为模板"
            },
            {
              id: "undo",
              name: "撤销"
            },
            {
              id: "redo",
              name: "恢复"
            },
            {
              id: "drafts",
              name: "草稿箱"
            }
          ],
          /* [{
              id: 'copy',
              name: '复制'
            },
            {
              id: 'cut',
              name: '剪切'
            },
            {
              id: 'paste',
              name: '粘贴'
            }
          ], */
          [
            {
              type: "select",
              iconOnly: true,
              id: "fontfamily",
              name: "字体格式"
            },
            {
              type: "select",
              iconOnly: true,
              id: "fontsize",
              name: "字号"
            },
            {
              iconOnly: true,
              hasBorder: true,
              id: "removeformat",
              name: "清除样式"
            },
            {
              iconOnly: true,
              hasBorder: true,
              id: "formatmatch",
              name: "格式刷"
            },
            {
              iconOnly: true,
              hasBorder: true,
              id: "autotypeset",
              name: "自动格式化"
            },
            {
              id: "breakLine"
            },
            {
              iconOnly: true,
              id: "sizeplus",
              name: "增大字号"
            },
            {
              iconOnly: true,
              id: "sizeminus",
              name: "缩小字号"
            },
            {
              iconOnly: true,
              id: "fontborder",
              name: "字体边框"
            },
            {
              iconOnly: true,
              id: "superscript",
              name: "上标"
            },
            {
              iconOnly: true,
              id: "subscript",
              name: "下标"
            },
            {
              iconOnly: true,
              id: "bold",
              name: "加粗"
            },
            {
              iconOnly: true,
              id: "italic",
              name: "倾斜"
            },
            {
              iconOnly: true,
              id: "underline",
              name: "下划线"
            },
            // {
            //   iconOnly: true,
            //   id: "strikethrough",
            //   name: "删除线"
            // },
            {
              iconOnly: true,
              id: "forecolor",
              name: "文字颜色"
            },
            {
              iconOnly: true,
              id: "backcolor",
              name: "背景颜色"
            }
          ],
          [
            {
              iconOnly: true,
              id: "justifyleft",
              name: "向左对齐"
            },
            {
              iconOnly: true,
              id: "justifycenter",
              name: "居中对齐"
            },
            {
              iconOnly: true,
              id: "justifyright",
              name: "向右对齐"
            },
            {
              iconOnly: true,
              id: "justifyjustify",
              name: "两端对齐"
            },
            /* {
              iconOnly: true,
              id: 'blockquote',
              name: '引用'
            }, */
            {
              iconOnly: true,
              id: "indent",
              name: "首行缩进"
            },
            {
              id: "breakLine"
            },
            {
              iconOnly: true,
              id: "insertorderedlist",
              name: "有序列表"
            },
            {
              iconOnly: true,
              id: "insertunorderedlist",
              name: "无序列表"
            },
            {
              iconOnly: true,
              id: "rowspacingtop",
              name: "段前距"
            },
            {
              iconOnly: true,
              id: "rowspacingbottom",
              name: "段后距"
            },
            {
              iconOnly: true,
              id: "lineheight",
              name: "行间距"
            }
          ]
          /* [{
            id: 'structureTree',
            name: '文档结构树'
          }], */
        ]
      },
      {
        id: "insert",
        name: "插入",
        widgets: [
          [
            {
              id: "spechars",
              name: "特殊字符"
            }
          ],
          [
            {
              id: "link",
              name: "添加链接"
            },
            {
              id: "unlink",
              name: "取消链接"
            }
          ],
          [
            {
              id: "insertimage",
              name: "图片"
            },
            {
              id: "insertvideo",
              name: "视频"
            },
            {
              id: "barcode",
              name: "条形码"
            },
            {
              id: "qrcode",
              name: "二维码"
            }
          ],
          /* [{
            id: 'insertcode',
            name: '代码'
          }], */
          [
            {
              id: "medical",
              name: "医学表达式"
            }
          ]
        ]
      },
      {
        id: "table",
        name: "表格",
        widgets: [
          [
            {
              id: "inserttable",
              name: "插入表格"
            },
            {
              id: "deletetable",
              name: "删除表格"
            }
          ],
          [
            {
              id: "insertrow",
              iconOnly: true,
              name: "插入行"
            },
            {
              id: "insertcol",
              iconOnly: true,
              name: "插入列"
            },
            {
              id: "breakLine"
            },
            {
              id: "deleterow",
              iconOnly: true,
              name: "删除行"
            },
            {
              id: "deletecol",
              iconOnly: true,
              name: "删除列"
            }
          ],
          [
            {
              iconOnly: true,
              id: "mergecells",
              name: "合并单元格"
            },
            {
              iconOnly: true,
              id: "mergedown",
              name: "向下合并单元格"
            },
            {
              iconOnly: true,
              id: "mergeright",
              name: "向右合并单元格"
            },
            {
              id: "breakLine"
            },
            {
              iconOnly: true,
              id: "splittocells",
              name: "拆分单元格"
            },
            {
              iconOnly: true,
              id: "splittocols",
              name: "单元格拆分成列"
            },
            {
              iconOnly: true,
              id: "splittorows",
              name: "单元格拆分成行"
            }
          ],
          [
            {
              iconOnly: true,
              id: "tablelowerframeline",
              name: "下框线"
            },
            {
              iconOnly: true,
              id: "tableupperframeline",
              name: "上框线"
            },
            {
              iconOnly: true,
              id: "tableleftframeline",
              name: "左框线"
            },
            {
              id: "breakLine"
            },
            {
              iconOnly: true,
              id: "tablerightframeline",
              name: "右框线"
            },
            {
              iconOnly: true,
              id: "tablenoborder",
              name: "无框线"
            },
            {
              iconOnly: true,
              id: "tableallborder",
              name: "全框线"
            }
          ],
          [
            {
              // iconOnly: true,
              id: "tb-hide",
              name: "隐藏表格线"
            },
            {
              // iconOnly: true,
              id: "tb-solid",
              name: "表格线设为实线"
            },
            {
              // iconOnly: true,
              id: "tb-dotted",
              name: "表格线设为虚线"
            }
          ]
        ]
      },
      {
        id: "structure",
        name: "结构化",
        widgets: [
          [
            /* {
              id: 'macro',
              name: '基本元素'
            },  */ {
              id: "text",
              name: "文本元素"
            },
            {
              id: "tagelement",
              name: "标签元素"
            },
            {
              id: "numberelement",
              name: "数字元素"
            },
            {
              id: "select",
              name: "单选下拉元素"
            },
            {
              id: "selectmulti",
              name: "多选下拉元素"
            },
            {
              id: "datedomain",
              name: "日期元素"
            },
            {
              id: "haveornot",
              name: "有无元素"
            }
          ],
          [
            {
              id: "radio",
              name: "单选元素"
            },
            {
              id: "checkbox",
              name: "复选元素"
            }
          ],
          [
            {
              id: "paragraphele",
              name: "段落元素"
            },
            {
              id: "parasetter",
              name: "段落设置"
            }
          ],
          [
            {
              id: "combine",
              name: "组合元素"
            }
          ],
          [
            {
              id: "diagnose",
              name: "诊断元素"
            },
            {
              id: "prescription",
              name: "处方元素"
            }
          ],
          [
            {
              id: "signature",
              name: "签名元素"
            }
          ]
        ]
      },
      {
        id: "viewcheck",
        name: "视图审阅",
        widgets: [
          [
            {
              id: "source",
              name: "源码模式"
            },
            {
              id: "mark",
              name: "留痕模式"
            },
            {
              id: "design",
              name: "设计模式"
            },
            {
              id: "edit",
              name: "书写模式"
            },
            {
              id: "pure",
              name: "清洁浏览"
            },
            {
              id: "dirty",
              name: "非清洁浏览"
            },
            {
              id: "secret",
              name: "保密浏览"
            }
          ],
          [
            {
              id: "note",
              name: "批注"
            }
          ]
        ]
      },
      {
        id: "tool",
        name: "工具",
        widgets: [
          [
            {
              id: "pagemargin",
              name: "页边距"
            } /* ,
            {
              id: 'paperdirect',
              name: '纸张方向'
            } */,
            {
              id: "papersize",
              name: "纸张大小"
            },
            {
              id: "paperscale",
              name: "页面缩放"
            },
            {
              id: "watermark",
              name: "水印"
            }
          ],
          [
            {
              id: "pageheader",
              name: "页眉"
            },
            {
              id: "pagefooter",
              name: "页脚"
            } /* ,
            {
              id: 'pages',
              name: '页码'
            } */
          ],
          [
            {
              id: "continueprint",
              name: "续打"
            },
            {
              id: "print",
              name: "打印文档"
            }
          ],
          [
            {
              id: "printpreview",
              name: "打印预览"
            }
          ],
          [
            {
              id: "searchreplace",
              name: "查找替换"
            }
          ],
          [
            {
              id: "numcount",
              name: "字数统计"
            }
          ],
          [
            {
              id: "synchronize",
              name: "同步信息"
            },
            {
              id: "refreshmacros",
              name: "刷新基本信息"
            } /*,{
            id: 'refreshdiagnose',
            name: '刷新诊断'
          },{
            id: 'refreshprescription',
            name: '刷新处方'
          }*/
          ],
          [
            {
              id: "hidemarktag",
              name: "清除留痕"
            }
          ],
          [
            {
              id: "editlock",
              name: "文书锁定"
            }
          ],
          [
            {
              id: "medicalformula",
              name: "医学公式"
            }
          ]
        ]
      }
    ],
    insertorderedlist: {
      decimal: "", //'1,2,3...'
      "lower-alpha": "", // 'a,b,c...'
      "lower-roman": "", //'i,ii,iii...'
      "upper-alpha": "", //'A,B,C'
      "upper-roman": "" //'I,II,III...'
    },
    insertunorderedlist: {
      circle: "", // '○ 小圆圈'
      disc: "", // '● 小圆点'
      square: "" //'■ 小方块'
    }
  };

  function getUEBasePath(docUrl, confUrl) {
    return getBasePath(
      docUrl || self.document.URL || self.location.href,
      confUrl || getConfigFilePath()
    );
  }

  function getConfigFilePath() {
    var configPath = document.getElementsByTagName("script");

    return configPath[configPath.length - 1].src;
  }

  function getBasePath(docUrl, confUrl) {
    var basePath = confUrl;

    if (/^(\/|\\\\)/.test(confUrl)) {
      basePath =
        /^.+?\w(\/|\\\\)/.exec(docUrl)[0] + confUrl.replace(/^(\/|\\\\)/, "");
    } else if (!/^[a-z]+:/i.test(confUrl)) {
      docUrl = docUrl
        .split("#")[0]
        .split("?")[0]
        .replace(/[^\\\/]+$/, "");

      basePath = docUrl + "" + confUrl;
    }

    return optimizationPath(basePath);
  }

  function optimizationPath(path) {
    var protocol = /^[a-z]+:\/\//.exec(path)[0],
      tmp = null,
      res = [];

    path = path
      .replace(protocol, "")
      .split("?")[0]
      .split("#")[0];

    path = path.replace(/\\/g, "/").split(/\//);

    path[path.length - 1] = "";

    while (path.length) {
      if ((tmp = path.shift()) === "..") {
        res.pop();
      } else if (tmp !== ".") {
        res.push(tmp);
      }
    }

    return protocol + res.join("/");
  }

  window.AX = {
    getUEBasePath: getUEBasePath
  };
  window.addEventListener('click', function (e) {
    // console.log('e====', e)
  })
})();

/*!
 * axEditor
 * version: ueditor
 * build: Wed Aug 10 2016 11:06:16 GMT+0800 (CST)
 */
/* eslint-disable */

(function () {

  // editor.js
  AXEDITOR_CONFIG = window.AXEDITOR_CONFIG || {};

  var baidu = window.baidu || {};

  window.baidu = baidu;

  window.AX = baidu.editor = window.AX || {};

  AX.plugins = {};

  // makeHtml
  AX.mh = {};
  // 表达式预览的HTML结构
  AX.medicalPreview = {};

  AX.commands = {};

  AX.instants = {};

  AX.patientInfo = {};

  AX.I18N = {};

  AX._customizeUI = {};

  AX.version = "1.0.0";

  AX.pageControler = null;
  AX._pageMargin = null;
  AX._pageSize = null;

  var dom = AX.dom = {};

  AX.$ = window.$;

  // core/browser.js
  /**
   * 浏览器判断模块
   * @file
   * @module AX.browser
   * @since 1.2.6.1
   */

  /**
   * 提供浏览器检测的模块
   * @unfile
   * @module AX.browser
   */
  var browser = AX.browser = function () {
    var agent = navigator.userAgent.toLowerCase(),
      opera = window.opera,
      browser = {
        /**
         * @property {boolean} ie 检测当前浏览器是否为IE
         * @example
         * ```javascript
         * if ( AX.browser.ie ) {
         *     console.log( '当前浏览器是IE' );
         * }
         * ```
         */
        ie: /(msie\s|trident.*rv:)([\w.]+)/.test(agent),

        /**
         * @property {boolean} opera 检测当前浏览器是否为Opera
         * @example
         * ```javascript
         * if ( AX.browser.opera ) {
         *     console.log( '当前浏览器是Opera' );
         * }
         * ```
         */
        opera: !!opera && opera.version,

        /**
         * @property {boolean} webkit 检测当前浏览器是否是webkit内核的浏览器
         * @example
         * ```javascript
         * if ( AX.browser.webkit ) {
         *     console.log( '当前浏览器是webkit内核浏览器' );
         * }
         * ```
         */
        webkit: agent.indexOf(' applewebkit/') > -1,

        /**
         * @property {boolean} mac 检测当前浏览器是否是运行在mac平台下
         * @example
         * ```javascript
         * if ( AX.browser.mac ) {
         *     console.log( '当前浏览器运行在mac平台下' );
         * }
         * ```
         */
        mac: agent.indexOf('macintosh') > -1,

        /**
         * @property {boolean} quirks 检测当前浏览器是否处于“怪异模式”下
         * @example
         * ```javascript
         * if ( AX.browser.quirks ) {
         *     console.log( '当前浏览器运行处于“怪异模式”' );
         * }
         * ```
         */
        quirks: document.compatMode == 'BackCompat'
      };

    /**
     * @property {boolean} gecko 检测当前浏览器内核是否是gecko内核
     * @example
     * ```javascript
     * if ( AX.browser.gecko ) {
     *     console.log( '当前浏览器内核是gecko内核' );
     * }
     * ```
     */
    browser.gecko = navigator.product == 'Gecko' && !browser.webkit && !browser.opera && !browser.ie;

    var version = 0;

    // Internet Explorer 6.0+
    if (browser.ie) {

      var v1 = agent.match(/(?:msie\s([\w.]+))/);
      var v2 = agent.match(/(?:trident.*rv:([\w.]+))/);
      if (v1 && v2 && v1[1] && v2[1]) {
        version = Math.max(v1[1] * 1, v2[1] * 1);
      } else if (v1 && v1[1]) {
        version = v1[1] * 1;
      } else if (v2 && v2[1]) {
        version = v2[1] * 1;
      } else {
        version = 0;
      }

      browser.ie11Compat = document.documentMode == 11;
      /**
       * @property { boolean } ie9Compat 检测浏览器模式是否为 IE9 兼容模式
       * @warning 如果浏览器不是IE， 则该值为undefined
       * @example
       * ```javascript
       * if ( AX.browser.ie9Compat ) {
       *     console.log( '当前浏览器运行在IE9兼容模式下' );
       * }
       * ```
       */
      browser.ie9Compat = document.documentMode == 9;

      /**
       * @property { boolean } ie8 检测浏览器是否是IE8浏览器
       * @warning 如果浏览器不是IE， 则该值为undefined
       * @example
       * ```javascript
       * if ( AX.browser.ie8 ) {
       *     console.log( '当前浏览器是IE8浏览器' );
       * }
       * ```
       */
      browser.ie8 = !!document.documentMode;

      /**
       * @property { boolean } ie8Compat 检测浏览器模式是否为 IE8 兼容模式
       * @warning 如果浏览器不是IE， 则该值为undefined
       * @example
       * ```javascript
       * if ( AX.browser.ie8Compat ) {
       *     console.log( '当前浏览器运行在IE8兼容模式下' );
       * }
       * ```
       */
      browser.ie8Compat = document.documentMode == 8;

      /**
       * @property { boolean } ie7Compat 检测浏览器模式是否为 IE7 兼容模式
       * @warning 如果浏览器不是IE， 则该值为undefined
       * @example
       * ```javascript
       * if ( AX.browser.ie7Compat ) {
       *     console.log( '当前浏览器运行在IE7兼容模式下' );
       * }
       * ```
       */
      browser.ie7Compat = version == 7 && !document.documentMode
        || document.documentMode == 7;

      /**
       * @property { boolean } ie6Compat 检测浏览器模式是否为 IE6 模式 或者怪异模式
       * @warning 如果浏览器不是IE， 则该值为undefined
       * @example
       * ```javascript
       * if ( AX.browser.ie6Compat ) {
       *     console.log( '当前浏览器运行在IE6模式或者怪异模式下' );
       * }
       * ```
       */
      browser.ie6Compat = version < 7 || browser.quirks;

      browser.ie9above = version > 8;

      browser.ie9below = version < 9;

      browser.ie11above = version > 10;

      browser.ie11below = version < 11;

    }

    // Gecko.
    if (browser.gecko) {
      var geckoRelease = agent.match(/rv:([\d\.]+)/);
      if (geckoRelease) {
        geckoRelease = geckoRelease[1].split('.');
        version = geckoRelease[0] * 10000 + (geckoRelease[1] || 0) * 100 + (geckoRelease[2] || 0) * 1;
      }
    }

    /**
     * @property { Number } chrome 检测当前浏览器是否为Chrome, 如果是，则返回Chrome的大版本号
     * @warning 如果浏览器不是chrome， 则该值为undefined
     * @example
     * ```javascript
     * if ( AX.browser.chrome ) {
     *     console.log( '当前浏览器是Chrome' );
     * }
     * ```
     */
    if (/chrome\/(\d+\.\d)/i.test(agent)) {
      browser.chrome = +RegExp['\x241'];
    }

    /**
     * @property { Number } safari 检测当前浏览器是否为Safari, 如果是，则返回Safari的大版本号
     * @warning 如果浏览器不是safari， 则该值为undefined
     * @example
     * ```javascript
     * if ( AX.browser.safari ) {
     *     console.log( '当前浏览器是Safari' );
     * }
     * ```
     */
    if (/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(agent) && !/chrome/i.test(agent)) {
      browser.safari = +(RegExp['\x241'] || RegExp['\x242']);
    }


    // Opera 9.50+
    if (browser.opera) {
      version = parseFloat(opera.version());
    }

    // WebKit 522+ (Safari 3+)
    if (browser.webkit) {
      version = parseFloat(agent.match(/ applewebkit\/(\d+)/)[1]);
    }

    /**
     * @property { Number } version 检测当前浏览器版本号
     * @remind
     * <ul>
     *     <li>IE系列返回值为5,6,7,8,9,10等</li>
     *     <li>gecko系列会返回10900，158900等</li>
     *     <li>webkit系列会返回其build号 (如 522等)</li>
     * </ul>
     * @example
     * ```javascript
     * console.log( '当前浏览器版本号是： ' + AX.browser.version );
     * ```
     */
    browser.version = version;

    /**
     * @property { boolean } isCompatible 检测当前浏览器是否能够与UEditor良好兼容
     * @example
     * ```javascript
     * if ( AX.browser.isCompatible ) {
     *     console.log( '浏览器与UEditor能够良好兼容' );
     * }
     * ```
     */
    browser.isCompatible =
      !browser.mobile && (
        browser.ie && version >= 6 ||
        browser.gecko && version >= 10801 ||
        browser.opera && version >= 9.5 ||
        browser.air && version >= 1 ||
        browser.webkit && version >= 522 ||
        false);
    return browser;
  }();
  //快捷方式
  var ie = browser.ie,
    webkit = browser.webkit,
    gecko = browser.gecko,
    opera = browser.opera;

  // core/utils.js
  /**
   * 工具函数包
   * @file
   * @module AX.utils
   * @since 1.2.6.1
   */

  /**
   * UEditor封装使用的静态工具函数
   * @module AX.utils
   * @unfile
   */

  var utils = AX.utils = {

    /**
     * 用给定的迭代器遍历对象
     * @method each
     * @param { Object } obj 需要遍历的对象
     * @param { Function } iterator 迭代器， 该方法接受两个参数， 第一个参数是当前所处理的value， 第二个参数是当前遍历对象的key
     * @example
     * ```javascript
     * var demoObj = {
     *     key1: 1,
     *     key2: 2
     * };
     *
     * //output: key1: 1, key2: 2
     * AX.utils.each( demoObj, funciton ( value, key ) {
     *
     *     console.log( key + ":" + value );
     *
     * } );
     * ```
     */

    /**
     * 用给定的迭代器遍历数组或类数组对象
     * @method each
     * @param { Array } array 需要遍历的数组或者类数组
     * @param { Function } iterator 迭代器， 该方法接受两个参数， 第一个参数是当前所处理的value， 第二个参数是当前遍历对象的key
     * @example
     * ```javascript
     * var divs = document.getElmentByTagNames( "div" );
     *
     * //output: 0: DIV, 1: DIV ...
     * AX.utils.each( divs, funciton ( value, key ) {
     *
     *     console.log( key + ":" + value.tagName );
     *
     * } );
     * ```
     */
    each: function (obj, iterator, context) {
      if (obj == null) {
        return;
      }
      if (obj.length === +obj.length) {
        for (var i = 0, l = obj.length; i < l; i++) {
          if (iterator.call(context, obj[i], i, obj) === false) {
            return false;
          }
        }
      } else {
        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (iterator.call(context, obj[key], key, obj) === false) {
              return false;
            }
          }
        }
      }
    },

    /**
     * 以给定对象作为原型创建一个新对象
     * @method makeInstance
     * @param { Object } protoObject 该对象将作为新创建对象的原型
     * @return { Object } 新的对象， 该对象的原型是给定的protoObject对象
     * @example
     * ```javascript
     *
     * var protoObject = { sayHello: function () { console.log('Hello UEditor!'); } };
     *
     * var newObject = AX.utils.makeInstance( protoObject );
     * //output: Hello UEditor!
     * newObject.sayHello();
     * ```
     */
    makeInstance: function (obj) {
      var noop = new Function();
      noop.prototype = obj;
      obj = new noop;
      noop.prototype = null;
      return obj;
    },

    /**
     * 将source对象中的属性扩展到target对象上
     * @method extend
     * @remind 该方法将强制把source对象上的属性复制到target对象上
     * @see AX.utils.extend(Object,Object,Boolean)
     * @param { Object } target 目标对象， 新的属性将附加到该对象上
     * @param { Object } source 源对象， 该对象的属性会被附加到target对象上
     * @return { Object } 返回target对象
     * @example
     * ```javascript
     *
     * var target = { name: 'target', sex: 1 },
     *      source = { name: 'source', age: 17 };
     *
     * AX.utils.extend( target, source );
     *
     * //output: { name: 'source', sex: 1, age: 17 }
     * console.log( target );
     *
     * ```
     */

    /**
     * 将source对象中的属性扩展到target对象上， 根据指定的isKeepTarget值决定是否保留目标对象中与
     * 源对象属性名相同的属性值。
     * @method extend
     * @param { Object } target 目标对象， 新的属性将附加到该对象上
     * @param { Object } source 源对象， 该对象的属性会被附加到target对象上
     * @param { Boolean } isKeepTarget 是否保留目标对象中与源对象中属性名相同的属性
     * @return { Object } 返回target对象
     * @example
     * ```javascript
     *
     * var target = { name: 'target', sex: 1 },
     *      source = { name: 'source', age: 17 };
     *
     * AX.utils.extend( target, source, true );
     *
     * //output: { name: 'target', sex: 1, age: 17 }
     * console.log( target );
     *
     * ```
     */
    extend: function (t, s, b) {
      if (s) {
        for (var k in s) {
          if (!b || !t.hasOwnProperty(k)) {
            t[k] = s[k];
          }
        }
      }
      return t;
    },

    /**
     * 将给定的多个对象的属性复制到目标对象target上
     * @method extend2
     * @remind 该方法将强制把源对象上的属性复制到target对象上
     * @remind 该方法支持两个及以上的参数， 从第二个参数开始， 其属性都会被复制到第一个参数上。 如果遇到同名的属性，
     *          将会覆盖掉之前的值。
     * @param { Object } target 目标对象， 新的属性将附加到该对象上
     * @param { Object... } source 源对象， 支持多个对象， 该对象的属性会被附加到target对象上
     * @return { Object } 返回target对象
     * @example
     * ```javascript
     *
     * var target = {},
     *     source1 = { name: 'source', age: 17 },
     *     source2 = { title: 'dev' };
     *
     * AX.utils.extend2( target, source1, source2 );
     *
     * //output: { name: 'source', age: 17, title: 'dev' }
     * console.log( target );
     *
     * ```
     */
    extend2: function (t) {
      var a = arguments;
      for (var i = 1; i < a.length; i++) {
        var x = a[i];
        for (var k in x) {
          if (!t.hasOwnProperty(k)) {
            t[k] = x[k];
          }
        }
      }
      return t;
    },

    /**
     * 模拟继承机制， 使得subClass继承自superClass
     * @method inherits
     * @param { Object } subClass 子类对象
     * @param { Object } superClass 超类对象
     * @warning 该方法只能让subClass继承超类的原型， subClass对象自身的属性和方法不会被继承
     * @return { Object } 继承superClass后的子类对象
     * @example
     * ```javascript
     * function SuperClass(){
     *     this.name = "小李";
     * }
     *
     * SuperClass.prototype = {
     *     hello:function(str){
     *         console.log(this.name + str);
     *     }
     * }
     *
     * function SubClass(){
     *     this.name = "小张";
     * }
     *
     * AX.utils.inherits(SubClass,SuperClass);
     *
     * var sub = new SubClass();
     * //output: '小张早上好!
     * sub.hello("早上好!");
     * ```
     */
    inherits: function (subClass, superClass) {
      var oldP = subClass.prototype,
        newP = utils.makeInstance(superClass.prototype);
      utils.extend(newP, oldP, true);
      subClass.prototype = newP;
      return newP.constructor = subClass;
    },

    /**
     * 用指定的context对象作为函数fn的上下文
     * @method bind
     * @param { Function } fn 需要绑定上下文的函数对象
     * @param { Object } content 函数fn新的上下文对象
     * @return { Function } 一个新的函数， 该函数作为原始函数fn的代理， 将完成fn的上下文调换工作。
     * @example
     * ```javascript
     *
     * var name = 'window',
     *     newTest = null;
     *
     * function test () {
     *     console.log( this.name );
     * }
     *
     * newTest = AX.utils.bind( test, { name: 'object' } );
     *
     * //output: object
     * newTest();
     *
     * //output: window
     * test();
     *
     * ```
     */
    bind: function (fn, context) {
      return function () {
        return fn.apply(context, arguments);
      };
    },

    /**
     * 创建延迟指定时间后执行的函数fn
     * @method defer
     * @param { Function } fn 需要延迟执行的函数对象
     * @param { int } delay 延迟的时间， 单位是毫秒
     * @warning 该方法的时间控制是不精确的，仅仅只能保证函数的执行是在给定的时间之后，
     *           而不能保证刚好到达延迟时间时执行。
     * @return { Function } 目标函数fn的代理函数， 只有执行该函数才能起到延时效果
     * @example
     * ```javascript
     * var start = 0;
     *
     * function test(){
     *     console.log( new Date() - start );
     * }
     *
     * var testDefer = AX.utils.defer( test, 1000 );
     * //
     * start = new Date();
     * //output: (大约在1000毫秒之后输出) 1000
     * testDefer();
     * ```
     */

    /**
     * 创建延迟指定时间后执行的函数fn, 如果在延迟时间内再次执行该方法， 将会根据指定的exclusion的值，
     * 决定是否取消前一次函数的执行， 如果exclusion的值为true， 则取消执行，反之，将继续执行前一个方法。
     * @method defer
     * @param { Function } fn 需要延迟执行的函数对象
     * @param { int } delay 延迟的时间， 单位是毫秒
     * @param { Boolean } exclusion 如果在延迟时间内再次执行该函数，该值将决定是否取消执行前一次函数的执行，
     *                     值为true表示取消执行， 反之则将在执行前一次函数之后才执行本次函数调用。
     * @warning 该方法的时间控制是不精确的，仅仅只能保证函数的执行是在给定的时间之后，
     *           而不能保证刚好到达延迟时间时执行。
     * @return { Function } 目标函数fn的代理函数， 只有执行该函数才能起到延时效果
     * @example
     * ```javascript
     *
     * function test(){
     *     console.log(1);
     * }
     *
     * var testDefer = AX.utils.defer( test, 1000, true );
     *
     * //output: (两次调用仅有一次输出) 1
     * testDefer();
     * testDefer();
     * ```
     */
    defer: function (fn, delay, exclusion) {
      var timerID;
      return function () {
        if (exclusion) {
          clearTimeout(timerID);
        }
        timerID = setTimeout(fn, delay);
      };
    },

    /**
     * 获取元素item在数组array中首次出现的位置, 如果未找到item， 则返回-1
     * @method indexOf
     * @remind 该方法的匹配过程使用的是恒等“===”
     * @param { Array } array 需要查找的数组对象
     * @param { * } item 需要在目标数组中查找的值
     * @return { int } 返回item在目标数组array中首次出现的位置， 如果在数组中未找到item， 则返回-1
     * @example
     * ```javascript
     * var item = 1,
     *     arr = [ 3, 4, 6, 8, 1, 1, 2 ];
     *
     * //output: 4
     * console.log( AX.utils.indexOf( arr, item ) );
     * ```
     */

    /**
     * 获取元素item数组array中首次出现的位置, 如果未找到item， 则返回-1。通过start的值可以指定搜索的起始位置。
     * @method indexOf
     * @remind 该方法的匹配过程使用的是恒等“===”
     * @param { Array } array 需要查找的数组对象
     * @param { * } item 需要在目标数组中查找的值
     * @param { int } start 搜索的起始位置
     * @return { int } 返回item在目标数组array中的start位置之后首次出现的位置， 如果在数组中未找到item， 则返回-1
     * @example
     * ```javascript
     * var item = 1,
     *     arr = [ 3, 4, 6, 8, 1, 2, 8, 3, 2, 1, 1, 4 ];
     *
     * //output: 9
     * console.log( AX.utils.indexOf( arr, item, 5 ) );
     * ```
     */
    indexOf: function (array, item, start) {
      var index = -1;
      start = this.isNumber(start) ? start : 0;
      this.each(array, function (v, i) {
        if (i >= start && v === item) {
          index = i;
          return false;
        }
      });
      return index;
    },

    /**
     * 移除数组array中所有的元素item
     * @method removeItem
     * @param { Array } array 要移除元素的目标数组
     * @param { * } item 将要被移除的元素
     * @remind 该方法的匹配过程使用的是恒等“===”
     * @example
     * ```javascript
     * var arr = [ 4, 5, 7, 1, 3, 4, 6 ];
     *
     * AX.utils.removeItem( arr, 4 );
     * //output: [ 5, 7, 1, 3, 6 ]
     * console.log( arr );
     *
     * ```
     */
    removeItem: function (array, item) {
      for (var i = 0, l = array.length; i < l; i++) {
        if (array[i] === item) {
          array.splice(i, 1);
          i--;
        }
      }
    },

    /**
     * 删除字符串str的首尾空格
     * @method trim
     * @param { String } str 需要删除首尾空格的字符串
     * @return { String } 删除了首尾的空格后的字符串
     * @example
     * ```javascript
     *
     * var str = " UEdtior ";
     *
     * //output: 9
     * console.log( str.length );
     *
     * //output: 7
     * console.log( AX.utils.trim( " UEdtior " ).length );
     *
     * //output: 9
     * console.log( str.length );
     *
     *  ```
     */
    trim: function (str) {
      return str.replace(/(^[ \t\n\r]+)|([ \t\n\r]+$)/g, '');
    },

    /**
     * 将字符串str以','分隔成数组后，将该数组转换成哈希对象， 其生成的hash对象的key为数组中的元素， value为1
     * @method listToMap
     * @warning 该方法在生成的hash对象中，会为每一个key同时生成一个另一个全大写的key。
     * @param { String } str 该字符串将被以','分割为数组， 然后进行转化
     * @return { Object } 转化之后的hash对象
     * @example
     * ```javascript
     *
     * //output: Object {UEdtior: 1, UEDTIOR: 1, Hello: 1, HELLO: 1}
     * console.log( AX.utils.listToMap( 'UEdtior,Hello' ) );
     *
     * ```
     */

    /**
     * 将字符串数组转换成哈希对象， 其生成的hash对象的key为数组中的元素， value为1
     * @method listToMap
     * @warning 该方法在生成的hash对象中，会为每一个key同时生成一个另一个全大写的key。
     * @param { Array } arr 字符串数组
     * @return { Object } 转化之后的hash对象
     * @example
     * ```javascript
     *
     * //output: Object {UEdtior: 1, UEDTIOR: 1, Hello: 1, HELLO: 1}
     * console.log( AX.utils.listToMap( [ 'UEdtior', 'Hello' ] ) );
     *
     * ```
     */
    listToMap: function (list) {
      if (!list) {
        return {};
      }
      list = utils.isArray(list) ? list : list.split(',');
      for (var i = 0, ci, obj = {}; ci = list[i++];) {
        obj[ci.toUpperCase()] = obj[ci] = 1;
      }
      return obj;
    },

    /**
     * 将str中的html符号转义,将转义“'，&，<，"，>”五个字符
     * @method unhtml
     * @param { String } str 需要转义的字符串
     * @return { String } 转义后的字符串
     * @example
     * ```javascript
     * var html = '<body>&</body>';
     *
     * //output: &lt;body&gt;&amp;&lt;/body&gt;
     * console.log( AX.utils.unhtml( html ) );
     *
     * ```
     */
    unhtml: function (str, reg) { // 遇到超长文书会卡顿
      // return str;
      return str ? str.replace(reg || /[&<">'](?:(amp|lt|quot|gt|#39|nbsp|#\d+);)?/g, function (a, b) {
        if (b) {
          return a;
        }
        return {
          '<': '&lt;',
          '&': '&amp;',
          '"': '&quot;',
          '>': '&gt;',
          "'": '&#39;'
        }[a]


      }) : '';
    },
    /**
     * 将url中的html字符转义， 仅转义  ', ", <, > 四个字符
     * @param  { String } str 需要转义的字符串
     * @param  { RegExp } reg 自定义的正则
     * @return { String }     转义后的字符串
     */
    unhtmlForUrl: function (str, reg) {
      return str ? str.replace(reg || /[<">']/g, function (a) {
        return {
          '<': '&lt;',
          '&': '&amp;',
          '"': '&quot;',
          '>': '&gt;',
          "'": '&#39;'
        }[a]

      }) : '';
    },

    /**
     * 将str中的转义字符还原成html字符
     * @see AX.utils.unhtml(String);
     * @method html
     * @param { String } str 需要逆转义的字符串
     * @return { String } 逆转义后的字符串
     * @example
     * ```javascript
     *
     * var str = '&lt;body&gt;&amp;&lt;/body&gt;';
     *
     * //output: <body>&</body>
     * console.log( AX.utils.html( str ) );
     *
     * ```
     */
    html: function (str) {
      return str ? str.replace(/&((g|l|quo)t|amp|#39|nbsp);/g, function (m) {
        return {
          '&lt;': '<',
          '&amp;': '&',
          '&quot;': '"',
          '&gt;': '>',
          '&#39;': "'",
          '&nbsp;': ' '
        }[m]
      }) : '';
    },

    /**
     * 将css样式转换为驼峰的形式
     * @method cssStyleToDomStyle
     * @param { String } cssName 需要转换的css样式名
     * @return { String } 转换成驼峰形式后的css样式名
     * @example
     * ```javascript
     *
     * var str = 'border-top';
     *
     * //output: borderTop
     * console.log( AX.utils.cssStyleToDomStyle( str ) );
     *
     * ```
     */
    cssStyleToDomStyle: function () {
      var test = document.createElement('div').style,
        cache = {
          'float': test.cssFloat != undefined ? 'cssFloat' : test.styleFloat != undefined ? 'styleFloat' : 'float'
        };

      return function (cssName) {
        return cache[cssName] || (cache[cssName] = cssName.toLowerCase().replace(/-./g, function (match) {
          return match.charAt(1).toUpperCase();
        }));
      };
    }(),

    /**
     * 动态加载文件到doc中
     * @method loadFile
     * @param { DomDocument } document 需要加载资源文件的文档对象
     * @param { Object } options 加载资源文件的属性集合， 取值请参考代码示例
     * @example
     * ```javascript
     *
     * AX.utils.loadFile( document, {
     *     src:"test.js",
     *     tag:"script",
     *     type:"text/javascript",
     *     defer:"defer"
     * } );
     *
     * ```
     */

    /**
     * 动态加载文件到doc中，加载成功后执行的回调函数fn
     * @method loadFile
     * @param { DomDocument } document 需要加载资源文件的文档对象
     * @param { Object } options 加载资源文件的属性集合， 该集合支持的值是script标签和style标签支持的所有属性。
     * @param { Function } fn 资源文件加载成功之后执行的回调
     * @warning 对于在同一个文档中多次加载同一URL的文件， 该方法会在第一次加载之后缓存该请求，
     *           在此之后的所有同一URL的请求， 将会直接触发回调。
     * @example
     * ```javascript
     *
     * AX.utils.loadFile( document, {
     *     src:"test.js",
     *     tag:"script",
     *     type:"text/javascript",
     *     defer:"defer"
     * }, function () {
     *     console.log('加载成功');
     * } );
     *
     * ```
     */
    loadFile: function () {
      var tmpList = [];

      function getItem(doc, obj) {
        try {
          for (var i = 0, ci; ci = tmpList[i++];) {
            if (ci.doc === doc && ci.url == (obj.src || obj.href)) {
              return ci;
            }
          }
        } catch (e) {
          return null;
        }

      }

      return function (doc, obj, fn) {
        var item = getItem(doc, obj);
        if (item) {
          if (item.ready) {
            fn && fn();
          } else {
            item.funs.push(fn)
          }
          return;
        }
        tmpList.push({
          doc: doc,
          url: obj.src || obj.href,
          funs: [fn]
        });
        if (!doc.body) {
          var html = [];
          for (var p in obj) {
            if (p == 'tag') {
              continue;
            }
            html.push(p + '="' + obj[p] + '"')
          }
          doc.write('<' + obj.tag + ' ' + html.join(' ') + ' ></' + obj.tag + '>');
          return;
        }
        if (obj.id && doc.getElementById(obj.id)) {
          return;
        }
        var element = doc.createElement(obj.tag);
        delete obj.tag;
        for (var p in obj) {
          element.setAttribute(p, obj[p]);
        }
        element.onload = element.onreadystatechange = function () {
          if (!this.readyState || /loaded|complete/.test(this.readyState)) {
            item = getItem(doc, obj);
            if (item.funs.length > 0) {
              item.ready = 1;
              for (var fi; fi = item.funs.pop();) {
                fi();
              }
            }
            element.onload = element.onreadystatechange = null;
          }
        };
        element.onerror = function () {
          throw Error('The load ' + (obj.href || obj.src) + ' fails,check the url settings of file ueditor.config.js ')
        };
        doc.getElementsByTagName("head")[0].appendChild(element);
      }
    }(),

    /**
     * 判断obj对象是否为空
     * @method isEmptyObject
     * @param { * } obj 需要判断的对象
     * @remind 如果判断的对象是NULL， 将直接返回true， 如果是数组且为空， 返回true， 如果是字符串， 且字符串为空，
     *          返回true， 如果是普通对象， 且该对象没有任何实例属性， 返回true
     * @return { Boolean } 对象是否为空
     * @example
     * ```javascript
     *
     * //output: true
     * console.log( AX.utils.isEmptyObject( {} ) );
     *
     * //output: true
     * console.log( AX.utils.isEmptyObject( [] ) );
     *
     * //output: true
     * console.log( AX.utils.isEmptyObject( "" ) );
     *
     * //output: false
     * console.log( AX.utils.isEmptyObject( { key: 1 } ) );
     *
     * //output: false
     * console.log( AX.utils.isEmptyObject( [1] ) );
     *
     * //output: false
     * console.log( AX.utils.isEmptyObject( "1" ) );
     *
     * ```
     */
    isEmptyObject: function (obj) {
      if (obj == null) {
        return true;
      }
      if (this.isArray(obj) || this.isString(obj)) {
        return obj.length === 0;
      }
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          return false;
        }
      }
      return true;
    },

    /**
     * 把rgb格式的颜色值转换成16进制格式
     * @method fixColor
     * @param { String } rgb格式的颜色值
     * @param { String }
     * @example
     * rgb(255,255,255)  => "#ffffff"
     */
    fixColor: function (name, value) {
      if (/color/i.test(name) && /rgba?/.test(value)) {
        var array = value.split(",");
        if (array.length > 3) {
          return "";
        }
        value = "#";
        for (var i = 0, color; color = array[i++];) {
          color = parseInt(color.replace(/[^\d]/gi, ''), 10).toString(16);
          value += color.length == 1 ? "0" + color : color;
        }
        value = value.toUpperCase();
      }
      return value;
    },
    /**
     * 只针对border,padding,margin做了处理，因为性能问题
     * @public
     * @function
     * @param {String}    val style字符串
     */
    optCss: function (val) {
      var padding, margin, border;
      val = val.replace(/(padding|margin|border)\-([^:]+):([^;]+);?/gi, function (str, key, name, val) {
        if (val.split(' ').length == 1) {
          switch (key) {
            case 'padding':
              !padding && (padding = {});
              padding[name] = val;
              return '';
            case 'margin':
              !margin && (margin = {});
              margin[name] = val;
              return '';
            case 'border':
              return val == 'initial' ? '' : str;
          }
        }
        return str;
      });

      function opt(obj, name) {
        if (!obj) {
          return '';
        }
        var t = obj.top, b = obj.bottom, l = obj.left, r = obj.right, val = '';
        if (!t || !l || !b || !r) {
          for (var p in obj) {
            val += ';' + name + '-' + p + ':' + obj[p] + ';';
          }
        } else {
          val += ';' + name + ':' +
            (t == b && b == l && l == r ? t :
              t == b && l == r ? t + ' ' + l :
                l == r ? t + ' ' + l + ' ' + b : t + ' ' + r + ' ' + b + ' ' + l) + ';'
        }
        return val;
      }

      val += opt(padding, 'padding') + opt(margin, 'margin');
      return val.replace(/^[ \n\r\t;]*|[ \n\r\t]*$/, '').replace(/;([ \n\r\t]+)|\1;/g, ';')
        .replace(/(&((l|g)t|quot|#39))?;{2,}/g, function (a, b) {
          return b ? b + ";;" : ';'
        });
    },

    /**
     * 克隆对象
     * @method clone
     * @param { Object } source 源对象
     * @return { Object } source的一个副本
     */

    /**
     * 深度克隆对象，将source的属性克隆到target对象， 会覆盖target重名的属性。
     * @method clone
     * @param { Object } source 源对象
     * @param { Object } target 目标对象
     * @return { Object } 附加了source对象所有属性的target对象
     */
    clone: function (source, target) {
      var tmp;
      target = target || {};
      for (var i in source) {
        if (source.hasOwnProperty(i)) {
          tmp = source[i];
          if (typeof tmp == 'object') {
            target[i] = utils.isArray(tmp) ? [] : {};
            utils.clone(source[i], target[i])
          } else {
            target[i] = tmp;
          }
        }
      }
      return target;
    },

    /**
     * 把cm／pt为单位的值转换为px为单位的值
     * @method transUnitToPx
     * @param { String } 待转换的带单位的字符串
     * @return { String } 转换为px为计量单位的值的字符串
     * @example
     * ```javascript
     *
     * //output: 500px
     * console.log( AX.utils.transUnitToPx( '20cm' ) );
     *
     * //output: 27px
     * console.log( AX.utils.transUnitToPx( '20pt' ) );
     *
     * ```
     */
    transUnitToPx: function (val) {
      if (!/(pt|cm)/.test(val)) {
        return val
      }
      var unit;
      val.replace(/([\d.]+)(\w+)/, function (str, v, u) {
        val = v;
        unit = u;
      });
      switch (unit) {
        case 'cm':
          val = parseFloat(val) * 25;
          break;
        case 'pt':
          val = Math.round(parseFloat(val) * 96 / 72);
      }
      return val + (val ? 'px' : '');
    },

    /**
     * 在dom树ready之后执行给定的回调函数
     * @method domReady
     * @remind 如果在执行该方法的时候， dom树已经ready， 那么回调函数将立刻执行
     * @param { Function } fn dom树ready之后的回调函数
     * @example
     * ```javascript
     *
     * AX.utils.domReady( function () {
     *
     *     console.log('123');
     *
     * } );
     *
     * ```
     */
    domReady: function () {

      var fnArr = [];

      function doReady(doc) {
        //确保onready只执行一次
        doc.isReady = true;
        for (var ci; ci = fnArr.pop(); ci()) {
        }
      }

      return function (onready, win) {
        win = win || window;
        var doc = win.document;
        onready && fnArr.push(onready);
        if (doc.readyState === "complete") {
          doReady(doc);
        } else {
          doc.isReady && doReady(doc);
          if (browser.ie && browser.version != 11) {
            (function () {
              if (doc.isReady) {
                return;
              }
              try {
                doc.documentElement.doScroll("left");
              } catch (error) {
                setTimeout(arguments.callee, 0);
                return;
              }
              doReady(doc);
            })();
            win.attachEvent('onload', function () {
              doReady(doc)
            });
          } else {
            doc.addEventListener("DOMContentLoaded", function () {
              doc.removeEventListener("DOMContentLoaded", arguments.callee, false);
              doReady(doc);
            }, false);
            win.addEventListener('load', function () {
              doReady(doc)
            }, false);
          }
        }

      }
    }(),

    /**
     * 动态添加css样式
     * @method cssRule
     * @param { String } 节点名称
     * @grammar AX.utils.cssRule('添加的样式的节点名称',['样式'，'放到哪个document上'])
     * @grammar AX.utils.cssRule('body','body{background:#ccc}') => null  //给body添加背景颜色
     * @grammar AX.utils.cssRule('body') =>样式的字符串  //取得key值为body的样式的内容,如果没有找到key值先关的样式将返回空，例如刚才那个背景颜色，将返回 body{background:#ccc}
     * @grammar AX.utils.cssRule('body',document) => 返回指定key的样式，并且指定是哪个document
     * @grammar AX.utils.cssRule('body','') =>null //清空给定的key值的背景颜色
     */
    cssRule: browser.ie && browser.version != 11 ? function (key, style, doc) {
      var indexList, index;
      if (style === undefined || style && style.nodeType && style.nodeType == 9) {
        //获取样式
        doc = style && style.nodeType && style.nodeType == 9 ? style : doc || document;
        indexList = doc.indexList || (doc.indexList = {});
        index = indexList[key];
        if (index !== undefined) {
          return doc.styleSheets[index].cssText
        }
        return undefined;
      }
      doc = doc || document;
      indexList = doc.indexList || (doc.indexList = {});
      index = indexList[key];
      //清除样式
      if (style === '') {
        if (index !== undefined) {
          doc.styleSheets[index].cssText = '';
          delete indexList[key];
          return true
        }
        return false;
      }

      //添加样式
      if (index !== undefined) {
        sheetStyle = doc.styleSheets[index];
      } else {
        sheetStyle = doc.createStyleSheet('', index = doc.styleSheets.length);
        indexList[key] = index;
      }
      sheetStyle.cssText = style;
    } : function (key, style, doc) {
      var head, node;
      if (style === undefined || style && style.nodeType && style.nodeType == 9) {
        //获取样式
        doc = style && style.nodeType && style.nodeType == 9 ? style : doc || document;
        node = doc.getElementById(key);
        return node ? node.innerHTML : undefined;
      }
      doc = doc || document;
      node = doc.getElementById(key);

      //清除样式
      if (style === '') {
        if (node) {
          node.parentNode.removeChild(node);
          return true
        }
        return false;
      }

      //添加样式
      if (node) {
        node.innerHTML = style;
      } else {
        node = doc.createElement('style');
        node.id = key;
        node.innerHTML = style;
        doc.getElementsByTagName('head')[0].appendChild(node);
      }
    },
    sort: function (array, compareFn) {
      compareFn = compareFn || function (item1, item2) {
        return item1.localeCompare(item2);
      };
      for (var i = 0, len = array.length; i < len; i++) {
        for (var j = i, length = array.length; j < length; j++) {
          if (compareFn(array[i], array[j]) > 0) {
            var t = array[i];
            array[i] = array[j];
            array[j] = t;
          }
        }
      }
      return array;
    },
    serializeParam: function (json) {
      var strArr = [];
      for (var i in json) {
        //忽略默认的几个参数
        if (i == "method" || i == "timeout" || i == "async") {
          continue;
        }
        //传递过来的对象和函数不在提交之列
        if (!((typeof json[i]).toLowerCase() == "function" || (typeof json[i]).toLowerCase() == "object")) {
          strArr.push(encodeURIComponent(i) + "=" + encodeURIComponent(json[i]));
        } else if (utils.isArray(json[i])) {
          //支持传数组内容
          for (var j = 0; j < json[i].length; j++) {
            strArr.push(encodeURIComponent(i) + "[]=" + encodeURIComponent(json[i][j]));
          }
        }
      }
      return strArr.join("&");
    },
    formatUrl: function (url) {
      var u = url.replace(/&&/g, '&');
      u = u.replace(/\?&/g, '?');
      u = u.replace(/&$/g, '');
      u = u.replace(/&#/g, '#');
      u = u.replace(/&+/g, '&');
      return u;
    },
    isCrossDomainUrl: function (url) {
      var a = document.createElement('a');
      a.href = url;
      if (browser.ie) {
        a.href = a.href;
      }
      return !(a.protocol == location.protocol && a.hostname == location.hostname &&
        (a.port == location.port || a.port == '80' && location.port == '' || a.port == '' && location.port == '80'));
    },
    clearEmptyAttrs: function (obj) {
      for (var p in obj) {
        if (obj[p] === '') {
          delete obj[p]
        }
      }
      return obj;
    },
    str2json: function (s) {

      if (!utils.isString(s)) {
        return null;
      }
      if (window.JSON) {
        return JSON.parse(s);
      }
      return new Function("return " + utils.trim(s || ''))();


    },
    json2str: (function () {

      if (window.JSON) {

        return JSON.stringify;

      }

      var escapeMap = {
        "\b": '\\b',
        "\t": '\\t',
        "\n": '\\n',
        "\f": '\\f',
        "\r": '\\r',
        '"': '\\"',
        "\\": '\\\\'
      };

      function encodeString(source) {
        if (/["\\\x00-\x1f]/.test(source)) {
          source = source.replace(
            /["\\\x00-\x1f]/g,
            function (match) {
              var c = escapeMap[match];
              if (c) {
                return c;
              }
              c = match.charCodeAt();
              return "\\u00"
                + Math.floor(c / 16).toString(16)
                + (c % 16).toString(16);
            });
        }
        return '"' + source + '"';
      }

      function encodeArray(source) {
        var result = ["["],
          l = source.length,
          preComma, i, item;

        for (i = 0; i < l; i++) {
          item = source[i];

          switch (typeof item) {
            case "undefined":
            case "function":
            case "unknown":
              break;
            default:
              if (preComma) {
                result.push(',');
              }
              result.push(utils.json2str(item));
              preComma = 1;
          }
        }
        result.push("]");
        return result.join("");
      }

      function pad(source) {
        return source < 10 ? '0' + source : source;
      }

      function encodeDate(source) {
        return '"' + source.getFullYear() + "-"
          + pad(source.getMonth() + 1) + "-"
          + pad(source.getDate()) + "T"
          + pad(source.getHours()) + ":"
          + pad(source.getMinutes()) + ":"
          + pad(source.getSeconds()) + '"';
      }

      return function (value) {
        switch (typeof value) {
          case 'undefined':
            return 'undefined';

          case 'number':
            return isFinite(value) ? String(value) : "null";

          case 'string':
            return encodeString(value);

          case 'boolean':
            return String(value);

          default:
            if (value === null) {
              return 'null';
            } else if (utils.isArray(value)) {
              return encodeArray(value);
            } else if (utils.isDate(value)) {
              return encodeDate(value);
            }
            var result = ['{'],
              encode = utils.json2str,
              preComma,
              item;

            for (var key in value) {
              if (Object.prototype.hasOwnProperty.call(value, key)) {
                item = value[key];
                switch (typeof item) {
                  case 'undefined':
                  case 'unknown':
                  case 'function':
                    break;
                  default:
                    if (preComma) {
                      result.push(',');
                    }
                    preComma = 1;
                    result.push(encode(key) + ':' + encode(item));
                }
              }
            }
            result.push('}');
            return result.join('');

        }
      };


    })()

  };
  /**
   * 判断给定的对象是否是字符串
   * @method isString
   * @param { * } object 需要判断的对象
   * @return { Boolean } 给定的对象是否是字符串
   */

  /**
   * 判断给定的对象是否是数组
   * @method isArray
   * @param { * } object 需要判断的对象
   * @return { Boolean } 给定的对象是否是数组
   */

  /**
   * 判断给定的对象是否是一个Function
   * @method isFunction
   * @param { * } object 需要判断的对象
   * @return { Boolean } 给定的对象是否是Function
   */

  /**
   * 判断给定的对象是否是Number
   * @method isNumber
   * @param { * } object 需要判断的对象
   * @return { Boolean } 给定的对象是否是Number
   */

  /**
   * 判断给定的对象是否是一个正则表达式
   * @method isRegExp
   * @param { * } object 需要判断的对象
   * @return { Boolean } 给定的对象是否是正则表达式
   */

  /**
   * 判断给定的对象是否是一个普通对象
   * @method isObject
   * @param { * } object 需要判断的对象
   * @return { Boolean } 给定的对象是否是普通对象
   */
  utils.each(['String', 'Function', 'Array', 'Number', 'RegExp', 'Object', 'Date'], function (v) {
    AX.utils['is' + v] = function (obj) {
      return Object.prototype.toString.apply(obj) == '[object ' + v + ']';
    }
  });


  // core/EventBase.js
  /**
   * UE采用的事件基类
   * @file
   * @module AX
   * @class EventBase
   * @since 1.2.6.1
   */

  /**
   * UEditor公用空间，UEditor所有的功能都挂载在该空间下
   * @unfile
   * @module AX
   */

  /**
   * UE采用的事件基类，继承此类的对应类将获取addListener,removeListener,fireEvent方法。
   * 在UE中，Editor以及所有ui实例都继承了该类，故可以在对应的ui对象以及editor对象上使用上述方法。
   * @unfile
   * @module AX
   * @class EventBase
   */

  /**
   * 通过此构造器，子类可以继承EventBase获取事件监听的方法
   * @constructor
   * @example
   * ```javascript
   * AX.EventBase.call(editor);
   * ```
   */
  var EventBase = AX.EventBase = function () {
  };

  EventBase.prototype = {

    /**
     * 注册事件监听器
     * @method addListener
     * @param { String } types 监听的事件名称，同时监听多个事件使用空格分隔
     * @param { Function } fn 监听的事件被触发时，会执行该回调函数
     * @waining 事件被触发时，监听的函数假如返回的值恒等于true，回调函数的队列中后面的函数将不执行
     * @example
     * ```javascript
     * editor.addListener('selectionchange',function(){
     *      console.log("选区已经变化！");
     * })
     * editor.addListener('beforegetcontent aftergetcontent',function(type){
     *         if(type == 'beforegetcontent'){
     *             //do something
     *         }else{
     *             //do something
     *         }
     *         console.log(this.getContent) // this是注册的事件的编辑器实例
     * })
     * ```
     * @see AX.EventBase:fireEvent(String)
     */
    addListener: function (types, listener) {
      types = utils.trim(types).split(/\s+/);
      for (var i = 0, ti; ti = types[i++];) {
        getListener(this, ti, true).push(listener);
      }
    },

    on: function (types, listener) {
      return this.addListener(types, listener);
    },
    off: function (types, listener) {
      return this.removeListener(types, listener)
    },
    trigger: function () {
      return this.fireEvent.apply(this, arguments);
    },
    /**
     * 移除事件监听器
     * @method removeListener
     * @param { String } types 移除的事件名称，同时移除多个事件使用空格分隔
     * @param { Function } fn 移除监听事件的函数引用
     * @example
     * ```javascript
     * //changeCallback为方法体
     * editor.removeListener("selectionchange",changeCallback);
     * ```
     */
    removeListener: function (types, listener) {
      types = utils.trim(types).split(/\s+/);
      for (var i = 0, ti; ti = types[i++];) {
        utils.removeItem(getListener(this, ti) || [], listener);
      }
    },

    /**
     * 触发事件
     * @method fireEvent
     * @param { String } types 触发的事件名称，同时触发多个事件使用空格分隔
     * @remind 该方法会触发addListener
     * @return { * } 返回触发事件的队列中，最后执行的回调函数的返回值
     * @example
     * ```javascript
     * editor.fireEvent("selectionchange");
     * ```
     */

    /**
     * 触发事件
     * @method fireEvent
     * @param { String } types 触发的事件名称，同时触发多个事件使用空格分隔
     * @param { *... } options 可选参数，可以传入一个或多个参数，会传给事件触发的回调函数
     * @return { * } 返回触发事件的队列中，最后执行的回调函数的返回值
     * @example
     * ```javascript
     *
     * editor.addListener( "selectionchange", function ( type, arg1, arg2 ) {
     *
     *     console.log( arg1 + " " + arg2 );
     *
     * } );
     *
     * //触发selectionchange事件， 会执行上面的事件监听器
     * //output: Hello World
     * editor.fireEvent("selectionchange", "Hello", "World");
     * ```
     */
    fireEvent: function () {
      var types = arguments[0];
      types = utils.trim(types).split(' ');
      for (var i = 0, ti; ti = types[i++];) {
        var listeners = getListener(this, ti),
          r, t, k;
        if (listeners) {
          k = listeners.length;
          while (k--) {
            if (!listeners[k]) {
              continue;
            }
            t = listeners[k].apply(this, arguments);
            if (t === true) {
              return t;
            }
            if (t !== undefined) {
              r = t;
            }
          }
        }
        if (t = this['on' + ti.toLowerCase()]) {
          r = t.apply(this, arguments);
        }
      }
      return r;
    }
  };

  /**
   * 获得对象所拥有监听类型的所有监听器
   * @unfile
   * @module AX
   * @since 1.2.6.1
   * @method getListener
   * @public
   * @param { Object } obj  查询监听器的对象
   * @param { String } type 事件类型
   * @param { Boolean } force  为true且当前所有type类型的侦听器不存在时，创建一个空监听器数组
   * @return { Array } 监听器数组
   */
  function getListener(obj, type, force) {
    var allListeners;
    type = type.toLowerCase();
    return (allListeners = obj.__allListeners || force && (obj.__allListeners = {}))
      && (allListeners[type] || force && (allListeners[type] = []));
  }


  // core/dtd.js
  ///import editor.js
  ///import core/dom/dom.js
  ///import core/utils.js
  /**
   * dtd html语义化的体现类
   * @constructor
   * @namespace dtd
   */
  var dtd = dom.dtd = (function () {
    function _(s) {
      for (var k in s) {
        s[k.toUpperCase()] = s[k];
      }
      return s;
    }

    var X = utils.extend2;
    var A = _({ isindex: 1, fieldset: 1 }),
      B = _({ input: 1, button: 1, select: 1, textarea: 1, label: 1 }),
      C = X(_({ a: 1 }), B),
      D = X({ iframe: 1 }, C),
      E = _({
        hr: 1,
        ul: 1,
        menu: 1,
        div: 1,
        blockquote: 1,
        noscript: 1,
        table: 1,
        center: 1,
        address: 1,
        dir: 1,
        pre: 1,
        h5: 1,
        dl: 1,
        h4: 1,
        noframes: 1,
        h6: 1,
        ol: 1,
        h1: 1,
        h3: 1,
        h2: 1
      }),
      F = _({ ins: 1, del: 1, script: 1, style: 1 }),
      G = X(_({
        b: 1,
        acronym: 1,
        bdo: 1,
        'var': 1,
        '#': 1,
        abbr: 1,
        code: 1,
        br: 1,
        i: 1,
        cite: 1,
        kbd: 1,
        u: 1,
        strike: 1,
        s: 1,
        tt: 1,
        strong: 1,
        q: 1,
        samp: 1,
        em: 1,
        dfn: 1,
        span: 1
      }), F),
      H = X(_({
        sub: 1,
        img: 1,
        embed: 1,
        object: 1,
        sup: 1,
        basefont: 1,
        map: 1,
        applet: 1,
        font: 1,
        big: 1,
        small: 1
      }), G),
      I = X(_({ p: 1 }), H),
      J = X(_({ iframe: 1 }), H, B),
      K = _({
        img: 1,
        embed: 1,
        noscript: 1,
        br: 1,
        kbd: 1,
        center: 1,
        button: 1,
        basefont: 1,
        h5: 1,
        h4: 1,
        samp: 1,
        h6: 1,
        ol: 1,
        h1: 1,
        h3: 1,
        h2: 1,
        form: 1,
        font: 1,
        '#': 1,
        select: 1,
        menu: 1,
        ins: 1,
        abbr: 1,
        label: 1,
        code: 1,
        table: 1,
        script: 1,
        cite: 1,
        input: 1,
        iframe: 1,
        strong: 1,
        textarea: 1,
        noframes: 1,
        big: 1,
        small: 1,
        span: 1,
        hr: 1,
        sub: 1,
        bdo: 1,
        'var': 1,
        div: 1,
        object: 1,
        sup: 1,
        strike: 1,
        dir: 1,
        map: 1,
        dl: 1,
        applet: 1,
        del: 1,
        isindex: 1,
        fieldset: 1,
        ul: 1,
        b: 1,
        acronym: 1,
        a: 1,
        blockquote: 1,
        i: 1,
        u: 1,
        s: 1,
        tt: 1,
        address: 1,
        q: 1,
        pre: 1,
        p: 1,
        em: 1,
        dfn: 1
      }),

      L = X(_({ a: 0 }), J),//a不能被切开，所以把他
      M = _({ tr: 1 }),
      N = _({ '#': 1 }),
      O = X(_({ param: 1 }), K),
      P = X(_({ form: 1 }), A, D, E, I),
      Q = _({ li: 1, ol: 1, ul: 1 }),
      R = _({ style: 1, script: 1 }),
      S = _({ base: 1, link: 1, meta: 1, title: 1 }),
      T = X(S, R),
      U = _({ head: 1, body: 1 }),
      V = _({ html: 1 });

    var block = _({
      address: 1,
      blockquote: 1,
      center: 1,
      dir: 1,
      div: 1,
      dl: 1,
      fieldset: 1,
      form: 1,
      h1: 1,
      h2: 1,
      h3: 1,
      h4: 1,
      h5: 1,
      h6: 1,
      hr: 1,
      isindex: 1,
      menu: 1,
      noframes: 1,
      ol: 1,
      p: 1,
      pre: 1,
      table: 1,
      ul: 1
    }),

      empty = _({
        area: 1,
        base: 1,
        basefont: 1,
        br: 1,
        col: 1,
        command: 1,
        dialog: 1,
        embed: 1,
        hr: 1,
        img: 1,
        input: 1,
        isindex: 1,
        keygen: 1,
        link: 1,
        meta: 1,
        param: 1,
        source: 1,
        track: 1,
        wbr: 1
      });

    return _({

      // $ 表示自定的属性

      // body外的元素列表.
      $nonBodyContent: X(V, U, S),

      //块结构元素列表
      $block: block,

      //内联元素列表
      $inline: L,

      $inlineWithA: X(_({ a: 1 }), L),

      $body: X(_({ script: 1, style: 1 }), block),

      $cdata: _({ script: 1, style: 1 }),

      //自闭和元素
      $empty: empty,

      //不是自闭合，但不能让range选中里边
      $nonChild: _({ iframe: 1, textarea: 1 }),
      //列表元素列表
      $listItem: _({ dd: 1, dt: 1, li: 1 }),

      //列表根元素列表
      $list: _({ ul: 1, ol: 1, dl: 1 }),

      //不能认为是空的元素
      $isNotEmpty: _({
        table: 1,
        ul: 1,
        ol: 1,
        dl: 1,
        iframe: 1,
        area: 1,
        base: 1,
        col: 1,
        hr: 1,
        img: 1,
        embed: 1,
        input: 1,
        link: 1,
        meta: 1,
        param: 1,
        h1: 1,
        h2: 1,
        h3: 1,
        h4: 1,
        h5: 1,
        h6: 1
      }),

      //如果没有子节点就可以删除的元素列表，像span,a
      $removeEmpty: _({
        a: 1,
        abbr: 1,
        acronym: 1,
        address: 1,
        b: 1,
        bdo: 1,
        big: 1,
        cite: 1,
        code: 1,
        del: 1,
        dfn: 1,
        em: 1,
        font: 1,
        i: 1,
        ins: 1,
        label: 1,
        kbd: 1,
        q: 1,
        s: 1,
        samp: 1,
        small: 1,
        // span: 1,
        strike: 1,
        strong: 1,
        sub: 1,
        sup: 1,
        tt: 1,
        u: 1,
        'var': 1
      }),

      $removeEmptyBlock: _({ 'p': 1, 'div': 1 }),

      //在table元素里的元素列表
      $tableContent: _({ caption: 1, col: 1, colgroup: 1, tbody: 1, td: 1, tfoot: 1, th: 1, thead: 1, tr: 1, table: 1 }),
      //不转换的标签
      $notTransContent: _({ pre: 1, script: 1, style: 1, textarea: 1 }),
      html: U,
      head: T,
      style: N,
      script: N,
      body: P,
      base: {},
      link: {},
      meta: {},
      title: N,
      col: {},
      tr: _({ td: 1, th: 1 }),
      img: {},
      embed: {},
      colgroup: _({ thead: 1, col: 1, tbody: 1, tr: 1, tfoot: 1 }),
      noscript: P,
      td: P,
      br: {},
      th: P,
      center: P,
      kbd: L,
      button: X(I, E),
      basefont: {},
      h5: L,
      h4: L,
      samp: L,
      h6: L,
      ol: Q,
      h1: L,
      h3: L,
      option: N,
      h2: L,
      form: X(A, D, E, I),
      select: _({ optgroup: 1, option: 1 }),
      font: L,
      ins: L,
      menu: Q,
      abbr: L,
      label: L,
      table: _({ thead: 1, col: 1, tbody: 1, tr: 1, colgroup: 1, caption: 1, tfoot: 1 }),
      code: L,
      tfoot: M,
      cite: L,
      li: P,
      input: {},
      iframe: P,
      strong: L,
      textarea: N,
      noframes: P,
      big: L,
      small: L,
      //trace:
      span: _({ '#': 1, br: 1, b: 1, strong: 1, u: 1, i: 1, em: 1, sub: 1, sup: 1, strike: 1, span: 1 }),
      hr: L,
      dt: L,
      sub: L,
      optgroup: _({ option: 1 }),
      param: {},
      bdo: L,
      'var': L,
      div: P,
      object: O,
      sup: L,
      dd: P,
      strike: L,
      area: {},
      dir: Q,
      map: X(_({ area: 1, form: 1, p: 1 }), A, F, E),
      applet: O,
      dl: _({ dt: 1, dd: 1 }),
      del: L,
      isindex: {},
      fieldset: X(_({ legend: 1 }), K),
      thead: M,
      ul: Q,
      acronym: L,
      b: L,
      a: X(_({ a: 1 }), J),
      blockquote: X(_({ td: 1, tr: 1, tbody: 1, li: 1 }), P),
      caption: L,
      i: L,
      u: L,
      tbody: M,
      s: L,
      address: X(D, I),
      tt: L,
      legend: L,
      q: L,
      pre: X(G, C),
      p: X(_({ 'a': 1 }), L),
      em: L,
      dfn: L
    });
  })();


  // core/domUtils.js
  /**
   * Dom操作工具包
   * @file
   * @module AX.dom.domUtils
   * @since 1.2.6.1
   */

  /**
   * Dom操作工具包
   * @unfile
   * @module AX.dom.domUtils
   */
  function getDomNode(node, start, ltr, startFromChild, fn, guard) {
    var tmpNode = startFromChild && node[start],
      parent;
    !tmpNode && (tmpNode = node[ltr]);
    while (!tmpNode && (parent = (parent || node).parentNode)) {
      if (parent.tagName == 'BODY' || guard && !guard(parent)) {
        return null;
      }
      tmpNode = parent[ltr];
    }
    if (tmpNode && fn && !fn(tmpNode)) {
      return getDomNode(tmpNode, start, ltr, false, fn);
    }
    return tmpNode;
  }

  var attrFix = ie && browser.version < 9 ? {
    tabindex: "tabIndex",
    readonly: "readOnly",
    "for": "htmlFor",
    "class": "className",
    maxlength: "maxLength",
    cellspacing: "cellSpacing",
    cellpadding: "cellPadding",
    rowspan: "rowSpan",
    colspan: "colSpan",
    usemap: "useMap",
    frameborder: "frameBorder"
  } : {
      tabindex: "tabIndex",
      readonly: "readOnly"
    },
    styleBlock = utils.listToMap([
      '-webkit-box', '-moz-box', 'block',
      'list-item', 'table', 'table-row-group',
      'table-header-group', 'table-footer-group',
      'table-row', 'table-column-group', 'table-column',
      'table-cell', 'table-caption'
    ]);
  var domUtils = dom.domUtils = {
    //节点常量
    NODE_ELEMENT: 1,
    NODE_DOCUMENT: 9,
    NODE_TEXT: 3,
    NODE_COMMENT: 8,
    NODE_DOCUMENT_FRAGMENT: 11,

    //位置关系
    POSITION_IDENTICAL: 0,
    POSITION_DISCONNECTED: 1,
    POSITION_FOLLOWING: 2,
    POSITION_PRECEDING: 4,
    POSITION_IS_CONTAINED: 8,
    POSITION_CONTAINS: 16,
    //ie6使用其他的会有一段空白出现
    fillChar: ie && browser.version == '6' ? '\ufeff' : '\u200B',
    //-------------------------Node部分--------------------------------
    keys: {
      /*Backspace*/ 8: 1, /*Delete*/ 46: 1,
      /*Shift*/ 16: 1, /*Ctrl*/ 17: 1, /*Alt*/ 18: 1,
      37: 1, 38: 1, 39: 1, 40: 1,
      13: 1 /*enter*/
    },
    /**
     * 获取节点A相对于节点B的位置关系
     * @method getPosition
     * @param { Node } nodeA 需要查询位置关系的节点A
     * @param { Node } nodeB 需要查询位置关系的节点B
     * @return { Number } 节点A与节点B的关系
     * @example
     * ```javascript
     * //output: 20
     * var position = AX.dom.domUtils.getPosition( document.documentElement, document.body );
     *
     * switch ( position ) {
     *
     *      //0
     *      case AX.dom.domUtils.POSITION_IDENTICAL:
     *          console.log('元素相同');
     *          break;
     *      //1
     *      case AX.dom.domUtils.POSITION_DISCONNECTED:
     *          console.log('两个节点在不同的文档中');
     *          break;
     *      //2
     *      case AX.dom.domUtils.POSITION_FOLLOWING:
     *          console.log('节点A在节点B之后');
     *          break;
     *      //4
     *      case AX.dom.domUtils.POSITION_PRECEDING;
     *          console.log('节点A在节点B之前');
     *          break;
     *      //8
     *      case AX.dom.domUtils.POSITION_IS_CONTAINED:
     *          console.log('节点A被节点B包含');
     *          break;
     *      case 10:
     *          console.log('节点A被节点B包含且节点A在节点B之后');
     *          break;
     *      //16
     *      case AX.dom.domUtils.POSITION_CONTAINS:
     *          console.log('节点A包含节点B');
     *          break;
     *      case 20:
     *          console.log('节点A包含节点B且节点A在节点B之前');
     *          break;
     *
     * }
     * ```
     */
    getPosition: function (nodeA, nodeB) {
      // 如果两个节点是同一个节点
      if (nodeA === nodeB) {
        // domUtils.POSITION_IDENTICAL
        return 0;
      }
      var node,
        parentsA = [nodeA],
        parentsB = [nodeB];
      node = nodeA;
      while (node = node.parentNode) {
        // 如果nodeB是nodeA的祖先节点
        if (node === nodeB) {
          // domUtils.POSITION_IS_CONTAINED + domUtils.POSITION_FOLLOWING
          return 10;
        }
        parentsA.push(node);
      }
      node = nodeB;
      while (node = node.parentNode) {
        // 如果nodeA是nodeB的祖先节点
        if (node === nodeA) {
          // domUtils.POSITION_CONTAINS + domUtils.POSITION_PRECEDING
          return 20;
        }
        parentsB.push(node);
      }
      parentsA.reverse();
      parentsB.reverse();
      if (parentsA[0] !== parentsB[0]) {
        // domUtils.POSITION_DISCONNECTED
        return 1;
      }
      var i = -1;
      while (i++, parentsA[i] === parentsB[i]) {
      }
      nodeA = parentsA[i];
      nodeB = parentsB[i];
      while (nodeA = nodeA.nextSibling) {
        if (nodeA === nodeB) {
          // domUtils.POSITION_PRECEDING
          return 4
        }
      }
      // domUtils.POSITION_FOLLOWING
      return 2;
    },

    /**
     * 检测节点node在父节点中的索引位置
     * @method getNodeIndex
     * @param { Node } node 需要检测的节点对象
     * @return { Number } 该节点在父节点中的位置
     * @see AX.dom.domUtils.getNodeIndex(Node,Boolean)
     */

    /**
     * 检测节点node在父节点中的索引位置， 根据给定的mergeTextNode参数决定是否要合并多个连续的文本节点为一个节点
     * @method getNodeIndex
     * @param { Node } node 需要检测的节点对象
     * @param { Boolean } mergeTextNode 是否合并多个连续的文本节点为一个节点
     * @return { Number } 该节点在父节点中的位置
     * @example
     * ```javascript
     *
     *      var node = document.createElement("div");
     *
     *      node.appendChild( document.createTextNode( "hello" ) );
     *      node.appendChild( document.createTextNode( "world" ) );
     *      node.appendChild( node = document.createElement( "div" ) );
     *
     *      //output: 2
     *      console.log( AX.dom.domUtils.getNodeIndex( node ) );
     *
     *      //output: 1
     *      console.log( AX.dom.domUtils.getNodeIndex( node, true ) );
     *
     * ```
     */
    getNodeIndex: function (node, ignoreTextNode) {
      var preNode = node,
        i = 0;
      while (preNode = preNode.previousSibling) {
        if (ignoreTextNode && preNode.nodeType == 3) {
          if (preNode.nodeType != preNode.nextSibling.nodeType) {
            i++;
          }
          continue;
        }
        i++;
      }
      return i;
    },

    /**
     * 通过class样式查找对象
     * @param {String} className  class样式
     * @param {String} domRange 查找范围
     * @return {Array} list dom集合
     */
    getByClass: function (className, domRange) {
      domRange = domRange || document;
      var tags = domRange.getElementsByTagName("*");
      var list = [];
      for (var k in tags) {
        var tag = tags[k];
        if (this.hasClass(tag, className)) {
          list.push(tag);
        }
      }
      return list;
    },
    /**
     * dom绑定事件
     * @param {String} dom  需要绑定事件的dom
     * @param {String} type 事件类型
     * @param {Function} func 事件方法
     * @returns {Null} 无返回值
     */
    bindEvent: function (dom, type, func) {
      if (dom.attachEvent) {
        dom.attachEvent("on" + type, func);
      } else {
        dom.addEventListener(type, func);
      }
    },
    /**
     * 显示隐藏
     * @param {DOM} dom 操作对象
     * @param {String} flag true显示，false隐藏
     */
    showHide: function (dom, flag) {
      if (!dom) {
        return;
      }
      if (flag) {
        domUtils.removeClasses(dom, 'cascadeStyle');
        dom.style.display = dom.getAttribute('olddisplay');
      } else {
        dom.setAttribute('olddisplay', dom.getAttribute('olddisplay') ? dom.getAttribute('olddisplay') : 'inline-block');
        domUtils.addClass(dom, 'cascadeStyle');
        dom.style.display = 'none';
      }
    },
    /**
     * 设置文本节点被span元素包裹
     * @param textNode
     */
    setTextNodeWrap: function (textNode) {
      var domUtils = AX.dom.domUtils;
      var browser = AX.browser;
      var creatNode = document.createElement("span");
      var text = textNode[browser.ie ? 'innerText' : 'textContent'];
      creatNode.innerHTML = text;
      creatNode.setAttribute('class', '_textnode_');
      creatNode.setAttribute('id', + new Date());
      domUtils.insertAfter(textNode, creatNode);
      removeElement(textNode);
      //删除节点函数
      function removeElement(_element) {
        var _parentElement = _element.parentNode;
        if (_parentElement) {
          _parentElement.removeChild(_element);
        }
      }
    },

    /**
     * 检测节点node是否在给定的document对象上
     * @method inDoc
     * @param { Node } node 需要检测的节点对象
     * @param { DomDocument } doc 需要检测的document对象
     * @return { Boolean } 该节点node是否在给定的document的dom树上
     * @example
     * ```javascript
     *
     * var node = document.createElement("div");
     *
     * //output: false
     * console.log( AX.do.domUtils.inDoc( node, document ) );
     *
     * document.body.appendChild( node );
     *
     * //output: true
     * console.log( AX.do.domUtils.inDoc( node, document ) );
     *
     * ```
     */
    inDoc: function (node, doc) {
      return domUtils.getPosition(node, doc) == 10;
    },
    /**
     * 根据给定的过滤规则filterFn， 查找符合该过滤规则的node节点的第一个祖先节点，
     * 查找的起点是给定node节点的父节点。
     * @method findParent
     * @param { Node } node 需要查找的节点
     * @param { Function } filterFn 自定义的过滤方法。
     * @warning 查找的终点是到body节点为止
     * @remind 自定义的过滤方法filterFn接受一个Node对象作为参数， 该对象代表当前执行检测的祖先节点。 如果该
     *          节点满足过滤条件， 则要求返回true， 这时将直接返回该节点作为findParent()的结果， 否则， 请返回false。
     * @return { Node | Null } 如果找到符合过滤条件的节点， 就返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var filterNode = AX.dom.domUtils.findParent( document.body.firstChild, function ( node ) {
     *
     *     //由于查找的终点是body节点， 所以永远也不会匹配当前过滤器的条件， 即这里永远会返回false
     *     return node.tagName === "HTML";
     *
     * } );
     *
     * //output: true
     * console.log( filterNode === null );
     * ```
     */

    /**
     * 根据给定的过滤规则filterFn， 查找符合该过滤规则的node节点的第一个祖先节点，
     * 如果includeSelf的值为true，则查找的起点是给定的节点node， 否则， 起点是node的父节点
     * @method findParent
     * @param { Node } node 需要查找的节点
     * @param { Function } filterFn 自定义的过滤方法。
     * @param { Boolean } includeSelf 查找过程是否包含自身
     * @warning 查找的终点是到body节点为止
     * @remind 自定义的过滤方法filterFn接受一个Node对象作为参数， 该对象代表当前执行检测的祖先节点。 如果该
     *          节点满足过滤条件， 则要求返回true， 这时将直接返回该节点作为findParent()的结果， 否则， 请返回false。
     * @remind 如果includeSelf为true， 则过滤器第一次执行时的参数会是节点本身。
     *          反之， 过滤器第一次执行时的参数将是该节点的父节点。
     * @return { Node | Null } 如果找到符合过滤条件的节点， 就返回该节点， 否则返回NULL
     * @example
     * ```html
     * <body>
     *
     *      <div id="test">
     *      </div>
     *
     *      <script type="text/javascript">
     *
     *          //output: DIV, BODY
     *          var filterNode = AX.dom.domUtils.findParent( document.getElementById( "test" ), function ( node ) {
     *
     *              console.log( node.tagName );
     *              return false;
     *
     *          }, true );
     *
     *      </script>
     * </body>
     * ```
     */
    findParent: function (node, filterFn, includeSelf) {
      if (node && !domUtils.isBody(node)) {
        node = includeSelf ? node : node.parentNode;
        while (node) {
          if (!filterFn || filterFn(node) || domUtils.isBody(node)) {
            return filterFn && !filterFn(node) && domUtils.isBody(node) ? null : node;
          }
          node = node.parentNode;
        }
      }
      return null;
    },
    /**
     * 查找node的节点名为tagName的第一个祖先节点， 查找的起点是node节点的父节点。
     * @method findParentByTagName
     * @param { Node } node 需要查找的节点对象
     * @param { Array } tagNames 需要查找的父节点的名称数组
     * @warning 查找的终点是到body节点为止
     * @return { Node | NULL } 如果找到符合条件的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var node = AX.dom.domUtils.findParentByTagName( document.getElementsByTagName("div")[0], [ "BODY" ] );
     * //output: BODY
     * console.log( node.tagName );
     * ```
     */

    /**
     * 查找node的节点名为tagName的祖先节点， 如果includeSelf的值为true，则查找的起点是给定的节点node，
     * 否则， 起点是node的父节点。
     * @method findParentByTagName
     * @param { Node } node 需要查找的节点对象
     * @param { Array } tagNames 需要查找的父节点的名称数组
     * @param { Boolean } includeSelf 查找过程是否包含node节点自身
     * @warning 查找的终点是到body节点为止
     * @return { Node | NULL } 如果找到符合条件的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var queryTarget = document.getElementsByTagName("div")[0];
     * var node = AX.dom.domUtils.findParentByTagName( queryTarget, [ "DIV" ], true );
     * //output: true
     * console.log( queryTarget === node );
     * ```
     */
    findParentByTagName: function (node, tagNames, includeSelf, excludeFn) {
      tagNames = utils.listToMap(utils.isArray(tagNames) ? tagNames : [tagNames]);
      return domUtils.findParent(node, function (node) {
        return tagNames[node.tagName] && !(excludeFn && excludeFn(node));
      }, includeSelf);
    },
    /**
     * 查找节点node的祖先节点集合， 查找的起点是给定节点的父节点，结果集中不包含给定的节点。
     * @method findParents
     * @param { Node } node 需要查找的节点对象
     * @return { Array } 给定节点的祖先节点数组
     * @grammar AX.dom.domUtils.findParents(node)  => Array  //返回一个祖先节点数组集合，不包含自身
     * @grammar AX.dom.domUtils.findParents(node,includeSelf)  => Array  //返回一个祖先节点数组集合，includeSelf指定是否包含自身
     * @grammar AX.dom.domUtils.findParents(node,includeSelf,filterFn)  => Array  //返回一个祖先节点数组集合，filterFn指定过滤条件，返回true的node将被选取
     * @grammar AX.dom.domUtils.findParents(node,includeSelf,filterFn,closerFirst)  => Array  //返回一个祖先节点数组集合，closerFirst为true的话，node的直接父亲节点是数组的第0个
     */

    /**
     * 查找节点node的祖先节点集合， 如果includeSelf的值为true，
     * 则返回的结果集中允许出现当前给定的节点， 否则， 该节点不会出现在其结果集中。
     * @method findParents
     * @param { Node } node 需要查找的节点对象
     * @param { Boolean } includeSelf 查找的结果中是否允许包含当前查找的节点对象
     * @return { Array } 给定节点的祖先节点数组
     */
    findParents: function (node, includeSelf, filterFn, closerFirst) {
      var parents = includeSelf && (filterFn && filterFn(node) || !filterFn) ? [node] : [];
      while (node = domUtils.findParent(node, filterFn)) {
        parents.push(node);
      }
      return closerFirst ? parents : parents.reverse();
    },

    /**
     * 在节点node后面插入新节点newNode
     * @method insertAfter
     * @param { Node } node 目标节点
     * @param { Node } newNode 新插入的节点， 该节点将置于目标节点之后
     * @return { Node } 新插入的节点
     */
    insertAfter: function (node, newNode) {
      return node.nextSibling ? node.parentNode.insertBefore(newNode, node.nextSibling) :
        node.parentNode.appendChild(newNode);
    },

    /**
     * 删除节点node及其下属的所有节点
     * @method remove
     * @param { Node } node 需要删除的节点对象
     * @return { Node } 返回刚删除的节点对象
     * @example
     * ```html
     * <div id="test">
     *     <div id="child">你好</div>
     * </div>
     * <script>
     *     AX.dom.domUtils.remove( document.body, false );
     *     //output: false
     *     console.log( document.getElementById( "child" ) !== null );
     * </script>
     * ```
     */

    /**
     * 删除节点node，并根据keepChildren的值决定是否保留子节点
     * @method remove
     * @param { Node } node 需要删除的节点对象
     * @param { Boolean } keepChildren 是否需要保留子节点
     * @return { Node } 返回刚删除的节点对象
     * @example
     * ```html
     * <div id="test">
     *     <div id="child">你好</div>
     * </div>
     * <script>
     *     AX.dom.domUtils.remove( document.body, true );
     *     //output: true
     *     console.log( document.getElementById( "child" ) !== null );
     * </script>
     * ```
     */
    remove: function (node, keepChildren) {
      if (!node) {
        return node;
      }
      var parent = node.parentNode,
        child;
      if (parent) {
        if (keepChildren && node.hasChildNodes()) {
          while (child = node.firstChild) {
            parent.insertBefore(child, node);
          }
        }
        //多个只显示占位文本控件切换时会删除上一个，此处暂时做此判断，如有其他影响可解除（贾建辉--2019-06-25）
        // if(!(this.hasClass(parent,'ctrl-bg') || this.hasClass(parent,'ctrl-value') || this.hasClass(node,'ctrl-bg') || this.hasClass(node,'ctrl-value')) || typeof keepChildren != 'undefined'){
        //     parent.removeChild(node);
        // }

        // domutils.remove 方法 使用在 moveToBookmark 清除书签，书签父元素可能会是ctrl-value，加上上面的判断，书签清除不掉，所有去掉了限制。 yang 07-12
        parent.removeChild(node);
      }
      return node;
    },

    /**
     * 取得node节点的下一个兄弟节点， 如果该节点其后没有兄弟节点， 则递归查找其父节点之后的第一个兄弟节点，
     * 直到找到满足条件的节点或者递归到BODY节点之后才会结束。
     * @method getNextDomNode
     * @param { Node } node 需要获取其后的兄弟节点的节点对象
     * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```html
     *     <body>
     *      <div id="test">
     *          <span></span>
     *      </div>
     *      <i>xxx</i>
     * </body>
     * <script>
     *
     *     //output: i节点
     *     console.log( AX.dom.domUtils.getNextDomNode( document.getElementById( "test" ) ) );
     *
     * </script>
     * ```
     * @example
     * ```html
     * <body>
     *      <div>
     *          <span></span>
     *          <i id="test">xxx</i>
     *      </div>
     *      <b>xxx</b>
     * </body>
     * <script>
     *
     *     //由于id为test的i节点之后没有兄弟节点， 则查找其父节点（div）后面的兄弟节点
     *     //output: b节点
     *     console.log( AX.dom.domUtils.getNextDomNode( document.getElementById( "test" ) ) );
     *
     * </script>
     * ```
     */

    /**
     * 取得node节点的下一个兄弟节点， 如果startFromChild的值为ture，则先获取其子节点，
     * 如果有子节点则直接返回第一个子节点；如果没有子节点或者startFromChild的值为false，
     * 则执行<a href="#AX.dom.domUtils.getNextDomNode(Node)">getNextDomNode(Node node)</a>的查找过程。
     * @method getNextDomNode
     * @param { Node } node 需要获取其后的兄弟节点的节点对象
     * @param { Boolean } startFromChild 查找过程是否从其子节点开始
     * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL
     * @see AX.dom.domUtils.getNextDomNode(Node)
     */
    getNextDomNode: function (node, startFromChild, filterFn, guard) {
      return getDomNode(node, 'firstChild', 'nextSibling', startFromChild, filterFn, guard);
    },
    getPreDomNode: function (node, startFromChild, filterFn, guard) {
      return getDomNode(node, 'lastChild', 'previousSibling', startFromChild, filterFn, guard);
    },
    /**
     * 检测节点node是否属是UEditor定义的bookmark节点
     * @method isBookmarkNode
     * @private
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 是否是bookmark节点
     * @example
     * ```html
     * <span id="_baidu_bookmark_1"></span>
     * <script>
     *      var bookmarkNode = document.getElementById("_baidu_bookmark_1");
     *      //output: true
     *      console.log( AX.dom.domUtils.isBookmarkNode( bookmarkNode ) );
     * </script>
     * ```
     */
    isBookmarkNode: function (node) {
      return node.nodeType == 1 && node.id && /^_baidu_bookmark_/i.test(node.id);
    },
    /**
     * 获取节点node所属的window对象
     * @method  getWindow
     * @param { Node } node 节点对象
     * @return { Window } 当前节点所属的window对象
     * @example
     * ```javascript
     * //output: true
     * console.log( AX.dom.domUtils.getWindow( document.body ) === window );
     * ```
     */
    getWindow: function (node) {
      var doc = node.ownerDocument || node;
      return doc.defaultView || doc.parentWindow;
    },
    /**
     * 获取离nodeA与nodeB最近的公共的祖先节点
     * @method  getCommonAncestor
     * @param { Node } nodeA 第一个节点
     * @param { Node } nodeB 第二个节点
     * @remind 如果给定的两个节点是同一个节点， 将直接返回该节点。
     * @return { Node | NULL } 如果未找到公共节点， 返回NULL， 否则返回最近的公共祖先节点。
     * @example
     * ```javascript
     * var commonAncestor = AX.dom.domUtils.getCommonAncestor( document.body, document.body.firstChild );
     * //output: true
     * console.log( commonAncestor.tagName.toLowerCase() === 'body' );
     * ```
     */
    getCommonAncestor: function (nodeA, nodeB) {
      if (nodeA === nodeB) {
        return nodeA;
      }
      var parentsA = [nodeA], parentsB = [nodeB], parent = nodeA, i = -1;
      while (parent = parent.parentNode) {
        if (parent === nodeB) {
          return parent;
        }
        parentsA.push(parent);
      }
      parent = nodeB;
      while (parent = parent.parentNode) {
        if (parent === nodeA) {
          return parent;
        }
        parentsB.push(parent);
      }
      parentsA.reverse();
      parentsB.reverse();
      while (i++, parentsA[i] === parentsB[i]) {
      }
      return i == 0 ? null : parentsA[i - 1];

    },
    /**
     * 清除node节点左右连续为空的兄弟inline节点
     * @method clearEmptySibling
     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
     * 则这些兄弟节点将被删除
     * @grammar AX.dom.domUtils.clearEmptySibling(node,ignoreNext)  //ignoreNext指定是否忽略右边空节点
     * @grammar AX.dom.domUtils.clearEmptySibling(node,ignoreNext,ignorePre)  //ignorePre指定是否忽略左边空节点
     * @example
     * ```html
     * <body>
     *     <div></div>
     *     <span id="test"></span>
     *     <i></i>
     *     <b></b>
     *     <em>xxx</em>
     *     <span></span>
     * </body>
     * <script>
     *
     *      AX.dom.domUtils.clearEmptySibling( document.getElementById( "test" ) );
     *
     *      //output: <div></div><span id="test"></span><em>xxx</em><span></span>
     *      console.log( document.body.innerHTML );
     *
     * </script>
     * ```
     */

    /**
     * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，
     * 则忽略对右边兄弟节点的操作。
     * @method clearEmptySibling
     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
     * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作
     * 则这些兄弟节点将被删除
     * @see AX.dom.domUtils.clearEmptySibling(Node)
     */

    /**
     * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，
     * 则忽略对右边兄弟节点的操作， 如果ignorePre的值为true，则忽略对左边兄弟节点的操作。
     * @method clearEmptySibling
     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
     * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作
     * @param { Boolean } ignorePre 是否忽略忽略对左边的兄弟节点的操作
     * 则这些兄弟节点将被删除
     * @see AX.dom.domUtils.clearEmptySibling(Node)
     */
    clearEmptySibling: function (node, ignoreNext, ignorePre) {
      function clear(next, dir) {
        var tmpNode;
        while (next && !domUtils.isBookmarkNode(next) && (domUtils.isEmptyInlineElement(next)
          //这里不能把空格算进来会吧空格干掉，出现文字间的空格丢掉了
          || !new RegExp('[^\t\n\r' + domUtils.fillChar + ']').test(next.nodeValue))) {
          tmpNode = next[dir];
          domUtils.remove(next);
          next = tmpNode;
        }
      }

      !ignoreNext && clear(node.nextSibling, 'nextSibling');
      !ignorePre && clear(node.previousSibling, 'previousSibling');
    },
    /**
     * 将一个文本节点textNode拆分成两个文本节点，offset指定拆分位置
     * @method split
     * @param { Node } textNode 需要拆分的文本节点对象
     * @param { int } offset 需要拆分的位置， 位置计算从0开始
     * @return { Node } 拆分后形成的新节点
     * @example
     * ```html
     * <div id="test">abcdef</div>
     * <script>
     *      var newNode = AX.dom.domUtils.split( document.getElementById( "test" ).firstChild, 3 );
     *      //output: def
     *      console.log( newNode.nodeValue );
     * </script>
     * ```
     */
    split: function (node, offset) {
      var doc = node.ownerDocument;
      if (browser.ie && offset == node.nodeValue.length) {
        var next = doc.createTextNode('');
        return domUtils.insertAfter(node, next);
      }
      var retval = node.splitText(offset);
      //ie8下splitText不会跟新childNodes,我们手动触发他的更新
      if (browser.ie8) {
        var tmpNode = doc.createTextNode('');
        domUtils.insertAfter(retval, tmpNode);
        domUtils.remove(tmpNode);
      }
      return retval;
    },

    /**
     * 检测文本节点textNode是否为空节点（包括空格、换行、占位符等字符）
     * @method  isWhitespace
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 检测的节点是否为空
     * @example
     * ```html
     * <div id="test">
     *
     * </div>
     * <script>
     *      //output: true
     *      console.log( AX.dom.domUtils.isWhitespace( document.getElementById("test").firstChild ) );
     * </script>
     * ```
     */
    isWhitespace: function (node) {
      return !new RegExp('[^ \t\n\r' + domUtils.fillChar + ']').test(node.nodeValue);
    },
    /**
     * 获取元素element相对于viewport的位置坐标
     * @method getXY
     * @param { Node } element 需要计算位置的节点对象
     * @return { Object } 返回形如{x:left,y:top}的一个key-value映射对象， 其中键x代表水平偏移距离，
     *                          y代表垂直偏移距离。
     *
     * @example
     * ```javascript
     * var location = AX.dom.domUtils.getXY( document.getElementById("test") );
     * //output: test的坐标为: 12, 24
     * console.log( 'test的坐标为： ', location.x, ',', location.y );
     * ```
     */
    getXY: function (element) {
      var x = 0, y = 0;
      while (element.offsetParent) {
        y += element.offsetTop;
        x += element.offsetLeft;
        element = element.offsetParent;
      }
      return { 'x': x, 'y': y };
    },
    /**
     * 为元素element绑定原生DOM事件，type为事件类型，handler为处理函数
     * @method on
     * @param { Node } element 需要绑定事件的节点对象
     * @param { String } type 绑定的事件类型
     * @param { Function } handler 事件处理器
     * @example
     * ```javascript
     * AX.dom.domUtils.on(document.body,"click",function(e){
     *     //e为事件对象，this为被点击元素对戏那个
     * });
     * ```
     */

    /**
     * 为元素element绑定原生DOM事件，type为事件类型，handler为处理函数
     * @method on
     * @param { Node } element 需要绑定事件的节点对象
     * @param { Array } type 绑定的事件类型数组
     * @param { Function } handler 事件处理器
     * @example
     * ```javascript
     * AX.dom.domUtils.on(document.body,["click","mousedown"],function(evt){
     *     //evt为事件对象，this为被点击元素对象
     * });
     * ```
     */
    on: function (element, type, handler) {

      var types = utils.isArray(type) ? type : utils.trim(type).split(/\s+/),
        k = types.length;
      if (k) {
        while (k--) {
          type = types[k];
          if (element.addEventListener) {
            element.addEventListener(type, handler, false);
          } else {
            if (!handler._d) {
              handler._d = {
                els: []
              };
            }
            var key = type + handler.toString(), index = utils.indexOf(handler._d.els, element);
            if (!handler._d[key] || index == -1) {
              if (index == -1) {
                handler._d.els.push(element);
              }
              if (!handler._d[key]) {
                handler._d[key] = function (evt) {
                  return handler.call(evt.srcElement, evt || window.event);
                };
              }


              element.attachEvent('on' + type, handler._d[key]);
            }
          }
        }
      }
      element = null;
    },
    /**
     * 解除DOM事件绑定
     * @method un
     * @param { Node } element 需要解除事件绑定的节点对象
     * @param { String } type 需要接触绑定的事件类型
     * @param { Function } handler 对应的事件处理器
     * @example
     * ```javascript
     * AX.dom.domUtils.un(document.body,"click",function(evt){
     *     //evt为事件对象，this为被点击元素对象
     * });
     * ```
     */

    /**
     * 解除DOM事件绑定
     * @method un
     * @param { Node } element 需要解除事件绑定的节点对象
     * @param { Array } type 需要接触绑定的事件类型数组
     * @param { Function } handler 对应的事件处理器
     * @example
     * ```javascript
     * AX.dom.domUtils.un(document.body, ["click","mousedown"],function(evt){
     *     //evt为事件对象，this为被点击元素对象
     * });
     * ```
     */
    un: function (element, type, handler) {
      var types = utils.isArray(type) ? type : utils.trim(type).split(/\s+/),
        k = types.length;
      if (k) {
        while (k--) {
          type = types[k];
          if (element.removeEventListener) {
            element.removeEventListener(type, handler, false);
          } else {
            var key = type + handler.toString();
            try {
              element.detachEvent('on' + type, handler._d ? handler._d[key] : handler);
            } catch (e) {
            }
            if (handler._d && handler._d[key]) {
              var index = utils.indexOf(handler._d.els, element);
              if (index != -1) {
                handler._d.els.splice(index, 1);
              }
              handler._d.els.length == 0 && delete handler._d[key];
            }
          }
        }
      }
    },

    /**
     * 比较节点nodeA与节点nodeB是否具有相同的标签名、属性名以及属性值
     * @method  isSameElement
     * @param { Node } nodeA 需要比较的节点
     * @param { Node } nodeB 需要比较的节点
     * @return { Boolean } 两个节点是否具有相同的标签名、属性名以及属性值
     * @example
     * ```html
     * <span style="font-size:12px">ssss</span>
     * <span style="font-size:12px">bbbbb</span>
     * <span style="font-size:13px">ssss</span>
     * <span style="font-size:14px">bbbbb</span>
     *
     * <script>
     *
     *     var nodes = document.getElementsByTagName( "span" );
     *
     *     //output: true
     *     console.log( AX.dom.domUtils.isSameElement( nodes[0], nodes[1] ) );
     *
     *     //output: false
     *     console.log( AX.dom.domUtils.isSameElement( nodes[2], nodes[3] ) );
     *
     * </script>
     * ```
     */
    isSameElement: function (nodeA, nodeB) {
      if (nodeA.tagName != nodeB.tagName) {
        return false;
      }
      var thisAttrs = nodeA.attributes,
        otherAttrs = nodeB.attributes;
      if (!ie && thisAttrs.length != otherAttrs.length) {
        return false;
      }
      var attrA, attrB, al = 0, bl = 0;
      for (var i = 0; attrA = thisAttrs[i++];) {
        if (attrA.nodeName == 'style') {
          if (attrA.specified) {
            al++;
          }
          if (domUtils.isSameStyle(nodeA, nodeB)) {
            continue;
          } else {
            return false;
          }
        }
        if (ie) {
          if (attrA.specified) {
            al++;
            attrB = otherAttrs.getNamedItem(attrA.nodeName);
          } else {
            continue;
          }
        } else {
          attrB = nodeB.attributes[attrA.nodeName];
        }
        if (!attrB.specified || attrA.nodeValue != attrB.nodeValue) {
          return false;
        }
      }
      // 有可能attrB的属性包含了attrA的属性之外还有自己的属性
      if (ie) {
        for (i = 0; attrB = otherAttrs[i++];) {
          if (attrB.specified) {
            bl++;
          }
        }
        if (al != bl) {
          return false;
        }
      }
      return true;
    },

    /**
     * 判断节点nodeA与节点nodeB的元素的style属性是否一致
     * @method isSameStyle
     * @param { Node } nodeA 需要比较的节点
     * @param { Node } nodeB 需要比较的节点
     * @return { Boolean } 两个节点是否具有相同的style属性值
     * @example
     * ```html
     * <span style="font-size:12px">ssss</span>
     * <span style="font-size:12px">bbbbb</span>
     * <span style="font-size:13px">ssss</span>
     * <span style="font-size:14px">bbbbb</span>
     *
     * <script>
     *
     *     var nodes = document.getElementsByTagName( "span" );
     *
     *     //output: true
     *     console.log( AX.dom.domUtils.isSameStyle( nodes[0], nodes[1] ) );
     *
     *     //output: false
     *     console.log( AX.dom.domUtils.isSameStyle( nodes[2], nodes[3] ) );
     *
     * </script>
     * ```
     */
    isSameStyle: function (nodeA, nodeB) {
      var styleA = nodeA.style.cssText.replace(/( ?; ?)/g, ';').replace(/( ?: ?)/g, ':'),
        styleB = nodeB.style.cssText.replace(/( ?; ?)/g, ';').replace(/( ?: ?)/g, ':');
      if (browser.opera) {
        styleA = nodeA.style;
        styleB = nodeB.style;
        if (styleA.length != styleB.length) {
          return false;
        }
        for (var p in styleA) {
          if (/^(\d+|csstext)$/i.test(p)) {
            continue;
          }
          if (styleA[p] != styleB[p]) {
            return false;
          }
        }
        return true;
      }
      if (!styleA || !styleB) {
        return styleA == styleB;
      }
      styleA = styleA.split(';');
      styleB = styleB.split(';');
      if (styleA.length != styleB.length) {
        return false;
      }
      for (var i = 0, ci; ci = styleA[i++];) {
        if (utils.indexOf(styleB, ci) == -1) {
          return false;
        }
      }
      return true;
    },
    /**
     * 检查节点node是否为block元素
     * @method isBlockElm
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 是否是block元素节点
     * @warning 该方法的判断规则如下： 如果该元素原本是block元素， 则不论该元素当前的css样式是什么都会返回true；
     *          否则，检测该元素的css样式， 如果该元素当前是block元素， 则返回true。 其余情况下都返回false。
     * @example
     * ```html
     * <span id="test1" style="display: block"></span>
     * <span id="test2"></span>
     * <div id="test3" style="display: inline"></div>
     *
     * <script>
     *
     *     //output: true
     *     console.log( AX.dom.domUtils.isBlockElm( document.getElementById("test1") ) );
     *
     *     //output: false
     *     console.log( AX.dom.domUtils.isBlockElm( document.getElementById("test2") ) );
     *
     *     //output: true
     *     console.log( AX.dom.domUtils.isBlockElm( document.getElementById("test3") ) );
     *
     * </script>
     * ```
     */
    isBlockElm: function (node) {
      return node && node.nodeType == 1 && (dtd.$block[node.tagName] || styleBlock[domUtils.getComputedStyle(node, 'display')]) && !dtd.$nonChild[node.tagName];
    },
    /**
     * 检测node节点是否为body节点
     * @method isBody
     * @param { Element } node 需要检测的dom元素
     * @return { Boolean } 给定的元素是否是body元素
     * @example
     * ```javascript
     * //output: true
     * console.log( AX.dom.domUtils.isBody( document.body ) );
     * ```
     */
    isBody: function (node) {
      return node && node.nodeType == 1 && node.tagName.toLowerCase() == 'body';
    },
    /**
     * 以node节点为分界，将该节点的指定祖先节点parent拆分成两个独立的节点，
     * 拆分形成的两个节点之间是node节点
     * @method breakParent
     * @param { Node } node 作为分界的节点对象
     * @param { Node } parent 该节点必须是node节点的祖先节点， 且是block节点。
     * @return { Node } 给定的node分界节点
     * @example
     * ```javascript
     *
     *      var node = document.createElement("span"),
     *          wrapNode = document.createElement( "div" ),
     *          parent = document.createElement("p");
     *
     *      parent.appendChild( node );
     *      wrapNode.appendChild( parent );
     *
     *      //拆分前
     *      //output: <p><span></span></p>
     *      console.log( wrapNode.innerHTML );
     *
     *
     *      AX.dom.domUtils.breakParent( node, parent );
     *      //拆分后
     *      //output: <p></p><span></span><p></p>
     *      console.log( wrapNode.innerHTML );
     *
     * ```
     */
    breakParent: function (node, parent) {
      var tmpNode,
        parentClone = node,
        clone = node,
        leftNodes,
        rightNodes;
      do {
        parentClone = parentClone.parentNode;
        if (leftNodes) {
          tmpNode = parentClone.cloneNode(false);
          tmpNode.appendChild(leftNodes);
          leftNodes = tmpNode;
          tmpNode = parentClone.cloneNode(false);
          tmpNode.appendChild(rightNodes);
          rightNodes = tmpNode;
        } else {
          leftNodes = parentClone.cloneNode(false);
          rightNodes = leftNodes.cloneNode(false);
        }
        while (tmpNode = clone.previousSibling) {
          leftNodes.insertBefore(tmpNode, leftNodes.firstChild);
        }
        while (tmpNode = clone.nextSibling) {
          rightNodes.appendChild(tmpNode);
        }
        clone = parentClone;
      } while (parent !== parentClone);
      tmpNode = parent.parentNode;
      tmpNode.insertBefore(leftNodes, parent);
      tmpNode.insertBefore(rightNodes, parent);
      // 组合元素 使用 breakParent 方法时，会把节点分成两个id 一样的span  <span id="123456" class='_textnode_'></span> 需要区分一下 yang
      // 1.leftNodes 和 rightNodes 有自由文本的 _textnode_ 的标识
      // 2.leftNodes 的 id 跟 rightNodes的id 是一样的
      if (leftNodes.id === rightNodes.id && AX.dom.domUtils.hasClass(leftNodes, '_textnode_') && AX.dom.domUtils.hasClass(rightNodes, '_textnode_')) {
        rightNodes.id = +new Date();
      }
      tmpNode.insertBefore(node, rightNodes);
      domUtils.remove(parent);
      return node;
    },
    /**
     * 检查节点node是否是空inline节点
     * @method  isEmptyInlineElement
     * @param { Node } node 需要检测的节点对象
     * @return { Number }  如果给定的节点是空的inline节点， 则返回1, 否则返回0。
     * @example
     * ```html
     * <b><i></i></b> => 1
     * <b><i></i><u></u></b> => 1
     * <b></b> => 1
     * <b>xx<i></i></b> => 0
     * ```
     */
    isEmptyInlineElement: function (node) {
      if (node.nodeType != 1 || !dtd.$removeEmpty[node.tagName]) {
        return 0;
      }
      node = node.firstChild;
      while (node) {
        //如果是创建的bookmark就跳过
        if (domUtils.isBookmarkNode(node)) {
          return 0;
        }
        if (node.nodeType == 1 && !domUtils.isEmptyInlineElement(node) ||
          node.nodeType == 3 && !domUtils.isWhitespace(node)
        ) {
          return 0;
        }
        node = node.nextSibling;
      }
      return 1;

    },

    /**
     * 删除node节点下首尾两端的空白文本子节点
     * @method trimWhiteTextNode
     * @param { Element } node 需要执行删除操作的元素对象
     * @example
     * ```javascript
     *      var node = document.createElement("div");
     *
     *      node.appendChild( document.createTextNode( "" ) );
     *
     *      node.appendChild( document.createElement("div") );
     *
     *      node.appendChild( document.createTextNode( "" ) );
     *
     *      //3
     *      console.log( node.childNodes.length );
     *
     *      AX.dom.domUtils.trimWhiteTextNode( node );
     *
     *      //1
     *      console.log( node.childNodes.length );
     * ```
     */
    trimWhiteTextNode: function (node) {
      function remove(dir) {
        var child;
        while ((child = node[dir]) && child.nodeType == 3 && domUtils.isWhitespace(child)) {
          node.removeChild(child);
        }
      }

      remove('firstChild');
      remove('lastChild');
    },

    /**
     * 合并node节点下相同的子节点
     * @name mergeChild
     * @desc
     * AX.dom.domUtils.mergeChild(node,tagName) //tagName要合并的子节点的标签
     * @example
     * <p><span style="font-size:12px;">xx<span style="font-size:12px;">aa</span>xx</span></p>
     * ==> AX.dom.domUtils.mergeChild(node,'span')
     * <p><span style="font-size:12px;">xxaaxx</span></p>
     */
    mergeChild: function (node, tagName, attrs) {
      var list = domUtils.getElementsByTagName(node, node.tagName.toLowerCase());
      for (var i = 0, ci; ci = list[i++];) {
        if (!ci.parentNode || domUtils.isBookmarkNode(ci)) {
          continue;
        }
        //span单独处理
        if (ci.tagName.toLowerCase() == 'span') {
          if (node === ci.parentNode) {
            domUtils.trimWhiteTextNode(node);
            if (node.childNodes.length == 1) {
              node.style.cssText = ci.style.cssText + ";" + node.style.cssText;
              domUtils.remove(ci, true);
              continue;
              // ctrl-value 不需要增加样式 在更改样式时 需要在ctrl-field 元素上处理  yang
            } else if (domUtils.hasClass(ci, 'ctrl-field')) {
              ci.style.cssText = ci.style.cssText + ";" + node.style.cssText;
              continue;
            }
          }
          // ctrl-value 不需要增加样式  只有父元素增加样式处理  yang
          if (!domUtils.hasClass(ci, 'ctrl-value')) {
            // ci.style.cssText = node.style.cssText + ';' + ci.style.cssText;
          }
          if (attrs) {
            var style = attrs.style;
            if (style) {
              style = style.split(';');
              for (var j = 0, s; s = style[j++];) {
                ci.style[utils.cssStyleToDomStyle(s.split(':')[0])] = s.split(':')[1];
              }
            }
          }
          if (domUtils.isSameStyle(ci, node)) {
            domUtils.remove(ci, true);
          }
          continue;
        }
        if (domUtils.isSameElement(node, ci)) {
          domUtils.remove(ci, true);
        }
      }
    },

    /**
     * 原生方法getElementsByTagName的封装
     * @method getElementsByTagName
     * @param { Node } node 目标节点对象
     * @param { String } tagName 需要查找的节点的tagName， 多个tagName以空格分割
     * @return { Array } 符合条件的节点集合
     */
    getElementsByTagName: function (node, name, filter) {
      if (!node) {
        return [];
      }
      if (filter && utils.isString(filter)) {
        var className = filter;
        filter = function (node) {
          return domUtils.hasClass(node, className)
        }
      }
      name = utils.trim(name).replace(/[ ]{2,}/g, ' ').split(' ');
      var arr = [];
      for (var n = 0, ni; ni = name[n++];) {
        var list = node.getElementsByTagName(ni);
        for (var i = 0, ci; ci = list[i++];) {
          if (!filter || filter(ci)) {
            arr.push(ci);
          }
        }
      }

      return arr;
    },
    /**
     * 将节点node提取到父节点上
     * @method mergeToParent
     * @param { Element } node 需要提取的元素对象
     * @example
     * ```html
     * <div id="parent">
     *     <div id="sub">
     *         <span id="child"></span>
     *     </div>
     * </div>
     *
     * <script>
     *
     *     var child = document.getElementById( "child" );
     *
     *     //output: sub
     *     console.log( child.parentNode.id );
     *
     *     AX.dom.domUtils.mergeToParent( child );
     *
     *     //output: parent
     *     console.log( child.parentNode.id );
     *
     * </script>
     * ```
     */
    mergeToParent: function (node) {
      var parent = node.parentNode;
      while (parent && dtd.$removeEmpty[parent.tagName]) {
        if (parent.tagName == node.tagName || parent.tagName == 'A') {//针对a标签单独处理
          domUtils.trimWhiteTextNode(parent);
          //span需要特殊处理  不处理这样的情况 <span stlye="color:#fff">xxx<span style="color:#ccc">xxx</span>xxx</span>
          if (parent.tagName == 'SPAN' && !domUtils.isSameStyle(parent, node)
            || parent.tagName == 'A' && node.tagName == 'SPAN') {
            if (parent.childNodes.length > 1 || parent !== node.parentNode) {
              node.style.cssText = parent.style.cssText + ";" + node.style.cssText;
              parent = parent.parentNode;
              continue;
            } else {
              parent.style.cssText += ";" + node.style.cssText;
              //trace:952 a标签要保持下划线
              if (parent.tagName == 'A') {
                parent.style.textDecoration = 'underline';
              }
            }
          }
          if (parent.tagName != 'A') {
            parent === node.parentNode && domUtils.remove(node, true);
            break;
          }
        }
        parent = parent.parentNode;
      }
    },
    /**
     * 合并节点node的左右兄弟节点
     * @method mergeSibling
     * @param { Element } node 需要合并的目标节点
     * @example
     * ```html
     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
     *
     * <script>
     *     var demoNode = document.getElementById("test");
     *     AX.dom.domUtils.mergeSibling( demoNode );
     *     //output: xxxxoooxxxx
     *     console.log( demoNode.innerHTML );
     * </script>
     * ```
     */

    /**
     * 合并节点node的左右兄弟节点， 可以根据给定的条件选择是否忽略合并左节点。
     * @method mergeSibling
     * @param { Element } node 需要合并的目标节点
     * @param { Boolean } ignorePre 是否忽略合并左节点
     * @example
     * ```html
     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
     *
     * <script>
     *     var demoNode = document.getElementById("test");
     *     AX.dom.domUtils.mergeSibling( demoNode, true );
     *     //output: oooxxxx
     *     console.log( demoNode.innerHTML );
     * </script>
     * ```
     */

    /**
     * 合并节点node的左右兄弟节点，可以根据给定的条件选择是否忽略合并左右节点。
     * @method mergeSibling
     * @param { Element } node 需要合并的目标节点
     * @param { Boolean } ignorePre 是否忽略合并左节点
     * @param { Boolean } ignoreNext 是否忽略合并右节点
     * @remind 如果同时忽略左右节点， 则该操作什么也不会做
     * @example
     * ```html
     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
     *
     * <script>
     *     var demoNode = document.getElementById("test");
     *     AX.dom.domUtils.mergeSibling( demoNode, false, true );
     *     //output: xxxxooo
     *     console.log( demoNode.innerHTML );
     * </script>
     * ```
     */
    mergeSibling: function (node, ignorePre, ignoreNext) {
      function merge(rtl, start, node) {
        var next;
        if ((next = node[rtl]) && !domUtils.isBookmarkNode(next) && next.nodeType == 1 && domUtils.isSameElement(node, next)) {
          while (next.firstChild) {
            if (start == 'firstChild') {
              node.insertBefore(next.lastChild, node.firstChild);
            } else {
              node.appendChild(next.firstChild);
            }
          }
          domUtils.remove(next);
        }
      }

      !ignorePre && merge('previousSibling', 'firstChild', node);
      !ignoreNext && merge('nextSibling', 'lastChild', node);
    },

    /**
     * 设置节点node及其子节点不会被选中
     * @method unSelectable
     * @param { Element } node 需要执行操作的dom元素
     * @remind 执行该操作后的节点， 将不能被鼠标选中
     * @example
     * ```javascript
     * AX.dom.domUtils.unSelectable( document.body );
     * ```
     */
    unSelectable: ie && browser.ie9below || browser.opera ? function (node) {
      //for ie9
      node.onselectstart = function () {
        return false;
      };
      node.onclick = node.onkeyup = node.onkeydown = function () {
        return false;
      };
      node.unselectable = 'on';
      node.setAttribute("unselectable", "on");
      for (var i = 0, ci; ci = node.all[i++];) {
        switch (ci.tagName.toLowerCase()) {
          case 'iframe':
          case 'textarea':
          case 'input':
          case 'select':
            break;
          default:
            ci.unselectable = 'on';
            node.setAttribute("unselectable", "on");
        }
      }
    } : function (node) {
      node.style.MozUserSelect =
        node.style.webkitUserSelect =
        node.style.msUserSelect =
        node.style.KhtmlUserSelect = 'none';
    },
    /**
     * 删除节点node上的指定属性名称的属性
     * @method  removeAttributes
     * @param { Node } node 需要删除属性的节点对象
     * @param { String } attrNames 可以是空格隔开的多个属性名称，该操作将会依次删除相应的属性
     * @example
     * ```html
     * <div id="wrap">
     *      <span style="font-size:14px;" id="test" name="followMe">xxxxx</span>
     * </div>
     *
     * <script>
     *
     *     AX.dom.domUtils.removeAttributes( document.getElementById( "test" ), "id name" );
     *
     *     //output: <span style="font-size:14px;">xxxxx</span>
     *     console.log( document.getElementById("wrap").innerHTML );
     *
     * </script>
     * ```
     */

    /**
     * 删除节点node上的指定属性名称的属性
     * @method  removeAttributes
     * @param { Node } node 需要删除属性的节点对象
     * @param { Array } attrNames 需要删除的属性名数组
     * @example
     * ```html
     * <div id="wrap">
     *      <span style="font-size:14px;" id="test" name="followMe">xxxxx</span>
     * </div>
     *
     * <script>
     *
     *     AX.dom.domUtils.removeAttributes( document.getElementById( "test" ), ["id", "name"] );
     *
     *     //output: <span style="font-size:14px;">xxxxx</span>
     *     console.log( document.getElementById("wrap").innerHTML );
     *
     * </script>
     * ```
     */
    removeAttributes: function (node, attrNames) {
      attrNames = utils.isArray(attrNames) ? attrNames : utils.trim(attrNames).replace(/[ ]{2,}/g, ' ').split(' ');
      for (var i = 0, ci; ci = attrNames[i++];) {
        ci = attrFix[ci] || ci;
        switch (ci) {
          case 'className':
            node[ci] = '';
            break;
          case 'style':
            node.style.cssText = '';
            var val = node.getAttributeNode('style');
            !browser.ie && val && node.removeAttributeNode(val);
        }
        node.removeAttribute(ci);
      }
    },
    /**
     * 在doc下创建一个标签名为tag，属性为attrs的元素
     * @method createElement
     * @param { DomDocument } doc 新创建的元素属于该document节点创建
     * @param { String } tagName 需要创建的元素的标签名
     * @param { Object } attrs 新创建的元素的属性key-value集合
     * @return { Element } 新创建的元素对象
     * @example
     * ```javascript
     * var ele = AX.dom.domUtils.createElement( document, 'div', {
     *     id: 'test'
     * } );
     *
     * //output: DIV
     * console.log( ele.tagName );
     *
     * //output: test
     * console.log( ele.id );
     *
     * ```
     */
    createElement: function (doc, tag, attrs) {
      return domUtils.setAttributes(doc.createElement(tag), attrs)
    },
    /**
     * 为节点node添加属性attrs，attrs为属性键值对
     * @method setAttributes
     * @param { Element } node 需要设置属性的元素对象
     * @param { Object } attrs 需要设置的属性名-值对
     * @return { Element } 设置属性的元素对象
     * @example
     * ```html
     * <span id="test"></span>
     *
     * <script>
     *
     *     var testNode = AX.dom.domUtils.setAttributes( document.getElementById( "test" ), {
     *         id: 'demo'
     *     } );
     *
     *     //output: demo
     *     console.log( testNode.id );
     *
     * </script>
     *
     */
    setAttributes: function (node, attrs) {
      for (var attr in attrs) {
        if (attrs.hasOwnProperty(attr)) {
          var value = attrs[attr];
          switch (attr) {
            case 'class':
              //ie下要这样赋值，setAttribute不起作用
              node.className = value;
              break;
            case 'style':
              node.style.cssText = node.style.cssText + ";" + value;
              break;
            case 'innerHTML':
              node[attr] = value;
              break;
            case 'value':
              node.value = value;
              break;
            default:
              node.setAttribute(attrFix[attr] || attr, value);
          }
        }
      }
      return node;
    },

    /**
     * 获取元素element经过计算后的样式值
     * @method getComputedStyle
     * @param { Element } element 需要获取样式的元素对象
     * @param { String } styleName 需要获取的样式名
     * @return { String } 获取到的样式值
     * @example
     * ```html
     * <style type="text/css">
     *      #test {
     *          font-size: 15px;
     *      }
     * </style>
     *
     * <span id="test"></span>
     *
     * <script>
     *     //output: 15px
     *     console.log( AX.dom.domUtils.getComputedStyle( document.getElementById( "test" ), 'font-size' ) );
     * </script>
     * ```
     */
    getComputedStyle: function (element, styleName) {
      //一下的属性单独处理
      var pros = 'width height top left';

      if (pros.indexOf(styleName) > -1) {
        return element['offset' + styleName.replace(/^\w/, function (s) {
          return s.toUpperCase()
        })] + 'px';
      }
      //忽略文本节点
      if (element.nodeType == 3) {
        element = element.parentNode;
      }
      //ie下font-size若body下定义了font-size，则从currentStyle里会取到这个font-size. 取不到实际值，故此修改.
      if (browser.ie && browser.version < 9 && styleName == 'font-size' && !element.style.fontSize &&
        !dtd.$empty[element.tagName] && !dtd.$nonChild[element.tagName]) {
        var span = element.ownerDocument.createElement('span');
        span.style.cssText = 'padding:0;border:0;font-family:simsun;';
        span.innerHTML = '.';
        element.appendChild(span);
        var result = span.offsetHeight;
        element.removeChild(span);
        span = null;
        return result + 'px';
      }
      try {
        var value = domUtils.getStyle(element, styleName) ||
          (window.getComputedStyle ? domUtils.getWindow(element).getComputedStyle(element, '').getPropertyValue(styleName) :
            (element.currentStyle || element.style)[utils.cssStyleToDomStyle(styleName)]);

      } catch (e) {
        return "";
      }
      return utils.transUnitToPx(utils.fixColor(styleName, value));
    },
    /**
     * 删除元素element指定的className
     * @method removeClasses
     * @param { Element } ele 需要删除class的元素节点
     * @param { String } classNames 需要删除的className， 多个className之间以空格分开
     * @example
     * ```html
     * <span id="test" class="test1 test2 test3">xxx</span>
     *
     * <script>
     *
     *     var testNode = document.getElementById( "test" );
     *     AX.dom.domUtils.removeClasses( testNode, "test1 test2" );
     *
     *     //output: test3
     *     console.log( testNode.className );
     *
     * </script>
     * ```
     */

    /**
     * 删除元素element指定的className
     * @method removeClasses
     * @param { Element } ele 需要删除class的元素节点
     * @param { Array } classNames 需要删除的className数组
     * @example
     * ```html
     * <span id="test" class="test1 test2 test3">xxx</span>
     *
     * <script>
     *
     *     var testNode = document.getElementById( "test" );
     *     AX.dom.domUtils.removeClasses( testNode, ["test1", "test2"] );
     *
     *     //output: test3
     *     console.log( testNode.className );
     *
     * </script>
     * ```
     */
    removeClasses: function (elm, classNames) {
      classNames = utils.isArray(classNames) ? classNames :
        utils.trim(classNames).replace(/[ ]{2,}/g, ' ').split(' ');
      for (var i = 0, ci, cls = elm.className; ci = classNames[i++];) {
        cls = cls.replace(new RegExp('\\b' + ci + '\\b'), '')
      }
      cls = utils.trim(cls).replace(/[ ]{2,}/g, ' ');
      if (cls) {
        elm.className = cls;
      } else {
        domUtils.removeAttributes(elm, ['class']);
      }
    },
    /**
     * 给元素element添加className
     * @method addClass
     * @param { Node } ele 需要增加className的元素
     * @param { String } classNames 需要添加的className， 多个className之间以空格分割
     * @remind 相同的类名不会被重复添加
     * @example
     * ```html
     * <span id="test" class="cls1 cls2"></span>
     *
     * <script>
     *     var testNode = document.getElementById("test");
     *
     *     AX.dom.domUtils.addClass( testNode, "cls2 cls3 cls4" );
     *
     *     //output: cl1 cls2 cls3 cls4
     *     console.log( testNode.className );
     *
     * <script>
     * ```
     */

    /**
     * 给元素element添加className
     * @method addClass
     * @param { Node } ele 需要增加className的元素
     * @param { Array } classNames 需要添加的className的数组
     * @remind 相同的类名不会被重复添加
     * @example
     * ```html
     * <span id="test" class="cls1 cls2"></span>
     *
     * <script>
     *     var testNode = document.getElementById("test");
     *
     *     AX.dom.domUtils.addClass( testNode, ["cls2", "cls3", "cls4"] );
     *
     *     //output: cl1 cls2 cls3 cls4
     *     console.log( testNode.className );
     *
     * <script>
     * ```
     */
    addClass: function (elm, classNames) {
      if (!elm) {
        return;
      }
      classNames = utils.trim(classNames).replace(/[ ]{2,}/g, ' ').split(' ');
      for (var i = 0, ci, cls = elm.className; ci = classNames[i++];) {
        if (!new RegExp('\\b' + ci + '\\b').test(cls)) {
          cls += ' ' + ci;
        }
      }
      elm.className = utils.trim(cls);
    },
    /**
     * 判断元素element是否包含给定的样式类名className
     * @method hasClass
     * @param { Node } ele 需要检测的元素
     * @param { String } classNames 需要检测的className， 多个className之间用空格分割
     * @return { Boolean } 元素是否包含所有给定的className
     * @example
     * ```html
     * <span id="test1" class="cls1 cls2"></span>
     *
     * <script>
     *     var test1 = document.getElementById("test1");
     *
     *     //output: false
     *     console.log( AX.dom.domUtils.hasClass( test1, "cls2 cls1 cls3" ) );
     *
     *     //output: true
     *     console.log( AX.dom.domUtils.hasClass( test1, "cls2 cls1" ) );
     * </script>
     * ```
     */

    /**
     * 判断元素element是否包含给定的样式类名className
     * @method hasClass
     * @param { Node } ele 需要检测的元素
     * @param { Array } classNames 需要检测的className数组
     * @return { Boolean } 元素是否包含所有给定的className
     * @example
     * ```html
     * <span id="test1" class="cls1 cls2"></span>
     *
     * <script>
     *     var test1 = document.getElementById("test1");
     *
     *     //output: false
     *     console.log( AX.dom.domUtils.hasClass( test1, [ "cls2", "cls1", "cls3" ] ) );
     *
     *     //output: true
     *     console.log( AX.dom.domUtils.hasClass( test1, [ "cls2", "cls1" ]) );
     * </script>
     * ```
     */
    hasClass: function (element, className) {
      if (!element) {
        return;
      }
      if (utils.isRegExp(className)) {
        return className.test(element.className)
      }
      className = utils.trim(className).replace(/[ ]{2,}/g, ' ').split(' ');
      for (var i = 0, ci, cls = element.className; ci = className[i++];) {
        if (!new RegExp('\\b' + ci + '\\b', 'i').test(cls)) {
          return false;
        }
      }
      return i - 1 == className.length;
    },

    /**
     * 阻止事件默认行为
     * @method preventDefault
     * @param { Event } evt 需要阻止默认行为的事件对象
     * @example
     * ```javascript
     * AX.dom.domUtils.preventDefault( evt );
     * ```
     */
    preventDefault: function (evt) {
      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
    },
    /**
     * 删除元素element指定的样式
     * @method removeStyle
     * @param { Element } element 需要删除样式的元素
     * @param { String } styleName 需要删除的样式名
     * @example
     * ```html
     * <span id="test" style="color: red; background: blue;"></span>
     *
     * <script>
     *
     *     var testNode = document.getElementById("test");
     *
     *     AX.dom.domUtils.removeStyle( testNode, 'color' );
     *
     *     //output: background: blue;
     *     console.log( testNode.style.cssText );
     *
     * </script>
     * ```
     */
    removeStyle: function (element, name) {
      if (browser.ie) {
        //针对color先单独处理一下
        if (name == 'color') {
          name = '(^|;)' + name;
        }
        element.style.cssText = element.style.cssText.replace(new RegExp(name + '[^:]*:[^;]+;?', 'ig'), '')
      } else {
        if (element.style.removeProperty) {
          element.style.removeProperty(name);
        } else {
          element.style.removeAttribute(utils.cssStyleToDomStyle(name));
        }
      }


      if (!element.style.cssText) {
        domUtils.removeAttributes(element, ['style']);
      }
    },
    /**
     * 获取元素element的style属性的指定值
     * @method getStyle
     * @param { Element } element 需要获取属性值的元素
     * @param { String } styleName 需要获取的style的名称
     * @warning 该方法仅获取元素style属性中所标明的值
     * @return { String } 该元素包含指定的style属性值
     * @example
     * ```html
     * <div id="test" style="color: red;"></div>
     *
     * <script>
     *
     *      var testNode = document.getElementById( "test" );
     *
     *      //output: red
     *      console.log( AX.dom.domUtils.getStyle( testNode, "color" ) );
     *
     *      //output: ""
     *      console.log( AX.dom.domUtils.getStyle( testNode, "background" ) );
     *
     * </script>
     * ```
     */
    getStyle: function (element, name) {
      var value = element.style[utils.cssStyleToDomStyle(name)];
      return utils.fixColor(name, value);
    },
    /**
     * 为元素element设置样式属性值
     * @method setStyle
     * @param { Element } element 需要设置样式的元素
     * @param { String } styleName 样式名
     * @param { String } styleValue 样式值
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *
     *      var testNode = document.getElementById( "test" );
     *
     *      //output: ""
     *      console.log( testNode.style.color );
     *
     *      AX.dom.domUtils.setStyle( testNode, 'color', 'red' );
     *      //output: "red"
     *      console.log( testNode.style.color );
     *
     * </script>
     * ```
     */
    setStyle: function (element, name, value) {
      element.style[utils.cssStyleToDomStyle(name)] = value;
      if (!utils.trim(element.style.cssText)) {
        this.removeAttributes(element, 'style')
      }
    },
    /**
     * 为元素element设置多个样式属性值
     * @method setStyles
     * @param { Element } element 需要设置样式的元素
     * @param { Object } styles 样式名值对
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *
     *      var testNode = document.getElementById( "test" );
     *
     *      //output: ""
     *      console.log( testNode.style.color );
     *
     *      AX.dom.domUtils.setStyles( testNode, {
     *          'color': 'red'
     *      } );
     *      //output: "red"
     *      console.log( testNode.style.color );
     *
     * </script>
     * ```
     */
    setStyles: function (element, styles) {
      for (var name in styles) {
        if (styles.hasOwnProperty(name)) {
          domUtils.setStyle(element, name, styles[name]);
        }
      }
    },
    /**
     * 删除_moz_dirty属性
     * @private
     * @method removeDirtyAttr
     */
    removeDirtyAttr: function (node) {
      for (var i = 0, ci, nodes = node.getElementsByTagName('*'); ci = nodes[i++];) {
        ci.removeAttribute('_moz_dirty');
      }
      node.removeAttribute('_moz_dirty');
    },
    /**
     * 获取子节点的数量
     * @method getChildCount
     * @param { Element } node 需要检测的元素
     * @return { Number } 给定的node元素的子节点数量
     * @example
     * ```html
     * <div id="test">
     *      <span></span>
     * </div>
     *
     * <script>
     *
     *     //output: 3
     *     console.log( AX.dom.domUtils.getChildCount( document.getElementById("test") ) );
     *
     * </script>
     * ```
     */

    /**
     * 根据给定的过滤规则， 获取符合条件的子节点的数量
     * @method getChildCount
     * @param { Element } node 需要检测的元素
     * @param { Function } fn 过滤器， 要求对符合条件的子节点返回true， 反之则要求返回false
     * @return { Number } 符合过滤条件的node元素的子节点数量
     * @example
     * ```html
     * <div id="test">
     *      <span></span>
     * </div>
     *
     * <script>
     *
     *     //output: 1
     *     console.log( AX.dom.domUtils.getChildCount( document.getElementById("test"), function ( node ) {
     *
     *         return node.nodeType === 1;
     *
     *     } ) );
     *
     * </script>
     * ```
     */
    getChildCount: function (node, fn) {
      var count = 0, first = node.firstChild;
      fn = fn || function () {
        return 1;
      };
      while (first) {
        if (fn(first)) {
          count++;
        }
        first = first.nextSibling;
      }
      return count;
    },

    /**
     * 判断给定节点是否为空节点
     * @method isEmptyNode
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 节点是否为空
     * @example
     * ```javascript
     * AX.dom.domUtils.isEmptyNode( document.body );
     * ```
     */
    isEmptyNode: function (node) {
      return !node.firstChild || domUtils.getChildCount(node, function (node) {
        return !domUtils.isBr(node) && !domUtils.isBookmarkNode(node) && !domUtils.isWhitespace(node)
      }) == 0
    },
    clearSelectedArr: function (nodes) {
      var node;
      while (node = nodes.pop()) {
        domUtils.removeAttributes(node, ['class']);
      }
    },
    /**
     * 将显示区域滚动到指定节点的位置
     * @method scrollToView
     * @param    {Node}   node    节点
     * @param    {window}   win      window对象
     * @param    {Number}    offsetTop    距离上方的偏移量
     */
    scrollToView: function (node, win, offsetTop) {
      var getViewPaneSize = function () {
        var doc = win.document,
          mode = doc.compatMode == 'CSS1Compat';
        return {
          width: (mode ? doc.documentElement.clientWidth : doc.body.clientWidth) || 0,
          height: (mode ? doc.documentElement.clientHeight : doc.body.clientHeight) || 0
        };
      },
        getScrollPosition = function (win) {
          if ('pageXOffset' in win) {
            return {
              x: win.pageXOffset || 0,
              y: win.pageYOffset || 0
            };
          }

          var doc = win.document;
          return {
            x: doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
            y: doc.documentElement.scrollTop || doc.body.scrollTop || 0
          };

        };
      var winHeight = getViewPaneSize().height, offset = winHeight * -1 + offsetTop;
      offset += node.offsetHeight || 0;
      var elementPosition = domUtils.getXY(node);
      offset += elementPosition.y;
      var currentScroll = getScrollPosition(win).y;
      // offset += 50;
      if (offset > currentScroll || offset < currentScroll - winHeight) {
        win.scrollTo(0, offset + (offset < 0 ? -20 : 20));
      }
    },
    /**
     * 判断给定节点是否为br
     * @method isBr
     * @param { Node } node 需要判断的节点对象
     * @return { Boolean } 给定的节点是否是br节点
     */
    isBr: function (node) {
      return node.nodeType == 1 && node.tagName == 'BR';
    },
    /**
     * 判断给定的节点是否是一个“填充”节点
     * @private
     * @method isFillChar
     * @param { Node } node 需要判断的节点
     * @param { Boolean } isInStart 是否从节点内容的开始位置匹配
     * @returns { Boolean } 节点是否是填充节点
     */
    isFillChar: function (node, isInStart) {
      if (node.nodeType != 3) {
        return false;
      }
      var text = node.nodeValue;
      if (isInStart) {
        return new RegExp('^' + domUtils.fillChar).test(text)
      }
      return !text.replace(new RegExp(domUtils.fillChar, 'g'), '').length
    },
    isStartInblock: function (range) {
      var tmpRange = range.cloneRange(),
        flag = 0,
        start = tmpRange.startContainer,
        tmp;
      if (start.nodeType == 1 && start.childNodes[tmpRange.startOffset]) {
        start = start.childNodes[tmpRange.startOffset];
        var pre = start.previousSibling;
        while (pre && domUtils.isFillChar(pre)) {
          start = pre;
          pre = pre.previousSibling;
        }
      }
      if (this.isFillChar(start, true) && tmpRange.startOffset == 1) {
        tmpRange.setStartBefore(start);
        start = tmpRange.startContainer;
      }

      while (start && domUtils.isFillChar(start)) {
        tmp = start;
        start = start.previousSibling
      }
      if (tmp) {
        tmpRange.setStartBefore(tmp);
        start = tmpRange.startContainer;
      }
      if (start.nodeType == 1 && domUtils.isEmptyNode(start) && tmpRange.startOffset == 1) {
        tmpRange.setStart(start, 0).collapse(true);
      }
      while (!tmpRange.startOffset && !tmpRange.endOffset) {
        start = tmpRange.startContainer;
        if (domUtils.isBlockElm(start) || domUtils.isBody(start)) {
          flag = 1;
          break;
        }
        var pre = tmpRange.startContainer.previousSibling,
          tmpNode;
        if (!pre) {
          tmpRange.setStartBefore(tmpRange.startContainer);
        } else {
          while (pre && domUtils.isFillChar(pre)) {
            tmpNode = pre;
            pre = pre.previousSibling;
          }
          if (tmpNode) {
            tmpRange.setStartBefore(tmpNode);
          } else {
            tmpRange.setStartBefore(tmpRange.startContainer);
          }
        }
      }
      return flag && !domUtils.isBody(tmpRange.startContainer) ? 1 : 0;
    },

    /**
     * 判断给定的元素是否是一个空元素
     * @method isEmptyBlock
     * @param { Element } node 需要判断的元素
     * @return { Boolean } 是否是空元素
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *     //output: true
     *     console.log( AX.dom.domUtils.isEmptyBlock( document.getElementById("test") ) );
     * </script>
     * ```
     */

    /**
     * 根据指定的判断规则判断给定的元素是否是一个空元素
     * @method isEmptyBlock
     * @param { Element } node 需要判断的元素
     * @param { RegExp } reg 对内容执行判断的正则表达式对象
     * @return { Boolean } 是否是空元素
     */
    isEmptyBlock: function (node, reg) {
      if (!node) {
        return 1;
      }
      if (node.nodeType != 1) {
        return 0;
      }
      reg = reg || new RegExp('[ \xa0\t\r\n' + domUtils.fillChar + ']', 'g');

      if (node[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').length > 0) {
        return 0;
      }
      for (var n in dtd.$isNotEmpty) {
        if (node.getElementsByTagName(n).length) {
          return 0;
        }
      }
      // if (axTools.getByClass("ctrl-bg", node)) {
      //   return 0;
      // }
      return 1;
    },

    /**
     * 移动元素使得该元素的位置移动指定的偏移量的距离
     * @method setViewportOffset
     * @param { Element } element 需要设置偏移量的元素
     * @param { Object } offset 偏移量， 形如{ left: 100, top: 50 }的一个键值对， 表示该元素将在
     *                                  现有的位置上向水平方向偏移offset.left的距离， 在竖直方向上偏移
     *                                  offset.top的距离
     * @example
     * ```html
     * <div id="test" style="top: 100px; left: 50px; position: absolute;"></div>
     *
     * <script>
     *
     *     var testNode = document.getElementById("test");
     *
     *     AX.dom.domUtils.setViewportOffset( testNode, {
     *         left: 200,
     *         top: 50
     *     } );
     *
     *     //output: top: 300px; left: 100px; position: absolute;
     *     console.log( testNode.style.cssText );
     *
     * </script>
     * ```
     */
    setViewportOffset: function (element, offset) {
      var left = parseInt(element.style.left) | 0;
      var top = parseInt(element.style.top) | 0;
      var rect = element.getBoundingClientRect();
      var scaleValue = this.editor.document.getElementById("paperScaleHidden") && this.editor.document.getElementById("paperScaleHidden").value;
          // rect.left = rect.left * (scaleValue || 1);
      var offsetLeft = offset.left * (scaleValue || 1) - rect.left;
      var offsetTop = offset.top * (scaleValue || 1) - rect.top;
      if (offsetLeft) {
        element.style.left = left * (scaleValue || 1) + offsetLeft + 'px';
      }
      if (offsetTop) {
        element.style.top = top * (scaleValue || 1) + offsetTop + 'px';
      }
    },

    /**
     * 用“填充字符”填充节点
     * @method fillNode
     * @private
     * @param { DomDocument } doc 填充的节点所在的docment对象
     * @param { Node } node 需要填充的节点对象
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *     var testNode = document.getElementById("test");
     *
     *     //output: 0
     *     console.log( testNode.childNodes.length );
     *
     *     AX.dom.domUtils.fillNode( document, testNode );
     *
     *     //output: 1
     *     console.log( testNode.childNodes.length );
     *
     * </script>
     * ```
     */
    fillNode: function (doc, node) {
      var tmpNode = browser.ie ? doc.createTextNode(domUtils.fillChar) : doc.createElement('br');
      // node.innerHTML = '';
      if (node.innerHTML.indexOf('<br>') > -1) {
        node.innerHTML = node.innerHTML.replace("<br>", '<br>');
        return;
      }
      node.appendChild(tmpNode);
    },

    /**
     * 把节点src的所有子节点追加到另一个节点tag上去
     * @method moveChild
     * @param { Node } src 源节点， 该节点下的所有子节点将被移除
     * @param { Node } tag 目标节点， 从源节点移除的子节点将被追加到该节点下
     * @example
     * ```html
     * <div id="test1">
     *      <span></span>
     * </div>
     * <div id="test2">
     *     <div></div>
     * </div>
     *
     * <script>
     *
     *     var test1 = document.getElementById("test1"),
     *         test2 = document.getElementById("test2");
     *
     *     AX.dom.domUtils.moveChild( test1, test2 );
     *
     *     //output: ""（空字符串）
     *     console.log( test1.innerHTML );
     *
     *     //output: "<div></div><span></span>"
     *     console.log( test2.innerHTML );
     *
     * </script>
     * ```
     */

    /**
     * 把节点src的所有子节点移动到另一个节点tag上去, 可以通过dir参数控制附加的行为是“追加”还是“插入顶部”
     * @method moveChild
     * @param { Node } src 源节点， 该节点下的所有子节点将被移除
     * @param { Node } tag 目标节点， 从源节点移除的子节点将被附加到该节点下
     * @param { Boolean } dir 附加方式， 如果为true， 则附加进去的节点将被放到目标节点的顶部， 反之，则放到末尾
     * @example
     * ```html
     * <div id="test1">
     *      <span></span>
     * </div>
     * <div id="test2">
     *     <div></div>
     * </div>
     *
     * <script>
     *
     *     var test1 = document.getElementById("test1"),
     *         test2 = document.getElementById("test2");
     *
     *     AX.dom.domUtils.moveChild( test1, test2, true );
     *
     *     //output: ""（空字符串）
     *     console.log( test1.innerHTML );
     *
     *     //output: "<span></span><div></div>"
     *     console.log( test2.innerHTML );
     *
     * </script>
     * ```
     */
    moveChild: function (src, tag, dir) {
      while (src.firstChild) {
        if (dir && tag.firstChild) {
          tag.insertBefore(src.lastChild, tag.firstChild);
        } else {
          tag.appendChild(src.firstChild);
        }
      }
    },

    /**
     * 判断节点的标签上是否不存在任何属性
     * @method hasNoAttributes
     * @private
     * @param { Node } node 需要检测的节点对象
     * @return { Boolean } 节点是否不包含任何属性
     * @example
     * ```html
     * <div id="test"><span>xxxx</span></div>
     *
     * <script>
     *
     *     //output: false
     *     console.log( AX.dom.domUtils.hasNoAttributes( document.getElementById("test") ) );
     *
     *     //output: true
     *     console.log( AX.dom.domUtils.hasNoAttributes( document.getElementById("test").firstChild ) );
     *
     * </script>
     * ```
     */
    hasNoAttributes: function (node) {
      return browser.ie ? /^<\w+\s*?>/.test(node.outerHTML) : node.attributes.length == 0;
    },

    /**
     * 检测节点是否是UEditor所使用的辅助节点
     * @method isCustomeNode
     * @private
     * @param { Node } node 需要检测的节点
     * @remind 辅助节点是指编辑器要完成工作临时添加的节点， 在输出的时候将会从编辑器内移除， 不会影响最终的结果。
     * @return { Boolean } 给定的节点是否是一个辅助节点
     */
    isCustomeNode: function (node) {
      return node.nodeType == 1 && node.getAttribute('_ue_custom_node_');
    },

    /**
     * 检测节点的标签是否是给定的标签
     * @method isTagNode
     * @param { Node } node 需要检测的节点对象
     * @param { String } tagName 标签
     * @return { Boolean } 节点的标签是否是给定的标签
     * @example
     * ```html
     * <div id="test"></div>
     *
     * <script>
     *
     *     //output: true
     *     console.log( AX.dom.domUtils.isTagNode( document.getElementById("test"), "div" ) );
     *
     * </script>
     * ```
     */
    isTagNode: function (node, tagNames) {
      return node.nodeType == 1 && new RegExp('\\b' + node.tagName + '\\b', 'i').test(tagNames)
    },

    /**
     * 给定一个节点数组，在通过指定的过滤器过滤后， 获取其中满足过滤条件的第一个节点
     * @method filterNodeList
     * @param { Array } nodeList 需要过滤的节点数组
     * @param { Function } fn 过滤器， 对符合条件的节点， 执行结果返回true， 反之则返回false
     * @return { Node | NULL } 如果找到符合过滤条件的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var divNodes = document.getElementsByTagName("div");
     * divNodes = [].slice.call( divNodes, 0 );
     *
     * //output: null
     * console.log( AX.dom.domUtils.filterNodeList( divNodes, function ( node ) {
     *     return node.tagName.toLowerCase() !== 'div';
     * } ) );
     * ```
     */

    /**
     * 给定一个节点数组nodeList和一组标签名tagNames， 获取其中能够匹配标签名的节点集合中的第一个节点
     * @method filterNodeList
     * @param { Array } nodeList 需要过滤的节点数组
     * @param { String } tagNames 需要匹配的标签名， 多个标签名之间用空格分割
     * @return { Node | NULL } 如果找到标签名匹配的节点， 则返回该节点， 否则返回NULL
     * @example
     * ```javascript
     * var divNodes = document.getElementsByTagName("div");
     * divNodes = [].slice.call( divNodes, 0 );
     *
     * //output: null
     * console.log( AX.dom.domUtils.filterNodeList( divNodes, 'a span' ) );
     * ```
     */

    /**
     * 给定一个节点数组，在通过指定的过滤器过滤后， 如果参数forAll为true， 则会返回所有满足过滤
     * 条件的节点集合， 否则， 返回满足条件的节点集合中的第一个节点
     * @method filterNodeList
     * @param { Array } nodeList 需要过滤的节点数组
     * @param { Function } fn 过滤器， 对符合条件的节点， 执行结果返回true， 反之则返回false
     * @param { Boolean } forAll 是否返回整个节点数组, 如果该参数为false， 则返回节点集合中的第一个节点
     * @return { Array | Node | NULL } 如果找到符合过滤条件的节点， 则根据参数forAll的值决定返回满足
     *                                      过滤条件的节点数组或第一个节点， 否则返回NULL
     * @example
     * ```javascript
     * var divNodes = document.getElementsByTagName("div");
     * divNodes = [].slice.call( divNodes, 0 );
     *
     * //output: 3（假定有3个div）
     * console.log( divNodes.length );
     *
     * var nodes = AX.dom.domUtils.filterNodeList( divNodes, function ( node ) {
     *     return node.tagName.toLowerCase() === 'div';
     * }, true );
     *
     * //output: 3
     * console.log( nodes.length );
     *
     * var node = AX.dom.domUtils.filterNodeList( divNodes, function ( node ) {
     *     return node.tagName.toLowerCase() === 'div';
     * }, false );
     *
     * //output: div
     * console.log( node.nodeName );
     * ```
     */
    filterNodeList: function (nodelist, filter, forAll) {
      var results = [];
      if (!utils.isFunction(filter)) {
        var str = filter;
        filter = function (n) {
          return utils.indexOf(utils.isArray(str) ? str : str.split(' '), n.tagName && n.tagName.toLowerCase()) != -1
        };
      }
      utils.each(nodelist, function (n) {
        filter(n) && results.push(n)
      });
      return results.length == 0 ? null : results.length == 1 || !forAll ? results[0] : results
    },

    /**
     * 查询给定的range选区是否在给定的node节点内，且在该节点的最末尾
     * @method isInNodeEndBoundary
     * @param { AX.dom.Range } rng 需要判断的range对象， 该对象的startContainer不能为NULL
     * @param node 需要检测的节点对象
     * @return { Number } 如果给定的选取range对象是在node内部的最末端， 则返回1, 否则返回0
     */
    isInNodeEndBoundary: function (rng, node) {
      var start = rng.startContainer;
      if (start.nodeType == 3 && rng.startOffset != start.nodeValue.length) {
        return 0;
      }
      if (start.nodeType == 1 && rng.startOffset != start.childNodes.length) {
        return 0;
      }
      while (start !== node) {
        if (start.nextSibling) {
          return 0
        }
        ;
        start = start.parentNode;
      }
      return 1;
    },
    isBoundaryNode: function (node, dir) {
      var tmp;
      while (!domUtils.isBody(node)) {
        tmp = node;
        node = node.parentNode;
        if (tmp !== node[dir]) {
          return false;
        }
      }
      return true;
    },
    fillHtml: browser.ie11below ? '&nbsp;' : '<br/>'
  };
  var fillCharReg = new RegExp(domUtils.fillChar, 'g');

  // core/Range.js
  /**
   * Range封装
   * @file
   * @module AX.dom
   * @class Range
   * @since 1.2.6.1
   */

  /**
   * dom操作封装
   * @unfile
   * @module AX.dom
   */

  /**
   * Range实现类，本类是UEditor底层核心类，封装不同浏览器之间的Range操作。
   * @unfile
   * @module AX.dom
   * @class Range
   */


  (function () {
    var guid = 0,
      fillChar = domUtils.fillChar,
      fillData;

    /**
     * 更新range的collapse状态
     * @param  {Range}   range    range对象
     */
    function updateCollapse(range) {
      range.collapsed =
        range.startContainer && range.endContainer &&
        range.startContainer === range.endContainer &&
        range.startOffset == range.endOffset;
    }

    function selectOneNode(rng) {
      return !rng.collapsed && rng.startContainer.nodeType == 1 && rng.startContainer === rng.endContainer && rng.endOffset - rng.startOffset == 1
    }

    function setEndPoint(toStart, node, offset, range) {
      //如果node是自闭合标签要处理
      if (node && node.nodeType == 1 && (dtd.$empty[node.tagName] || dtd.$nonChild[node.tagName])) {
        offset = domUtils.getNodeIndex(node) + (toStart ? 0 : 1);
        node = node.parentNode;
      }
      if (toStart) {
        range.startContainer = node;
        range.startOffset = offset;
        if (!range.endContainer) {
          range.collapse(true);
        }
      } else {
        range.endContainer = node;
        range.endOffset = offset;
        if (!range.startContainer) {
          range.collapse(false);
        }
      }
      updateCollapse(range);
      return range;
    }

    function execContentsAction(range, action) {
      //调整边界
      //range.includeBookmark();
      var start = range.startContainer,
        end = range.endContainer,
        startOffset = range.startOffset,
        endOffset = range.endOffset,
        doc = range.document,
        frag = doc.createDocumentFragment(),
        tmpStart, tmpEnd;
      if (start.nodeType == 1) {
        start = start.childNodes[startOffset] || (tmpStart = start.appendChild(doc.createTextNode('')));
      }
      if (end.nodeType == 1) {
        end = end.childNodes[endOffset] || (tmpEnd = end.appendChild(doc.createTextNode('')));
      }
      if (start === end && start.nodeType == 3) {
        frag.appendChild(doc.createTextNode(start.substringData(startOffset, endOffset - startOffset)));
        //is not clone
        if (action) {
          start.deleteData(startOffset, endOffset - startOffset);
          range.collapse(true);
        }
        return frag;
      }
      var current, currentLevel, clone = frag,
        startParents = domUtils.findParents(start, true), endParents = domUtils.findParents(end, true);
      for (var i = 0; startParents[i] == endParents[i];) {
        i++;
      }
      for (var j = i, si; si = startParents[j]; j++) {
        current = si.nextSibling;
        if (si == start) {
          if (!tmpStart) {
            if (range.startContainer.nodeType == 3) {
              clone.appendChild(doc.createTextNode(start.nodeValue.slice(startOffset)));
              //is not clone
              if (action) {
                start.deleteData(startOffset, start.nodeValue.length - startOffset);
              }
            } else {
              clone.appendChild(!action ? start.cloneNode(true) : start);
            }
          }
        } else {
          currentLevel = si.cloneNode(false);
          clone.appendChild(currentLevel);
        }
        while (current) {
          if (current === end || current === endParents[j]) {
            break;
          }
          si = current.nextSibling;
          clone.appendChild(!action ? current.cloneNode(true) : current);
          current = si;
        }
        clone = currentLevel;
      }
      clone = frag;
      if (!startParents[i]) {
        clone.appendChild(startParents[i - 1].cloneNode(false));
        clone = clone.firstChild;
      }
      for (var j = i, ei; ei = endParents[j]; j++) {
        current = ei.previousSibling;
        if (ei == end) {
          if (!tmpEnd && range.endContainer.nodeType == 3) {
            clone.appendChild(doc.createTextNode(end.substringData(0, endOffset)));
            //is not clone
            if (action) {
              end.deleteData(0, endOffset);
            }
          }
        } else {
          currentLevel = ei.cloneNode(false);
          clone.appendChild(currentLevel);
        }
        //如果两端同级，右边第一次已经被开始做了
        if (j != i || !startParents[i]) {
          while (current) {
            if (current === start) {
              break;
            }
            ei = current.previousSibling;
            clone.insertBefore(!action ? current.cloneNode(true) : current, clone.firstChild);
            current = ei;
          }
        }
        clone = currentLevel;
      }
      if (action) {
        range.setStartBefore(!endParents[i] ? endParents[i - 1] : !startParents[i] ? startParents[i - 1] : endParents[i]).collapse(true);
      }
      tmpStart && domUtils.remove(tmpStart);
      tmpEnd && domUtils.remove(tmpEnd);
      return frag;
    }

    /**
     * 创建一个跟document绑定的空的Range实例
     * @constructor
     * @param { Document } document 新建的选区所属的文档对象
     */

    /**
     * @property { Node } startContainer 当前Range的开始边界的容器节点, 可以是一个元素节点或者是文本节点
     */

    /**
     * @property { Node } startOffset 当前Range的开始边界容器节点的偏移量, 如果是元素节点，
     *                              该值就是childNodes中的第几个节点， 如果是文本节点就是文本内容的第几个字符
     */

    /**
     * @property { Node } endContainer 当前Range的结束边界的容器节点, 可以是一个元素节点或者是文本节点
     */

    /**
     * @property { Node } endOffset 当前Range的结束边界容器节点的偏移量, 如果是元素节点，
     *                              该值就是childNodes中的第几个节点， 如果是文本节点就是文本内容的第几个字符
     */

    /**
     * @property { Boolean } collapsed 当前Range是否闭合
     * @default true
     * @remind Range是闭合的时候， startContainer === endContainer && startOffset === endOffset
     */

    /**
     * @property { Document } document 当前Range所属的Document对象
     * @remind 不同range的的document属性可以是不同的
     */
    var Range = dom.Range = function (document) {
      var me = this;
      me.startContainer =
        me.startOffset =
        me.endContainer =
        me.endOffset = null;
      me.document = document;
      me.collapsed = true;
    };

    /**
     * 删除fillData
     * @param doc
     * @param excludeNode
     */
    function removeFillData(doc, excludeNode) {
      try {
        if (fillData && domUtils.inDoc(fillData, doc)) {
          if (!fillData.nodeValue.replace(fillCharReg, '').length) {
            var tmpNode = fillData.parentNode;

            // fillData 前面是 axplugins 元素 不要清除 fillData，清除 fillDate 用户不能在元素后输入内容  yang start
            var preNode = fillData.previousSibling;
            if (!(domUtils.hasClass(preNode, 'ctrl-value') && domUtils.getAttribute('axplugins'))) {
              domUtils.remove(fillData);
            }
            // fillData 前面是 axplugins 元素 不要清除 fillData，清除 fillDate 用户不能在元素后输入内容  yang end

            if (domUtils.hasClass(tmpNode, 'ctrl-value')) {
              return;
            }//修復 執行range.select 方法 連續點擊select，text 先點擊的元素會消失的問題 yang
            while (tmpNode && domUtils.isEmptyInlineElement(tmpNode) &&
              //safari的contains有bug
              (browser.safari ? !(domUtils.getPosition(tmpNode, excludeNode) & domUtils.POSITION_CONTAINS) : !tmpNode.contains(excludeNode))
            ) {
              fillData = tmpNode.parentNode;
              domUtils.remove(tmpNode);
              tmpNode = fillData;
            }
          } else {
            fillData.nodeValue = fillData.nodeValue.replace(fillCharReg, '');
          }
        }
      } catch (e) {
      }
    }

    /**
     * @param node
     * @param dir
     */
    function mergeSibling(node, dir) {
      var tmpNode;
      node = node[dir];
      while (node && domUtils.isFillChar(node)) {
        tmpNode = node[dir];
        domUtils.remove(node);
        node = tmpNode;
      }
    }

    Range.prototype = {

      /**
       * 克隆选区的内容到一个DocumentFragment里
       * @method cloneContents
       * @return { DocumentFragment | NULL } 如果选区是闭合的将返回null， 否则， 返回包含所clone内容的DocumentFragment元素
       * @example
       * ```html
       * <body>
       *      <!-- 中括号表示选区 -->
       *      <b>x<i>x[x</i>xx]x</b>
       *
       *      <script>
       *          //range是已选中的选区
       *          var fragment = range.cloneContents(),
       *              node = document.createElement("div");
       *
       *          node.appendChild( fragment );
       *
       *          //output: <i>x</i>xx
       *          console.log( node.innerHTML );
       *
       *      </script>
       * </body>
       * ```
       */
      cloneContents: function () {
        return this.collapsed ? null : execContentsAction(this, 0);
      },

      /**
       * 删除当前选区范围中的所有内容
       * @method deleteContents
       * @remind 执行完该操作后， 当前Range对象变成了闭合状态
       * @return { AX.dom.Range } 当前操作的Range对象
       * @example
       * ```html
       * <body>
       *      <!-- 中括号表示选区 -->
       *      <b>x<i>x[x</i>xx]x</b>
       *
       *      <script>
       *          //range是已选中的选区
       *          range.deleteContents();
       *
       *          //竖线表示闭合后的选区位置
       *          //output: <b>x<i>x</i>|x</b>
       *          console.log( document.body.innerHTML );
       *
       *          //此时， range的各项属性为
       *          //output: B
       *          console.log( range.startContainer.tagName );
       *          //output: 2
       *          console.log( range.startOffset );
       *          //output: B
       *          console.log( range.endContainer.tagName );
       *          //output: 2
       *          console.log( range.endOffset );
       *          //output: true
       *          console.log( range.collapsed );
       *
       *      </script>
       * </body>
       * ```
       */
      deleteContents: function () {
        var txt;
        if (!this.collapsed) {
          execContentsAction(this, 1);
        }
        if (browser.webkit) {
          txt = this.startContainer;
          if (txt.nodeType == 3 && !txt.nodeValue.length) {
            this.setStartBefore(txt).collapse(true);
            domUtils.remove(txt);
          }
        }
        return this;
      },

      /**
       * 将当前选区的内容提取到一个DocumentFragment里
       * @method extractContents
       * @remind 执行该操作后， 选区将变成闭合状态
       * @warning 执行该操作后， 原来选区所选中的内容将从dom树上剥离出来
       * @return { DocumentFragment } 返回包含所提取内容的DocumentFragment对象
       * @example
       * ```html
       * <body>
       *      <!-- 中括号表示选区 -->
       *      <b>x<i>x[x</i>xx]x</b>
       *
       *      <script>
       *          //range是已选中的选区
       *          var fragment = range.extractContents(),
       *              node = document.createElement( "div" );
       *
       *          node.appendChild( fragment );
       *
       *          //竖线表示闭合后的选区位置
       *
       *          //output: <b>x<i>x</i>|x</b>
       *          console.log( document.body.innerHTML );
       *          //output: <i>x</i>xx
       *          console.log( node.innerHTML );
       *
       *          //此时， range的各项属性为
       *          //output: B
       *          console.log( range.startContainer.tagName );
       *          //output: 2
       *          console.log( range.startOffset );
       *          //output: B
       *          console.log( range.endContainer.tagName );
       *          //output: 2
       *          console.log( range.endOffset );
       *          //output: true
       *          console.log( range.collapsed );
       *
       *      </script>
       * </body>
       */
      extractContents: function () {
        return this.collapsed ? null : execContentsAction(this, 2);
      },

      /**
       * 设置Range的开始容器节点和偏移量
       * @method  setStart
       * @remind 如果给定的节点是元素节点，那么offset指的是其子元素中索引为offset的元素，
       *          如果是文本节点，那么offset指的是其文本内容的第offset个字符
       * @remind 如果提供的容器节点是一个不能包含子元素的节点， 则该选区的开始容器将被设置
       *          为该节点的父节点， 此时， 其距离开始容器的偏移量也变成了该节点在其父节点
       *          中的索引
       * @param { Node } node 将被设为当前选区开始边界容器的节点对象
       * @param { int } offset 选区的开始位置偏移量
       * @return { AX.dom.Range } 当前range对象
       * @example
       * ```html
       * <!-- 选区 -->
       * <b>xxx<i>x<span>xx</span>xx<em>xx</em>xxx</i>[xxx]</b>
       *
       * <script>
       *
       *     //执行操作
       *     range.setStart( document.getElementsByTagName("i")[0], 1 );
       *
       *     //此时， 选区变成了
       *     //<b>xxx<i>x[<span>xx</span>xx<em>xx</em>xxx</i>xxx]</b>
       *
       * </script>
       * ```
       * @example
       * ```html
       * <!-- 选区 -->
       * <b>xxx<img>[xx]x</b>
       *
       * <script>
       *
       *     //执行操作
       *     range.setStart( document.getElementsByTagName("img")[0], 3 );
       *
       *     //此时， 选区变成了
       *     //<b>xxx[<img>xx]x</b>
       *
       * </script>
       * ```
       */
      setStart: function (node, offset) {
        return setEndPoint(true, node, offset, this);
      },

      /**
       * 设置Range的结束容器和偏移量
       * @method  setEnd
       * @param { Node } node 作为当前选区结束边界容器的节点对象
       * @param { int } offset 结束边界的偏移量
       * @see AX.dom.Range:setStart(Node,int)
       * @return { AX.dom.Range } 当前range对象
       */
      setEnd: function (node, offset) {
        return setEndPoint(false, node, offset, this);
      },

      /**
       * 将Range开始位置设置到node节点之后
       * @method  setStartAfter
       * @remind 该操作将会把给定节点的父节点作为range的开始容器， 且偏移量是该节点在其父节点中的位置索引+1
       * @param { Node } node 选区的开始边界将紧接着该节点之后
       * @return { AX.dom.Range } 当前range对象
       * @example
       * ```html
       * <!-- 选区示例 -->
       * <b>xx<i>xxx</i><span>xx[x</span>xxx]</b>
       *
       * <script>
       *
       *     //执行操作
       *     range.setStartAfter( document.getElementsByTagName("i")[0] );
       *
       *     //结果选区
       *     //<b>xx<i>xxx</i>[<span>xxx</span>xxx]</b>
       *
       * </script>
       * ```
       */
      setStartAfter: function (node) {
        return this.setStart(node.parentNode, domUtils.getNodeIndex(node) + 1);
      },

      /**
       * 将Range开始位置设置到node节点之前
       * @method  setStartBefore
       * @remind 该操作将会把给定节点的父节点作为range的开始容器， 且偏移量是该节点在其父节点中的位置索引
       * @param { Node } node 新的选区开始位置在该节点之前
       * @see AX.dom.Range:setStartAfter(Node)
       * @return { AX.dom.Range } 当前range对象
       */
      setStartBefore: function (node) {
        return this.setStart(node.parentNode, domUtils.getNodeIndex(node));
      },

      /**
       * 将Range结束位置设置到node节点之后
       * @method  setEndAfter
       * @remind 该操作将会把给定节点的父节点作为range的结束容器， 且偏移量是该节点在其父节点中的位置索引+1
       * @param { Node } node 目标节点
       * @see AX.dom.Range:setStartAfter(Node)
       * @return { AX.dom.Range } 当前range对象
       * @example
       * ```html
       * <!-- 选区示例 -->
       * <b>[xx<i>xxx</i><span>xx]x</span>xxx</b>
       *
       * <script>
       *
       *     //执行操作
       *     range.setStartAfter( document.getElementsByTagName("span")[0] );
       *
       *     //结果选区
       *     //<b>[xx<i>xxx</i><span>xxx</span>]xxx</b>
       *
       * </script>
       * ```
       */
      setEndAfter: function (node) {
        return this.setEnd(node.parentNode, domUtils.getNodeIndex(node) + 1);
      },

      /**
       * 将Range结束位置设置到node节点之前
       * @method  setEndBefore
       * @remind 该操作将会把给定节点的父节点作为range的结束容器， 且偏移量是该节点在其父节点中的位置索引
       * @param { Node } node 目标节点
       * @see AX.dom.Range:setEndAfter(Node)
       * @return { AX.dom.Range } 当前range对象
       */
      setEndBefore: function (node) {
        return this.setEnd(node.parentNode, domUtils.getNodeIndex(node));
      },

      /**
       * 设置Range的开始位置到node节点内的第一个子节点之前
       * @method  setStartAtFirst
       * @remind 选区的开始容器将变成给定的节点， 且偏移量为0
       * @remind 如果给定的节点是元素节点， 则该节点必须是允许包含子节点的元素。
       * @param { Node } node 目标节点
       * @see AX.dom.Range:setStartBefore(Node)
       * @return { AX.dom.Range } 当前range对象
       * @example
       * ```html
       * <!-- 选区示例 -->
       * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
       *
       * <script>
       *
       *     //执行操作
       *     range.setStartAtFirst( document.getElementsByTagName("i")[0] );
       *
       *     //结果选区
       *     //<b>xx<i>[xxx</i><span>xx]x</span>xxx</b>
       *
       * </script>
       * ```
       */
      setStartAtFirst: function (node) {
        return this.setStart(node, 0);
      },

      /**
       * 设置Range的开始位置到node节点内的最后一个节点之后
       * @method setStartAtLast
       * @remind 选区的开始容器将变成给定的节点， 且偏移量为该节点的子节点数
       * @remind 如果给定的节点是元素节点， 则该节点必须是允许包含子节点的元素。
       * @param { Node } node 目标节点
       * @see AX.dom.Range:setStartAtFirst(Node)
       * @return { AX.dom.Range } 当前range对象
       */
      setStartAtLast: function (node) {
        return this.setStart(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);
      },

      /**
       * 设置Range的结束位置到node节点内的第一个节点之前
       * @method  setEndAtFirst
       * @param { Node } node 目标节点
       * @remind 选区的结束容器将变成给定的节点， 且偏移量为0
       * @remind node必须是一个元素节点， 且必须是允许包含子节点的元素。
       * @see AX.dom.Range:setStartAtFirst(Node)
       * @return { AX.dom.Range } 当前range对象
       */
      setEndAtFirst: function (node) {
        return this.setEnd(node, 0);
      },

      /**
       * 设置Range的结束位置到node节点内的最后一个节点之后
       * @method  setEndAtLast
       * @param { Node } node 目标节点
       * @remind 选区的结束容器将变成给定的节点， 且偏移量为该节点的子节点数量
       * @remind node必须是一个元素节点， 且必须是允许包含子节点的元素。
       * @see AX.dom.Range:setStartAtFirst(Node)
       * @return { AX.dom.Range } 当前range对象
       */
      setEndAtLast: function (node) {
        return this.setEnd(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);
      },

      /**
       * 选中给定节点
       * @method  selectNode
       * @remind 此时， 选区的开始容器和结束容器都是该节点的父节点， 其startOffset是该节点在父节点中的位置索引，
       *          而endOffset为startOffset+1
       * @param { Node } node 需要选中的节点
       * @return { AX.dom.Range } 当前range对象，此时的range仅包含当前给定的节点对象
       * @example
       * ```html
       * <!-- 选区示例 -->
       * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
       *
       * <script>
       *
       *     //执行操作
       *     range.selectNode( document.getElementsByTagName("i")[0] );
       *
       *     //结果选区
       *     //<b>xx[<i>xxx</i>]<span>xxx</span>xxx</b>
       *
       * </script>
       * ```
       */
      selectNode: function (node) {
        return this.setStartBefore(node).setEndAfter(node);
      },

      /**
       * 选中给定节点内部的所有节点
       * @method  selectNodeContents
       * @remind 此时， 选区的开始容器和结束容器都是该节点， 其startOffset为0，
       *          而endOffset是该节点的子节点数。
       * @param { Node } node 目标节点， 当前range将包含该节点内的所有节点
       * @return { AX.dom.Range } 当前range对象， 此时range仅包含给定节点的所有子节点
       * @example
       * ```html
       * <!-- 选区示例 -->
       * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
       *
       * <script>
       *
       *     //执行操作
       *     range.selectNode( document.getElementsByTagName("b")[0] );
       *
       *     //结果选区
       *     //<b>[xx<i>xxx</i><span>xxx</span>xxx]</b>
       *
       * </script>
       * ```
       */
      selectNodeContents: function (node) {
        return this.setStart(node, 0).setEndAtLast(node);
      },

      /**
       * clone当前Range对象
       * @method  cloneRange
       * @remind 返回的range是一个全新的range对象， 其内部所有属性与当前被clone的range相同。
       * @return { AX.dom.Range } 当前range对象的一个副本
       */
      cloneRange: function () {
        var me = this;
        return new Range(me.document).setStart(me.startContainer, me.startOffset).setEnd(me.endContainer, me.endOffset);

      },

      /**
       * 向当前选区的结束处闭合选区
       * @method  collapse
       * @return { AX.dom.Range } 当前range对象
       * @example
       * ```html
       * <!-- 选区示例 -->
       * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
       *
       * <script>
       *
       *     //执行操作
       *     range.collapse();
       *
       *     //结果选区
       *     //“|”表示选区已闭合
       *     //<b>xx<i>xxx</i><span>xx|x</span>xxx</b>
       *
       * </script>
       * ```
       */

      /**
       * 闭合当前选区，根据给定的toStart参数项决定是向当前选区开始处闭合还是向结束处闭合，
       * 如果toStart的值为true，则向开始位置闭合， 反之，向结束位置闭合。
       * @method  collapse
       * @param { Boolean } toStart 是否向选区开始处闭合
       * @return { AX.dom.Range } 当前range对象，此时range对象处于闭合状态
       * @see AX.dom.Range:collapse()
       * @example
       * ```html
       * <!-- 选区示例 -->
       * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
       *
       * <script>
       *
       *     //执行操作
       *     range.collapse( true );
       *
       *     //结果选区
       *     //“|”表示选区已闭合
       *     //<b>xx<i>xxx</i><span>|xxx</span>xxx</b>
       *
       * </script>
       * ```
       */
      collapse: function (toStart) {
        var me = this;
        if (toStart) {
          me.endContainer = me.startContainer;
          me.endOffset = me.startOffset;
        } else {
          me.startContainer = me.endContainer;
          me.startOffset = me.endOffset;
        }
        me.collapsed = true;
        return me;
      },

      /**
       * 调整range的开始位置和结束位置，使其"收缩"到最小的位置
       * @method  shrinkBoundary
       * @return { AX.dom.Range } 当前range对象
       * @example
       * ```html
       * <span>xx<b>xx[</b>xxxxx]</span> => <span>xx<b>xx</b>[xxxxx]</span>
       * ```
       *
       * @example
       * ```html
       * <!-- 选区示例 -->
       * <b>x[xx</b><i>]xxx</i>
       *
       * <script>
       *
       *     //执行收缩
       *     range.shrinkBoundary();
       *
       *     //结果选区
       *     //<b>x[xx]</b><i>xxx</i>
       * </script>
       * ```
       *
       * @example
       * ```html
       * [<b><i>xxxx</i>xxxxxxx</b>] => <b><i>[xxxx</i>xxxxxxx]</b>
       * ```
       */

      /**
       * 调整range的开始位置和结束位置，使其"收缩"到最小的位置，
       * 如果ignoreEnd的值为true，则忽略对结束位置的调整
       * @method  shrinkBoundary
       * @param { Boolean } ignoreEnd 是否忽略对结束位置的调整
       * @return { AX.dom.Range } 当前range对象
       * @see AX.dom.domUtils.Range:shrinkBoundary()
       */
      shrinkBoundary: function (ignoreEnd) {
        var me = this, child,
          collapsed = me.collapsed;

        function check(node) {
          return node.nodeType == 1 && !domUtils.isBookmarkNode(node) && !dtd.$empty[node.tagName] && !dtd.$nonChild[node.tagName]
        }

        while (me.startContainer.nodeType == 1 //是element
          && (child = me.startContainer.childNodes[me.startOffset]) //子节点也是element
          && check(child)) {
          me.setStart(child, 0);
        }
        if (collapsed) {
          return me.collapse(true);
        }
        if (!ignoreEnd) {
          while (me.endContainer && me.endContainer.nodeType == 1//是element
            && me.endOffset > 0 //如果是空元素就退出 endOffset=0那么endOffst-1为负值，childNodes[endOffset]报错
            && (child = me.endContainer.childNodes[me.endOffset - 1]) //子节点也是element
            && check(child)) {
            me.setEnd(child, child.childNodes.length);
          }
        }
        return me;
      },

      /**
       * 获取离当前选区内包含的所有节点最近的公共祖先节点，
       * @method  getCommonAncestor
       * @remind 返回的公共祖先节点一定不是range自身的容器节点， 但有可能是一个文本节点
       * @return { Node } 当前range对象内所有节点的公共祖先节点
       * @example
       * ```html
       * //选区示例
       * <span>xxx<b>x[x<em>xx]x</em>xxx</b>xx</span>
       * <script>
       *
       *     var node = range.getCommonAncestor();
       *
       *     //公共祖先节点是： b节点
       *     //输出： B
       *     console.log(node.tagName);
       *
       * </script>
       * ```
       */

      /**
       * 获取当前选区所包含的所有节点的公共祖先节点， 可以根据给定的参数 includeSelf 决定获取到
       * 的公共祖先节点是否可以是当前选区的startContainer或endContainer节点， 如果 includeSelf
       * 的取值为true， 则返回的节点可以是自身的容器节点， 否则， 则不能是容器节点
       * @method  getCommonAncestor
       * @param { Boolean } includeSelf 是否允许获取到的公共祖先节点是当前range对象的容器节点
       * @return { Node } 当前range对象内所有节点的公共祖先节点
       * @see AX.dom.Range:getCommonAncestor()
       * @example
       * ```html
       * <body>
       *
       *     <!-- 选区示例 -->
       *     <b>xxx<i>xxxx<span>xx[x</span>xx]x</i>xxxxxxx</b>
       *
       *     <script>
       *
       *         var node = range.getCommonAncestor( false );
       *
       *         //这里的公共祖先节点是B而不是I， 是因为参数限制了获取到的节点不能是容器节点
       *         //output: B
       *         console.log( node.tagName );
       *
       *     </script>
       *
       * </body>
       * ```
       */

      /**
       * 获取当前选区所包含的所有节点的公共祖先节点， 可以根据给定的参数 includeSelf 决定获取到
       * 的公共祖先节点是否可以是当前选区的startContainer或endContainer节点， 如果 includeSelf
       * 的取值为true， 则返回的节点可以是自身的容器节点， 否则， 则不能是容器节点； 同时可以根据
       * ignoreTextNode 参数的取值决定是否忽略类型为文本节点的祖先节点。
       * @method  getCommonAncestor
       * @param { Boolean } includeSelf 是否允许获取到的公共祖先节点是当前range对象的容器节点
       * @param { Boolean } ignoreTextNode 获取祖先节点的过程中是否忽略类型为文本节点的祖先节点
       * @return { Node } 当前range对象内所有节点的公共祖先节点
       * @see AX.dom.Range:getCommonAncestor()
       * @see AX.dom.Range:getCommonAncestor(Boolean)
       * @example
       * ```html
       * <body>
       *
       *     <!-- 选区示例 -->
       *     <b>xxx<i>xxxx<span>x[x]x</span>xxx</i>xxxxxxx</b>
       *
       *     <script>
       *
       *         var node = range.getCommonAncestor( true, false );
       *
       *         //output: SPAN
       *         console.log( node.tagName );
       *
       *     </script>
       *
       * </body>
       * ```
       */
      getCommonAncestor: function (includeSelf, ignoreTextNode) {
        var me = this,
          start = me.startContainer,
          end = me.endContainer;
        if (start === end) {
          if (includeSelf && selectOneNode(this)) {
            start = start.childNodes[me.startOffset];
            if (start.nodeType == 1) {
              return start;
            }
          }
          //只有在上来就相等的情况下才会出现是文本的情况
          return ignoreTextNode && start.nodeType == 3 ? start.parentNode : start;
        }
        return domUtils.getCommonAncestor(start, end);
      },

      /**
       * 调整当前Range的开始和结束边界容器，如果是容器节点是文本节点,就调整到包含该文本节点的父节点上
       * @method trimBoundary
       * @remind 该操作有可能会引起文本节点被切开
       * @return { AX.dom.Range } 当前range对象
       * @example
       * ```html
       *
       * //选区示例
       * <b>xxx<i>[xxxxx]</i>xxx</b>
       *
       * <script>
       *     //未调整前， 选区的开始容器和结束都是文本节点
       *     //执行调整
       *     range.trimBoundary();
       *
       *     //调整之后， 容器节点变成了i节点
       *     //<b>xxx[<i>xxxxx</i>]xxx</b>
       * </script>
       * ```
       */

      /**
       * 调整当前Range的开始和结束边界容器，如果是容器节点是文本节点,就调整到包含该文本节点的父节点上，
       * 可以根据 ignoreEnd 参数的值决定是否调整对结束边界的调整
       * @method trimBoundary
       * @param { Boolean } ignoreEnd 是否忽略对结束边界的调整
       * @return { AX.dom.Range } 当前range对象
       * @example
       * ```html
       *
       * //选区示例
       * <b>xxx<i>[xxxxx]</i>xxx</b>
       *
       * <script>
       *     //未调整前， 选区的开始容器和结束都是文本节点
       *     //执行调整
       *     range.trimBoundary( true );
       *
       *     //调整之后， 开始容器节点变成了i节点
       *     //但是， 结束容器没有发生变化
       *     //<b>xxx[<i>xxxxx]</i>xxx</b>
       * </script>
       * ```
       */
      trimBoundary: function (ignoreEnd) {
        this.txtToElmBoundary();
        var start = this.startContainer,
          offset = this.startOffset,
          collapsed = this.collapsed,
          end = this.endContainer;
        if (start.nodeType == 3) {
          if (offset == 0) {
            this.setStartBefore(start);
          } else {
            if (offset >= start.nodeValue.length) {
              this.setStartAfter(start);
            } else {
              var textNode = domUtils.split(start, offset);
              //跟新结束边界
              if (start === end) {
                this.setEnd(textNode, this.endOffset - offset);
              } else if (start.parentNode === end) {
                this.endOffset += 1;
              }
              this.setStartBefore(textNode);
            }
          }
          if (collapsed) {
            return this.collapse(true);
          }
        }
        if (!ignoreEnd) {
          offset = this.endOffset;
          end = this.endContainer;
          if (end.nodeType == 3) {
            if (offset == 0) {
              this.setEndBefore(end);
            } else {
              offset < end.nodeValue.length && domUtils.split(end, offset);
              this.setEndAfter(end);
            }
          }
        }
        return this;
      },

      /**
       * 如果选区在文本的边界上，就扩展选区到文本的父节点上, 如果当前选区是闭合的， 则什么也不做
       * @method txtToElmBoundary
       * @remind 该操作不会修改dom节点
       * @return { AX.dom.Range } 当前range对象
       */

      /**
       * 如果选区在文本的边界上，就扩展选区到文本的父节点上, 如果当前选区是闭合的， 则根据参数项
       * ignoreCollapsed 的值决定是否执行该调整
       * @method txtToElmBoundary
       * @param { Boolean } ignoreCollapsed 是否忽略选区的闭合状态， 如果该参数取值为true， 则
       *                      不论选区是否闭合， 都会执行该操作， 反之， 则不会对闭合的选区执行该操作
       * @return { AX.dom.Range } 当前range对象
       */
      txtToElmBoundary: function (ignoreCollapsed) {
        function adjust(r, c) {
          var container = r[c + 'Container'],
            offset = r[c + 'Offset'];
          if (container.nodeType == 3) {
            if (!offset) {
              r['set' + c.replace(/(\w)/, function (a) {
                return a.toUpperCase();
              }) + 'Before'](container);
            } else if (offset >= container.nodeValue.length) {
              r['set' + c.replace(/(\w)/, function (a) {
                return a.toUpperCase();
              }) + 'After'](container);
            }
          }
        }

        if (ignoreCollapsed || !this.collapsed) {
          adjust(this, 'start');
          adjust(this, 'end');
        }
        return this;
      },

      /**
       * 在当前选区的开始位置前插入节点，新插入的节点会被该range包含
       * @method  insertNode
       * @param { Node } node 需要插入的节点
       * @remind 插入的节点可以是一个DocumentFragment依次插入多个节点
       * @return { AX.dom.Range } 当前range对象
       */
      insertNode: function (node) {
        var first = node, length = 1;
        if (node.nodeType == 11) {
          first = node.firstChild;
          length = node.childNodes.length;
        }
        this.trimBoundary(true);
        var start = this.startContainer,
          offset = this.startOffset;
        var nextNode = start.childNodes[offset];
        if (nextNode) {
          if(!(node.nodeType == 3 && ((start.tagName == "BODY" && nextNode.tagName == "DIV") || (start.tagName == "TABLE" && nextNode.tagName == "TBODY")))){ // 防止文书最上层出现空行问题
            if(!(start.tagName == "DIV" && start.getAttribute("attrs"))){// 防止标题非独占一行段落开头出现空行，导致标题换行
              start.insertBefore(node, nextNode);
            }
          }
        } else {
          start.appendChild(node);
        }
        if (first.parentNode === this.endContainer) {
          this.endOffset = this.endOffset + length;
        }
        return this.setStartBefore(first);
      },
      /* insertNodeAfter: function (node,me) {
        me=!me?this:me;
        var first = node, length = 1;
        if (node.nodeType == 11) {
          first = node.firstChild;
          length = node.childNodes.length;
        }
        me.trimBoundary(true);
        var start = me.startContainer,
          offset = me.startOffset;
        var nextNode = start.childNodes[offset],
          parentNode=axTools.hasClass(nextNode,'editor-new-add-text')?nextNode:start,
          modifyNode=axTools.getByClass('editor-mark-modify-text',parentNode),
          newStr=modifyNode.length==0?'':parentNode.innerHTML.replace(modifyNode[0].outerHTML,'');
        if(modifyNode.length>0 && (axTools.hasClass(parentNode,'editor-new-add-text') || newStr=='')){
          modifyNode[0].innerHTML=parentNode.innerHTML.replace(modifyNode[0].outerHTML,'');
        }else if (nextNode) {
          if(axTools.hasClass(nextNode,'editor-mark-modify-text')){
            nextNode.innerHTML=node.innerHTML;
          }else{
            parentNode.insertBefore(node, nextNode);
          }
        } else {
          parentNode.appendChild(node);
        }
        if (first.parentNode === me.endContainer) {
          me.endOffset = me.endOffset + length;
        }
        return me.setStartBefore(first);
      }, */

      /**
       * 闭合选区到当前选区的开始位置， 并且定位光标到闭合后的位置
       * @method  setCursor
       * @return { AX.dom.Range } 当前range对象
       * @see AX.dom.Range:collapse()
       */

      /**
       * 闭合选区，可以根据参数toEnd的值控制选区是向前闭合还是向后闭合， 并且定位光标到闭合后的位置。
       * @method  setCursor
       * @param { Boolean } toEnd 是否向后闭合， 如果为true， 则闭合选区时， 将向结束容器方向闭合，
       *                      反之，则向开始容器方向闭合
       * @return { AX.dom.Range } 当前range对象
       * @see AX.dom.Range:collapse(Boolean)
       */
      setCursor: function (toEnd, noFillData) {
        return this.collapse(!toEnd).select(noFillData);
      },

      /**
       * 创建当前range的一个书签，记录下当前range的位置，方便当dom树改变时，还能找回原来的选区位置
       * @method createBookmark
       * @param { Boolean } serialize 控制返回的标记位置是对当前位置的引用还是ID，如果该值为true，则
       *                              返回标记位置的ID， 反之则返回标记位置节点的引用
       * @return { Object } 返回一个书签记录键值对， 其包含的key有： start => 开始标记的ID或者引用，
       *                          end => 结束标记的ID或引用， id => 当前标记的类型， 如果为true，则表示
       *                          返回的记录的类型为ID， 反之则为引用
       */
      createBookmark: function (serialize, same) {
        var endNode,
          startNode = this.document.createElement('span');
        startNode.style.cssText = 'display:none;line-height:0px;';
        startNode.appendChild(this.document.createTextNode('\u200D'));
        startNode.id = '_baidu_bookmark_start_' + (same ? '' : guid++);

        if (!this.collapsed) {
          endNode = startNode.cloneNode(true);
          endNode.id = '_baidu_bookmark_end_' + (same ? '' : guid++);
        }
        this.insertNode(startNode);
        if (endNode) {
          this.collapse().insertNode(endNode).setEndBefore(endNode);
        }
        this.setStartAfter(startNode);
        return {
          start: serialize ? startNode.id : startNode,
          end: endNode ? serialize ? endNode.id : endNode : null,
          id: serialize
        }
      },

      /**
       *  调整当前range的边界到书签位置，并删除该书签对象所标记的位置内的节点
       *  @method  moveToBookmark
       *  @param { BookMark } bookmark createBookmark所创建的标签对象
       *  @return { AX.dom.Range } 当前range对象
       *  @see AX.dom.Range:createBookmark(Boolean)
       */
      moveToBookmark: function (bookmark) {
        var start = bookmark.id ? this.document.getElementById(bookmark.start) : bookmark.start,
          end = bookmark.end && bookmark.id ? this.document.getElementById(bookmark.end) : bookmark.end;
        this.setStartBefore(start);
        domUtils.remove(start);
        if (end) {
          this.setEndBefore(end);
          domUtils.remove(end);
        } else {
          this.collapse(true);
        }
        return this;
      },

      /**
       * 调整range的边界，使其"放大"到最近的父节点
       * @method  enlarge
       * @remind 会引起选区的变化
       * @return { AX.dom.Range } 当前range对象
       */

      /**
       * 调整range的边界，使其"放大"到最近的父节点，根据参数 toBlock 的取值， 可以
       * 要求扩大之后的父节点是block节点
       * @method  enlarge
       * @param { Boolean } toBlock 是否要求扩大之后的父节点必须是block节点
       * @return { AX.dom.Range } 当前range对象
       */
      enlarge: function (toBlock, stopFn) {
        var isBody = domUtils.isBody,
          pre, node, tmp = this.document.createTextNode('');
        if (toBlock) {
          node = this.startContainer;
          if (node.nodeType == 1) {
            if (node.childNodes[this.startOffset]) {
              pre = node = node.childNodes[this.startOffset]
            } else {
              node.appendChild(tmp);
              pre = node = tmp;
            }
          } else {
            pre = node;
          }
          while (1) {
            if (domUtils.isBlockElm(node)) {
              node = pre;
              while ((pre = node.previousSibling) && !domUtils.isBlockElm(pre)) {
                node = pre;
              }
              this.setStartBefore(node);
              break;
            }
            pre = node;
            node = node.parentNode;
          }
          node = this.endContainer;
          if (node.nodeType == 1) {
            if (pre = node.childNodes[this.endOffset]) {
              node.insertBefore(tmp, pre);
            } else {
              node.appendChild(tmp);
            }
            pre = node = tmp;
          } else {
            pre = node;
          }
          while (1) {
            if (domUtils.isBlockElm(node)) {
              node = pre;
              while ((pre = node.nextSibling) && !domUtils.isBlockElm(pre)) {
                node = pre;
              }
              this.setEndAfter(node);
              break;
            }
            pre = node;
            node = node.parentNode;
          }
          if (tmp.parentNode === this.endContainer) {
            this.endOffset--;
          }
          domUtils.remove(tmp);
        }

        // 扩展边界到最大
        var scNodeClass = this.startContainer.parentNode.getAttribute("class");
        if (scNodeClass && scNodeClass.indexOf("ax-page-content") > -1) {
          return this;
        }
        if (!this.collapsed) {
          while (this.startOffset == 0) {
            if (stopFn && stopFn(this.startContainer)) {
              break;
            }
            if (isBody(this.startContainer)) {
              break;
            }
            this.setStartBefore(this.startContainer);
          }
          while (this.endOffset == (this.endContainer.nodeType == 1 ? this.endContainer.childNodes.length : this.endContainer.nodeValue.length)) {
            if (stopFn && stopFn(this.endContainer)) {
              break;
            }
            if (isBody(this.endContainer)) {
              break;
            }
            this.setEndAfter(this.endContainer);
          }
        }
        return this;
      },
      enlargeToBlockElm: function (ignoreEnd) {
        while (!domUtils.isBlockElm(this.startContainer)) {
          this.setStartBefore(this.startContainer);
        }
        if (!ignoreEnd) {
          while (!domUtils.isBlockElm(this.endContainer)) {
            this.setEndAfter(this.endContainer);
          }
        }
        return this;
      },
      /**
       * 调整Range的边界，使其"缩小"到最合适的位置
       * @method adjustmentBoundary
       * @return { AX.dom.Range } 当前range对象
       * @see AX.dom.Range:shrinkBoundary()
       */
      adjustmentBoundary: function () {
        if (!this.collapsed) {
          while (!domUtils.isBody(this.startContainer) &&
            this.startOffset == this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length &&
            this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
          ) {

            this.setStartAfter(this.startContainer);
          }
          while (!domUtils.isBody(this.endContainer) && !this.endOffset && this.endContainer &&
            this.endContainer[this.endContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
          ) {
            this.setEndBefore(this.endContainer);
          }
        }
        return this;
      },

      /**
       * 给range选区中的内容添加给定的inline标签
       * @method applyInlineStyle
       * @param { String } tagName 需要添加的标签名
       * @example
       * ```html
       * <p>xxxx[xxxx]x</p>  ==>  range.applyInlineStyle("strong")  ==>  <p>xxxx[<strong>xxxx</strong>]x</p>
       * ```
       */

      /**
       * 给range选区中的内容添加给定的inline标签， 并且为标签附加上一些初始化属性。
       * @method applyInlineStyle
       * @param { String } tagName 需要添加的标签名
       * @param { Object } attrs 跟随新���加的标签的属性
       * @return { AX.dom.Range } 当前选区
       * @example
       * ```html
       * <p>xxxx[xxxx]x</p>
       *
       * ==>
       *
       * <!-- 执行操作 -->
       * range.applyInlineStyle("strong",{"style":"font-size:12px"})
       *
       * ==>
       *
       * <p>xxxx[<strong style="font-size:12px">xxxx</strong>]x</p>
       * ```
       */
      applyInlineStyle: function (tagName, attrs, list) {
        if (this.collapsed) {
          return this;
        }
        this.trimBoundary().enlarge(false,
          function (node) {
            return node.nodeType == 1 && domUtils.isBlockElm(node)
          }).adjustmentBoundary();
        var bookmark = this.createBookmark(),
          end = bookmark.end,
          filterFn = function (node) {
            return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' : !domUtils.isWhitespace(node);
          },
          current = domUtils.getNextDomNode(bookmark.start, false, filterFn),
          node,
          pre,
          range = this.cloneRange();

        while (current && domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING) {
          if (current.nodeType == 3 || dtd[tagName][current.tagName]) {
            range.setStartBefore(current);
            node = current;
            while (node && (node.nodeType == 3 || dtd[tagName][node.tagName]) && node !== end) {
              pre = node;
              node = domUtils.getNextDomNode(node, node.nodeType == 1, null, function (parent) {
                return dtd[tagName][parent.tagName];
              });
            }
            var elm = null;

            // 元素根节点 tagname 是span 或者 p ；非元素节点 strong，em，i等加粗 字体变斜上标 小标 需要创建相应的 dom 节点
            var isEleTagName = tagName === 'span' || tagName === 'p';

            // axplugins 需要直接在axplugins的span上加样式，不需要新增span标签
            if (current.nodeType == 1 && isEleTagName && current.getAttribute('axplugins') != null && domUtils.hasClass(current, 'ctrl-field')) {
              var frag = range.setEndAfter(pre);
              if (axTools.hasClass(frag.endContainer, 'ctrl-value')) {
                var fragment = document.createDocumentFragment();
                fragment.innerHTML = frag.endContainer.innerText;
                frag = fragment;
              }
              if (list && list.length > 0) {
                var level, top;
                top = level = list[0].cloneNode(false);
                for (var i = 1, ci; ci = list[i++];) {
                  level.appendChild(ci.cloneNode(false));
                  level = level.firstChild;
                }
                elm = level;
              } else {
                elm = current;
              }

            } else {

              var frag = range.setEndAfter(pre).extractContents();
              if (axTools.hasClass(frag.endContainer, 'ctrl-value')) {
                var fragment = document.createDocumentFragment();
                fragment.innerHTML = frag.startContainer.innerText;
                frag = fragment;
              }
              if (list && list.length > 0) {
                var level, top;
                top = level = list[0].cloneNode(false);
                for (var i = 1, ci; ci = list[i++];) {
                  level.appendChild(ci.cloneNode(false));
                  level = level.firstChild;
                }
                elm = level;
              } else {
                elm = range.document.createElement(tagName);
              }
            }

            if (attrs) {
              domUtils.setAttributes(elm, attrs);
            }

            // axplugins 需要直接在axplugins的span上加样式，不需要新增span标签
            if (!(current.nodeType == 1 && isEleTagName && current.getAttribute('axplugins') != null && domUtils.hasClass(current, 'ctrl-field'))) {
              elm.appendChild(frag);
              range.insertNode(list ? top : elm);

              // 选区有几率只选取到ctrl-value部分，父节点ctrl-field没有选中,这种情况删除elm 附近的空白节点  07-12 yang
              if (domUtils.hasClass(pre.parentNode, 'ctrl-value')) {
                elm.nextSibling && elm.nextSibling.remove();
              }
            }
            //处理下滑线在a上的情况
            var aNode;
            if (tagName == 'span' && attrs.style && /text\-decoration/.test(attrs.style) && (aNode = domUtils.findParentByTagName(elm, 'a', true))) {
              domUtils.setAttributes(aNode, attrs);
              domUtils.remove(elm, true);
              elm = aNode;
            } else {
              domUtils.mergeSibling(elm);
              domUtils.clearEmptySibling(elm);
            }

            // axplugins 需要直接在axplugins的span上加样式，不需要mergeChild 和 mergeToParent
            if (!(current.nodeType == 1 && isEleTagName && current.getAttribute('axplugins') != null && domUtils.hasClass(current, 'ctrl-field'))) {
              //去除子节点相同的
              domUtils.mergeChild(elm, attrs);
              current = domUtils.getNextDomNode(elm, false, filterFn);
              domUtils.mergeToParent(elm);
              if(tagName == "span") {
                var styles = elm.getAttribute("style");
                if(elm.querySelectorAll('strong.ctrl-value').length > 0){
                  elm.setAttribute("style", styles + "display: block !important");
                }else{
                  elm.setAttribute("style", styles + "display: inline !important");
                }
              }
            } else {
              current = domUtils.getNextDomNode(elm, false, filterFn);
            }

            if (node === end) {
              break;
            }
          } else {
            current = domUtils.getNextDomNode(current, true, filterFn);
          }
        }
        return this.moveToBookmark(bookmark);
      },

      /**
       * 移除当前选区内指定的inline标签，但保留其中的内容
       * @method removeInlineStyle
       * @param { String } tagName 需要移除的标签名
       * @return { AX.dom.Range } 当前的range对象
       * @example
       * ```html
       * xx[x<span>xxx<em>yyy</em>zz]z</span>  => range.removeInlineStyle(["em"])  => xx[x<span>xxxyyyzz]z</span>
       * ```
       */

      /**
       * 移除当前选区内指定的一组inline标签，但保留其中的内容
       * @method removeInlineStyle
       * @param { Array } tagNameArr 需要移除的标签名的数组
       * @return { AX.dom.Range } 当前的range对象
       * @see AX.dom.Range:removeInlineStyle(String)
       */
      removeInlineStyle: function (tagNames) {
        if (this.collapsed) {
          return this;
        }
        tagNames = utils.isArray(tagNames) ? tagNames : [tagNames];
        this.shrinkBoundary().adjustmentBoundary();
        var start = this.startContainer, end = this.endContainer;
        while (1) {
          if (start.nodeType == 1) {
            if (utils.indexOf(tagNames, start.tagName.toLowerCase()) > -1) {
              break;
            }
            if (start.tagName.toLowerCase() == 'body') {
              start = null;
              break;
            }
          }
          start = start.parentNode;
        }
        while (1) {
          if (end.nodeType == 1) {
            if (utils.indexOf(tagNames, end.tagName.toLowerCase()) > -1) {
              break;
            }
            if (end.tagName.toLowerCase() == 'body') {
              end = null;
              break;
            }
          }
          end = end.parentNode;
        }
        var bookmark = this.createBookmark(),
          frag,
          tmpRange;
        if (start) {
          tmpRange = this.cloneRange().setEndBefore(bookmark.start).setStartBefore(start);
          frag = tmpRange.extractContents();
          tmpRange.insertNode(frag);
          domUtils.clearEmptySibling(start, true);
          start.parentNode.insertBefore(bookmark.start, start);
        }
        if (end) {
          tmpRange = this.cloneRange().setStartAfter(bookmark.end).setEndAfter(end);
          frag = tmpRange.extractContents();
          tmpRange.insertNode(frag);
          domUtils.clearEmptySibling(end, false, true);
          end.parentNode.insertBefore(bookmark.end, end.nextSibling);
        }
        var current = domUtils.getNextDomNode(bookmark.start, false, function (node) {
          return node.nodeType == 1;
        }), next;
        while (current && current !== bookmark.end) {
          next = domUtils.getNextDomNode(current, true, function (node) {
            return node.nodeType == 1;
          });
          if (utils.indexOf(tagNames, current.tagName.toLowerCase()) > -1) {
            domUtils.remove(current, true);
          }
          current = next;
        }
        return this.moveToBookmark(bookmark);
      },

      /**
       * 获取当前选中的自闭合的节点
       * @method  getClosedNode
       * @return { Node | NULL } 如果当前选中的是自闭合节点， 则返回该节点， 否则返回NULL
       */
      getClosedNode: function () {
        var node;
        if (!this.collapsed) {
          var range = this.cloneRange().adjustmentBoundary().shrinkBoundary();
          if (selectOneNode(range)) {
            var child = range.startContainer.childNodes[range.startOffset];
            if (child && child.nodeType == 1 && (dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName])) {
              node = child;
            }
          }
        }
        return node;
      },

      /**
       * 在页面上高亮range所表示的选区
       * @method select
       * @return { AX.dom.Range } 返回当前Range对象
       */
      //这里不区分ie9以上，trace:3824
      select: browser.ie ? function (noFillData, textRange) {
        var nativeRange;
        if (!this.collapsed) {
          this.shrinkBoundary();
        }
        var node = this.getClosedNode();
        if (node && !textRange) {
          try {
            nativeRange = this.document.body.createControlRange();
            nativeRange.addElement(node);
            nativeRange.select();
          } catch (e) {
          }
          return this;
        }
        var bookmark = this.createBookmark(),
          start = bookmark.start,
          end;
        nativeRange = this.document.body.createTextRange();
        nativeRange.moveToElementText(start);
        nativeRange.moveStart('character', 1);
        if (!this.collapsed) {
          var nativeRangeEnd = this.document.body.createTextRange();
          end = bookmark.end;
          nativeRangeEnd.moveToElementText(end);
          nativeRange.setEndPoint('EndToEnd', nativeRangeEnd);
        } else {
          if (!noFillData && this.startContainer.nodeType != 3) {
            //使用<span>|x<span>固定住光标
            var tmpText = this.document.createTextNode(fillChar),
              tmp = this.document.createElement('span');
            tmp.appendChild(this.document.createTextNode(fillChar));
            start.parentNode.insertBefore(tmp, start);
            start.parentNode.insertBefore(tmpText, start);
            //当点b,i,u时，不能清除i上边的b
            removeFillData(this.document, tmpText);
            fillData = tmpText;
            mergeSibling(tmp, 'previousSibling');
            mergeSibling(start, 'nextSibling');
            nativeRange.moveStart('character', -1);
            nativeRange.collapse(true);
          }
        }
        this.moveToBookmark(bookmark);
        tmp && domUtils.remove(tmp);
        //IE在隐藏状态下不支持range操作，catch一下
        try {
          nativeRange.select();
        } catch (e) {
        }
        return this;
      } : function (notInsertFillData) {
        function checkOffset(rng) {

          function check(node, offset, dir) {
            if (node.nodeType == 3 && node.nodeValue.length < offset) {
              rng[dir + 'Offset'] = node.nodeValue.length
            }
          }

          check(rng.startContainer, rng.startOffset, 'start');
          check(rng.endContainer, rng.endOffset, 'end');
        }

        var win = domUtils.getWindow(this.document),
          sel = win.getSelection(),
          txtNode;
        //FF下关闭自动长高时滚动条在关闭dialog时会跳
        //ff下如果不body.focus将不能定位闭合光标到编辑器内
        browser.gecko ? this.document.body.focus() : win.focus();
        if (sel) {
          sel.removeAllRanges();
          // trace:870 chrome/safari后边是br对于闭合得range不能定位 所以去掉了判断
          // this.startContainer.nodeType != 3 &&! ((child = this.startContainer.childNodes[this.startOffset]) && child.nodeType == 1 && child.tagName == 'BR'
          if (this.collapsed && !notInsertFillData) {
            //                    //opear如果没有节点接着，原生的不能够定位,不能在body的第一级插入空白节点
            //                    if (notInsertFillData && browser.opera && !domUtils.isBody(this.startContainer) && this.startContainer.nodeType == 1) {
            //                        var tmp = this.document.createTextNode('');
            //                        this.insertNode(tmp).setStart(tmp, 0).collapse(true);
            //                    }
            //
            //处理光标落在文本节点的情况
            //处理以下的情况
            //<b>|xxxx</b>
            //<b>xxxx</b>|xxxx
            //xxxx<b>|</b>
            var start = this.startContainer, child = start;
            if (!start) {
              return;
            }
            if (start.nodeType == 1) {
              child = start.childNodes[this.startOffset];

            }
            if (!(start.nodeType == 3 && this.startOffset) &&
              (child ?
                !child.previousSibling || child.previousSibling.nodeType != 3
                :
                !start.lastChild || start.lastChild.nodeType != 3
              )
            ) {
              txtNode = this.document.createTextNode(fillChar);
              //跟着前边走
              this.insertNode(txtNode);
              removeFillData(this.document, txtNode);
              mergeSibling(txtNode, 'previousSibling');
              mergeSibling(txtNode, 'nextSibling');
              fillData = txtNode;
              this.setStart(txtNode, browser.webkit ? 1 : 0).collapse(true);
            }
          }
          var nativeRange = this.document.createRange();
          if (this.collapsed && browser.opera && this.startContainer.nodeType == 1) {
            var child = this.startContainer.childNodes[this.startOffset];
            if (!child) {
              //往前靠拢
              child = this.startContainer.lastChild;
              if (child && domUtils.isBr(child)) {
                this.setStartBefore(child).collapse(true);
              }
            } else {
              //向后靠拢
              while (child && domUtils.isBlockElm(child)) {
                if (child.nodeType == 1 && child.childNodes[0]) {
                  child = child.childNodes[0]
                } else {
                  break;
                }
              }
              child && this.setStartBefore(child).collapse(true)
            }

          }
          //是createAddress最后一位算的不准，现在这里进行微调
          checkOffset(this);
          nativeRange.setStart(this.startContainer, this.startOffset);
          nativeRange.setEnd(this.endContainer, this.endOffset);
          sel.addRange(nativeRange);
        }
        return this;
      },

      /**
       * 滚动到当前range开始的位置
       * @method scrollToView
       * @param { Window } win 当前range对象所属的window对象
       * @return { AX.dom.Range } 当前Range对象
       */

      /**
       * 滚动到距离当前range开始位置 offset 的位置处
       * @method scrollToView
       * @param { Window } win 当前range对象所属的window对象
       * @param { Number } offset 距离range开始位置处的偏移量， 如果为正数， 则向下偏移， 反之， 则向上偏移
       * @return { AX.dom.Range } 当前Range对象
       */
      scrollToView: function (win, offset) {
        win = win ? window : domUtils.getWindow(this.document);
        var me = this,
          span = me.document.createElement('span');
        //trace:717
        span.innerHTML = '&nbsp;';
        me.cloneRange().insertNode(span);
        domUtils.scrollToView(span, win, offset);
        domUtils.remove(span);
        return me;
      },

      /**
       * 判断当前选区内容是否占位符
       * @private
       * @method inFillChar
       * @return { Boolean } 如果是占位符返回true，否则返回false
       */
      inFillChar: function () {
        var start = this.startContainer;
        if (this.collapsed && start.nodeType == 3
          && start.nodeValue.replace(new RegExp('^' + domUtils.fillChar), '').length + 1 == start.nodeValue.length
        ) {
          return true;
        }
        return false;
      },

      /**
       * 保存
       * @method createAddress
       * @private
       * @return { Boolean } 返回开始和结束的位置
       * @example
       * ```html
       * <body>
       *     <p>
       *         aaaa
       *         <em>
       *             <!-- 选区开始 -->
       *             bbbb
       *             <!-- 选区结束 -->
       *         </em>
       *     </p>
       *
       *     <script>
       *         //output: {startAddress:[0,1,0,0],endAddress:[0,1,0,4]}
       *         console.log( range.createAddress() );
       *     </script>
       * </body>
       * ```
       */
      createAddress: function (ignoreEnd, ignoreTxt) {
        var addr = {}, me = this;

        function getAddress(isStart) {
          var node = isStart ? me.startContainer : me.endContainer;
          var parents = domUtils.findParents(node, true, function (node) {
            return !domUtils.isBody(node)
          }),
            addrs = [];
          for (var i = 0, ci; ci = parents[i++];) {
            addrs.push(domUtils.getNodeIndex(ci, ignoreTxt));
          }
          var firstIndex = 0;

          if (ignoreTxt) {
            if (node.nodeType == 3) {
              var tmpNode = node.previousSibling;
              while (tmpNode && tmpNode.nodeType == 3) {
                firstIndex += tmpNode.nodeValue.replace(fillCharReg, '').length;
                tmpNode = tmpNode.previousSibling;
              }
              firstIndex += isStart ? me.startOffset : me.endOffset// - (fillCharReg.test(node.nodeValue) ? 1 : 0 )
            } else {
              node = node.childNodes[isStart ? me.startOffset : me.endOffset];
              if (node) {
                firstIndex = domUtils.getNodeIndex(node, ignoreTxt);
              } else {
                node = isStart ? me.startContainer : me.endContainer;
                var first = node.firstChild;
                while (first) {
                  if (domUtils.isFillChar(first)) {
                    first = first.nextSibling;
                    continue;
                  }
                  firstIndex++;
                  if (first.nodeType == 3) {
                    while (first && first.nodeType == 3) {
                      first = first.nextSibling;
                    }
                  } else {
                    first = first.nextSibling;
                  }
                }
              }
            }

          } else {
            firstIndex = isStart ? domUtils.isFillChar(node) ? 0 : me.startOffset : me.endOffset
          }
          if (firstIndex < 0) {
            firstIndex = 0;
          }
          addrs.push(firstIndex);
          return addrs;
        }

        addr.startAddress = getAddress(true);
        if (!ignoreEnd) {
          addr.endAddress = me.collapsed ? [].concat(addr.startAddress) : getAddress();
        }
        return addr;
      },

      /**
       * 保存
       * @method createAddress
       * @private
       * @return { Boolean } 返回开始和结束的位置
       * @example
       * ```html
       * <body>
       *     <p>
       *         aaaa
       *         <em>
       *             <!-- 选区开始 -->
       *             bbbb
       *             <!-- 选区结束 -->
       *         </em>
       *     </p>
       *
       *     <script>
       *         var range = editor.selection.getRange();
       *         range.moveToAddress({startAddress:[0,1,0,0],endAddress:[0,1,0,4]});
       *         range.select();
       *         //output: 'bbbb'
       *         console.log(editor.selection.getText());
       *     </script>
       * </body>
       * ```
       */
      moveToAddress: function (addr, ignoreEnd) {
        var me = this;

        function getNode(address, isStart) {
          var tmpNode = me.document.body,
            parentNode, offset;
          for (var i = 0, ci, l = address.length; i < l; i++) {
            ci = address[i];
            parentNode = tmpNode;
            tmpNode = tmpNode.childNodes[ci];
            if (!tmpNode) {
              offset = ci;
              break;
            }
          }
          if (isStart) {
            if (tmpNode) {
              me.setStartBefore(tmpNode)
            } else {
              me.setStart(parentNode, offset)
            }
          } else {
            if (tmpNode) {
              me.setEndBefore(tmpNode)
            } else {
              me.setEnd(parentNode, offset)
            }
          }
        }

        getNode(addr.startAddress, true);
        !ignoreEnd && addr.endAddress && getNode(addr.endAddress);
        return me;
      },

      /**
       * 判断给定的Range对象是否和当前Range对象表示的是同一个选区
       * @method equals
       * @param { AX.dom.Range } 需要判断的Range对象
       * @return { Boolean } 如果给定的Range对象与当前Range对象表示的是同一个选区， 则返回true， 否则返回false
       */
      equals: function (rng) {
        for (var p in this) {
          if (this.hasOwnProperty(p)) {
            if (this[p] !== rng[p]) {
              return false
            }
          }
        }
        return true;

      },

      /**
       * 遍历range内的节点。每当遍历一个节点时， 都会执行参数项 doFn 指定的函数， 该函数的接受当前遍历的节点
       * 作为其参数。
       * @method traversal
       * @param { Function }  doFn 对每个遍历的节点要执行的方法， 该方法接受当前遍历的节点作为其参数
       * @return { AX.dom.Range } 当前range对象
       * @example
       * ```html
       *
       * <body>
       *
       *     <!-- 选区开始 -->
       *     <span></span>
       *     <a></a>
       *     <!-- 选区结束 -->
       * </body>
       *
       * <script>
       *
       *     //output: <span></span><a></a>
       *     console.log( range.cloneContents() );
       *
       *     range.traversal( function ( node ) {
       *
       *         if ( node.nodeType === 1 ) {
       *             node.className = "test";
       *         }
       *
       *     } );
       *
       *     //output: <span class="test"></span><a class="test"></a>
       *     console.log( range.cloneContents() );
       *
       * </script>
       * ```
       */

      /**
       * 遍历range内的节点。
       * 每当遍历一个节点时， 都会执行参数项 doFn 指定的函数， 该函数的接受当前遍历的节点
       * 作为其参数。
       * 可以通过参数项 filterFn 来指定一个过滤器， 只有符合该过滤器过滤规则的节点才会触
       * 发doFn函数的执行
       * @method traversal
       * @param { Function } doFn 对每个遍历的节点要执行的方法， 该方法接受当前遍历的节点作为其参数
       * @param { Function } filterFn 过滤器， 该函数接受当前遍历的节点作为参数， 如果该节点满足过滤
       *                      规则， 请返回true， 该节点会触发doFn， 否则， 请返回false， 则该节点不
       *                      会触发doFn。
       * @return { AX.dom.Range } 当前range对象
       * @see AX.dom.Range:traversal(Function)
       * @example
       * ```html
       *
       * <body>
       *
       *     <!-- 选区开始 -->
       *     <span></span>
       *     <a></a>
       *     <!-- 选区结束 -->
       * </body>
       *
       * <script>
       *
       *     //output: <span></span><a></a>
       *     console.log( range.cloneContents() );
       *
       *     range.traversal( function ( node ) {
       *
       *         node.className = "test";
       *
       *     }, function ( node ) {
       *          return node.nodeType === 1;
       *     } );
       *
       *     //output: <span class="test"></span><a class="test"></a>
       *     console.log( range.cloneContents() );
       *
       * </script>
       * ```
       */
      traversal: function (doFn, filterFn) {
        if (this.collapsed) {
          return this;
        }
        var bookmark = this.createBookmark(),
          end = bookmark.end,
          current = domUtils.getNextDomNode(bookmark.start, false, filterFn);
        while (current && current !== end && domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING) {
          var tmpNode = domUtils.getNextDomNode(current, false, filterFn);
          doFn(current);
          current = tmpNode;
        }
        return this.moveToBookmark(bookmark);
      }
    };
  })();

  // core/Selection.js
  /**
   * 选集
   * @file
   * @module AX.dom
   * @class Selection
   * @since 1.2.6.1
   */

  /**
   * 选区集合
   * @unfile
   * @module AX.dom
   * @class Selection
   */
  (function () {

    function getBoundaryInformation(range, start) {
      var getIndex = domUtils.getNodeIndex;
      range = range.duplicate();
      range.collapse(start);
      var parent = range.parentElement();
      //如果节点里没有子节点，直接退出
      if (!parent.hasChildNodes()) {
        return { container: parent, offset: 0 };
      }
      var siblings = parent.children,
        child,
        testRange = range.duplicate(),
        startIndex = 0, endIndex = siblings.length - 1, index = -1,
        distance;
      while (startIndex <= endIndex) {
        index = Math.floor((startIndex + endIndex) / 2);
        child = siblings[index];
        testRange.moveToElementText(child);
        var position = testRange.compareEndPoints('StartToStart', range);
        if (position > 0) {
          endIndex = index - 1;
        } else if (position < 0) {
          startIndex = index + 1;
        } else {
          //trace:1043
          return { container: parent, offset: getIndex(child) };
        }
      }
      if (index == -1) {
        testRange.moveToElementText(parent);
        testRange.setEndPoint('StartToStart', range);
        distance = testRange.text.replace(/(\r\n|\r)/g, '\n').length;
        siblings = parent.childNodes;
        if (!distance) {
          child = siblings[siblings.length - 1];
          return { container: child, offset: child.nodeValue.length };
        }

        var i = siblings.length;
        while (distance > 0) {
          distance -= siblings[--i].nodeValue.length;
        }
        return { container: siblings[i], offset: -distance };
      }
      testRange.collapse(position > 0);
      testRange.setEndPoint(position > 0 ? 'StartToStart' : 'EndToStart', range);
      distance = testRange.text.replace(/(\r\n|\r)/g, '\n').length;
      if (!distance) {
        return dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName] ?
          { container: parent, offset: getIndex(child) + (position > 0 ? 0 : 1) } :
          { container: child, offset: position > 0 ? 0 : child.childNodes.length }
      }
      while (distance > 0) {
        try {
          var pre = child;
          child = child[position > 0 ? 'previousSibling' : 'nextSibling'];
          distance -= child.nodeValue.length;
        } catch (e) {
          return { container: parent, offset: getIndex(pre) };
        }
      }
      return { container: child, offset: position > 0 ? -distance : child.nodeValue.length + distance }
    }

    /**
     * 将ieRange转换为Range对象
     * @param {Range}   ieRange    ieRange对象
     * @param {Range}   range      Range对象
     * @return  {Range}  range       返回转换后的Range对象
     */
    function transformIERangeToRange(ieRange, range) {
      if (ieRange.item) {
        range.selectNode(ieRange.item(0));
      } else {
        var bi = getBoundaryInformation(ieRange, true);
        range.setStart(bi.container, bi.offset);
        if (ieRange.compareEndPoints('StartToEnd', ieRange) != 0) {
          bi = getBoundaryInformation(ieRange, false);
          range.setEnd(bi.container, bi.offset);
        }
      }
      return range;
    }

    /**
     * 获得ieRange
     * @param {Selection} sel    Selection对象
     * @return {ieRange}    得到ieRange
     */
    function _getIERange(sel) {
      var ieRange;
      //ie下有可能报错
      try {
        ieRange = sel.getNative().createRange();
      } catch (e) {
        return null;
      }
      var el = ieRange.item ? ieRange.item(0) : ieRange.parentElement();
      if ((el.ownerDocument || el) === sel.document) {
        return ieRange;
      }
      return null;
    }

    var Selection = dom.Selection = function (doc) {
      var me = this, iframe;
      me.document = doc;
      if (browser.ie9below) {
        iframe = domUtils.getWindow(doc).frameElement;
        domUtils.on(iframe, 'beforedeactivate', function () {
          me._bakIERange = me.getIERange();
        });
        domUtils.on(iframe, 'activate', function () {
          try {
            if (!_getIERange(me) && me._bakIERange) {
              me._bakIERange.select();
            }
          } catch (ex) {
          }
          me._bakIERange = null;
        });
      }
      iframe = doc = null;
    };

    Selection.prototype = {

      rangeInBody: function (rng, txtRange) {
        var node = browser.ie9below || txtRange ? rng.item ? rng.item() : rng.parentElement() : rng.startContainer;

        return node === this.document.body || domUtils.inDoc(node, this.document);
      },

      /**
       * 获取原生seleciton对象
       * @method getNative
       * @return { Object } 获得selection对象
       * @example
       * ```javascript
       * editor.selection.getNative();
       * ```
       */
      getNative: function () {
        var doc = this.document;
        try {
          return !doc ? null : browser.ie9below ? doc.selection : domUtils.getWindow(doc).getSelection();
        } catch (e) {
          return null;
        }
      },

      /**
       * 获得ieRange
       * @method getIERange
       * @return { Object } 返回ie原生的Range
       * @example
       * ```javascript
       * editor.selection.getIERange();
       * ```
       */
      getIERange: function () {
        var ieRange = _getIERange(this);
        if (!ieRange) {
          if (this._bakIERange) {
            return this._bakIERange;
          }
        }
        return ieRange;
      },

      /**
       * 缓存当前选区的range和选区的开始节点
       * @method cache
       */
      cache: function () {
        this.clear();
        this._cachedRange = this.getRange();
        this._cachedStartElement = this.getStart();
        this._cachedStartElementPath = this.getStartElementPath();
      },

      /**
       * 获取选区开始位置的父节点到body
       * @method getStartElementPath
       * @return { Array } 返回父节点集合
       * @example
       * ```javascript
       * editor.selection.getStartElementPath();
       * ```
       */
      getStartElementPath: function () {
        if (this._cachedStartElementPath) {
          return this._cachedStartElementPath;
        }
        var start = this.getStart();
        if (start) {
          return domUtils.findParents(start, true, null, true)
        }
        return [];
      },

      /**
       * 清空缓存
       * @method clear
       */
      clear: function () {
        this._cachedStartElementPath = this._cachedRange = this._cachedStartElement = null;
      },

      /**
       * 编辑器是否得到了选区
       * @method isFocus
       */
      isFocus: function () {
        try {
          if (browser.ie9below) {

            var nativeRange = _getIERange(this);
            return !!(nativeRange && this.rangeInBody(nativeRange));
          }
          return !!this.getNative().rangeCount;

        } catch (e) {
          return false;
        }

      },

      /**
       * 获取选区对应的Range
       * @method getRange
       * @return { Object } 得到Range对象
       * @example
       * ```javascript
       * editor.selection.getRange();
       * ```
       */
      getRange: function () {
        var me = this;

        function optimze(range) {
          var child = me.document.body.firstChild,
            collapsed = range.collapsed;
          while (child && child.firstChild) {
            range.setStart(child, 0);
            child = child.firstChild;
          }
          if (!range.startContainer) {
            range.setStart(me.document.body, 0)
          }
          if (collapsed) {
            range.collapse(true);
          }
        }

        if (me._cachedRange != null) {
          return this._cachedRange;
        }
        var range = new baidu.editor.dom.Range(me.document);

        if (browser.ie9below) {
          var nativeRange = me.getIERange();
          if (nativeRange) {
            //备份的_bakIERange可能已经实效了，dom树发生了变化比如从源码模式切回来，所以try一下，实效就放到body开始位置
            try {
              transformIERangeToRange(nativeRange, range);
            } catch (e) {
              optimze(range);
            }

          } else {
            optimze(range);
          }
        } else {
          var sel = me.getNative();
          if (sel && sel.rangeCount) {
            var firstRange = sel.getRangeAt(0);
            var lastRange = sel.getRangeAt(sel.rangeCount - 1);
            range.setStart(firstRange.startContainer, firstRange.startOffset).setEnd(lastRange.endContainer, lastRange.endOffset);
            if (range.collapsed && domUtils.isBody(range.startContainer) && !range.startOffset) {
              optimze(range);
            }
          } else {
            //trace:1734 有可能已经不在dom树上了，标识的节点
            if (this._bakRange && domUtils.inDoc(this._bakRange.startContainer, this.document)) {
              return this._bakRange;
            }
            optimze(range);
          }
        }
        return this._bakRange = range;
      },

      /**
       * 获取开始元素，用于状态反射
       * @method getStart
       * @return { Element } 获得开始元素
       * @example
       * ```javascript
       * editor.selection.getStart();
       * ```
       */
      getStart: function () {
        if (this._cachedStartElement) {
          return this._cachedStartElement;
        }
        var range = browser.ie9below ? this.getIERange() : this.getRange(),
          tmpRange,
          start, tmp, parent;
        if (browser.ie9below) {
          if (!range) {
            //todo 给第一个值可能会有问题
            return this.document.body.firstChild;
          }
          //control元素
          if (range.item) {
            return range.item(0);
          }
          tmpRange = range.duplicate();
          //修正ie下<b>x</b>[xx] 闭合后 <b>x|</b>xx
          tmpRange.text.length > 0 && tmpRange.moveStart('character', 1);
          tmpRange.collapse(1);
          start = tmpRange.parentElement();
          parent = tmp = range.parentElement();
          while (tmp = tmp.parentNode) {
            if (tmp == start) {
              start = parent;
              break;
            }
          }
        } else {
          range.shrinkBoundary();
          start = range.startContainer;
          if (start.nodeType == 1 && start.hasChildNodes()) {
            start = start.childNodes[Math.min(start.childNodes.length - 1, range.startOffset)];
          }
          if (start.nodeType == 3) {
            return start.parentNode;
          }
        }
        return start;
      },

      /**
       * 得到选区中的文本
       * @method getText
       * @return { String } 选区中包含的文本
       * @example
       * ```javascript
       * editor.selection.getText();
       * ```
       */
      getText: function () {
        var nativeSel, nativeRange;
        if (this.isFocus() && (nativeSel = this.getNative())) {
          nativeRange = browser.ie9below ? nativeSel.createRange() : nativeSel.getRangeAt(0);
          return browser.ie9below ? nativeRange.text : nativeRange.toString();
        }
        return '';
      },

      /**
       * 清除选区
       * @method clearRange
       * @example
       * ```javascript
       * editor.selection.clearRange();
       * ```
       */
      clearRange: function () {
        this.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
      }
    };
  })();

  // core/Editor.js
  /**
   * 编辑器主类，包含编辑器提供的大部分公用接口
   * @file
   * @module AX
   * @class Editor
   * @since 1.2.6.1
   */

  /**
   * UEditor公用空间，UEditor所有的功能都挂载在该空间下
   * @unfile
   * @module AX
   */

  /**
   * UEditor的核心类，为用户提供与编辑器交互的接口。
   * @unfile
   * @module AX
   * @class Editor
   */

  (function () {
    var uid = 0, _selectionChangeTimer;

    /**
     * 获取编辑器的html内容，赋值到编辑器所在表单的textarea文本域里面
     * @private
     * @method setValue
     * @param { AX.Editor } editor 编辑器事例
     */
    function setValue(form, editor) {
      var textarea;
      if (editor.textarea) {
        if (utils.isString(editor.textarea)) {
          for (var i = 0, ti, tis = domUtils.getElementsByTagName(form, 'textarea'); ti = tis[i++];) {
            if (ti.id == 'ueditor_textarea_' + editor.options.textarea) {
              textarea = ti;
              break;
            }
          }
        } else {
          textarea = editor.textarea;
        }
      }
      if (!textarea) {
        form.appendChild(textarea = domUtils.createElement(document, 'textarea', {
          'name': editor.options.textarea,
          'id': 'ueditor_textarea_' + editor.options.textarea,
          'style': "display:none"
        }));
        //不要产生多个textarea
        editor.textarea = textarea;
      }
      !textarea.getAttribute('name') && textarea.setAttribute('name', editor.options.textarea);
      textarea.value = editor.hasContents() ?
        editor.options.allHtmlEnabled ? editor.getAllHtml() : editor.getContent(null, null, true) :
        ''
    }

    function loadPlugins(me) {
      //初始化插件
      for (var pi in AX.plugins) {
        AX.plugins[pi].call(me);
      }

    }

    function checkCurLang(I18N) {
      for (var lang in I18N) {
        return lang
      }
    }

    function langReadied(me) {
      me.langIsReady = true;

      me.fireEvent("langReady");
    }

    /**
     * 编辑器准备就绪后会触发该事件
     * @module AX
     * @class Editor
     * @event ready
     * @remind render方法执行完成之后,会触发该事件
     * @remind
     * @example
     * ```javascript
     * editor.addListener( 'ready', function( editor ) {
     *     editor.execCommand( 'focus' ); //编辑器家在完成后，让编辑器拿到焦点
     * } );
     * ```
     */
    /**
     * 执行destroy方法,会触发该事件
     * @module AX
     * @class Editor
     * @event destroy
     * @see AX.Editor:destroy()
     */
    /**
     * 执行reset方法,会触发该事件
     * @module AX
     * @class Editor
     * @event reset
     * @see AX.Editor:reset()
     */
    /**
     * 执行focus方法,会触发该事件
     * @module AX
     * @class Editor
     * @event focus
     * @see AX.Editor:focus(Boolean)
     */
    /**
     * 语言加载完成会触发该事件
     * @module AX
     * @class Editor
     * @event langReady
     */
    /**
     * 运行命令之后会触发该命令
     * @module AX
     * @class Editor
     * @event beforeExecCommand
     */
    /**
     * 运行命令之后会触发该命令
     * @module AX
     * @class Editor
     * @event afterExecCommand
     */
    /**
     * 运行命令之前会触发该命令
     * @module AX
     * @class Editor
     * @event firstBeforeExecCommand
     */
    /**
     * 在getContent方法执行之前会触发该事件
     * @module AX
     * @class Editor
     * @event beforeGetContent
     * @see AX.Editor:getContent()
     */
    /**
     * 在getContent方法执行之后会触发该事件
     * @module AX
     * @class Editor
     * @event afterGetContent
     * @see AX.Editor:getContent()
     */
    /**
     * 在getAllHtml方法执行时会触发该事件
     * @module AX
     * @class Editor
     * @event getAllHtml
     * @see AX.Editor:getAllHtml()
     */
    /**
     * 在setContent方法执行之前会触发该事件
     * @module AX
     * @class Editor
     * @event beforeSetContent
     * @see AX.Editor:setContent(String)
     */
    /**
     * 在setContent方法执行之后会触发该事件
     * @module AX
     * @class Editor
     * @event afterSetContent
     * @see AX.Editor:setContent(String)
     */
    /**
     * 每当编辑器内部选区发生改变时，将触发该事件
     * @event selectionchange
     * @warning 该事件的触发非常频繁，不建议在该事件的处理过程中做重量级的处理
     * @example
     * ```javascript
     * editor.addListener( 'selectionchange', function( editor ) {
     *     console.log('选区发生改变');
     * }
     */
    /**
     * 在所有selectionchange的监听函数执行之前，会触发该事件
     * @module AX
     * @class Editor
     * @event beforeSelectionChange
     * @see AX.Editor:selectionchange
     */
    /**
     * 在所有selectionchange的监听函数执行完之后，会触发该事件
     * @module AX
     * @class Editor
     * @event afterSelectionChange
     * @see AX.Editor:selectionchange
     */
    /**
     * 编辑器内容发生改变时会触发该事件
     * @module AX
     * @class Editor
     * @event contentChange
     */


    /**
     * 以默认参数构建一个编辑器实例
     * @constructor
     * @remind 通过 改构造方法实例化的编辑器,不带ui层.需要render到一个容器,编辑器实例才能正常渲染到页面
     * @example
     * ```javascript
     * var editor = new AX.Editor();
     * editor.execCommand('blod');
     * ```
     * @see AX.Config
     */

    /**
     * 以给定的参数集合创建一个编辑器实例，对于未指定的参数，将应用默认参数。
     * @constructor
     * @remind 通过 改构造方法实例化的编辑器,不带ui层.需要render到一个容器,编辑器实例才能正常渲染到页面
     * @param { Object } setting 创建编辑器的参数
     * @example
     * ```javascript
     * var editor = new AX.Editor();
     * editor.execCommand('blod');
     * ```
     * @see AX.Config
     */
    var Editor = AX.Editor = function (options) {
      var me = this;
      me.uid = uid++;
      EventBase.call(me);
      me.commands = {};
      me.options = utils.extend(utils.clone(options || {}), AXEDITOR_CONFIG, true);
      me.shortcutkeys = {};
      me.inputRules = [];
      me.outputRules = [];
      //设置默认的常用属性
      me.setOpt(Editor.defaultOptions(me));

      /* 尝试异步加载后台配置 */
      me.loadServerConfig();

      if (!utils.isEmptyObject(AX.I18N)) {
        //修改默认的语言类型
        me.options.lang = checkCurLang(AX.I18N);
        AX.plugin.load(me);
        langReadied(me);

      } else {
        utils.loadFile(document, {
          src: me.options.langPath + me.options.lang + "/" + me.options.lang + ".js",
          tag: "script",
          type: "text/javascript",
          defer: "defer"
        }, function () {
          AX.plugin.load(me);
          langReadied(me);
        });
      }

      AX.instants['ueditorInstant' + me.uid] = me;
    };
    Editor.prototype = {
      registerCommand: function (name, obj) {
        this.commands[name] = obj;
      },
      /**
       * 编辑器对外提供的监听ready事件的接口， 通过调用该方法，达到的效果与监听ready事件是一致的
       * @method ready
       * @param { Function } fn 编辑器ready之后所执行的回调, 如果在注册事件之前编辑器已经ready，将会
       * 立即触发该回调。
       * @remind 需要等待编辑器加载完成后才能执行的代码,可以使用该方法传入
       * @example
       * ```javascript
       * editor.ready( function( editor ) {
       *     editor.setContent('初始化完毕');
       * } );
       * ```
       * @see AX.Editor.event:ready
       */
      ready: function (fn) {
        console.error('ready==========')
        var me = this;
        if (fn) {
          me.isReady ? fn.apply(me) : me.addListener('ready', fn);
        }
      },

      keyUp: function (fn) {
        me.addListener("keyup", function (t, evt) {
            var dom = $(evt.target).parents('.paragraphele').clone();
            var title = dom.find('strong')
            title.remove()
            console.log('dom===', dom.text())
            fn(dom.text())
        })
      },

      /**
       * 该方法是提供给插件里面使用，设置配置项默认值
       * @method setOpt
       * @warning 三处设置配置项的优先级: 实例化时传入参数 > setOpt()设置 > config文件里设置
       * @warning 该方法仅供编辑器插件内部和编辑器初始化时调用，其他地方不能调用。
       * @param { String } key 编辑器的可接受的选项名称
       * @param { * } val  该选项可接受的值
       * @example
       * ```javascript
       * editor.setOpt( 'initContent', '欢迎使用编辑器' );
       * ```
       */

      /**
       * 该方法是提供给插件里面使用，以{key:value}集合的方式设置插件内用到的配置项默认值
       * @method setOpt
       * @warning 三处设置配置项的优先级: 实例化时传入参数 > setOpt()设置 > config文件里设置
       * @warning 该方法仅供编辑器插件内部和编辑器初始化时调用，其他地方不能调用。
       * @param { Object } options 将要设置的选项的键值对对象
       * @example
       * ```javascript
       * editor.setOpt( {
       *     'initContent': '欢迎使用编辑器'
       * } );
       * ```
       */
      setOpt: function (key, val) {
        var obj = {};
        if (utils.isString(key)) {
          obj[key] = val
        } else {
          obj = key;
        }
        utils.extend(this.options, obj, true);
      },
      getOpt: function (key) {
        return this.options[key]
      },
      /**
       * 销毁编辑器实例，使用textarea代替
       * @method destroy
       * @example
       * ```javascript
       * editor.destroy();
       * ```
       */
      destroy: function () {

        var me = this;
        me.fireEvent('destroy');
        var container = me.container.parentNode;
        // var textarea = me.textarea;
        // if (!textarea) {
        //   textarea = document.createElement('textarea');
        //   container.parentNode.insertBefore(textarea, container);
        // } else {
        //   textarea.style.display = ''
        // }

        // textarea.style.width = me.iframe.offsetWidth + 'px';
        // textarea.style.height = me.iframe.offsetHeight + 'px';
        // textarea.value = me.getContent();
        // textarea.id = me.key;
        container.innerHTML = '';
        domUtils.remove(container);
        var key = me.key;
        //trace:2004
        for (var p in me) {
          if (me.hasOwnProperty(p)) {
            delete this[p];
          }
        }
        AX.delEditor(key);
      },

      /**
       * 渲染编辑器的DOM到指定容器
       * @method render
       * @param { String } containerId 指定一个容器ID
       * @remind 执行该方法,会触发ready事件
       * @warning 必须且只能调用一次
       */

      /**
       * 渲染编辑器的DOM到指定容器
       * @method render
       * @param { Element } containerDom 直接指定容器对象
       * @remind 执行该方法,会触发ready事件
       * @warning 必须且只能调用一次
       */
      render: function (container, opt) {
        var me = this,
          options = me.options,
          getStyleValue = function (attr) {
            return parseInt(domUtils.getComputedStyle(container, attr));
          };
        var url = opt.AXEDITOR_HOME_URL || me.options.AXEDITOR_HOME_URL;
        if (utils.isString(container)) {
          container = document.getElementById(container);
        }
        if (container) {
          if (options.initialFrameWidth) {
            options.minFrameWidth = options.initialFrameWidth
          } else {
            options.minFrameWidth = options.initialFrameWidth = '100%';//container.offsetWidth;
          }
          if (options.initialFrameHeight) {
            options.minFrameHeight = options.initialFrameHeight
          } else {
            options.initialFrameHeight = options.minFrameHeight = container.offsetHeight;
          }

          container.style.width = /%$/.test(options.initialFrameWidth) ? '100%' : options.initialFrameWidth -
            getStyleValue("padding-left") - getStyleValue("padding-right") + 'px';
          container.style.height = /%$/.test(options.initialFrameHeight) ? '100%' : options.initialFrameHeight -
            getStyleValue("padding-top") - getStyleValue("padding-bottom") + 'px';

          container.style.zIndex = options.zIndex;

          var html = (ie && browser.version < 9 ? '' : '<!DOCTYPE html>') +
            '<html xmlns=\'http://www.w3.org/1999/xhtml\' class=\'view\' style=\'height:100%\' ><head>' +
            '<style type=\'text/css\'>' +
            //设置四周的留边
            '.view{padding:0;word-wrap:break-word;word-break:break-all;cursor:text;}\n' +
            //设置默认字体和字号
            //font-family不能呢随便改，在safari下fillchar会有解析问题
            'body{margin:8px;font-family:宋体;font-size:12px;}' +
            //设置段落间距
            'p{margin:5px 0;}</style>' +
            (url ? '<link rel=\'stylesheet\' type=\'text/css\' href=\'' + utils.unhtml(url + options.iframeCssUrl) + '\'/>' : '') +
            (url ? '<script type=\'text/javascript\' src=\'' + utils.unhtml(url + options.iframeJsUrl) + '\'/></script>' : '') +
            (url ? '<script type=\'text/javascript\' src=\'' + utils.unhtml(url + options.jqJsUrl) + '\'/></script>' : '') +
            (options.initialStyle ? '<style>' + options.initialStyle + '</style>' : '') +
            '</head><body class=\'view\' ></body>' +
            '<script type=\'text/javascript\' ' + (ie ? 'defer=\'defer\'' : '') + ' id=\'_initialScript\'>' +
            // 'function callbackIframe(AX){ editor = AX.instants[\'ueditorInstant' + me.uid + '\'];editor._setup(document); }' +
            // ';window.onload = function(){ window.parent.emreditorOnloadHandler() };' +
            'setTimeout(function(){editor = window.parent.AX.instants[\'ueditorInstant' + me.uid + '\'];editor._setup(document);},0);' +
            'var _tmpScript = document.getElementById(\'_initialScript\');_tmpScript.parentNode.removeChild(_tmpScript);</script></html>';
          container.appendChild(domUtils.createElement(document, 'iframe', {
            id: 'ueditor_' + me.uid,
            class: me.key + '-contentiframe ax-editor-content-iframe',
            width: "100%",
            height: "100%",
            frameborder: "0",
            //先注释掉了，加的原因忘记了，但开启会直接导致全屏模式下内容多时不会出现滚动条
            //                    scrolling :'no',
            src: 'javascript:void(function(){document.open();' + (options.customDomain && document.domain != location.hostname ? 'document.domain="' + document.domain + '";' : '') +
              'document.write("' + html + '");document.close();}())'
          }));
          container.style.overflow = 'hidden';
          //解决如果是给定的百分比，会导致高度算不对的问题
          setTimeout(function () {
            if (/%$/.test(options.initialFrameWidth)) {
              options.minFrameWidth = options.initialFrameWidth = container.offsetWidth;
              //如果这里给定宽度，会导致ie在拖动窗口大小时，编辑区域不随着变化
              //                        container.style.width = options.initialFrameWidth + 'px';
            }
            if (/%$/.test(options.initialFrameHeight)) {
              options.minFrameHeight = options.initialFrameHeight = container.offsetHeight;
              container.style.height = options.initialFrameHeight + 'px';
            }
          })
        }
      },

      /**
       * 编辑器初始化
       * @method _setup
       * @private
       * @param { Element } doc 编辑器Iframe中的文档对象
       */
      _setup: function (doc) {

        var me = this,
          options = me.options;
        if (ie) {
          doc.body.disabled = true;
          doc.body.contentEditable = true;
          doc.body.disabled = false;
        } else {
          doc.body.contentEditable = true;
        }
        doc.body.spellcheck = false;
        me.document = doc;
        me.window = doc.defaultView || doc.parentWindow;
        me.iframe = me.window.frameElement;
        me.body = doc.body;
        me.selection = new dom.Selection(doc);
        //gecko初始化就能得到range,无法判断isFocus了
        var geckoSel;
        if (browser.gecko && (geckoSel = this.selection.getNative())) {
          geckoSel.removeAllRanges();
        }
        this._initEvents();
        //为form提交提供一个隐藏的textarea
        for (var form = this.iframe.parentNode; !domUtils.isBody(form); form = form.parentNode) {
          if (form.tagName == 'FORM') {
            me.form = form;
            if (me.options.autoSyncData) {
              domUtils.on(me.window, 'blur', function () {
                setValue(form, me);
              });
            } else {
              domUtils.on(form, 'submit', function () {
                setValue(this, me);
              });
            }
            break;
          }
        }
        if (options.initialContent) {
          if (options.autoClearinitialContent) {
            var oldExecCommand = me.execCommand;
            me.execCommand = function () {
              me.fireEvent('firstBeforeExecCommand');
              return oldExecCommand.apply(me, arguments);
            };
            this._setDefaultContent(options.initialContent);
          } else {
            this.setContent(options.initialContent, false, true);
          }
        }

        //编辑器不能为空内容

        if (domUtils.isEmptyNode(me.body)) {
          me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';
        }
        //如果要求focus, 就把光标定位到内容开始
        if (options.focus) {
          setTimeout(function () {
            me.focus(me.options.focusInEnd);
            //如果自动清除开着，就不需要做selectionchange;
            !me.options.autoClearinitialContent && me._selectionChange();
          }, 0);
        }
        if (!me.container) {
          me.container = this.iframe.parentNode;
        }
        if (options.fullscreen && me.ui) {
          me.ui.setFullScreen(true);
        }

        try {
          me.document.execCommand('2D-position', false, false);
        } catch (e) {
        }
        try {
          me.document.execCommand('enableInlineTableEditing', false, false);
        } catch (e) {
        }
        try {
          me.document.execCommand('enableObjectResizing', false, false);
        } catch (e) {
        }

        //挂接快捷键
        me._bindshortcutKeys();
        me.isReady = 1;
        me.fireEvent('ready');
        options.onready && options.onready.call(me);
        if (!browser.ie9below) {
          domUtils.on(me.window, ['blur', 'focus'], function (e) {
            //chrome下会出现alt+tab切换时，导致选区位置不对
            if (e.type == 'blur') {
              me._bakRange = me.selection.getRange();
              try {
                me._bakNativeRange = me.selection.getNative().getRangeAt(0);
                me.selection.getNative().removeAllRanges();
              } catch (e) {
                me._bakNativeRange = null;
              }

            } else {
              try {
                me._bakRange && me._bakRange.select();
              } catch (e) {
              }
            }
          });
        }
        //trace:1518 ff3.6body不够寛，会导致点击空白处无法获得焦点
        if (browser.gecko && browser.version <= 10902) {
          //修复ff3.6初始化进来，不能点击获得焦点
          me.body.contentEditable = false;
          setTimeout(function () {
            me.body.contentEditable = true;
          }, 100);
          setInterval(function () {
            me.body.style.height = me.iframe.offsetHeight - 20 + 'px'
          }, 100)
        }

        !options.isShow && me.setHide();
        options.readonly && me.setDisabled();
      },

      /**
       * 同步数据到编辑器所在的form
       * 从编辑器的容器节点向上查找form元素，若找到，就同步编辑内容到找到的form里，为提交数据做准备，主要用于是手动提交的情况
       * 后台取得数据的键值，使用你容器上的name属性，如果没有就使用参数里的textarea项
       * @method sync
       * @example
       * ```javascript
       * editor.sync();
       * form.sumbit(); //form变量已经指向了form元素
       * ```
       */

      /**
       * 根据传入的formId，在页面上查找要同步数据的表单，若找到，就同步编辑内容到找到的form里，为提交数据做准备
       * 后台取得数据的键值，该键值默认使用给定的编辑器容器的name属性，如果没有name属性则使用参数项里给定的“textarea”项
       * @method sync
       * @param { String } formID 指定一个要同步数据的form的id,编辑器的数据会同步到你指定form下
       */
      sync: function (formId) {
        var me = this,
          form = formId ? document.getElementById(formId) :
            domUtils.findParent(me.iframe.parentNode, function (node) {
              return node.tagName == 'FORM'
            }, true);
        form && setValue(form, me);
      },

      /**
       * 设置编辑器高度
       * @method setHeight
       * @remind 当配置项autoHeightEnabled为真时,该方法无效
       * @param { Number } number 设置的高度值，纯数值，不带单位
       * @example
       * ```javascript
       * editor.setHeight(number);
       * ```
       */
      setHeight: function (height, notSetHeight) {
        if (height !== parseInt(this.iframe.parentNode.style.height)) {
          this.iframe.parentNode.style.height = height + 'px';
        }
        !notSetHeight && (this.options.minFrameHeight = this.options.initialFrameHeight = height);
        this.body.style.height = height + 'px';
        !notSetHeight && this.trigger('setHeight')
      },

      /**
       * 为编辑器的编辑命令提供快捷键
       * 这个接口是为插件扩展提供的接口,主要是为新添加的插件，如果需要添加快捷键，所提供的接口
       * @method addshortcutkey
       * @param { Object } keyset 命令名和快捷键键值对对象，多个按钮的快捷键用“＋”分隔
       * @example
       * ```javascript
       * editor.addshortcutkey({
       *     "Bold" : "ctrl+66",//^B
       *     "Italic" : "ctrl+73", //^I
       * });
       * ```
       */
      /**
       * 这个接口是为插件扩展提供的接口,主要是为新添加的插件，如果需要添加快捷键，所提供的接口
       * @method addshortcutkey
       * @param { String } cmd 触发快捷键时，响应的命令
       * @param { String } keys 快捷键的字符串，多个按钮用“＋”分隔
       * @example
       * ```javascript
       * editor.addshortcutkey("Underline", "ctrl+85"); //^U
       * ```
       */
      addshortcutkey: function (cmd, keys) {
        var obj = {};
        if (keys) {
          obj[cmd] = keys
        } else {
          obj = cmd;
        }
        utils.extend(this.shortcutkeys, obj)
      },

      /**
       * 对编辑器设置keydown事件监听，绑定快捷键和命令，当快捷键组合触发成功，会响应对应的命令
       * @method _bindshortcutKeys
       * @private
       */
      _bindshortcutKeys: function () {
        var me = this, shortcutkeys = this.shortcutkeys;
        me.addListener('keydown', function (type, e) {
          var keyCode = e.keyCode || e.which;
          for (var i in shortcutkeys) {
            var tmp = shortcutkeys[i].split(',');
            for (var t = 0, ti; ti = tmp[t++];) {
              ti = ti.split(':');
              var key = ti[0], param = ti[1];
              if (/^(ctrl)(\+shift)?\+(\d+)$/.test(key.toLowerCase()) || /^(\d+)$/.test(key)) {
                if ((RegExp.$1 == 'ctrl' ? e.ctrlKey || e.metaKey : 0)
                  && (RegExp.$2 != "" ? e[RegExp.$2.slice(1) + "Key"] : 1)
                  && keyCode == RegExp.$3
                  ||
                  keyCode == RegExp.$1
                ) {
                  if (me.queryCommandState(i, param) != -1) {
                    me.execCommand(i, param);
                  }
                  domUtils.preventDefault(e);
                }
              }
            }

          }
        });
      },

      /**
       * 获取编辑器的内容
       * @method getContent
       * @warning 该方法获取到的是经过编辑器内置的过滤规则进行过滤后得到的内容
       * @return { String } 编辑器的内容字符串, 如果编辑器的内容为空，或者是空的标签内容（如:”&lt;p&gt;&lt;br/&gt;&lt;/p&gt;“）， 则返回空字符串
       * @example
       * ```javascript
       * //编辑器html内容:<p>1<strong>2<em>34</em>5</strong>6</p>
       * var content = editor.getContent(); //返回值:<p>1<strong>2<em>34</em>5</strong>6</p>
       * ```
       */

      /**
       * 获取编辑器的内容。 可以通过参数定义编辑器内置的判空规则
       * @method getContent
       * @param { Function } fn 自定的判空规则， 要求该方法返回一个boolean类型的值，
       *                      代表当前编辑器的内容是否空，
       *                      如果返回true， 则该方法将直接返回空字符串；如果返回false，则编辑器将返回
       *                      经过内置过滤规则处理后的内容。
       * @remind 该方法在处理包含有初始化内容的时候能起到很好的作用。
       * @warning 该方法获取到的是经过编辑器内置的过滤规则进行过滤后得到的内容
       * @return { String } 编辑器的内容字符串
       * @example
       * ```javascript
       * // editor 是一个编辑器的实例
       * var content = editor.getContent( function ( editor ) {
       *      return editor.body.innerHTML === '欢迎使用UEditor'; //返回空字符串
       * } );
       * ```
       */
      getContent: function (cmd, fn, notSetCursor, ignoreBlank, formatter) {
        var me = this;
        if (cmd && utils.isFunction(cmd)) {
          fn = cmd;
          cmd = '';
        }
        if (fn ? !fn() : !this.hasContents()) {
          return '';
        }
        me.fireEvent('beforegetcontent');
        if (me.options.editorModel == 'mark') {
          me.execCommand('resetmarktitle');
        }
        var root = AX.htmlparser(me.body.innerHTML, ignoreBlank);
        me.filterOutputRule(root);
        me.fireEvent('aftergetcontent', cmd, root);
        return root.toHtml(formatter);
      },

      /**
       * 取得完整的html代码，可以直接显示成完整的html文档
       * @method getAllHtml
       * @return { String } 编辑器的内容html文档字符串
       * @eaxmple
       * ```javascript
       * editor.getAllHtml(); //返回格式大致是: <html><head>...</head><body>...</body></html>
       * ```
       */
      getAllHtml: function () {
        var me = this,
          headHtml = [],
          html = '';
        me.fireEvent('getAllHtml', headHtml);
        if (browser.ie && browser.version > 8) {
          var headHtmlForIE9 = '';
          utils.each(me.document.styleSheets, function (si) {
            headHtmlForIE9 += si.href ? '<link rel="stylesheet" type="text/css" href="' + si.href + '" />' : '<style>' + si.cssText + '</style>';
          });
          utils.each(me.document.getElementsByTagName('script'), function (si) {
            headHtmlForIE9 += si.outerHTML;
          });

        }
        return '<html><head>' + (me.options.charset ? '<meta http-equiv="Content-Type" content="text/html; charset=' + me.options.charset + '"/>' : '')
          + (headHtmlForIE9 || me.document.getElementsByTagName('head')[0].innerHTML) + headHtml.join('\n') + '</head>'
          + '<body ' + (ie && browser.version < 9 ? 'class="view"' : '') + '>' + me.getContent(null, null, true) + '</body></html>';
      },

      /**
       * 得到编辑器的纯文本内容，但会保留段落格式
       * @method getPlainTxt
       * @return { String } 编辑器带段落格式的纯文本内容字符串
       * @example
       * ```javascript
       * //编辑器html内容:<p><strong>1</strong></p><p><strong>2</strong></p>
       * console.log(editor.getPlainTxt()); //输出:"1\n2\n
       * ```
       */
      getPlainTxt: function () {
        var reg = new RegExp(domUtils.fillChar, 'g'),
          html = this.body.innerHTML.replace(/[\n\r]/g, '');//ie要先去了\n在处理
        html = html.replace(/<(p|div)[^>]*>(<br\/?>|&nbsp;)<\/\1>/gi, '\n')
          .replace(/<br\/?>/gi, '\n')
          .replace(/<[^>/]+>/g, '')
          .replace(/(\n)?<\/([^>]+)>/g, function (a, b, c) {
            return dtd.$block[c] ? '\n' : b ? b : '';
          });
        //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
        return html.replace(reg, '').replace(/\u00a0/g, ' ').replace(/&nbsp;/g, ' ');
      },
      getNodePlainTxt: function (node) {
        var reg = new RegExp(domUtils.fillChar, 'g'),
          html = node.innerHTML.replace(/[\n\r]/g, '');//ie要先去了\n在处理
        html = html.replace(/<(p|div)[^>]*>(<br\/?>|&nbsp;)<\/\1>/gi, '\n')
          .replace(/<br\/?>/gi, '\n')
          .replace(/<[^>/]+>/g, '')
          .replace(/(\n)?<\/([^>]+)>/g, function (a, b, c) {
            return dtd.$block[c] ? '\n' : b ? b : '';
          });
        //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
        return html.replace(reg, '').replace(/\u00a0/g, ' ').replace(/&nbsp;/g, ' ');
      },

      /**
       * 获取编辑器中的纯文本内容,没有段落格式
       * @method getContentTxt
       * @return { String } 编辑器不带段落格式的纯文本内容字符串
       * @example
       * ```javascript
       * //编辑器html内容:<p><strong>1</strong></p><p><strong>2</strong></p>
       * console.log(editor.getPlainTxt()); //输出:"12
       * ```
       */
      getContentTxt: function () {
        var reg = new RegExp(domUtils.fillChar, 'g');
        //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
        return this.body[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').replace(/\u00a0/g, ' ');
      },

      /**
       * 设置编辑器的内容，可修改编辑器当前的html内容
       * @method setContent
       * @warning 通过该方法插入的内容，是经过编辑器内置的过滤规则进行过滤后得到的内容
       * @warning 该方法会触发selectionchange事件
       * @param { String } html 要插入的html内容
       * @example
       * ```javascript
       * editor.getContent('<p>test</p>');
       * ```
       */

      /**
       * 设置编辑器的内容，可修改编辑器当前的html内容
       * @method setContent
       * @warning 通过该方法插入的内容，是经过编辑器内置的过滤规则进行过滤后得到的内容
       * @warning 该方法会触发selectionchange事件
       * @param { String } html 要插入的html内容
       * @param { Boolean } isAppendTo 若传入true，不清空原来的内容，在最后插入内容，否则，清空内容再插入
       * @example
       * ```javascript
       * //假设设置前的编辑器内容是 <p>old text</p>
       * editor.setContent('<p>new text</p>', true); //插入的结果是<p>old text</p><p>new text</p>
       * ```
       */
      setContent: function (html, isAppendTo, notFireSelectionchange) {
        var me = this;
        me.fireEvent('beforesetcontent', html);
        var root = AX.htmlparser(html);
        me.filterInputRule(root);
        html = root.toHtml();
        // 改正段落错误格式
        html = axTools.validContentFormat(html);
        var $axPageContent = $('<div style="background: red">' + html + '</div>');
        if ($axPageContent.find('.ax-page-wrapper').length > 1) {
          var $axPageWrapper = $axPageContent.find('.ax-page-wrapper').eq(0);
          var $axPageHeader = $axPageContent.find('.ax-page-header').eq(0);
          var $axPageContents = $axPageContent.find('.ax-page-content');
          var $hiddenInputs = $axPageContent.find('input[type="hidden"]');
          var pageContentHtml = ''
          for(var i = 0; i < $axPageContents.length; i++) {
            pageContentHtml += $axPageContents.eq(i).html();
          }
          $axPageWrapper.html('<div class="ax-page-content">' + pageContentHtml + '</div>');
          $axPageWrapper.prepend($axPageHeader);
          $axPageWrapper.append($hiddenInputs);
          me.body.innerHTML = $axPageWrapper.prop('outerHTML');
        } else {
          me.body.innerHTML = (isAppendTo ? me.body.innerHTML : '') + html;
        }

        $(me.body).find('.ax-page-pagenum').remove()
        // me.body.innerHTML = (isAppendTo ? me.body.innerHTML : '') + html;
        // if (me.options.defaultModel != 'preview') {
          // if (!AX.pageControler) {
          //   AX.pageControler = new PageControler(me);
          // } else {
          //   AX.pageControler.updateRoot(me);
          // }
          // AX.pageControler.setContent(html);
        // } else {
          // me.body.innerHTML = (isAppendTo ? me.body.innerHTML : '') + html;
        // }

        if (me.options.editorModel == "preview") {
          var axPageContent = axTools.getByClass('ax-page-content', me.document);
          for (var j = 0; j < axPageContent.length; j++) {
            axPageContent[j].setAttribute("contenteditable", false);
          }
          //控件不可编辑
          axTools.setEditable(false, me.document, "pure");
          axTools.setStateLock(me, false);
          axTools.setBodyEditAttr(me, false);
        }
        if (me.options.editorModel == "edit") {
          var allCtrl = axTools.getByClass("ctrl-bg", me.document);
          for (var i = 0; i < allCtrl.length; i++) {
            if (allCtrl[i].getAttribute("axplugins") !== "paragraphele") {
              axTools.valueChange(allCtrl[i]);
            }
          }
        }
        function isCdataDiv(node) {
          return node.tagName == 'DIV' && node.getAttribute('cdata_tag');
        }

        //给文本或者inline节点套p标签
        if (me.options.enterTag == 'p') {

          var child = this.body.firstChild, tmpNode;
          if (!child || child.nodeType == 1 &&
            (dtd.$cdata[child.tagName] || isCdataDiv(child) ||
              domUtils.isCustomeNode(child)
            )
            && child === this.body.lastChild) {
            this.body.innerHTML = '<p>' + (browser.ie ? '&nbsp;' : '<br/>') + '</p>' + this.body.innerHTML;

          } else {
            var p = me.document.createElement('p');
            while (child) {
              while (child && (child.nodeType == 3 || child.nodeType == 1 && dtd.p[child.tagName] && !dtd.$cdata[child.tagName])) {
                tmpNode = child.nextSibling;
                p.appendChild(child);
                child = tmpNode;
              }
              if (p.firstChild) {
                if (!child) {
                  me.body.appendChild(p);
                  break;
                } else {
                  child.parentNode.insertBefore(p, child);
                  p = me.document.createElement('p');
                }
              }
              child = child.nextSibling;
            }
          }
        }
        me.fireEvent('aftersetcontent');
        me.fireEvent('contentchange');

        !notFireSelectionchange && me._selectionChange();
        //清除保存的选区
        me._bakRange = me._bakIERange = me._bakNativeRange = null;
        //trace:1742 setContent后gecko能得到焦点问题
        var geckoSel;
        if (browser.gecko && (geckoSel = this.selection.getNative())) {
          geckoSel.removeAllRanges();
        }
        if (me.options.autoSyncData) {
          me.form && setValue(me.form, me);
        }
        // ax-update: 内容更新后重置相关逻辑配置
        me.execCommand("restart");
      },

      /**
       * 让编辑器获得焦点，默认focus到编辑器头部
       * @method focus
       * @example
       * ```javascript
       * editor.focus()
       * ```
       */

      /**
       * 让编辑器获得焦点，toEnd确定focus位置
       * @method focus
       * @param { Boolean } toEnd 默认focus到编辑器头部，toEnd为true时focus到内容尾部
       * @example
       * ```javascript
       * editor.focus(true)
       * ```
       */
      focus: function (toEnd) {
        try {
          var me = this,
            rng = me.selection.getRange();
          if (toEnd) {
            var node = me.body.lastChild;
            //如果不是页脚，自动选中
            if (node && node.nodeType == 1 && !domUtils.hasClass(node, 'ax-editor-last-fill-node') && !dtd.$empty[node.tagName]) {
              if (domUtils.isEmptyBlock(node)) {
                rng.setStartAtFirst(node)
              } else {
                rng.setStartAtLast(node)
              }
              rng.collapse(true);
            }
            rng.setCursor(true);
          } else {
            if (!rng.collapsed && domUtils.isBody(rng.startContainer) && rng.startOffset == 0) {

              var node = me.body.firstChild;
              //如果不是页眉，自动选中
              if (node && node.nodeType == 1 && !dtd.$empty[node.tagName]) {
                rng.setStartAtFirst(node).collapse(true);
              }
            }

            rng.select(true);

          }
          this.fireEvent('focus selectionchange');
        } catch (e) {
        }

      },
      isFocus: function () {
        return this.selection.isFocus();
      },
      blur: function () {
        var sel = this.selection.getNative();
        if (sel.empty && browser.ie) {
          var nativeRng = document.body.createTextRange();
          nativeRng.moveToElementText(document.body);
          nativeRng.collapse(true);
          nativeRng.select();
          sel.empty()
        } else {
          sel.removeAllRanges()
        }

        //this.fireEvent('blur selectionchange');
      },
      /**
       * 初始化UE事件及部分事件代理
       * @method _initEvents
       * @private
       */
      _initEvents: function () {
        var me = this,
          doc = me.document,
          win = me.window;
        me._proxyDomEvent = utils.bind(me._proxyDomEvent, me);
        domUtils.on(doc, ['contentchange', 'click', 'dblclick', 'contextmenu', 'mousedown', 'keydown', 'keyup', 'keypress', 'mouseup', 'mouseover', 'mouseout', 'selectstart', 'copy', 'paste'], me._proxyDomEvent);
        domUtils.on(win, ['focus', 'blur'], me._proxyDomEvent);
        domUtils.on(me.body, 'drop', function (e) {
          //阻止ff下默认的弹出新页面打开图片
          if (browser.gecko && e.stopPropagation) {
            e.stopPropagation();
          }
          me.fireEvent('contentchange')
        });
        domUtils.on(doc, ['mouseup', 'keydown'], function (evt) {
          //特殊键不触发selectionchange
          if (evt.type == 'keydown' && (evt.ctrlKey || evt.metaKey || evt.shiftKey || evt.altKey)) {
            return;
          }
          if (evt.button == 2) {
            return;
          }
          me._selectionChange(250, evt);
        });
      },
      /**
       * 触发事件代理
       * @method _proxyDomEvent
       * @private
       * @return { * } fireEvent的返回值
       * @see AX.EventBase:fireEvent(String)
       */
      _proxyDomEvent: function (evt) {
        if (this.fireEvent('before' + evt.type.replace(/^on/, '').toLowerCase()) === false) {
          return false;
        }
        if (this.fireEvent(evt.type.replace(/^on/, ''), evt) === false) {
          return false;
        }
        return this.fireEvent('after' + evt.type.replace(/^on/, '').toLowerCase())
      },
      /**
       * 变化选区
       * @method _selectionChange
       * @private
       */
      _selectionChange: function (delay, evt) {
        var me = this;
        //有光标才做selectionchange 为了解决未focus时点击source不能触发更改工具栏状态的问题（source命令notNeedUndo=1）
        //            if ( !me.selection.isFocus() ){
        //                return;
        //            }


        var hackForMouseUp = false;
        var mouseX, mouseY;
        if (browser.ie && browser.version < 9 && evt && evt.type == 'mouseup') {
          var range = this.selection.getRange();
          if (!range.collapsed) {
            hackForMouseUp = true;
            mouseX = evt.clientX;
            mouseY = evt.clientY;
          }
        }
        clearTimeout(_selectionChangeTimer);
        _selectionChangeTimer = setTimeout(function () {
          if (!me.selection || !me.selection.getNative()) {
            return;
          }
          //修复一个IE下的bug: 鼠标点击一段已选择的文本中间时，可能在mouseup后的一段时间内取到的range是在selection的type为None下的错误值.
          //IE下如果用户是拖拽一段已选择文本，则不会触发mouseup事件，所以这里的特殊处理不会对其有影响
          var ieRange;
          if (hackForMouseUp && me.selection.getNative().type == 'None') {
            ieRange = me.document.body.createTextRange();
            try {
              ieRange.moveToPoint(mouseX, mouseY);
            } catch (ex) {
              ieRange = null;
            }
          }
          var bakGetIERange;
          if (ieRange) {
            bakGetIERange = me.selection.getIERange;
            me.selection.getIERange = function () {
              return ieRange;
            };
          }
          me.selection.cache();
          if (bakGetIERange) {
            me.selection.getIERange = bakGetIERange;
          }
          if (me.selection._cachedRange && me.selection._cachedStartElement) {
            me.fireEvent('beforeselectionchange');
            // 第二个参数causeByUi为true代表由用户交互造成的selectionchange.
            me.fireEvent('selectionchange', !!evt);
            me.fireEvent('afterselectionchange');
            me.selection.clear();
          }
        }, delay || 50);
      },

      /**
       * 执行编辑命令
       * @method _callCmdFn
       * @private
       * @param { String } fnName 函数名称
       * @param { * } args 传给命令函数的参数
       * @return { * } 返回命令函数运行的返回值
       */
      _callCmdFn: function (fnName, args) {
        var cmdName = args[0].toLowerCase(),
          cmd, cmdFn;
        cmd = this.commands[cmdName] || AX.commands[cmdName];
        cmdFn = cmd && cmd[fnName];
        //没有querycommandstate或者没有command的都默认返回0
        if ((!cmd || !cmdFn) && fnName == 'queryCommandState') {
          return 0;
        } else if (cmdFn) {
          return cmdFn.apply(this, args);
        }
      },

      /**
       * 执行编辑命令cmdName，完成富文本编辑效果
       * @method execCommand
       * @param { String } cmdName 需要执行的命令
       * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
       * @return { * } 返回命令函数运行的返回值
       * @example
       * ```javascript
       * editor.execCommand(cmdName);
       * ```
       */
      execCommand: function (cmdName) {
        cmdName = cmdName.toLowerCase();
        var me = this,
          result,
          cmd = me.commands ? me.commands[cmdName] || AX.commands[cmdName] : AX.commands[cmdName];
        if (!cmd || !cmd.execCommand) {
          return null;
        }
        if (!cmd.notNeedUndo && !me.__hasEnterExecCommand) {
          me.__hasEnterExecCommand = true;
          if (me.queryCommandState.apply(me, arguments) != -1) {
            me.fireEvent('saveScene');
            me.fireEvent.apply(me, ['beforeexeccommand', cmdName].concat(arguments));
            result = this._callCmdFn('execCommand', arguments);
            //保存场景时，做了内容对比，再看是否进行contentchange触发，这里多触发了一次，去掉
            //                    (!cmd.ignoreContentChange && !me._ignoreContentChange) && me.fireEvent('contentchange');
            me.fireEvent.apply(me, ['afterexeccommand', cmdName].concat(arguments));
            me.fireEvent('saveScene');
          }
          if (cmdName === 'getzscontent' || cmdName === 'getxbscontent') {
            result = this._callCmdFn('execCommand', arguments);
          }
          me.__hasEnterExecCommand = false;
        } else {
          result = this._callCmdFn('execCommand', arguments);
          !me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange && me.fireEvent('contentchange')
        }
        !me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange && me._selectionChange();
        return result;
      },

      /**
       * 根据传入的command命令，查选编辑器当前的选区，返回命令的状态
       * @method  queryCommandState
       * @param { String } cmdName 需要查询的命令名称
       * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
       * @return { Number } number 返回放前命令的状态，返回值三种情况：(-1|0|1)
       * @example
       * ```javascript
       * editor.queryCommandState(cmdName)  => (-1|0|1)
       * ```
       * @see COMMAND.LIST
       */
      queryCommandState: function (cmdName) {
        return this._callCmdFn('queryCommandState', arguments);
      },

      /**
       * 根据传入的command命令，查选编辑器当前的选区，根据命令返回相关的值
       * @method queryCommandValue
       * @param { String } cmdName 需要查询的命令名称
       * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
       * @remind 只有部分插件有此方法
       * @return { * } 返回每个命令特定的当前状态值
       * @grammar editor.queryCommandValue(cmdName)  =>  {*}
       * @see COMMAND.LIST
       */
      queryCommandValue: function (cmdName) {
        return this._callCmdFn('queryCommandValue', arguments);
      },

      /**
       * 检查编辑区域中是否有内容
       * @method  hasContents
       * @remind 默认有文本内容，或者有以下节点都不认为是空
       * table,ul,ol,dl,iframe,area,base,col,hr,img,embed,input,link,meta,param
       * @return { Boolean } 检查有内容返回true，否则返回false
       * @example
       * ```javascript
       * editor.hasContents()
       * ```
       */

      /**
       * 检查编辑区域中是否有内容，若包含参数tags中的节点类型，直接返回true
       * @method  hasContents
       * @param { Array } tags 传入数组判断时用到的节点类型
       * @return { Boolean } 若文档中包含tags数组里对应的tag，返回true，否则返回false
       * @example
       * ```javascript
       * editor.hasContents(['span']);
       * ```
       */
      hasContents: function (tags) {
        if (tags) {
          for (var i = 0, ci; ci = tags[i++];) {
            if (this.document.getElementsByTagName(ci).length > 0) {
              return true;
            }
          }
        }
        if (!domUtils.isEmptyBlock(this.body)) {
          return true
        }
        //随时添加,定义的特殊标签如果存在，不能认为是空
        tags = ['div'];
        for (i = 0; ci = tags[i++];) {
          var nodes = domUtils.getElementsByTagName(this.document, ci);
          for (var n = 0, cn; cn = nodes[n++];) {
            if (domUtils.isCustomeNode(cn)) {
              return true;
            }
          }
        }
        return false;
      },

      /**
       * 重置编辑器，可用来做多个tab使用同一个编辑器实例
       * @method  reset
       * @remind 此方法会清空编辑器内容，清空回退列表，会触发reset事件
       * @example
       * ```javascript
       * editor.reset()
       * ```
       */
      reset: function () {
        this.fireEvent('reset');
      },

      /**
       * 设置当前编辑区域可以编辑
       * @method setEnabled
       * @example
       * ```javascript
       * editor.setEnabled()
       * ```
       */
      setEnabled: function () {
        var me = this, range;
        var dom = me.document.querySelectorAll(".ax-page-wrapper")[0];
        if (dom.contentEditable == 'false') {
          me.body.contentEditable = true;
          range = me.selection.getRange();
          //有可能内容丢失了
          try {
            range.moveToBookmark(me.lastBk);
            delete me.lastBk
          } catch (e) {
            range.setStartAtFirst(me.body).collapse(true)
          }
          range.select(true);
          if (me.bkqueryCommandState) {
            me.queryCommandState = me.bkqueryCommandState;
            delete me.bkqueryCommandState;
          }
          if (me.bkqueryCommandValue) {
            me.queryCommandValue = me.bkqueryCommandValue;
            delete me.bkqueryCommandValue;
          }
          me.fireEvent('selectionchange');
        }
      },
      enable: function () {
        return this.setEnabled();
      },

      /** 设置当前编辑区域不可编辑
       * @method setDisabled
       */

      /** 设置当前编辑区域不可编辑,except中的命令除外
       * @method setDisabled
       * @param { String } except 例外命令的字符串
       * @remind 即使设置了disable，此处配置的例外命令仍然可以执行
       * @example
       * ```javascript
       * editor.setDisabled('bold'); //禁用工具栏中除加粗之外的所有功能
       * ```
       */

      /** 设置当前编辑区域不可编辑,except中的命令除外
       * @method setDisabled
       * @param { Array } except 例外命令的字符串数组，数组中的命令仍然可以执行
       * @remind 即使设置了disable，此处配置的例外命令仍然可以执行
       * @example
       * ```javascript
       * editor.setDisabled(['bold','insertimage']); //禁用工具栏中除加粗和插入图片之外的所有功能
       * ```
       */
      setDisabled: function (except) {
        var me = this, currModel = me.options.editorModel;
        except = except ? utils.isArray(except) ? except : [except] : [];
        if (me.body.contentEditable == 'true' || currModel == 'pure' || currModel == 'dirty' || currModel == 'secret') {
          if (!me.lastBk) {
            me.lastBk = me.selection.getRange().createBookmark(true);
          }
          me.body.contentEditable = false;
          if (!me.bkqueryCommandState) {
            me.bkqueryCommandState = me.queryCommandState;
            me.bkqueryCommandValue = me.queryCommandValue;
          }
          me.queryCommandState = function (type) {
            if (utils.indexOf(except, type) != -1) {
              // if(me.prevType){
              //   if(me.prevType == type){
              //     return 0;
              //   }
              // }
              // me.prevType = type;
              return me.bkqueryCommandState.apply(me, arguments);
            }
            return -1;
          };
          me.queryCommandValue = function (type) {
            if (utils.indexOf(except, type) != -1) {
              return me.bkqueryCommandValue.apply(me, arguments);
            }
            return null;
          };
          me.fireEvent('selectionchange');
        }
      },
      disable: function (except) {
        return this.setDisabled(except);
      },

      /**
       * 设置默认内容
       * @method _setDefaultContent
       * @private
       * @param  { String } cont 要存入的内容
       */
      _setDefaultContent: function () {
        function clear() {
          var me = this;
          if (me.document.getElementById('initContent')) {
            me.body.innerHTML = '<p>' + (ie ? '' : '<br/>') + '</p>';
            me.removeListener('firstBeforeExecCommand focus', clear);
            setTimeout(function () {
              me.focus();
              me._selectionChange();
            }, 0)
          }
        }

        return function (cont) {
          var me = this;
          me.body.innerHTML = '<p id="initContent">' + cont + '</p>';

          me.addListener('firstBeforeExecCommand focus', clear);
        }
      }(),

      /**
       * 显示编辑器
       * @method setShow
       * @example
       * ```javascript
       * editor.setShow()
       * ```
       */
      setShow: function () {
        var me = this, range = me.selection.getRange();
        if (me.container.style.display == 'none') {
          //有可能内容丢失了
          try {
            range.moveToBookmark(me.lastBk);
            delete me.lastBk
          } catch (e) {
            range.setStartAtFirst(me.body).collapse(true)
          }
          //ie下focus实效，所以做了个延迟
          setTimeout(function () {
            range.select(true);
          }, 100);
          me.container.style.display = '';
        }

      },
      show: function () {
        return this.setShow();
      },
      /**
       * 隐藏编辑器
       * @method setHide
       * @example
       * ```javascript
       * editor.setHide()
       * ```
       */
      setHide: function () {
        var me = this;
        if (!me.lastBk) {
          me.lastBk = me.selection.getRange().createBookmark(true);
        }
        me.container.style.display = 'none'
      },
      hide: function () {
        return this.setHide();
      },

      /**
       * 根据指定的路径，获取对应的语言资源
       * @method getLang
       * @param { String } path 路径根据的是lang目录下的语言文件的路径结构
       * @return { Object | String } 根据路径返回语言资源的Json格式对象或者语言字符串
       * @example
       * ```javascript
       * editor.getLang('contextMenu.delete'); //如果当前是中文，那返回是的是'删除'
       * ```
       */
      getLang: function (path) {
        var lang = AX.I18N[this.options.lang];
        if (!lang) {
          return;
          // throw Error("not import language file");
        }
        path = (path || "").split(".");
        for (var i = 0, ci; ci = path[i++];) {
          lang = lang[ci];
          if (!lang) {
            break;
          }
        }
        return lang;
      },

      /**
       * 计算编辑器html内容字符串的长度
       * @method  getContentLength
       * @return { Number } 返回计算的长度
       * @example
       * ```javascript
       * //编辑器html内容<p><strong>132</strong></p>
       * editor.getContentLength() //返回27
       * ```
       */
      /**
       * 计算编辑器当前纯文本内容的长度
       * @method  getContentLength
       * @param { Boolean } ingoneHtml 传入true时，只按照纯文本来计算
       * @return { Number } 返回计算的长度，内容中有hr/img/iframe标签，长度加1
       * @example
       * ```javascript
       * //编辑器html内容<p><strong>132</strong></p>
       * editor.getContentLength() //返回3
       * ```
       */
      getContentLength: function (ingoneHtml, tagNames) {
        var count = this.getContent(false, false, true).length;
        if (ingoneHtml) {
          tagNames = (tagNames || []).concat(['hr', 'iframe']); // 去掉img
          count = this.getContentTxt().replace(/[\t\r\n]+/g, '').length;
          for (var i = 0, ci; ci = tagNames[i++];) {
            count += this.document.getElementsByTagName(ci).length;
          }
        }
        return count;
      },

      /**
       * 注册输入过滤规则
       * @method  addInputRule
       * @param { Function } rule 要添加的过滤规则
       * @example
       * ```javascript
       * editor.addInputRule(function(root){
       *   $.each(root.getNodesByTagName('div'),function(i,node){
       *       node.tagName="p";
       *   });
       * });
       * ```
       */
      addInputRule: function (rule) {
        this.inputRules.push(rule);
      },

      /**
       * 执行注册的过滤规则
       * @method  filterInputRule
       * @param { AX.uNode } root 要过滤的uNode节点
       * @remind 执行editor.setContent方法和执行'inserthtml'命令后，会运行该过滤函数
       * @example
       * ```javascript
       * editor.filterInputRule(editor.body);
       * ```
       * @see AX.Editor:addInputRule
       */
      filterInputRule: function (root) {
        for (var i = 0, ci; ci = this.inputRules[i++];) {
          ci.call(this, root)
        }
      },

      /**
       * 注册输出过滤规则
       * @method  addOutputRule
       * @param { Function } rule 要添加的过滤规则
       * @example
       * ```javascript
       * editor.addOutputRule(function(root){
       *   $.each(root.getNodesByTagName('p'),function(i,node){
       *       node.tagName="div";
       *   });
       * });
       * ```
       */
      addOutputRule: function (rule) {
        this.outputRules.push(rule)
      },

      /**
       * 根据输出过滤规则，过滤编辑器内容
       * @method  filterOutputRule
       * @remind 执行editor.getContent方法的时候，会先运行该过滤函数
       * @param { AX.uNode } root 要过滤的uNode节点
       * @example
       * ```javascript
       * editor.filterOutputRule(editor.body);
       * ```
       * @see AX.Editor:addOutputRule
       */
      filterOutputRule: function (root) {
        for (var i = 0, ci; ci = this.outputRules[i++];) {
          ci.call(this, root)
        }
      },

      /**
       * 根据action名称获取请求的路径
       * @method  getActionUrl
       * @remind 假如没有设置serverUrl,会根据imageUrl设置默认的controller路径
       * @param { String } action action名称
       * @example
       * ```javascript
       * editor.getActionUrl('config'); //返回 "/ueditor/php/controller.php?action=config"
       * editor.getActionUrl('image'); //返回 "/ueditor/php/controller.php?action=uplaodimage"
       * editor.getActionUrl('scrawl'); //返回 "/ueditor/php/controller.php?action=uplaodscrawl"
       * editor.getActionUrl('imageManager'); //返回 "/ueditor/php/controller.php?action=listimage"
       * ```
       */
      getActionUrl: function (action) {
        var actionName = this.getOpt(action) || action,
          imageUrl = this.getOpt('imageUrl'),
          serverUrl = this.getOpt('serverUrl');

        if (!serverUrl && imageUrl) {
          serverUrl = imageUrl.replace(/^(.*[\/]).+([\.].+)$/, '$1controller$2');
        }
        if (action == 'apiUrl') {
          return this.getOpt(action)
        }
        if (serverUrl) {
          serverUrl = serverUrl + (serverUrl.indexOf('?') == -1 ? '?' : '&') + 'action=' + (actionName || '');
          return utils.formatUrl(serverUrl);
        }
        return '';

      }
    };
    utils.inherits(Editor, EventBase);
  })();


  // core/Editor.defaultoptions.js
  //维护编辑器一下默认的不在插件中的配置项
  AX.Editor.defaultOptions = function (editor) {

    var _url = editor.options.AXEDITOR_HOME_URL;
    return {
      isShow: true,
      initialContent: '',
      initialStyle: '',
      autoClearinitialContent: false,
      iframeCssUrl: _url + 'themes/iframe.css',
      textarea: 'editorValue',
      focus: false,
      focusInEnd: true,
      autoClearEmptyNode: true,
      fullscreen: false,
      readonly: false,
      zIndex: 999,
      imagePopup: true,
      enterTag: 'br',
      customDomain: false,
      lang: 'zh-cn',
      langPath: _url + 'lang/',
      theme: 'default',
      themePath: _url + 'themes/',
      allHtmlEnabled: false,
      scaleEnabled: false,
      tableNativeEditInFF: false,
      autoSyncData: true,
      fileNameFormat: '{time}{rand:6}'
    }
  };

  // core/loadconfig.js
  (function () {

    AX.Editor.prototype.loadServerConfig = function () {
      var me = this;
      setTimeout(function () {
        try {
          me.options.imageUrl && me.setOpt('serverUrl', me.options.imageUrl.replace(/^(.*[\/]).+([\.].+)$/, '$1controller$2'));

          var configUrl = me.getActionUrl('config'),
            isJsonp = utils.isCrossDomainUrl(configUrl);

          /* 发出ajax请求 */
          me._serverConfigLoaded = false;

          configUrl && AX.ajax.request(configUrl, {
            'method': 'GET',
            'dataType': isJsonp ? 'jsonp' : '',
            'onsuccess': function (r) {
              try {
                var config = isJsonp ? r : eval("(" + r.responseText + ")");
                utils.extend(me.options, config);
                me.fireEvent('serverConfigLoaded');
                me._serverConfigLoaded = true;
              } catch (e) {
                showErrorMsg(me.getLang('loadconfigFormatError'));
              }
            },
            'onerror': function () {
              showErrorMsg(me.getLang('loadconfigHttpError'));
            }
          });
        } catch (e) {
          showErrorMsg(me.getLang('loadconfigError'));
        }
      });

      function showErrorMsg(msg) {
        // console && console.error(msg);
        me.fireEvent('showMessage', {
          'title': msg,
          'type': 'error'
        });
      }
    };

    AX.Editor.prototype.isServerConfigLoaded = function () {
      var me = this;
      return me._serverConfigLoaded || false;
    };

    AX.Editor.prototype.afterConfigReady = function (handler) {
      if (!handler || !utils.isFunction(handler)) {
        return;
      }
      var me = this;
      var readyHandler = function () {
        handler.apply(me, arguments);
        me.removeListener('serverConfigLoaded', readyHandler);
      };

      if (me.isServerConfigLoaded()) {
        handler.call(me, 'serverConfigLoaded');
      } else {
        me.addListener('serverConfigLoaded', readyHandler);
      }
    };

  })();


  // core/ajax.js
  /**
   * @file
   * @module AX.ajax
   * @since 1.2.6.1
   */

  /**
   * 提供对ajax请求的支持
   * @module AX.ajax
   */
  AX.ajax = function () {

    //创建一个ajaxRequest对象
    var fnStr = 'XMLHttpRequest()';
    try {
      new ActiveXObject("Msxml2.XMLHTTP");
      fnStr = 'ActiveXObject(\'Msxml2.XMLHTTP\')';
    } catch (e) {
      try {
        new ActiveXObject("Microsoft.XMLHTTP");
        fnStr = 'ActiveXObject(\'Microsoft.XMLHTTP\')'
      } catch (e) {
      }
    }
    var creatAjaxRequest = new Function('return new ' + fnStr);


    /**
     * 将json参数转化成适合ajax提交的参数列表
     * @param json
     */
    function json2str(json) {
      var strArr = [];
      for (var i in json) {
        //忽略默认的几个参数
        if (i == "method" || i == "timeout" || i == "async" || i == "dataType" || i == "callback") {
          continue;
        }
        //忽略控制
        if (json[i] == undefined || json[i] == null) {
          continue;
        }
        //传递过来的对象和函数不在提交之列
        if (!((typeof json[i]).toLowerCase() == "function" || (typeof json[i]).toLowerCase() == "object")) {
          strArr.push(encodeURIComponent(i) + "=" + encodeURIComponent(json[i]));
        } else if (utils.isArray(json[i])) {
          //支持传数组内容
          for (var j = 0; j < json[i].length; j++) {
            strArr.push(encodeURIComponent(i) + "[]=" + encodeURIComponent(json[i][j]));
          }
        }
      }
      return strArr.join("&");
    }

    function doAjax(url, ajaxOptions) {
      var xhr = creatAjaxRequest(),
        //是否超时
        timeIsOut = false,
        //默认参数
        defaultAjaxOptions = {
          method: "POST",
          timeout: 5000,
          async: true,
          data: {},//需要传递对象的话只能覆盖
          onsuccess: function () {
          },
          onerror: function () {
          }
        };

      if (typeof url === "object") {
        ajaxOptions = url;
        url = ajaxOptions.url;
      }
      if (!xhr || !url) {
        return;
      }
      var ajaxOpts = ajaxOptions ? utils.extend(defaultAjaxOptions, ajaxOptions) : defaultAjaxOptions;

      var submitStr = json2str(ajaxOpts); // { name:"Jim",city:"Beijing" } --> "name=Jim&city=Beijing"
      //如果用户直接通过data参数传递json对象过来，则也要将此json对象转化为字符串
      if (!utils.isEmptyObject(ajaxOpts.data)) {
        submitStr += (submitStr ? "&" : "") + json2str(ajaxOpts.data);
      }
      //超时检测
      var timerID = setTimeout(function () {
        if (xhr.readyState != 4) {
          timeIsOut = true;
          xhr.abort();
          clearTimeout(timerID);
        }
      }, ajaxOpts.timeout);

      var method = ajaxOpts.method.toUpperCase();
      var str = url + (url.indexOf("?") == -1 ? "?" : "&") + (method == "POST" ? "" : submitStr) // + "&noCache=" + +new Date);
      xhr.open(method, str, ajaxOpts.async);
      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
          if (!timeIsOut && xhr.status == 200) {
            ajaxOpts.onsuccess(xhr);
          } else {
            ajaxOpts.onerror(xhr);
          }
        }
      };
      if (method == "POST") {
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        if (ajaxOptions.headers) {
          for (var i in ajaxOptions.headers) {
            xhr.setRequestHeader(i, ajaxOptions.headers[i]);
          }
        }
        xhr.send(submitStr);
      } else {
        if (ajaxOptions.headers) {
          for (var i in ajaxOptions.headers) {
            xhr.setRequestHeader(i, ajaxOptions.headers[i]);
          }
        }
        xhr.send(null);
      }
    }

    function doJsonp(url, opts) {

      var successhandler = opts.onsuccess || function () {
      },
        scr = document.createElement('SCRIPT'),
        options = opts || {},
        charset = options['charset'],
        callbackField = options['jsonp'] || 'callback',
        callbackFnName,
        timeOut = options['timeOut'] || 0,
        timer,
        reg = new RegExp('(\\?|&)' + callbackField + '=([^&]*)'),
        matches;

      if (utils.isFunction(successhandler)) {
        callbackFnName = 'bd__editor__' + Math.floor(Math.random() * 2147483648).toString(36);
        window[callbackFnName] = getCallBack(0);
      } else if (utils.isString(successhandler)) {
        callbackFnName = successhandler;
      } else {
        if (matches = reg.exec(url)) {
          callbackFnName = matches[2];
        }
      }

      url = url.replace(reg, '\x241' + callbackField + '=' + callbackFnName);

      if (url.search(reg) < 0) {
        url += (url.indexOf('?') < 0 ? '?' : '&') + callbackField + '=' + callbackFnName;
      }

      var queryStr = json2str(opts); // { name:"Jim",city:"Beijing" } --> "name=Jim&city=Beijing"
      //如果用户直接通过data参数传递json对象过来，则也要将此json对象转化为字符串
      if (!utils.isEmptyObject(opts.data)) {
        queryStr += (queryStr ? "&" : "") + json2str(opts.data);
      }
      if (queryStr) {
        url = url.replace(/\?/, '?' + queryStr + '&');
      }

      scr.onerror = getCallBack(1);
      if (timeOut) {
        timer = setTimeout(getCallBack(1), timeOut);
      }
      createScriptTag(scr, url, charset);

      function createScriptTag(scr, url, charset) {
        scr.setAttribute('type', 'text/javascript');
        scr.setAttribute('defer', 'defer');
        charset && scr.setAttribute('charset', charset);
        scr.setAttribute('src', url);
        document.getElementsByTagName('head')[0].appendChild(scr);
      }

      function getCallBack(onTimeOut) {
        return function () {
          try {
            if (onTimeOut) {
              options.onerror && options.onerror();
            } else {
              try {
                clearTimeout(timer);
                successhandler.apply(window, arguments);
              } catch (e) {
              }
            }
          } catch (exception) {
            options.onerror && options.onerror.call(window, exception);
          } finally {
            options.oncomplete && options.oncomplete.apply(window, arguments);
            scr.parentNode && scr.parentNode.removeChild(scr);
            window[callbackFnName] = null;
            try {
              delete window[callbackFnName];
            } catch (e) {
            }
          }
        }
      }
    }

    return {
      /**
       * 根据给定的参数项，向指定的url发起一个ajax请求。 ajax请求完成后，会根据请求结果调用相应回调： 如果请求
       * 成功， 则调用onsuccess回调， 失败则调用 onerror 回调
       * @method request
       * @param { URLString } url ajax请求的url地址
       * @param { Object } ajaxOptions ajax请求选项的键值对，支持的选项如下：
       * @example
       * ```javascript
       * //向sayhello.php发起一个异步的Ajax GET请求, 请求超时时间为10s， 请求完成后执行相应的回调。
       * AX.ajax.requeset( 'sayhello.php', {
       *
       *     //请求方法。可选值： 'GET', 'POST'，默认值是'POST'
       *     method: 'GET',
       *
       *     //超时时间。 默认为5000， 单位是ms
       *     timeout: 10000,
       *
       *     //是否是异步请求。 true为异步请求， false为同步请求
       *     async: true,
       *
       *     //请求携带的数据。如果请求为GET请求， data会经过stringify后附加到请求url之后。
       *     data: {
       *         name: 'ueditor'
       *     },
       *
       *     //请求成功后的回调， 该回调接受当前的XMLHttpRequest对象作为参数。
       *     onsuccess: function ( xhr ) {
       *         console.log( xhr.responseText );
       *     },
       *
       *     //请求失败或者超时后的回调。
       *     onerror: function ( xhr ) {
       *          alert( 'Ajax请求失败' );
       *     }
       *
       * } );
       * ```
       */

      /**
       * 根据给定的参数项发起一个ajax请求， 参数项里必须包含一个url地址。 ajax请求完成后，会根据请求结果调用相应回调： 如果请求
       * 成功， 则调用onsuccess回调， 失败则调用 onerror 回调。
       * @method request
       * @warning 如果在参数项里未提供一个key为“url”的地址值，则该请求将直接退出。
       * @param { Object } ajaxOptions ajax请求选项的键值对，支持的选项如下：
       * @example
       * ```javascript
       *
       * //向sayhello.php发起一个异步的Ajax POST请求, 请求超时时间为5s， 请求完成后不执行任何回调。
       * AX.ajax.requeset( 'sayhello.php', {
       *
       *     //请求的地址， 该项是必须的。
       *     url: 'sayhello.php'
       *
       * } );
       * ```
       */
      request: function (url, opts) {
        if (opts && opts.dataType == 'jsonp') {
          doJsonp(url, opts);
        } else {
          doAjax(url, opts);
        }
      },
      getJSONP: function (url, data, fn) {
        var opts = {
          'data': data,
          'oncomplete': fn
        };
        doJsonp(url, opts);
      }
    };


  }();


  // core/filterword.js
  /**
   * UE过滤word的静态方法
   * @file
   */

  /**
   * UEditor公用空间，UEditor所有的功能都挂载在该空间下
   * @module AX
   */


  /**
   * 根据传入html字符串过滤word
   * @module AX
   * @since 1.2.6.1
   * @method filterWord
   * @param { String } html html字符串
   * @return { String } 已过滤后的结果字符串
   * @example
   * ```javascript
   * AX.filterWord(html);
   * ```
   */
  var filterWord = AX.filterWord = function () {

    //是否是word过来的内容
    function isWordDocument(str) {
      return /(class="?Mso|style="[^"]*\bmso\-|w:WordDocument|<(v|o):|lang=)/ig.test(str);
    }

    //去掉小数
    function transUnit(v) {
      v = v.replace(/[\d.]+\w+/g, function (m) {
        return utils.transUnitToPx(m);
      });
      return v;
    }

    function filterPasteWord(str) {
      return str.replace(/[\t\r\n]+/g, ' ')
        .replace(/<!--[\s\S]*?-->/ig, "")
        //转换图片
        .replace(/<v:shape [^>]*>[\s\S]*?.<\/v:shape>/gi, function (str) {
          //opera能自己解析出image所这里直接返回空
          if (browser.opera) {
            return '';
          }
          try {
            //有可能是bitmap占为图，无用，直接过滤掉，主要体现在粘贴excel表格中
            if (/Bitmap/i.test(str)) {
              return '';
            }
            var width = str.match(/width:([ \d.]*p[tx])/i)[1],
              height = str.match(/height:([ \d.]*p[tx])/i)[1],
              src = str.match(/src=\s*"([^"]*)"/i)[1];
            return '<img width="' + transUnit(width) + '" height="' + transUnit(height) + '" src="' + src + '" />';
          } catch (e) {
            return '';
          }
        })
        //针对wps添加的多余标签处理
        .replace(/<\/?div[^>]*>/g, '')
        //去掉多余的属性
        .replace(/v:\w+=(["']?)[^'"]+\1/g, '')
        .replace(/<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|xml|meta|link|style|\w+:\w+)(?=[\s\/>]))[^>]*>/gi, "")
        .replace(/<p [^>]*class="?MsoHeading"?[^>]*>(.*?)<\/p>/gi, "<p><strong>$1</strong></p>")
        //去掉多余的属性
        .replace(/\s+(class|lang|align)\s*=\s*(['"]?)([\w-]+)\2/ig, function (str, name, marks, val) {
          //保留list的标示
          return name == 'class' && val == 'MsoListParagraph' ? str : ''
        })
        //清除多余的font/span不能匹配&nbsp;有可能是空格
        .replace(/<(font|span)[^>]*>(\s*)<\/\1>/gi, function (a, b, c) {
          return c.replace(/[\t\r\n ]+/g, ' ')
        })
        //处理style的问题
        .replace(/(<[a-z][^>]*)\sstyle=(["'])([^\2]*?)\2/gi, function (str, tag, tmp, style) {
          var n = [],
            s = style.replace(/^\s+|\s+$/, '')
              .replace(/&#39;/g, '\'')
              .replace(/&quot;/gi, "'")
              .replace(/[\d.]+(cm|pt)/g, function (str) {
                return utils.transUnitToPx(str)
              })
              .split(/;\s*/g);

          for (var i = 0, v; v = s[i]; i++) {

            var name, value,
              parts = v.split(":");

            if (parts.length == 2) {
              name = parts[0].toLowerCase();
              value = parts[1].toLowerCase();
              if (/^(background)\w*/.test(name) && value.replace(/(initial|\s)/g, '').length == 0
                ||
                /^(margin)\w*/.test(name) && /^0\w+$/.test(value)
              ) {
                continue;
              }

              switch (name) {
                case "mso-padding-alt":
                case "mso-padding-top-alt":
                case "mso-padding-right-alt":
                case "mso-padding-bottom-alt":
                case "mso-padding-left-alt":
                case "mso-margin-alt":
                case "mso-margin-top-alt":
                case "mso-margin-right-alt":
                case "mso-margin-bottom-alt":
                case "mso-margin-left-alt":
                //ie下会出现挤到一起的情况
                //case "mso-table-layout-alt":
                case "mso-height":
                case "mso-width":
                case "mso-vertical-align-alt":
                  //trace:1819 ff下会解析出padding在table上
                  if (!/<table/.test(tag)) {
                    n[i] = name.replace(/^mso-|-alt$/g, "") + ":" + transUnit(value);
                  }
                  continue;
                case "horiz-align":
                  n[i] = "text-align:" + value;
                  continue;

                case "vert-align":
                  n[i] = "vertical-align:" + value;
                  continue;

                case "font-color":
                case "mso-foreground":
                  n[i] = "color:" + value;
                  continue;

                case "mso-background":
                case "mso-highlight":
                  n[i] = "background:" + value;
                  continue;

                case "mso-default-height":
                  n[i] = "min-height:" + transUnit(value);
                  continue;

                case "mso-default-width":
                  n[i] = "min-width:" + transUnit(value);
                  continue;

                case "mso-padding-between-alt":
                  n[i] = "border-collapse:separate;border-spacing:" + transUnit(value);
                  continue;

                case "text-line-through":
                  if (value == "single" || value == "double") {
                    n[i] = "text-decoration:line-through";
                  }
                  continue;
                case "mso-zero-height":
                  if (value == "yes") {
                    n[i] = "display:none";
                  }
                  continue;
                //                                case 'background':
                //                                    break;
                case 'margin':
                  if (!/[1-9]/.test(value)) {
                    continue;
                  }

              }

              if (/^(mso|column|font-emph|lang|layout|line-break|list-image|nav|panose|punct|row|ruby|sep|size|src|tab-|table-border|text-(?:decor|trans)|top-bar|version|vnd|word-break)/.test(name)
                ||
                /text\-indent|padding|margin/.test(name) && /\-[\d.]+/.test(value)
              ) {
                continue;
              }

              n[i] = name + ":" + parts[1];
            }
          }
          return tag + (n.length ? ' style="' + n.join(';').replace(/;{2,}/g, ';') + '"' : '');
        })


    }

    return function (html) {
      return isWordDocument(html) ? filterPasteWord(html) : html;
    };
  }();

  // core/node.js
  /**
   * 编辑器模拟的节点类
   * @file
   * @module AX
   * @class uNode
   * @since 1.2.6.1
   */

  /**
   * UEditor公用空间，UEditor所有的功能都挂载在该空间下
   * @unfile
   * @module AX
   */

  (function () {

    /**
     * 编辑器模拟的节点类
     * @unfile
     * @module AX
     * @class uNode
     */

    /**
     * 通过一个键值对，创建一个uNode对象
     * @constructor
     * @param { Object } attr 传入要创建的uNode的初始属性
     * @example
     * ```javascript
     * var node = new uNode({
     *     type:'element',
     *     tagName:'span',
     *     attrs:{style:'font-size:14px;'}
     * }
     * ```
     */
    var uNode = AX.uNode = function (obj) {
      this.type = obj.type;
      this.data = obj.data;
      this.tagName = obj.tagName;
      this.parentNode = obj.parentNode;
      this.attrs = obj.attrs || {};
      this.children = obj.children;
    };

    var notTransAttrs = {
      'href': 1,
      'src': 1,
      '_src': 1,
      '_href': 1,
      'cdata_data': 1
    };

    var notTransTagName = {
      style: 1,
      script: 1
    };

    var indentChar = '    ',
      breakChar = '\n';

    function insertLine(arr, current, begin) {
      arr.push(breakChar);
      return current + (begin ? 1 : -1);
    }

    function insertIndent(arr, current) {
      //插入缩进
      for (var i = 0; i < current; i++) {
        arr.push(indentChar);
      }
    }

    //创建uNode的静态方法
    //支持标签和html
    uNode.createElement = function (html) {
      if (/[<>]/.test(html)) {
        return AX.htmlparser(html).children[0]
      }
      return new uNode({
        type: 'element',
        children: [],
        tagName: html
      })

    };
    uNode.createText = function (data, noTrans) {
      return new AX.uNode({
        type: 'text',
        'data': noTrans ? data : utils.unhtml(data || '')
      })
    };

    function nodeToHtml(node, arr, formatter, current) {
      switch (node.type) {
        case 'root':
          for (var i = 0, ci; ci = node.children[i++];) {
            //插入新行
            if (formatter && ci.type == 'element' && !dtd.$inlineWithA[ci.tagName] && i > 1) {
              insertLine(arr, current, true);
              insertIndent(arr, current)
            }
            nodeToHtml(ci, arr, formatter, current)
          }
          break;
        case 'text':
          isText(node, arr);
          break;
        case 'element':
          isElement(node, arr, formatter, current);
          break;
        case 'comment':
          isComment(node, arr, formatter);
      }
      return arr;
    }

    function isText(node, arr) {
      if (node.parentNode.tagName == 'pre') {
        //源码模式下输入html标签，不能做转换处理，直接输出
        arr.push(node.data)
      } else {
        arr.push(notTransTagName[node.parentNode.tagName] ? utils.html(node.data) : node.data.replace(/[ ]{2}/g, ' &nbsp;'))
      }

    }

    function isElement(node, arr, formatter, current) {
      var attrhtml = '';
      if (node.attrs) {
        attrhtml = [];
        var attrs = node.attrs;
        for (var a in attrs) {
          //这里就针对
          //<p>'<img src='http://nsclick.baidu.com/u.gif?&asdf=\"sdf&asdfasdfs;asdf'></p>
          //这里边的\"做转换，要不用innerHTML直接被截断了，属性src
          //有可能做的不够
          attrhtml.push(a + (attrs[a] !== undefined ? '="' + (notTransAttrs[a] ? utils.html(attrs[a]).replace(/["]/g, function (a) {
            return '&quot;'
          }) : utils.unhtml(attrs[a])) + '"' : ''))
        }
        attrhtml = attrhtml.join(' ');
      }
      arr.push('<' + node.tagName +
        (attrhtml ? ' ' + attrhtml : '') +
        (dtd.$empty[node.tagName] ? '\/' : '') + '>'
      );
      //插入新行
      if (formatter && !dtd.$inlineWithA[node.tagName] && node.tagName != 'pre') {
        if (node.children && node.children.length) {
          current = insertLine(arr, current, true);
          insertIndent(arr, current)
        }

      }
      if (node.children && node.children.length) {
        for (var i = 0, ci; ci = node.children[i++];) {
          if (formatter && ci.type == 'element' && !dtd.$inlineWithA[ci.tagName] && i > 1) {
            insertLine(arr, current);
            insertIndent(arr, current)
          }
          nodeToHtml(ci, arr, formatter, current)
        }
      }
      if (!dtd.$empty[node.tagName]) {
        if (formatter && !dtd.$inlineWithA[node.tagName] && node.tagName != 'pre') {

          if (node.children && node.children.length) {
            current = insertLine(arr, current);
            insertIndent(arr, current)
          }
        }
        arr.push('<\/' + node.tagName + '>');
      }

    }

    function isComment(node, arr) {
      arr.push('<!--' + node.data + '-->');
    }

    function getNodeById(root, id) {
      var node;
      if (root.type == 'element' && root.getAttr('id') == id) {
        return root;
      }
      if (root.children && root.children.length) {
        for (var i = 0, ci; ci = root.children[i++];) {
          if (node = getNodeById(ci, id)) {
            return node;
          }
        }
      }
    }

    function getNodesByTagName(node, tagName, arr) {
      if (node.type == 'element' && node.tagName == tagName) {
        arr.push(node);
      }
      if (node.children && node.children.length) {
        for (var i = 0, ci; ci = node.children[i++];) {
          getNodesByTagName(ci, tagName, arr)
        }
      }
    }

    function nodeTraversal(root, fn) {
      if (root.children && root.children.length) {
        for (var i = 0, ci; ci = root.children[i];) {
          nodeTraversal(ci, fn);
          //ci被替换的情况，这里就不再走 fn了
          if (ci.parentNode) {
            if (ci.children && ci.children.length) {
              fn(ci)
            }
            if (ci.parentNode) {
              i++
            }
          }
        }
      } else {
        fn(root)
      }

    }

    uNode.prototype = {

      /**
       * 当前节点对象，转换成html文本
       * @method toHtml
       * @return { String } 返回转换后的html字符串
       * @example
       * ```javascript
       * node.toHtml();
       * ```
       */

      /**
       * 当前节点对象，转换成html文本
       * @method toHtml
       * @param { Boolean } formatter 是否格式化返回值
       * @return { String } 返回转换后的html字符串
       * @example
       * ```javascript
       * node.toHtml( true );
       * ```
       */
      toHtml: function (formatter) {
        var arr = [];
        nodeToHtml(this, arr, formatter, 0);
        return arr.join('')
      },

      /**
       * 获取节点的html内容
       * @method innerHTML
       * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
       * @return { String } 返回节点的html内容
       * @example
       * ```javascript
       * var htmlstr = node.innerHTML();
       * ```
       */

      /**
       * 设置节点的html内容
       * @method innerHTML
       * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
       * @param { String } htmlstr 传入要设置的html内容
       * @return { AX.uNode } 返回节点本身
       * @example
       * ```javascript
       * node.innerHTML('<span>text</span>');
       * ```
       */
      innerHTML: function (htmlstr) {
        if (this.type != 'element' || dtd.$empty[this.tagName]) {
          return this;
        }
        if (utils.isString(htmlstr)) {
          if (this.children) {
            for (var i = 0, ci; ci = this.children[i++];) {
              ci.parentNode = null;
            }
          }
          this.children = [];
          var tmpRoot = AX.htmlparser(htmlstr);
          for (var i = 0, ci; ci = tmpRoot.children[i++];) {
            this.children.push(ci);
            ci.parentNode = this;
          }
          return this;
        }
        var tmpRoot = new AX.uNode({
          type: 'root',
          children: this.children
        });
        return tmpRoot.toHtml();

      },

      /**
       * 获取节点的纯文本内容
       * @method innerText
       * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
       * @return { String } 返回节点的存文本内容
       * @example
       * ```javascript
       * var textStr = node.innerText();
       * ```
       */

      /**
       * 设置节点的纯文本内容
       * @method innerText
       * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
       * @param { String } textStr 传入要设置的文本内容
       * @return { AX.uNode } 返回节点本身
       * @example
       * ```javascript
       * node.innerText('<span>text</span>');
       * ```
       */
      innerText: function (textStr, noTrans) {
        if (this.type != 'element' || dtd.$empty[this.tagName]) {
          return this;
        }
        if (textStr) {
          if (this.children) {
            for (var i = 0, ci; ci = this.children[i++];) {
              ci.parentNode = null;
            }
          }
          this.children = [];
          this.appendChild(uNode.createText(textStr, noTrans));
          return this;
        }
        return this.toHtml().replace(/<[^>]+>/g, '');

      },

      /**
       * 获取当前对象的data属性
       * @method getData
       * @return { Object } 若节点的type值是elemenet，返回空字符串，否则返回节点的data属性
       * @example
       * ```javascript
       * node.getData();
       * ```
       */
      getData: function () {
        if (this.type == 'element') {
          return '';
        }
        return this.data
      },

      /**
       * 获取当前节点下的第一个子节点
       * @method firstChild
       * @return { AX.uNode } 返回第一个子节点
       * @example
       * ```javascript
       * node.firstChild(); //返回第一个子节点
       * ```
       */
      firstChild: function () {
        //            if (this.type != 'element' || dtd.$empty[this.tagName]) {
        //                return this;
        //            }
        return this.children ? this.children[0] : null;
      },

      /**
       * 获取当前节点下的最后一个子节点
       * @method lastChild
       * @return { AX.uNode } 返回最后一个子节点
       * @example
       * ```javascript
       * node.lastChild(); //返回最后一个子节点
       * ```
       */
      lastChild: function () {
        //            if (this.type != 'element' || dtd.$empty[this.tagName] ) {
        //                return this;
        //            }
        return this.children ? this.children[this.children.length - 1] : null;
      },

      /**
       * 获取和当前节点有相同父亲节点的前一个节点
       * @method previousSibling
       * @return { AX.uNode } 返回前一个节点
       * @example
       * ```javascript
       * node.children[2].previousSibling(); //返回子节点node.children[1]
       * ```
       */
      previousSibling: function () {
        var parent = this.parentNode;
        for (var i = 0, ci; ci = parent.children[i]; i++) {
          if (ci === this) {
            return i == 0 ? null : parent.children[i - 1];
          }
        }

      },

      /**
       * 获取和当前节点有相同父亲节点的后一个节点
       * @method nextSibling
       * @return { AX.uNode } 返回后一个节点,找不到返回null
       * @example
       * ```javascript
       * node.children[2].nextSibling(); //如果有，返回子节点node.children[3]
       * ```
       */
      nextSibling: function () {
        var parent = this.parentNode;
        for (var i = 0, ci; ci = parent.children[i++];) {
          if (ci === this) {
            return parent.children[i];
          }
        }
      },

      /**
       * 用新的节点替换当前节点
       * @method replaceChild
       * @param { AX.uNode } target 要替换成该节点参数
       * @param { AX.uNode } source 要被替换掉的节点
       * @return { AX.uNode } 返回替换之后的节点对象
       * @example
       * ```javascript
       * node.replaceChild(newNode, childNode); //用newNode替换childNode,childNode是node的子节点
       * ```
       */
      replaceChild: function (target, source) {
        if (this.children) {
          if (target.parentNode) {
            target.parentNode.removeChild(target);
          }
          for (var i = 0, ci; ci = this.children[i]; i++) {
            if (ci === source) {
              this.children.splice(i, 1, target);
              source.parentNode = null;
              target.parentNode = this;
              return target;
            }
          }
        }
      },

      /**
       * 在节点的子节点列表最后位置插入一个节点
       * @method appendChild
       * @param { AX.uNode } node 要插入的节点
       * @return { AX.uNode } 返回刚插入的子节点
       * @example
       * ```javascript
       * node.appendChild( newNode ); //在node内插入子节点newNode
       * ```
       */
      appendChild: function (node) {
        if (this.type == 'root' || this.type == 'element' && !dtd.$empty[this.tagName]) {
          if (!this.children) {
            this.children = []
          }
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          }
          for (var i = 0, ci; ci = this.children[i]; i++) {
            if (ci === node) {
              this.children.splice(i, 1);
              break;
            }
          }
          this.children.push(node);
          node.parentNode = this;
          return node;
        }


      },

      /**
       * 在传入节点的前面插入一个节点
       * @method insertBefore
       * @param { AX.uNode } target 要插入的节点
       * @param { AX.uNode } source 在该参数节点前面插入
       * @return { AX.uNode } 返回刚插入的子节点
       * @example
       * ```javascript
       * node.parentNode.insertBefore(newNode, node); //在node节点后面插入newNode
       * ```
       */
      insertBefore: function (target, source) {
        if (this.children) {
          if (target.parentNode) {
            target.parentNode.removeChild(target);
          }
          for (var i = 0, ci; ci = this.children[i]; i++) {
            if (ci === source) {
              this.children.splice(i, 0, target);
              target.parentNode = this;
              return target;
            }
          }

        }
      },

      /**
       * 在传入节点的后面插入一个节点
       * @method insertAfter
       * @param { AX.uNode } target 要插入的节点
       * @param { AX.uNode } source 在该参数节点后面插入
       * @return { AX.uNode } 返回刚插入的子节点
       * @example
       * ```javascript
       * node.parentNode.insertAfter(newNode, node); //在node节点后面插入newNode
       * ```
       */
      insertAfter: function (target, source) {
        if (this.children) {
          if (target.parentNode) {
            target.parentNode.removeChild(target);
          }
          for (var i = 0, ci; ci = this.children[i]; i++) {
            if (ci === source) {
              this.children.splice(i + 1, 0, target);
              target.parentNode = this;
              return target;
            }

          }
        }
      },

      /**
       * 从当前节点的子节点列表中，移除节点
       * @method removeChild
       * @param { AX.uNode } node 要移除的节点引用
       * @param { Boolean } keepChildren 是否保留移除节点的子节点，若传入true，自动把移除节点的子节点插入到移除的位置
       * @return { * } 返回刚移除的子节点
       * @example
       * ```javascript
       * node.removeChild(childNode,true); //在node的子节点列表中移除child节点，并且吧child的子节点插入到移除的位置
       * ```
       */
      removeChild: function (node, keepChildren) {
        if (this.children) {
          for (var i = 0, ci; ci = this.children[i]; i++) {
            if (ci === node) {
              this.children.splice(i, 1);
              ci.parentNode = null;
              if (keepChildren && ci.children && ci.children.length) {
                for (var j = 0, cj; cj = ci.children[j]; j++) {
                  this.children.splice(i + j, 0, cj);
                  cj.parentNode = this;

                }
              }
              return ci;
            }
          }
        }
      },

      /**
       * 获取当前节点所代表的元素属性，即获取attrs对象下的属性值
       * @method getAttr
       * @param { String } attrName 要获取的属性名称
       * @return { * } 返回attrs对象下的属性值
       * @example
       * ```javascript
       * node.getAttr('title');
       * ```
       */
      getAttr: function (attrName) {
        return this.attrs && this.attrs[attrName.toLowerCase()]
      },

      /**
       * 设置当前节点所代表的元素属性，即设置attrs对象下的属性值
       * @method setAttr
       * @param { String } attrName 要设置的属性名称
       * @param { * } attrVal 要设置的属性值，类型视设置的属性而定
       * @return { * } 返回attrs对象下的属性值
       * @example
       * ```javascript
       * node.setAttr('title','标题');
       * ```
       */
      setAttr: function (attrName, attrVal) {
        if (!attrName) {
          delete this.attrs;
          return;
        }
        if (!this.attrs) {
          this.attrs = {};
        }
        if (utils.isObject(attrName)) {
          for (var a in attrName) {
            if (!attrName[a]) {
              delete this.attrs[a]
            } else {
              this.attrs[a.toLowerCase()] = attrName[a];
            }
          }
        } else {
          if (!attrVal) {
            delete this.attrs[attrName]
          } else {
            this.attrs[attrName.toLowerCase()] = attrVal;
          }

        }
      },

      /**
       * 获取当前节点在父节点下的位置索引
       * @method getIndex
       * @return { Number } 返回索引数值，如果没有父节点，返回-1
       * @example
       * ```javascript
       * node.getIndex();
       * ```
       */
      getIndex: function () {
        var parent = this.parentNode;
        for (var i = 0, ci; ci = parent.children[i]; i++) {
          if (ci === this) {
            return i;
          }
        }
        return -1;
      },

      /**
       * 在当前节点下，根据id查找节点
       * @method getNodeById
       * @param { String } id 要查找的id
       * @return { AX.uNode } 返回找到的节点
       * @example
       * ```javascript
       * node.getNodeById('textId');
       * ```
       */
      getNodeById: function (id) {
        var node;
        if (this.children && this.children.length) {
          for (var i = 0, ci; ci = this.children[i++];) {
            if (node = getNodeById(ci, id)) {
              return node;
            }
          }
        }
      },

      /**
       * 在当前节点下，根据元素名称查找节点列表
       * @method getNodesByTagName
       * @param { String } tagNames 要查找的元素名称
       * @return { Array } 返回找到的节点列表
       * @example
       * ```javascript
       * node.getNodesByTagName('span');
       * ```
       */
      getNodesByTagName: function (tagNames) {
        tagNames = utils.trim(tagNames).replace(/[ ]{2,}/g, ' ').split(' ');
        var arr = [], me = this;
        utils.each(tagNames, function (tagName) {
          if (me.children && me.children.length) {
            for (var i = 0, ci; ci = me.children[i++];) {
              getNodesByTagName(ci, tagName, arr)
            }
          }
        });
        return arr;
      },

      /**
       * 根据样式名称，获取节点的样式值
       * @method getStyle
       * @param { String } name 要获取的样式名称
       * @return { String } 返回样式值
       * @example
       * ```javascript
       * node.getStyle('font-size');
       * ```
       */
      getStyle: function (name) {
        var cssStyle = this.getAttr('style');
        if (!cssStyle) {
          return ''
        }
        var reg = new RegExp('(^|;)\\s*' + name + ':([^;]+)', 'i');
        var match = cssStyle.match(reg);
        if (match && match[0]) {
          return match[2]
        }
        return '';
      },

      /**
       * 给节点设置样式
       * @method setStyle
       * @param { String } name 要设置的的样式名称
       * @param { String } val 要设置的的样值
       * @example
       * ```javascript
       * node.setStyle('font-size', '12px');
       * ```
       */
      setStyle: function (name, val) {
        function exec(name, val) {
          var reg = new RegExp('(^|;)\\s*' + name + ':([^;]+;?)', 'gi');
          cssStyle = cssStyle.replace(reg, '$1');
          if (val) {
            cssStyle = name + ':' + utils.unhtml(val) + ';' + cssStyle
          }

        }

        var cssStyle = this.getAttr('style');
        if (!cssStyle) {
          cssStyle = '';
        }
        if (utils.isObject(name)) {
          for (var a in name) {
            exec(a, name[a])
          }
        } else {
          exec(name, val)
        }
        this.setAttr('style', utils.trim(cssStyle))
      },

      /**
       * 传入一个函数，递归遍历当前节点下的所有节点
       * @method traversal
       * @param { Function } fn 遍历到节点的时，传入节点作为参数，运行此函数
       * @example
       * ```javascript
       * traversal(node, function(){
       *     console.log(node.type);
       * });
       * ```
       */
      traversal: function (fn) {
        if (this.children && this.children.length) {
          nodeTraversal(this, fn);
        }
        return this;
      }
    }
  })();


  // core/htmlparser.js
  /**
   * html字符串转换成uNode节点
   * @file
   * @module AX
   * @since 1.2.6.1
   */

  /**
   * UEditor公用空间，UEditor所有的功能都挂载在该空间下
   * @unfile
   * @module AX
   */

  /**
   * html字符串转换成uNode节点的静态方法
   * @method htmlparser
   * @param { String } htmlstr 要转换的html代码
   * @param { Boolean } ignoreBlank 若设置为true，转换的时候忽略\n\r\t等空白字符
   * @return { uNode } 给定的html片段转换形成的uNode对象
   * @example
   * ```javascript
   * var root = AX.htmlparser('<p><b>htmlparser</b></p>', true);
   * ```
   */

  var htmlparser = AX.htmlparser = function (htmlstr, ignoreBlank) {
    //todo 原来的方式  [^"'<>\/] 有\/就不能配对上 <TD vAlign=top background=../AAA.JPG> 这样的标签了
    //先去掉了，加上的原因忘了，这里先记录
    var re_tag = /<(?:(?:\/([^>]+)>)|(?:!--([\S|\s]*?)-->)|(?:([^\s\/<>]+)\s*((?:(?:"[^"]*")|(?:'[^']*')|[^"'<>])*)\/?>))/g,
      re_attr = /([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g;

    //ie下取得的html可能会有\n存在，要去掉，在处理replace(/[\t\r\n]*/g,'');代码高量的\n不能去除
    var allowEmptyTags = {
      b: 1, code: 1, i: 1, u: 1, strike: 1, s: 1, tt: 1, strong: 1, q: 1, samp: 1, em: 1, span: 1,
      sub: 1, img: 1, sup: 1, font: 1, big: 1, small: 1, iframe: 1, a: 1, br: 1, pre: 1
    };
    htmlstr = htmlstr.replace(new RegExp(domUtils.fillChar, 'g'), '');
    if (!ignoreBlank) {
      htmlstr = htmlstr.replace(new RegExp('[\\r\\t\\n' + (ignoreBlank ? '' : ' ') + ']*<\/?(\\w+)\\s*(?:[^>]*)>[\\r\\t\\n' + (ignoreBlank ? '' : ' ') + ']*', 'g'), function (a, b) {
        //br暂时单独处理
        if (b && allowEmptyTags[b.toLowerCase()]) {
          return a.replace(/(^[\n\r]+)|([\n\r]+$)/g, '');
        }
        var rsl = a.replace(new RegExp('^[\\r\\n' + (ignoreBlank ? '' : ' ') + ']+'), '').replace(new RegExp('[\\r\\n' + (ignoreBlank ? '' : ' ') + ']+$'), '');
        return rsl;
      });
    }

    var notTransAttrs = {
      'href': 1,
      'src': 1
    };

    var uNode = AX.uNode,
      needParentNode = {
        'td': 'tr',
        'tr': ['tbody', 'thead', 'tfoot'],
        'tbody': 'table',
        'th': 'tr',
        'thead': 'table',
        'tfoot': 'table',
        'caption': 'table',
        'li': ['ul', 'ol'],
        'dt': 'dl',
        'dd': 'dl',
        'option': 'select'
      },
      needChild = {
        'ol': 'li',
        'ul': 'li'
      };

    function text(parent, data) {

      if (needChild[parent.tagName]) {
        var tmpNode = uNode.createElement(needChild[parent.tagName]);
        parent.appendChild(tmpNode);
        tmpNode.appendChild(uNode.createText(data));
        parent = tmpNode;
      } else {

        parent.appendChild(uNode.createText(data));
      }
    }

    function element(parent, tagName, htmlattr) {
      var needParentTag;
      if (needParentTag = needParentNode[tagName]) {
        var tmpParent = parent, hasParent;
        while (tmpParent.type != 'root') {
          if (utils.isArray(needParentTag) ? utils.indexOf(needParentTag, tmpParent.tagName) != -1 : needParentTag == tmpParent.tagName) {
            parent = tmpParent;
            hasParent = true;
            break;
          }
          tmpParent = tmpParent.parentNode;
        }
        if (!hasParent) {
          parent = element(parent, utils.isArray(needParentTag) ? needParentTag[0] : needParentTag)
        }
      }
      //按dtd处理嵌套
      //        if(parent.type != 'root' && !dtd[parent.tagName][tagName])
      //            parent = parent.parentNode;
      var elm = new uNode({
        parentNode: parent,
        type: 'element',
        tagName: tagName.toLowerCase(),
        //是自闭合的处理一下
        children: dtd.$empty[tagName] ? null : []
      });
      //如果属性存在，处理属性
      if (htmlattr) {
        var attrs = {}, match;
        while (match = re_attr.exec(htmlattr)) {
          attrs[match[1].toLowerCase()] = notTransAttrs[match[1].toLowerCase()] ? match[2] || match[3] || match[4] : utils.unhtml(match[2] || match[3] || match[4])
        }
        elm.attrs = attrs;
      }
      //trace:3970
      //        //如果parent下不能放elm
      //        if(dtd.$inline[parent.tagName] && dtd.$block[elm.tagName] && !dtd[parent.tagName][elm.tagName]){
      //            parent = parent.parentNode;
      //            elm.parentNode = parent;
      //        }
      parent.children.push(elm);
      //如果是自闭合节点返回父亲节点
      return dtd.$empty[tagName] ? parent : elm
    }

    function comment(parent, data) {
      parent.children.push(new uNode({
        type: 'comment',
        data: data,
        parentNode: parent
      }));
    }

    var match, currentIndex = 0, nextIndex = 0;
    //设置根节点
    var root = new uNode({
      type: 'root',
      children: []
    });
    var currentParent = root;

    while (match = re_tag.exec(htmlstr)) {
      currentIndex = match.index;
      try {
        if (currentIndex > nextIndex) {
          //text node
          text(currentParent, htmlstr.slice(nextIndex, currentIndex));
        }
        if (match[3]) {

          if (dtd.$cdata[currentParent.tagName]) {
            text(currentParent, match[0]);
          } else {
            //start tag
            currentParent = element(currentParent, match[3].toLowerCase(), match[4]);
          }


        } else if (match[1]) {
          if (currentParent.type != 'root') {
            if (dtd.$cdata[currentParent.tagName] && !dtd.$cdata[match[1]]) {
              text(currentParent, match[0]);
            } else {
              var tmpParent = currentParent;
              while (currentParent.type == 'element' && currentParent.tagName != match[1].toLowerCase()) {
                currentParent = currentParent.parentNode;
                if (currentParent.type == 'root') {
                  currentParent = tmpParent;
                  throw 'break'
                }
              }
              //end tag
              currentParent = currentParent.parentNode;
            }

          }

        } else if (match[2]) {
          //comment
          comment(currentParent, match[2])
        }
      } catch (e) {
      }

      nextIndex = re_tag.lastIndex;

    }
    //如果结束是文本，就有可能丢掉，所以这里手动判断一下
    //例如 <li>sdfsdfsdf<li>sdfsdfsdfsdf
    if (nextIndex < htmlstr.length) {
      text(currentParent, htmlstr.slice(nextIndex));
    }
    return root;
  };


  // core/filternode.js
  /**
   * UE过滤节点的静态方法
   * @file
   */

  /**
   * UEditor公用空间，UEditor所有的功能都挂载在该空间下
   * @module AX
   */


  /**
   * 根据传入节点和过滤规则过滤相应节点
   * @module AX
   * @since 1.2.6.1
   * @method filterNode
   * @param { Object } root 指定root节点
   * @param { Object } rules 过滤规则json对象
   * @example
   * ```javascript
   * AX.filterNode(root,editor.options.filterRules);
   * ```
   */
  var filterNode = AX.filterNode = function () {
    function filterNode(node, rules) {
      switch (node.type) {
        case 'text':
          break;
        case 'element':
          var val;
          if (val = rules[node.tagName]) {
            if (val === '-') {
              node.parentNode.removeChild(node)
            } else if (utils.isFunction(val)) {
              var parentNode = node.parentNode,
                index = node.getIndex();
              val(node);
              if (node.parentNode) {
                if (node.children) {
                  for (var i = 0, ci; ci = node.children[i];) {
                    filterNode(ci, rules);
                    if (ci.parentNode) {
                      i++;
                    }
                  }
                }
              } else {
                for (var i = index, ci; ci = parentNode.children[i];) {
                  filterNode(ci, rules);
                  if (ci.parentNode) {
                    i++;
                  }
                }
              }


            } else {
              var attrs = val['$'];
              if (attrs && node.attrs) {
                var tmpAttrs = {}, tmpVal;
                for (var a in attrs) {
                  tmpVal = node.getAttr(a);
                  //todo 只先对style单独处理
                  if (a == 'style' && utils.isArray(attrs[a])) {
                    var tmpCssStyle = [];
                    utils.each(attrs[a], function (v) {
                      var tmp;
                      if (tmp = node.getStyle(v)) {
                        tmpCssStyle.push(v + ':' + tmp);
                      }
                    });
                    tmpVal = tmpCssStyle.join(';')
                  }
                  if (tmpVal) {
                    tmpAttrs[a] = tmpVal;
                  }

                }
                node.attrs = tmpAttrs;
              }
              if (node.children) {
                for (var i = 0, ci; ci = node.children[i];) {
                  filterNode(ci, rules);
                  if (ci.parentNode) {
                    i++;
                  }
                }
              }
            }
          } else {
            //如果不在名单里扣出子节点并删除该节点,cdata除外
            if (dtd.$cdata[node.tagName]) {
              node.parentNode.removeChild(node)
            } else {
              var parentNode = node.parentNode,
                index = node.getIndex();
              node.parentNode.removeChild(node, true);
              for (var i = index, ci; ci = parentNode.children[i];) {
                filterNode(ci, rules);
                if (ci.parentNode) {
                  i++;
                }
              }
            }
          }
          break;
        case 'comment':
          node.parentNode.removeChild(node)
      }

    }

    return function (root, rules) {
      if (utils.isEmptyObject(rules)) {
        return root;
      }
      var val;
      if (val = rules['-']) {
        utils.each(val.split(' '), function (k) {
          rules[k] = '-'
        })
      }
      for (var i = 0, ci; ci = root.children[i];) {
        filterNode(ci, rules);
        if (ci.parentNode) {
          i++;
        }
      }
      return root;
    }
  }();

  // core/plugin.js
  /**
   * Created with JetBrains PhpStorm.
   * User: campaign
   * Date: 10/8/13
   * Time: 6:15 PM
   * To change this template use File | Settings | File Templates.
   */
  AX.plugin = function () {
    var _plugins = {};
    return {
      register: function (pluginName, fn, oldOptionName, afterDisabled) {
        if (oldOptionName && utils.isFunction(oldOptionName)) {
          afterDisabled = oldOptionName;
          oldOptionName = null
        }
        _plugins[pluginName] = {
          optionName: oldOptionName || pluginName,
          execFn: fn,
          //当插件被禁用时执行
          afterDisabled: afterDisabled
        }
      },
      load: function (editor) {
        utils.each(_plugins, function (plugin) {
          var _export = plugin.execFn.call(editor);
          if (editor.options[plugin.optionName] !== false) {
            if (_export) {
              //后边需要再做扩展
              utils.each(_export, function (v, k) {
                switch (k.toLowerCase()) {
                  case 'shortcutkey':
                    editor.addshortcutkey(v);
                    break;
                  case 'bindevents':
                    utils.each(v, function (fn, eventName) {
                      editor.addListener(eventName, fn);
                    });
                    break;
                  case 'bindmultievents':
                    utils.each(utils.isArray(v) ? v : [v], function (event) {
                      var types = utils.trim(event.type).split(/\s+/);
                      utils.each(types, function (eventName) {
                        editor.addListener(eventName, event.handler);
                      });
                    });
                    break;
                  case 'commands':
                    utils.each(v, function (execFn, execName) {
                      editor.commands[execName] = execFn
                    });
                    break;
                  case 'outputrule':
                    editor.addOutputRule(v);
                    break;
                  case 'inputrule':
                    editor.addInputRule(v);
                    break;
                  case 'defaultoptions':
                    editor.setOpt(v)
                }
              })
            }

          } else if (plugin.afterDisabled) {
            plugin.afterDisabled.call(editor)
          }

        });
        //向下兼容
        utils.each(AX.plugins, function (plugin) {
          plugin.call(editor, window);
        });
      },
      run: function (pluginName, editor) {
        var plugin = _plugins[pluginName];
        if (plugin) {
          plugin.exeFn.call(editor)
        }
      }
    }
  }();

  // core/keymap.js
  var keymap = AX.keymap = {
    'Backspace': 8,
    'Tab': 9,
    'Enter': 13,

    'Shift': 16,
    'Control': 17,
    'Alt': 18,
    'CapsLock': 20,

    'Esc': 27,

    'Spacebar': 32,

    'PageUp': 33,
    'PageDown': 34,
    'End': 35,
    'Home': 36,

    'Left': 37,
    'Up': 38,
    'Right': 39,
    'Down': 40,

    'Insert': 45,

    'Del': 46,

    'NumLock': 144,

    'Cmd': 91,

    '=': 187,
    '-': 189,

    "b": 66,
    'i': 73,
    //回退
    'z': 90,
    'y': 89,
    //粘贴
    'v': 86,
    'x': 88,

    's': 83,

    'n': 78
  };

  // core/localstorage.js
  //存储媒介封装
  var LocalStorage = AX.LocalStorage = (function () {

    var storage = window.localStorage || getUserData() || null,
      LOCAL_FILE = 'localStorage';

    return {

      saveLocalData: function (key, data) {

        if (storage && data) {
          try {
            storage.removeItem(key);
            storage.setItem(key, data);
          } catch (e) { }
          return true;
        }

        return false;

      },

      getLocalData: function (key) {

        if (storage) {
          return storage.getItem(key);
        }

        return null;

      },

      removeItem: function (key) {

        storage && storage.removeItem(key);

      }

    };

    function getUserData() {

      var container = document.createElement("div");
      container.style.display = "none";

      if (!container.addBehavior) {
        return null;
      }

      container.addBehavior("#default#userdata");

      return {

        getItem: function (key) {

          var result = null;

          try {
            document.body.appendChild(container);
            container.load(LOCAL_FILE);
            result = container.getAttribute(key);
            document.body.removeChild(container);
          } catch (e) {
          }

          return result;

        },

        setItem: function (key, value) {

          document.body.appendChild(container);
          container.setAttribute(key, value);
          container.save(LOCAL_FILE);
          document.body.removeChild(container);

        },

        //// 暂时没有用到
        //clear: function () {
        //
        //    var expiresTime = new Date();
        //    expiresTime.setFullYear(expiresTime.getFullYear() - 1);
        //    document.body.appendChild(container);
        //    container.expires = expiresTime.toUTCString();
        //    container.save(LOCAL_FILE);
        //    document.body.removeChild(container);
        //
        //},

        removeItem: function (key) {

          document.body.appendChild(container);
          container.removeAttribute(key);
          container.save(LOCAL_FILE);
          document.body.removeChild(container);

        }

      };

    }

  })();

  (function () {

    var ROOTKEY = 'ueditor_preference';

    AX.Editor.prototype.setPreferences = function (key, value) {
      var obj = {};
      if (utils.isString(key)) {
        obj[key] = value;
      } else {
        obj = key;
      }
      var data = LocalStorage.getLocalData(ROOTKEY);
      if (data && (data = utils.str2json(data))) {
        utils.extend(data, obj);
      } else {
        data = obj;
      }
      data && LocalStorage.saveLocalData(ROOTKEY, utils.json2str(data));
    };

    AX.Editor.prototype.getPreferences = function (key) {
      var data = LocalStorage.getLocalData(ROOTKEY);
      if (data && (data = utils.str2json(data))) {
        return key ? data[key] : data
      }
      return null;
    };

    AX.Editor.prototype.removePreferences = function (key) {
      var data = LocalStorage.getLocalData(ROOTKEY);
      if (data && (data = utils.str2json(data))) {
        data[key] = undefined;
        delete data[key]
      }
      data && LocalStorage.saveLocalData(ROOTKEY, utils.json2str(data));
    };

  })();


  // plugins/defaultfilter.js
  ///import core
  ///plugin 编辑器默认的过滤转换机制

  AX.plugins['defaultfilter'] = function () {
    var me = this;
    me.setOpt({
      'allowDivTransToP': true,
      'disabledTableInTable': true
    });
    //默认的过滤处理
    //进入编辑器的内容处理
    me.addInputRule(function (root) {
      var allowDivTransToP = this.options.allowDivTransToP;
      var val;

      function tdParent(node) {
        while (node && node.type == 'element') {
          if (node.tagName == 'td') {
            return true;
          }
          node = node.parentNode;
        }
        return false;
      }

      //进行默认的处理
      root.traversal(function (node) {
        if (node.type == 'element') {
          if (!dtd.$cdata[node.tagName] && me.options.autoClearEmptyNode && dtd.$inline[node.tagName] && !dtd.$empty[node.tagName] && (!node.attrs || utils.isEmptyObject(node.attrs))) {
            if (!node.firstChild()) {
              node.parentNode.removeChild(node);
            } else if (node.tagName == 'span' && (!node.attrs || utils.isEmptyObject(node.attrs))) {
              node.parentNode.removeChild(node, true)
            }
            return;
          }
          switch (node.tagName) {
            case 'style':
            case 'script':
              node.setAttr({
                cdata_tag: node.tagName,
                cdata_data: node.innerHTML() || '',
                '_ue_custom_node_': 'true'
              });
              node.tagName = 'div';
              node.innerHTML('');
              break;
            case 'a':
              if (val = node.getAttr('href')) {
                node.setAttr('_href', val)
              }
              break;
            case 'img':
              //todo base64暂时去掉，后边做远程图片上传后，干掉这个
              if (val = node.getAttr('src')) {
                if (/^data:/.test(val)) {
                  node.parentNode.removeChild(node);
                  break;
                }
              }
              node.setAttr('_src', node.getAttr('src'));
              break;
            case 'span':
              if (browser.webkit && (val = node.getStyle('white-space'))) {
                if (/nowrap|normal/.test(val)) {
                  node.setStyle('white-space', '');
                  if (me.options.autoClearEmptyNode && utils.isEmptyObject(node.attrs)) {
                    node.parentNode.removeChild(node, true)
                  }
                }
              }
              val = node.getAttr('id');
              if (val && /^_baidu_bookmark_/i.test(val)) {
                node.parentNode.removeChild(node)
              }
              break;
            case 'p':
              if (val = node.getAttr('align')) {
                node.setAttr('align');
                node.setStyle('text-align', val)
              }
              //trace:3431
              //                        var cssStyle = node.getAttr('style');
              //                        if (cssStyle) {
              //                            cssStyle = cssStyle.replace(/(margin|padding)[^;]+/g, '');
              //                            node.setAttr('style', cssStyle)
              //
              //                        }
              //p标签不允许嵌套
              utils.each(node.children, function (n) {
                if (n.type == 'element' && n.tagName == 'p') {
                  var next = n.nextSibling();
                  node.parentNode.insertAfter(n, node);
                  var last = n;
                  while (next) {
                    var tmp = next.nextSibling();
                    node.parentNode.insertAfter(next, last);
                    last = next;
                    next = tmp;
                  }
                  return false;
                }
              });
              if (!node.firstChild()) {
                node.innerHTML(browser.ie ? '&nbsp;' : '<br/>')
              }
              break;
            case 'div':
              if (node.getAttr('cdata_tag')) {
                break;
              }
              //针对代码这里不处理插入代码的div
              val = node.getAttr('class');
              if (val && /^line number\d+/.test(val)) {
                break;
              }
              if (!allowDivTransToP) {
                break;
              }
              var tmpNode, p = AX.uNode.createElement('p');
              while (tmpNode = node.firstChild()) {
                if (tmpNode.type == 'text' || !AX.dom.dtd.$block[tmpNode.tagName]) {
                  p.appendChild(tmpNode);
                } else {
                  if (p.firstChild()) {
                    node.parentNode.insertBefore(p, node);
                    p = AX.uNode.createElement('p');
                  } else {
                    node.parentNode.insertBefore(tmpNode, node);
                  }
                }
              }
              if (p.firstChild()) {
                node.parentNode.insertBefore(p, node);
              }
              node.parentNode.removeChild(node);
              break;
            case 'dl':
              node.tagName = 'ul';
              break;
            case 'dt':
            case 'dd':
              node.tagName = 'li';
              break;
            case 'li':
              var className = node.getAttr('class');
              if (!className || !/list\-/.test(className)) {
                node.setAttr()
              }
              var tmpNodes = node.getNodesByTagName('ol ul');
              AX.utils.each(tmpNodes, function (n) {
                node.parentNode.insertAfter(n, node);
              });
              break;
            case 'td':
            case 'th':
            case 'caption':
              if (!node.children || !node.children.length) {
                node.appendChild(browser.ie11below ? AX.uNode.createText(' ') : AX.uNode.createElement('br'))
              }
              break;
            case 'table':
              if (me.options.disabledTableInTable && tdParent(node)) {
                node.parentNode.insertBefore(AX.uNode.createText(node.innerText()), node);
                node.parentNode.removeChild(node)
              }
          }

        }
        //            if(node.type == 'comment'){
        //                node.parentNode.removeChild(node);
        //            }
      })

    });

    //从编辑器出去的内容处理
    me.addOutputRule(function (root) {

      var val;
      root.traversal(function (node) {
        if (node.type == 'element') {

          if (me.options.autoClearEmptyNode && dtd.$inline[node.tagName] && !dtd.$empty[node.tagName] && (!node.attrs || utils.isEmptyObject(node.attrs))) {

            if (!node.firstChild()) {
              node.parentNode.removeChild(node);
            } else if (node.tagName == 'span' && (!node.attrs || utils.isEmptyObject(node.attrs))) {
              node.parentNode.removeChild(node, true)
            }
            return;
          }
          switch (node.tagName) {
            case 'div':
              if (val = node.getAttr('cdata_tag')) {
                node.tagName = val;
                node.appendChild(AX.uNode.createText(node.getAttr('cdata_data')));
                node.setAttr({ cdata_tag: '', cdata_data: '', '_ue_custom_node_': '' });
              }
              break;
            case 'a':
              if (val = node.getAttr('_href')) {
                node.setAttr({
                  'href': utils.html(val),
                  '_href': ''
                })
              }
              break;
              break;
            case 'span':
              val = node.getAttr('id');
              if (val && /^_baidu_bookmark_/i.test(val)) {
                node.parentNode.removeChild(node)
              }
              break;
            case 'img':
              if (val = node.getAttr('_src')) {
                node.setAttr({
                  'src': node.getAttr('_src'),
                  '_src': ''
                })
              }


          }
        }

      })


    });
  };


  // plugins/inserthtml.js
  /**
   * 插入html字符串插件
   * @file
   * @since 1.2.6.1
   */

  /**
   * 插入html代码
   * @command inserthtml
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { String } html 插入的html字符串
   * @param { Boolean } isTop 插入的html字符串后是否滚动条回到顶部
   * @param { String } id 插入控件时会带上id，便于定位控件获取焦点
   * @remaind 插入的标签内容是在当前的选区位置上插入，如果当前是闭合状态，那直接插入内容， 如果当前是选中状态，将先清除当前选中内容后，再做插入
   * @warning 注意:该命令会对当前选区的位置，对插入的内容进行过滤转换处理。 过滤的规则遵循html语意化的原则。
   * @example
   * ```javascript
   * //xxx[BB]xxx 当前选区为非闭合选区，选中BB这两个文本
   * //执行命令，插入<b>CC</b>
   * //插入后的效果 xxx<b>CC</b>xxx
   * //<p>xx|xxx</p> 当前选区为闭合状态
   * //插入<p>CC</p>
   * //结果 <p>xx</p><p>CC</p><p>xxx</p>
   * //<p>xxxx</p>|</p>xxx</p> 当前选区在两个p标签之间
   * //插入 xxxx
   * //结果 <p>xxxx</p><p>xxxx</p></p>xxx</p>
   * ```
   */

  AX.commands['inserthtml'] = {
    execCommand: function (command, html, notNeedFilter, isTop, id) {
      var me = this,
        range,
        div;
      if (!html) {
        return;
      }
      if (me.fireEvent('beforeinserthtml', html) === true) {
        return;
      }
      // var bk = me.document.getElementById("bookfr");
      // if(bk) { // 插入HTML时，光标位置插入书签，用于光标定位 -- zw
      //   bk.parentElement.removeChild(bk);
      // }
      // html = html + "<span id='bookfr'></span>";
      range = me.selection.getRange();
      var parentNode = range.startContainer.parentElement;
      //   isHeader = false,
      //   isFooter = false;
      // isHeader = AX.dom.domUtils.findParent(parentNode, function (dom) {
      //   return dom.className.toLowerCase() == 'ax-page-header';
      // }, true);
      var isContent = AX.dom.domUtils.findParent(parentNode, function (dom) {
        return dom.className.indexOf('ax-page-wrapper') > -1;
      }, true);
      if(me.options.editorModel != "design") { // 非设计模式下，校验是否可编辑
        var parentEdit = AX.dom.domUtils.findParent(range.startContainer, function (dom) {
          return dom.nodeType == 1 && dom.getAttribute("contenteditable") != null && dom.getAttribute("contenteditable") != undefined;
        }, true);
        if(parentEdit.getAttribute("contenteditable") == false || parentEdit.getAttribute("contenteditable") == "false") {
          alert(me.getLang("ax.noContentable"));
          return;
        }
      }
      // isFooter = AX.dom.domUtils.findParent(parentNode, function (dom) {
      //   return dom.className.toLowerCase() == 'ax-page-footer';
      // }, true);
      if(!isContent){
      // if ((isHeader && !axTools.hasClass(isHeader, 'focus')) || (isFooter && !axTools.hasClass(isFooter, 'focus'))) {
        var contentNode = axTools.getByClass('ax-page-content', me.document);
        range.setStart(contentNode[contentNode.length - 1], contentNode[contentNode.length - 1].children.length - 1).collapse(true);
        // if (footerNode.length == 0) {
        //   range.setStart(me.body, -1).collapse(true);
        // } else {
        //   range.setStart(me.body, me.body.children.length - 1).collapse(true);
        // }
      }
      div = range.document.createElement('div');
      div.style.display = 'inline';

      if (!notNeedFilter) {
        var root = AX.htmlparser(html);
        //如果给了过滤规则就先进行过滤
        if (me.options.filterRules) {
          AX.filterNode(root, me.options.filterRules);
        }
        //执行默认的处理
        me.filterInputRule(root);
        html = root.toHtml()
      } else if (notNeedFilter == 'svgRules') {
        html = html;
      }
      div.innerHTML = utils.trim(html);

      if (!range.collapsed) {
        var tmpNode = range.startContainer;
        if (domUtils.isFillChar(tmpNode)) {
          range.setStartBefore(tmpNode)
        }
        tmpNode = range.endContainer;
        if (domUtils.isFillChar(tmpNode)) {
          range.setEndAfter(tmpNode)
        }
        range.txtToElmBoundary();
        //结束边界可能放到了br的前边，要把br包含进来
        // x[xxx]<br/>
        if (range.endContainer && range.endContainer.nodeType == 1) {
          tmpNode = range.endContainer.childNodes[range.endOffset];
          if (tmpNode && domUtils.isBr(tmpNode)) {
            range.setEndAfter(tmpNode);
          }
        }
        if (range.startOffset == 0) {
          tmpNode = range.startContainer;
          if (domUtils.isBoundaryNode(tmpNode, 'firstChild')) {
            tmpNode = range.endContainer;
            if (range.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode, 'lastChild')) {
              me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';
              range.setStart(me.body.firstChild, 0).collapse(true)

            }
          }
        }
        !range.collapsed && range.deleteContents();
        if (range.startContainer.nodeType == 1) {
          var child = range.startContainer.childNodes[range.startOffset], pre;
          if (child && domUtils.isBlockElm(child) && (pre = child.previousSibling) && domUtils.isBlockElm(pre)) {
            range.setEnd(pre, pre.childNodes.length).collapse();
            while (child.firstChild) {
              pre.appendChild(child.firstChild);
            }
            domUtils.remove(child);
          }
        }

      }

      //增加 preNode 变量，用在组合元素插入基础元素时，前后文本节点增加 span 包裹 yang
      var child, parent, pre, tmp, hadBreak = 0, nextNode, previousNode;
      //如果当前位置选中了fillchar要干掉，要不会产生空行
      if (range.inFillChar()) {
        child = range.startContainer;
        if (domUtils.isFillChar(child)) {
          range.setStartBefore(child).collapse(true);
          domUtils.remove(child);
        } else if (domUtils.isFillChar(child, true)) {
          child.nodeValue = child.nodeValue.replace(fillCharReg, '');
          range.startOffset--;
          range.collapsed && range.collapse(true)
        }
      }
      //列表单独处理
      var li = domUtils.findParentByTagName(range.startContainer, 'li', true);
      if (li) {
        var next, last;
        while (child = div.firstChild) {
          //针对hr单独处理一下先
          while (child && (child.nodeType == 3 || !domUtils.isBlockElm(child) || child.tagName == 'HR')) {
            next = child.nextSibling;
            range.insertNode(child).collapse();
            last = child;
            child = next;

          }
          if (child) {
            if (/^(ol|ul)$/i.test(child.tagName)) {
              while (child.firstChild) {
                last = child.firstChild;
                domUtils.insertAfter(li, child.firstChild);
                li = li.nextSibling;
              }
              domUtils.remove(child)
            } else {
              var tmpLi;
              next = child.nextSibling;
              tmpLi = me.document.createElement('li');
              domUtils.insertAfter(li, tmpLi);
              tmpLi.appendChild(child);
              last = child;
              child = next;
              li = tmpLi;
            }
          }
        }
        li = domUtils.findParentByTagName(range.startContainer, 'li', true);
        if (domUtils.isEmptyBlock(li)) {
          var childValue = axTools.getByClass("ctrl-value", li);
          if (childValue.length == 0) {
            domUtils.remove(li)
          }
        }
        if (last) {

          range.setStartAfter(last).collapse(true).select(true)
        }
      } else {
        while (child = div.firstChild) {
          if (hadBreak) {
            var p = me.document.createElement('p');
            while (child && (child.nodeType == 3 || !dtd.$block[child.tagName])) {
              nextNode = child.nextSibling;
              p.appendChild(child);
              child = nextNode;
            }
            if (p.firstChild) {

              child = p
            }
          }
          range.insertNode(child);
          nextNode = child.nextSibling;
          //增加 preNode 变量，用在组合元素插入基础元素时，前后文本节点增加 span 包裹 yang
          previousNode = child.previousSibling;
          var block = domUtils.isBlockElm(child);
          var k = domUtils.findParent(child, function (a) {
            return domUtils.isBlockElm(a)
          });
          if (!hadBreak && child.nodeType == domUtils.NODE_ELEMENT && block && k) {

            parent = domUtils.findParent(child, function (node) {
              return domUtils.isBlockElm(node);
            });
            if (parent && parent.tagName.toLowerCase() != 'body' && !(dtd[parent.tagName][child.nodeName] && child.parentNode === parent)) {
              if (!dtd[parent.tagName][child.nodeName]) {
                pre = parent;
              } else {
                tmp = child.parentNode;
                while (tmp !== parent) {
                  pre = tmp;
                  tmp = tmp.parentNode;

                }
              }


              if (child.getAttribute('axplugins') === 'paragraphele' && child.tagName === "P") {
                //解决段落元素 回车会有嵌套的 如：<p axplugin=a><p axplugin=b></p></p>  yang START
                var parent = child.parentNode;
                var isBlock = domUtils.isBlockElm(parent);

                if (isBlock && !domUtils.isBody(parent) && utils.indexOf(['TD', 'LI', 'PRE'], parent.tagName) == -1) {
                  domUtils.remove(parent, true);
                }
                if (!isBlock) {
                  // 针对 <p><strong></strong></p> 标签 的嵌套问题 是上面的嵌套的两层结构
                  if (parent.parentNode.getAttribute("axplugins") === null && parent.parentNode.tagName === "P") {
                    domUtils.remove(parent.parentNode, true);
                    domUtils.remove(parent, true);
                  }
                }
                //解决段落元素 回车会有嵌套的 如：<p axplugin=a><p axplugin=b></p></p>  yang END
              } else {
                domUtils.breakParent(child, pre || tmp);
                //去掉break后前一个多余的节点  <p>|<[p> ==> <p></p><div></div><p>|</p>
                var pre = child.previousSibling;
                domUtils.trimWhiteTextNode(pre);
                if (!pre.childNodes.length) {
                  domUtils.remove(pre);
                }
              }

              //trace:2012,在非ie的情况，切开后剩下的节点有可能不能点入光标添加br占位
              if (!browser.ie &&
                (next = child.nextSibling) &&
                domUtils.isBlockElm(next) &&
                next.lastChild &&
                !domUtils.isBr(next.lastChild)) {
                next.appendChild(me.document.createElement('br'));
              }
              hadBreak = 1;
            }
          }
          var next = child.nextSibling;
          if (!div.firstChild && next && domUtils.isBlockElm(next)) {

            range.setStart(next, 0).collapse(true);
            break;
          }
          range.setEndAfter(child).collapse();


        }

        child = range.startContainer;
        // 段落元素 <p> <strong>xxxxx</strong>&nbsp;</p>
        //效果 <p> <strong>xxxxx</strong>&nbsp;|</p> 光标定位在 &nbsp; 后   yang start
        var preNode = nextNode && nextNode.previousSibling;
        if (preNode && preNode.tagName === 'P' && preNode.getAttribute("axplugins") === "paragraphele") {
          var emptyNode = domUtils.filterNodeList(preNode.childNodes, function (node) {
            return node.nodeType === 3 && AX.utils.trim(node.textContent).length == 1;
          });
          emptyNode && range.setEndAfter(emptyNode, 0).setCursor(true);
        }
        ;
        //效果 <p> <strong>xxxxx</strong>&nbsp;|</p> 光标定位在 &nbsp; 后   yang end
        if (nextNode && domUtils.isBr(nextNode)) {
          domUtils.remove(nextNode);
        }

        //用chrome可能有空白展位符
        if (domUtils.isBlockElm(child) && domUtils.isEmptyNode(child)) {
          if (nextNode = child.nextSibling) {
            domUtils.remove(child);
            if (nextNode.nodeType == 1 && dtd.$block[nextNode.tagName]) {

              range.setStart(nextNode, 0).collapse(true).shrinkBoundary()
            }
          } else {

            try {
              child.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';
            } catch (e) {
              range.setStartBefore(child);
              domUtils.remove(child)
            }

          }

        }


        //增加 preNode 变量，用在组合元素插入基础元素时，前后文本节点增加 span 包裹 yang start
        var isCombieleInner = domUtils.hasClass(child, 'ctrl-value');
        var parentIsCombiele = isCombieleInner && child.parentNode.getAttribute("axplugins") === "combine";
        var parentIsTextNode = domUtils.hasClass(child, '_textnode_');
        if (parentIsCombiele) { // 父元素是组合元素
          //效果 <span> xxx<span>xxxxx</span> xxx</span> 变成 <span><span>xxx</span><span>xxxxx</span><span>xxx</span></span>
          previousNode && previousNode.nodeType === 3 && domUtils.setTextNodeWrap(previousNode);
          nextNode && nextNode.nodeType === 3 && domUtils.setTextNodeWrap(nextNode);
        } else if (parentIsTextNode) {
          //效果 <p> xxx<span>xxxxx</span> xxx</span> 变成 <p>xxx</p><span>xxxxx</span><p>xxx</p>
          var node = domUtils.getByClass('ctrl-bg', child)[0];
          node && domUtils.breakParent(node, child);
        }
        ;
        //增加 preNode 变量，用在组合元素插入基础元素时，前后文本节点增加 span 包裹 yang end

        //加上true因为在删除表情等时会删两次，第一次是删的fillData
        try {
          range.select(true);
        } catch (e) {
        }

      }

      setTimeout(function () {
        range = me.selection.getRange();
        // range.scrollToView(me.autoHeightEnabled, me.autoHeightEnabled ? domUtils.getXY(me.iframe).y : 0);
        me.fireEvent('afterinserthtml', html);
        me.execCommand('resettabindex');

        //新增控件默认选中
        if (id) {
          var ctrl = me.document.getElementById(id);
          if (ctrl) {
            var ptype = ctrl.getAttribute('axPlugins');
            if (ptype) {
              var ctrlVal = axTools.getByClass('ctrl-value', ctrl)[0];
              //段落元素需定位到内容区域而不是标题
              if (ptype == 'paragraphele') {
                ctrlVal = axTools.getByClass('paragraphContent', ctrl)[0];
                if (!ctrlVal) {
                  ctrlVal = ctrl.children[0];
                }
                range = range.selectNode(ctrlVal);
                range.select()
              } else {
                ctrlVal.focus();
                ctrlVal.click();
              }
            }
          }
        }

        //滚动条返回顶部
        if (isTop) {
          me.document.getElementsByTagName('html')[0].scrollTop = 0;
        }
      }, 200);
    }
  };


  // plugins/autotypeset.js
  /**
   * 自动排版
   * @file
   * @since 1.2.6.1
   */

  /**
   * 对当前编辑器的内容执行自动排版， 排版的行为根据config配置文件里的“autotypeset”选项进行控制。
   * @command autotypeset
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'autotypeset' );
   * ```
   */

  AX.plugins['autotypeset'] = function () {

    this.setOpt({
      'autotypeset': {
        mergeEmptyline: true, //合并空行
        removeClass: true, //去掉冗余的class
        removeEmptyline: false, //去掉空行
        textAlign: "left", //段落的排版方式，可以是 left,right,center,justify 去掉这个属性表示不执行排版
        imageBlockLine: 'center', //图片的浮动方式，独占一行剧中,左右浮动，默认: center,left,right,none 去掉这个属性表示不执行排版
        pasteFilter: false, //根据规则过滤没事粘贴进来的内容
        clearFontSize: false, //去掉所有的内嵌字号，使用编辑器默认的字号
        clearFontFamily: false, //去掉所有的内嵌字体，使用编辑器默认的字体
        removeEmptyNode: false, // 去掉空节点
        //可以去掉的标签
        removeTagNames: utils.extend({ div: 1 }, dtd.$removeEmpty),
        indent: false, // 行首缩进
        indentValue: '2em', //行首缩进的大小
        bdc2sb: false,
        tobdc: false,
        removeFormat: false
      }
    });

    var me = this,
      opt = me.options.autotypeset,
      remainClass = {
        'selectTdClass': 1,
        'pagebreak': 1,
        'anchorclass': 1
      },
      remainTag = {
        'li': 1
      },
      tags = {
        div: 1,
        p: 1,
        //trace:2183 这些也认为是行
        blockquote: 1, center: 1, h1: 1, h2: 1, h3: 1, h4: 1, h5: 1, h6: 1,
        span: 1
      },
      highlightCont;
    //升级了版本，但配置项目里没有autotypeset
    if (!opt) {
      return;
    }

    readLocalOpts();

    function isLine(node, notEmpty) {
      if (!node || node.nodeType == 3) {
        return 0;
      }
      if (domUtils.isBr(node)) {
        return 1;
      }
      if (node && node.parentNode && tags[node.tagName.toLowerCase()]) {
        if (highlightCont && highlightCont.contains(node)
          ||
          node.getAttribute('pagebreak')
        ) {
          return 0;
        }

        return notEmpty ? !domUtils.isEmptyBlock(node) : domUtils.isEmptyBlock(node, new RegExp('[\\s' + domUtils.fillChar
          + ']', 'g'));
      }
    }

    function removeNotAttributeSpan(node) {
      if (!node.style.cssText) {
        domUtils.removeAttributes(node, ['style']);
        if (node.tagName.toLowerCase() == 'span' && domUtils.hasNoAttributes(node)) {
          domUtils.remove(node, true);
        }
      }
    }

    function autotype(type, html) {

      var me = this, cont;
      if (html) {
        if (!opt.pasteFilter) {
          return;
        }
        cont = me.document.createElement('div');
        cont.innerHTML = html.html;
      } else {
        cont = me.document.body;
      }
      var nodes = domUtils.getElementsByTagName(cont, '*');

      // 行首缩进，段落方向，段间距，段内间距
      for (var i = 0, ci; ci = nodes[i++];) {

        if (me.fireEvent('excludeNodeinautotype', ci) === true) {
          continue;
        }
        //font-size
        if (opt.clearFontSize && ci.style.fontSize) {
          domUtils.removeStyle(ci, 'font-size');

          removeNotAttributeSpan(ci);

        }
        //font-family
        if (opt.clearFontFamily && ci.style.fontFamily) {
          domUtils.removeStyle(ci, 'font-family');
          removeNotAttributeSpan(ci);
        }

        if (isLine(ci)) {
          //合并空行
          if (opt.mergeEmptyline) {
            var next = ci.nextSibling, tmpNode, isBr = domUtils.isBr(ci);
            while (isLine(next)) {
              tmpNode = next;
              next = tmpNode.nextSibling;
              if (isBr && (!next || next && !domUtils.isBr(next))) {
                break;
              }
              domUtils.remove(tmpNode);
            }

          }
          //去掉空行，保留占位的空行
          if (opt.removeEmptyline && domUtils.inDoc(ci, cont) && !remainTag[ci.parentNode.tagName.toLowerCase()]) {
            if (domUtils.isBr(ci)) {
              next = ci.nextSibling;
              if (next && !domUtils.isBr(next)) {
                continue;
              }
            }
            // 过滤空元素，防止空元素被清空
            if (ci.getAttribute('axPlugins') || ci.getAttribute('attrs') || ci.className.indexOf('ctrl-value') > -1 || ci.className == 'ax-page-header' || ci.className == 'ax-page-footer') {
              continue;
            }
            var child = axTools.getByClass("ctrl-bg", ci);
            if (child.length > 0) {
              continue;
            }
            domUtils.remove(ci);
            continue;

          }

        }
        if (isLine(ci, true) && ci.tagName != 'SPAN') {
          if (opt.indent) {
            ci.style.textIndent = opt.indentValue;
          }
          if (opt.textAlign) {
            ci.style.textAlign = opt.textAlign;
          }
          // if(opt.lineHeight)
          //     ci.style.lineHeight = opt.lineHeight + 'cm';

        }

        //去掉class,保留的class不去掉
        if (opt.removeClass) {
          ci.style.textIndent = 0;
        }
        if (opt.removeClass && ci.className && !remainClass[ci.className.toLowerCase()]) {

          if (highlightCont && highlightCont.contains(ci)) {
            continue;
          }
          domUtils.removeAttributes(ci, ['class']);
        }

        //表情不处理
        if (opt.imageBlockLine && ci.tagName.toLowerCase() == 'img' && !ci.getAttribute('emotion')) {
          if (html) {
            var img = ci;
            switch (opt.imageBlockLine) {
              case 'left':
              case 'right':
              case 'none':
                var pN = img.parentNode, tmpNode, pre, next;
                while (dtd.$inline[pN.tagName] || pN.tagName == 'A') {
                  pN = pN.parentNode;
                }
                tmpNode = pN;
                if (tmpNode.tagName == 'P' && domUtils.getStyle(tmpNode, 'text-align') == 'center') {
                  if (!domUtils.isBody(tmpNode) && domUtils.getChildCount(tmpNode, function (node) {
                    return !domUtils.isBr(node) && !domUtils.isWhitespace(node)
                  }) == 1) {
                    pre = tmpNode.previousSibling;
                    next = tmpNode.nextSibling;
                    if (pre && next && pre.nodeType == 1 && next.nodeType == 1 && pre.tagName == next.tagName && domUtils.isBlockElm(pre)) {
                      pre.appendChild(tmpNode.firstChild);
                      while (next.firstChild) {
                        pre.appendChild(next.firstChild);
                      }
                      domUtils.remove(tmpNode);
                      domUtils.remove(next);
                    } else {
                      domUtils.setStyle(tmpNode, 'text-align', '');
                    }


                  }


                }
                domUtils.setStyle(img, 'float', opt.imageBlockLine);
                break;
              case 'center':
                if (me.queryCommandValue('imagefloat') != 'center') {
                  pN = img.parentNode;
                  domUtils.setStyle(img, 'float', 'none');
                  tmpNode = img;
                  while (pN && domUtils.getChildCount(pN, function (node) {
                    return !domUtils.isBr(node) && !domUtils.isWhitespace(node)
                  }) == 1
                    && (dtd.$inline[pN.tagName] || pN.tagName == 'A')) {
                    tmpNode = pN;
                    pN = pN.parentNode;
                  }
                  var pNode = me.document.createElement('p');
                  domUtils.setAttributes(pNode, {

                    style: 'text-align:center'
                  });
                  tmpNode.parentNode.insertBefore(pNode, tmpNode);
                  pNode.appendChild(tmpNode);
                  domUtils.setStyle(tmpNode, 'float', '');

                }


            }
          } else {
            var range = me.selection.getRange();
            range.selectNode(ci).select();
            me.execCommand('imagefloat', opt.imageBlockLine);
          }

        }

        //去掉冗余的标签
        if (opt.removeEmptyNode) {
          if (opt.removeTagNames[ci.tagName.toLowerCase()] && domUtils.hasNoAttributes(ci) && domUtils.isEmptyBlock(ci)) {
            domUtils.remove(ci);
          }
        }
      }
      if (opt.tobdc) {
        var root = AX.htmlparser(cont.innerHTML);
        root.traversal(function (node) {
          if (node.type == 'text') {
            node.data = ToDBC(node.data)
          }
        });
        cont.innerHTML = root.toHtml()
      }
      if (opt.bdc2sb) {
        var root = AX.htmlparser(cont.innerHTML);
        root.traversal(function (node) {
          if (node.type == 'text') {
            node.data = DBC2SB(node.data)
          }
        });
        cont.innerHTML = root.toHtml()
      }
      if (html) {
        html.html = cont.innerHTML;
      }
    }

    if (opt.pasteFilter) {
      me.addListener('beforepaste', autotype);
    }

    function DBC2SB(str) {
      var result = '';
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i); //获取当前字符的unicode编码
        if (code >= 65281 && code <= 65373)//在这个unicode编码范围中的是所有的英文字母已经各种字符
        {
          result += String.fromCharCode(str.charCodeAt(i) - 65248); //把全角字符的unicode编码转换为对应半角字符的unicode码
        } else if (code == 12288)//空格
        {
          result += String.fromCharCode(str.charCodeAt(i) - 12288 + 32);
        } else {
          result += str.charAt(i);
        }
      }
      return result;
    }

    function ToDBC(txtstring) {
      txtstring = utils.html(txtstring);
      var tmp = "";
      var mark = "";/*用于判断,如果是html尖括里的标记,则不进行全角的转换*/
      for (var i = 0; i < txtstring.length; i++) {
        if (txtstring.charCodeAt(i) == 32) {
          tmp = tmp + String.fromCharCode(12288);
        } else if (txtstring.charCodeAt(i) < 127) {
          tmp = tmp + String.fromCharCode(txtstring.charCodeAt(i) + 65248);
        } else {
          tmp += txtstring.charAt(i);
        }
      }
      return tmp;
    }

    function readLocalOpts() {
      var cookieOpt = me.getPreferences('autotypeset');
      utils.extend(me.options.autotypeset, cookieOpt);
    }

    me.commands['autotypeset'] = {
      execCommand: function () {
        me.removeListener('beforepaste', autotype);
        if (opt.pasteFilter) {
          me.addListener('beforepaste', autotype);
        }
        autotype.call(me)
      }

    };

  };


  // plugins/autosubmit.js
  /**
   * 快捷键提交
   * @file
   * @since 1.2.6.1
   */

  /**
   * 提交表单
   * @command autosubmit
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'autosubmit' );
   * ```
   */

  AX.plugin.register('autosubmit', function () {
    return {
      shortcutkey: {
        "autosubmit": "ctrl+13" //手动提交
      },
      commands: {
        'autosubmit': {
          execCommand: function () {
            var me = this,
              form = domUtils.findParentByTagName(me.iframe, "form", false);
            if (form) {
              if (me.fireEvent("beforesubmit") === false) {
                return;
              }
              me.sync();
              form.submit();
            }
          }
        }
      }
    }
  });

  // plugins/background.js
  /**
   * 背景插件，为UEditor提供设置背景功能
   * @file
   * @since 1.2.6.1
   */
  AX.plugin.register('background', function () {
    var me = this,
      cssRuleId = 'editor_background',
      isSetColored,
      reg = new RegExp('body[\\s]*\\{(.+)\\}', 'i');

    function stringToObj(str) {
      var obj = {}, styles = str.split(';');
      utils.each(styles, function (v) {
        var index = v.indexOf(':'),
          key = utils.trim(v.substr(0, index)).toLowerCase();
        key && (obj[key] = utils.trim(v.substr(index + 1) || ''));
      });
      return obj;
    }

    function setBackground(obj) {
      if (obj) {
        var styles = [];
        for (var name in obj) {
          if (obj.hasOwnProperty(name)) {
            styles.push(name + ":" + obj[name] + '; ');
          }
        }
        utils.cssRule(cssRuleId, styles.length ? 'body{' + styles.join("") + '}' : '', me.document);
      } else {
        utils.cssRule(cssRuleId, '', me.document)
      }
    }

    //重写editor.hasContent方法

    var orgFn = me.hasContents;
    me.hasContents = function () {
      if (me.queryCommandValue('background')) {
        return true
      }
      return orgFn.apply(me, arguments);
    };
    return {
      bindEvents: {
        'getAllHtml': function (type, headHtml) {
          var body = this.body,
            su = domUtils.getComputedStyle(body, "background-image"),
            url = "";
          if (su.indexOf(me.options.imagePath) > 0) {
            url = su.substring(su.indexOf(me.options.imagePath), su.length - 1).replace(/"|\(|\)/ig, "");
          } else {
            url = su != "none" ? su.replace(/url\("?|"?\)/ig, "") : "";
          }
          var html = '<style type="text/css">body{';
          var bgObj = {
            "background-color": domUtils.getComputedStyle(body, "background-color") || "#ffffff",
            'background-image': url ? 'url(' + url + ')' : '',
            'background-repeat': domUtils.getComputedStyle(body, "background-repeat") || "",
            'background-position': browser.ie ? domUtils.getComputedStyle(body, "background-position-x") + " " + domUtils.getComputedStyle(body, "background-position-y") : domUtils.getComputedStyle(body, "background-position"),
            'height': domUtils.getComputedStyle(body, "height")
          };
          for (var name in bgObj) {
            if (bgObj.hasOwnProperty(name)) {
              html += name + ":" + bgObj[name] + "; ";
            }
          }
          html += '}</style> ';
          headHtml.push(html);
        },
        'aftersetcontent': function () {
          if (isSetColored == false) {
            setBackground();
          }
        }
      },
      inputRule: function (root) {
        isSetColored = false;
        utils.each(root.getNodesByTagName('p'), function (p) {
          var styles = p.getAttr('data-background');
          if (styles) {
            isSetColored = true;
            setBackground(stringToObj(styles));
            p.parentNode.removeChild(p);
          }
        })
      },
      outputRule: function (root) {
        var me = this,
          styles = (utils.cssRule(cssRuleId, me.document) || '').replace(/[\n\r]+/g, '').match(reg);
        if (styles) {
          root.appendChild(AX.uNode.createElement('<p style="display:none;" data-background="' + utils.trim(styles[1].replace(/"/g, '').replace(/[\s]+/g, ' ')) + '"><br/></p>'));
        }
      },
      commands: {
        'background': {
          execCommand: function (cmd, obj) {
            setBackground(obj);
          },
          queryCommandValue: function () {
            var me = this,
              styles = (utils.cssRule(cssRuleId, me.document) || '').replace(/[\n\r]+/g, '').match(reg);
            return styles ? stringToObj(styles[1]) : null;
          },
          notNeedUndo: true
        }
      }
    }
  });

  // plugins/image.js
  /**
   * 图片插入、排版插件
   * @file
   * @since 1.2.6.1
   */

  /**
   * 图片对齐方式
   * @command imagefloat
   * @method execCommand
   * @remind 值center为独占一行居中
   * @param { String } cmd 命令字符串
   * @param { String } align 对齐方式，可传left、right、none、center
   * @remaind center表示图片独占一行
   * @example
   * ```javascript
   * editor.execCommand( 'imagefloat', 'center' );
   * ```
   */

  /**
   * 如果选区所在位置是图片区域
   * @command imagefloat
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 返回图片对齐方式
   * @example
   * ```javascript
   * editor.queryCommandValue( 'imagefloat' );
   * ```
   */

  AX.commands['imagefloat'] = {
    execCommand: function (cmd, align) {
      var me = this,
        range = me.selection.getRange();
      if (!range.collapsed) {
        var img = range.getClosedNode();
        if (img && img.tagName == 'IMG') {
          switch (align) {
            case 'left':
            case 'right':
            case 'none':
              var pN = img.parentNode, tmpNode, pre, next;
              while (dtd.$inline[pN.tagName] || pN.tagName == 'A') {
                pN = pN.parentNode;
              }
              tmpNode = pN;
              if (tmpNode.tagName == 'P' && domUtils.getStyle(tmpNode, 'text-align') == 'center') {
                if (!domUtils.isBody(tmpNode) && domUtils.getChildCount(tmpNode, function (node) {
                  return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
                }) == 1) {
                  pre = tmpNode.previousSibling;
                  next = tmpNode.nextSibling;
                  if (pre && next && pre.nodeType == 1 && next.nodeType == 1 && pre.tagName == next.tagName && domUtils.isBlockElm(pre)) {
                    pre.appendChild(tmpNode.firstChild);
                    while (next.firstChild) {
                      pre.appendChild(next.firstChild);
                    }
                    domUtils.remove(tmpNode);
                    domUtils.remove(next);
                  } else {
                    domUtils.setStyle(tmpNode, 'text-align', '');
                  }


                }

                range.selectNode(img).select();
              }
              domUtils.setStyle(img, 'float', align == 'none' ? '' : align);
              if (align == 'none') {
                domUtils.removeAttributes(img, 'align');
              }

              break;
            case 'center':
              if (me.queryCommandValue('imagefloat') != 'center') {
                pN = img.parentNode;
                domUtils.setStyle(img, 'float', '');
                domUtils.removeAttributes(img, 'align');
                tmpNode = img;
                while (pN && domUtils.getChildCount(pN, function (node) {
                  return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
                }) == 1
                  && (dtd.$inline[pN.tagName] || pN.tagName == 'A')) {
                  tmpNode = pN;
                  pN = pN.parentNode;
                }
                range.setStartBefore(tmpNode).setCursor(false);
                pN = me.document.createElement('div');
                pN.appendChild(tmpNode);
                domUtils.setStyle(tmpNode, 'float', '');

                me.execCommand('insertHtml', '<p id="_img_parent_tmp" style="text-align:center">' + pN.innerHTML + '</p>');

                tmpNode = me.document.getElementById('_img_parent_tmp');
                tmpNode.removeAttribute('id');
                tmpNode = tmpNode.firstChild;
                range.selectNode(tmpNode).select();
                //去掉后边多余的元素
                next = tmpNode.parentNode.nextSibling;
                if (next && domUtils.isEmptyNode(next)) {
                  domUtils.remove(next);
                }

              }

              break;
          }

        }
      }
    },
    queryCommandValue: function () {
      var range = this.selection.getRange(),
        startNode, floatStyle;
      if (range.collapsed) {
        return 'none';
      }
      startNode = range.getClosedNode();
      if (startNode && startNode.nodeType == 1 && startNode.tagName == 'IMG') {
        floatStyle = domUtils.getComputedStyle(startNode, 'float') || startNode.getAttribute('align');

        if (floatStyle == 'none') {
          floatStyle = domUtils.getComputedStyle(startNode.parentNode, 'text-align') == 'center' ? 'center' : floatStyle;
        }
        return {
          left: 1,
          right: 1,
          center: 1
        }[floatStyle] ? floatStyle : 'none';
      }
      return 'none';


    },
    queryCommandState: function () {
      var range = this.selection.getRange(),
        startNode;

      if (range.collapsed) {
        return -1;
      }

      startNode = range.getClosedNode();
      if (startNode && startNode.nodeType == 1 && startNode.tagName == 'IMG') {
        return 0;
      }
      return -1;
    }
  };


  /**
   * 插入图片
   * @command insertimage
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { Object } opt 属性键值对，这些属性都将被复制到当前插入图片
   * @remind 该命令第二个参数可接受一个图片配置项对象的数组，可以插入多张图片，
   * 此时数组的每一个元素都是一个Object类型的图片属性集合。
   * @example
   * ```javascript
   * editor.execCommand( 'insertimage', {
   *     src:'a/b/c.jpg',
   *     width:'100',
   *     height:'100'
   * } );
   * ```
   * @example
   * ```javascript
   * editor.execCommand( 'insertimage', [{
   *     src:'a/b/c.jpg',
   *     width:'100',
   *     height:'100'
   * },{
   *     src:'a/b/d.jpg',
   *     width:'100',
   *     height:'100'
   * }] );
   * ```
   */

  AX.commands['insertimage'] = {
    execCommand: function (cmd, opt) {

      opt = utils.isArray(opt) ? opt : [opt];
      if (!opt.length) {
        return;
      }
      var me = this,
        range = me.selection.getRange(),
        img = range.getClosedNode();

      if (me.fireEvent('beforeinsertimage', opt) === true) {
        return;
      }

      function unhtmlData(imgCi) {

        utils.each('width,height,border,hspace,vspace'.split(','), function (item) {

          if (imgCi[item]) {
            imgCi[item] = parseInt(imgCi[item], 10) || 0;
          }
        });

        utils.each('src,_src'.split(','), function (item) {

          if (imgCi[item]) {
            imgCi[item] = utils.unhtmlForUrl(imgCi[item]);
          }
        });
        utils.each('title,alt'.split(','), function (item) {

          if (imgCi[item]) {
            imgCi[item] = utils.unhtml(imgCi[item]);
          }
        });
      }

      if (img && /img/i.test(img.tagName) && (img.className != "edui-faked-video" || img.className.indexOf("edui-upload-video") != -1) && !img.getAttribute("word_img")) {
        var first = opt.shift();
        var floatStyle = first['floatStyle'];
        delete first['floatStyle'];
        ////                img.style.border = (first.border||0) +"px solid #000";
        ////                img.style.margin = (first.margin||0) +"px";
        //                img.style.cssText += ';margin:' + (first.margin||0) +"px;" + 'border:' + (first.border||0) +"px solid #000";
        domUtils.setAttributes(img, first);
        me.execCommand('imagefloat', floatStyle);
        if (opt.length > 0) {
          range.setStartAfter(img).setCursor(false, true);
          me.execCommand('insertimage', opt);
        }

      } else {
        var html = [], str = '', ci;
        ci = opt[0];
        if (opt.length == 1) {
          unhtmlData(ci);

          str = '<img src="' + ci.src + '" ' + (ci._src ? ' _src="' + ci._src + '" ' : '') +
            (ci.width ? 'width="' + ci.width + '" ' : '') +
            (ci.height ? ' height="' + ci.height + '" ' : '') +
            (ci['floatStyle'] == 'left' || ci['floatStyle'] == 'right' ? ' style="float:' + ci['floatStyle'] + ';"' : '') +
            (ci.title && ci.title != "" ? ' title="' + ci.title + '"' : '') +
            (ci.border && ci.border != "0" ? ' border="' + ci.border + '"' : '') +
            (ci.alt && ci.alt != "" ? ' alt="' + ci.alt + '"' : '') +
            (ci.hspace && ci.hspace != "0" ? ' hspace = "' + ci.hspace + '"' : '') +
            (ci.vspace && ci.vspace != "0" ? ' vspace = "' + ci.vspace + '"' : '') + '/>';
          if (ci['floatStyle'] == 'center') {
            str = '<p style="text-align: center">' + str + '</p>';
          }
          html.push(str);

        } else {
          for (var i = 0; ci = opt[i++];) {
            unhtmlData(ci);
            str = '<p ' + (ci['floatStyle'] == 'center' ? 'style="text-align: center" ' : '') + '><img src="' + ci.src + '" ' +
              (ci.width ? 'width="' + ci.width + '" ' : '') + (ci._src ? ' _src="' + ci._src + '" ' : '') +
              (ci.height ? ' height="' + ci.height + '" ' : '') +
              (ci.alt && ci.alt != "" ? ' alt="' + ci.alt + '"' : '') +
              ' style="' + (ci['floatStyle'] && ci['floatStyle'] != 'center' ? 'float:' + ci['floatStyle'] + ';' : '') +
              (ci.border || '') + '" ' +
              (ci.title ? ' title="' + ci.title + '"' : '') + ' /></p>';
            html.push(str);
          }
        }

        me.execCommand('insertHtml', html.join(''));
      }

      me.fireEvent('afterinsertimage', opt)
    }
  };


  // plugins/justify.js
  /**
   * 段落格式
   * @file
   * @since 1.2.6.1
   */

  /**
   * 段落对齐方式
   * @command justify
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { String } align 对齐方式：left => 居左，right => 居右，center => 居中，justify => 两端对齐
   * @example
   * ```javascript
   * editor.execCommand( 'justify', 'center' );
   * ```
   */
  /**
   * 如果选区所在位置是段落区域，返回当前段落对齐方式
   * @command justify
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 返回段落对齐方式
   * @example
   * ```javascript
   * editor.queryCommandValue( 'justify' );
   * ```
   */

  AX.plugins['justify'] = function () {
    var me = this,
      block = domUtils.isBlockElm,
      defaultValue = {
        left: 1,
        right: 1,
        center: 1,
        justify: 1
      },
      doJustify = function (range, style) {
        var bookmark = range.createBookmark(),
          filterFn = function (node) {
            return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' && !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace(node);
          };

        range.enlarge(true);
        var bookmark2 = range.createBookmark(),
          current = domUtils.getNextDomNode(bookmark2.start, false, filterFn),
          tmpRange = range.cloneRange(),
          tmpNode;
        while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
          if (current.nodeType == 3 || !block(current)) {
            // feather: 选中一段纯文本，想要这段文本居中
            // var istext = current.nodeType == 3;
            tmpRange.setStartBefore(current);
            while (current && current !== bookmark2.end && !block(current)) {
              tmpNode = current;
              current = domUtils.getNextDomNode(current, false, null, function (node) {
                return !block(node);
              });
            }
            tmpRange.setEndAfter(tmpNode);
            var common = tmpRange.getCommonAncestor();
            var istext = common.nodeType == 3;
            if (!domUtils.isBody(common) && block(common) && !istext) {
              domUtils.setStyles(common, utils.isString(style) ? { 'text-align': style } : style);
              current = common;
            } else {
              var p = range.document.createElement('p');
              domUtils.setStyles(p, utils.isString(style) ? { 'text-align': style } : style);
              var frag = tmpRange.extractContents();
              p.appendChild(frag);
              tmpRange.insertNode(p);
              current = p;
            }
            current = domUtils.getNextDomNode(current, false, filterFn);
          } else {
            current = domUtils.getNextDomNode(current, true, filterFn);
          }
        }
        return range.moveToBookmark(bookmark2).moveToBookmark(bookmark);
      };

    AX.commands['justify'] = {
      execCommand: function (cmdName, align) {
        var range = this.selection.getRange(),
          txt;

        //闭合时单独处理
        if (range.collapsed) {
          txt = this.document.createTextNode('p');
          range.insertNode(txt);
        }
        doJustify(range, align);
        if (txt) {
          range.setStartBefore(txt).collapse(true);
          domUtils.remove(txt);
        }

        range.select();


        return true;
      },
      queryCommandValue: function () {
        var startNode = this.selection.getStart(),
          value = domUtils.getComputedStyle(startNode, 'text-align');
        return defaultValue[value] ? value : 'left';
      },
      queryCommandState: function () {
        var start = this.selection.getStart(),
          cell = start && domUtils.findParentByTagName(start, [], true);
        // cell = start && domUtils.findParentByTagName(start, ["td", "th", "caption"], true);

        return cell ? -1 : 0;
      }

    };
  };


  // plugins/font.js
  /**
   * 字体颜色,背景色,字号,字体,下划线,删除线
   * @file
   * @since 1.2.6.1
   */

  /**
   * 字体颜色
   * @command forecolor
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { String } value 色值(必须十六进制)
   * @example
   * ```javascript
   * editor.execCommand( 'forecolor', '#000' );
   * ```
   */
  /**
   * 返回选区字体颜色
   * @command forecolor
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 返回字体颜色
   * @example
   * ```javascript
   * editor.queryCommandValue( 'forecolor' );
   * ```
   */

  /**
   * 字体背景颜色
   * @command backcolor
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { String } value 色值(必须十六进制)
   * @example
   * ```javascript
   * editor.execCommand( 'backcolor', '#000' );
   * ```
   */
  /**
   * 返回选区字体颜色
   * @command backcolor
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 返回字体背景颜色
   * @example
   * ```javascript
   * editor.queryCommandValue( 'backcolor' );
   * ```
   */

  /**
   * 字体大小
   * @command fontsize
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { String } value 字体大小
   * @example
   * ```javascript
   * editor.execCommand( 'fontsize', '14px' );
   * ```
   */
  /**
   * 返回选区字体大小
   * @command fontsize
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 返回字体大小
   * @example
   * ```javascript
   * editor.queryCommandValue( 'fontsize' );
   * ```
   */

  /**
   * 字体样式
   * @command fontfamily
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { String } value 字体样式
   * @example
   * ```javascript
   * editor.execCommand( 'fontfamily', '微软雅黑' );
   * ```
   */
  /**
   * 返回选区字体样式
   * @command fontfamily
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 返回字体样式
   * @example
   * ```javascript
   * editor.queryCommandValue( 'fontfamily' );
   * ```
   */

  /**
   * 字体下划线,与删除线互斥
   * @command underline
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'underline' );
   * ```
   */

  /**
   * 字体删除线,与下划线互斥
   * @command strikethrough
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'strikethrough' );
   * ```
   */

  /**
   * 字体边框
   * @command fontborder
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'fontborder' );
   * ```
   */

  AX.plugins['font'] = function () {
    var me = this,
      // 字体相关操作
      fonts = {
        'forecolor': 'color',
        'backcolor': 'background-color',
        'fontsize': 'font-size',
        'fontfamily': 'font-family',
        'underline': 'text-decoration',
        'strikethrough': 'text-decoration',
        'fontborder': 'border'
      },
      needCmd = { 'underline': 1, 'strikethrough': 1, 'fontborder': 1 },
      needSetChild = {
        'forecolor': 'color',
        'backcolor': 'background-color',
        'fontsize': 'font-size',
        'fontfamily': 'font-family'

      };
      // 字体字号配置
    me.setOpt({
      'fontfamily': [
        { name: 'songti', val: '宋体,SimSun' },
        { name: 'yahei', val: '微软雅黑,Microsoft YaHei' },
        { name: 'kaiti', val: '楷体,楷体_GB2312, SimKai' },
        { name: 'heiti', val: '黑体, SimHei' },
        { name: 'lishu', val: '隶书, SimLi' },
        { name: 'andaleMono', val: 'andale mono' },
        { name: 'arial', val: 'arial, helvetica,sans-serif' },
        { name: 'arialBlack', val: 'arial black,avant garde' },
        { name: 'comicSansMs', val: 'comic sans ms' },
        { name: 'impact', val: 'impact,chicago' },
        { name: 'timesNewRoman', val: 'times new roman' }
      ],
      'fontsize': [10, 11, 12, 14, 16, 18, 20, 24, 36]
    });

    function mergeWithParent(node) {
      var parent;
      while (parent = node.parentNode) {
        if (parent.tagName == 'SPAN' && domUtils.getChildCount(parent, function (child) {
          return !domUtils.isBookmarkNode(child) && !domUtils.isBr(child)
        }) == 1) {
          parent.style.cssText += node.style.cssText;
          domUtils.remove(node, true);
          node = parent;

        } else {
          break;
        }
      }

    }

    function mergeChild(rng, cmdName, value) {
      if (needSetChild[cmdName]) {
        rng.adjustmentBoundary();
        if (!rng.collapsed && rng.startContainer.nodeType == 1) {
          var start = rng.startContainer.childNodes[rng.startOffset];
          if (start && domUtils.isTagNode(start, 'span')) {
            var bk = rng.createBookmark();
            utils.each(domUtils.getElementsByTagName(start, 'span'), function (span) {
              if (!span.parentNode || domUtils.isBookmarkNode(span)) {
                return;
              }
              if (cmdName == 'backcolor' && domUtils.getComputedStyle(span, 'background-color').toLowerCase() === value) {
                return;
              }

              //7-10 修复 点击修改字体 占位文本消失的bug Start
              var aluinNode = domUtils.findParent(span, function (node) {
                return node.getAttribute("axplugins") != null;
              }, true);
              if (aluinNode) {
                return;
              }//axplugins的元素不做处理
              //7-10 修复 点击修改字体 占位文本消失的bug End

              domUtils.removeStyle(span, needSetChild[cmdName]);
              if (span.style.cssText.replace(/^\s+$/, '').length == 0) {
                domUtils.remove(span, true)
              }
            });
            rng.moveToBookmark(bk)
          }
        }
      }

    }

    function mergesibling(rng, cmdName, value) {
      var collapsed = rng.collapsed,
        bk = rng.createBookmark(), common;
      if (collapsed) {
        common = bk.start.parentNode;
        while (dtd.$inline[common.tagName]) {
          common = common.parentNode;
        }
      } else {
        common = domUtils.getCommonAncestor(bk.start, bk.end);
      }
      utils.each(domUtils.getElementsByTagName(common, 'span'), function (span) {
        if (!span.parentNode || domUtils.isBookmarkNode(span)) {
          return;
        }

        //7-10 修复 点击修改字体 占位文本消失的bug Start
        var aluinNode = domUtils.findParent(span, function (node) {
          return node.getAttribute("axplugins") != null;
        }, true);
        if (aluinNode) {
          return;
        }//axplugins的元素不做处理
        //7-10 修复 点击修改字体 占位文本消失的bug End

        if (/\s*border\s*:\s*none;?\s*/i.test(span.style.cssText)) {
          if (/^\s*border\s*:\s*none;?\s*$/.test(span.style.cssText)) {
            domUtils.remove(span, true);
          } else {
            domUtils.removeStyle(span, 'border');
          }
          return
        }
        if (/border/i.test(span.style.cssText) && span.parentNode.tagName == 'SPAN' && /border/i.test(span.parentNode.style.cssText)) {
          span.style.cssText = span.style.cssText.replace(/border[^:]*:[^;]+;?/gi, '');
        }
        if (!(cmdName == 'fontborder' && value == 'none')) {
          var next = span.nextSibling;
          while (next && next.nodeType == 1 && next.tagName == 'SPAN') {
            if (domUtils.isBookmarkNode(next) && cmdName == 'fontborder') {
              span.appendChild(next);
              next = span.nextSibling;
              continue;
            }
            if (next.style.cssText == span.style.cssText) {
              domUtils.moveChild(next, span);
              domUtils.remove(next);
            }
            if (span.nextSibling === next) {
              break;
            }
            next = span.nextSibling;
          }
        }


        mergeWithParent(span);
        if (browser.ie && browser.version > 8) {
          //拷贝父亲们的特别的属性,这里只做背景颜色的处理
          var parent = domUtils.findParent(span, function (n) {
            return n.tagName == 'SPAN' && /background-color/.test(n.style.cssText)
          });
          if (parent && !/background-color/.test(span.style.cssText)) {
            span.style.backgroundColor = parent.style.backgroundColor;
          }
        }

      });
      rng.moveToBookmark(bk);
      mergeChild(rng, cmdName, value)
    }

    me.addInputRule(function (root) {
      utils.each(root.getNodesByTagName('u s del font strike'), function (node) {
        if (node.tagName == 'font') {
          var cssStyle = [];
          for (var p in node.attrs) {
            switch (p) {
              case 'size':
                cssStyle.push('font-size:' +
                  ({
                    '1': '10',
                    '2': '12',
                    '3': '16',
                    '4': '18',
                    '5': '24',
                    '6': '32',
                    '7': '48'
                  }[node.attrs[p]] || node.attrs[p]) + 'px');
                break;
              case 'color':
                cssStyle.push('color:' + node.attrs[p]);
                break;
              case 'face':
                cssStyle.push('font-family:' + node.attrs[p]);
                break;
              case 'style':
                cssStyle.push(node.attrs[p]);
            }
          }
          node.attrs = {
            'style': cssStyle.join(';')
          };
        } else {
          var val = node.tagName == 'u' ? 'underline' : 'line-through';
          node.attrs = {
            'style': (node.getAttr('style') || '') + 'text-decoration:' + val + ';'
          }
        }
        node.tagName = 'span';
      });
      //        utils.each(root.getNodesByTagName('span'), function (node) {
      //            var val;
      //            if(val = node.getAttr('class')){
      //                if(/fontstrikethrough/.test(val)){
      //                    node.setStyle('text-decoration','line-through');
      //                    if(node.attrs['class']){
      //                        node.attrs['class'] = node.attrs['class'].replace(/fontstrikethrough/,'');
      //                    }else{
      //                        node.setAttr('class')
      //                    }
      //                }
      //                if(/fontborder/.test(val)){
      //                    node.setStyle('border','1px solid #000');
      //                    if(node.attrs['class']){
      //                        node.attrs['class'] = node.attrs['class'].replace(/fontborder/,'');
      //                    }else{
      //                        node.setAttr('class')
      //                    }
      //                }
      //            }
      //        });
    });
    //    me.addOutputRule(function(root){
    //        utils.each(root.getNodesByTagName('span'), function (node) {
    //            var val;
    //            if(val = node.getStyle('text-decoration')){
    //                if(/line-through/.test(val)){
    //                    if(node.attrs['class']){
    //                        node.attrs['class'] += ' fontstrikethrough';
    //                    }else{
    //                        node.setAttr('class','fontstrikethrough')
    //                    }
    //                }
    //
    //                node.setStyle('text-decoration')
    //            }
    //            if(val = node.getStyle('border')){
    //                if(/1px/.test(val) && /solid/.test(val)){
    //                    if(node.attrs['class']){
    //                        node.attrs['class'] += ' fontborder';
    //
    //                    }else{
    //                        node.setAttr('class','fontborder')
    //                    }
    //                }
    //                node.setStyle('border')
    //
    //            }
    //        });
    //    });
    for (var p in fonts) {
      (function (cmd, style) {
        AX.commands[cmd] = {
          execCommand: function (cmdName, value) {

            value = value || (this.queryCommandState(cmdName) ? 'none' : cmdName == 'underline' ? 'underline' :
              cmdName == 'fontborder' ? '1px solid #000' :
                'line-through');
            var me = this,
              range = this.selection.getRange(),
              text;

            if (value == 'default') {

              if (range.collapsed) {
                text = me.document.createTextNode('font');
                range.insertNode(text).select();

              }
              me.execCommand('removeFormat', 'span,a', style);
              if (text) {
                range.setStartBefore(text).collapse(true);
                domUtils.remove(text);
              }
              mergesibling(range, cmdName, value);
              range.select()
            } else {
              if (!range.collapsed) {
                if (needCmd[cmd] && me.queryCommandValue(cmd)) {
                  me.execCommand('removeFormat', 'span,a', style);
                }
                range = me.selection.getRange();
                range.applyInlineStyle('span', { 'style': style + ':' + value });

                mergesibling(range, cmdName, value);
                range.select();
              } else {

                var span = domUtils.findParentByTagName(range.startContainer, 'span', true);
                text = me.document.createTextNode('font');
                if (span && !span.children.length && !span[browser.ie ? 'innerText' : 'textContent'].replace(fillCharReg, '').length) {
                  //for ie hack when enter
                  range.insertNode(text);
                  if (needCmd[cmd]) {
                    range.selectNode(text).select();
                    me.execCommand('removeFormat', 'span,a', style, null);

                    span = domUtils.findParentByTagName(text, 'span', true);
                    range.setStartBefore(text);

                  }
                  span && (span.style.cssText += ';' + style + ':' + value);
                  range.collapse(true).select();


                } else {
                  range.insertNode(text);
                  range.selectNode(text).select();
                  span = range.document.createElement('span');

                  if (needCmd[cmd]) {
                    //a标签内的不处理跳过
                    if (domUtils.findParentByTagName(text, 'a', true)) {
                      range.setStartBefore(text).setCursor();
                      domUtils.remove(text);
                      return;
                    }
                    me.execCommand('removeFormat', 'span,a', style);
                  }

                  span.style.cssText = style + ':' + value;


                  text.parentNode.insertBefore(span, text);
                  //修复，span套span 但样式不继承的问题
                  if (!browser.ie || browser.ie && browser.version == 9) {
                    var spanParent = span.parentNode;
                    while (!domUtils.isBlockElm(spanParent)) {
                      if (spanParent.tagName == 'SPAN') {
                        //opera合并style不会加入";"
                        span.style.cssText = spanParent.style.cssText + ";" + span.style.cssText;
                      }
                      spanParent = spanParent.parentNode;
                    }
                  }


                  if (opera) {
                    setTimeout(function () {
                      range.setStart(span, 0).collapse(true);
                      mergesibling(range, cmdName, value);
                      range.select();
                    });
                  } else {
                    range.setStart(span, 0).collapse(true);
                    mergesibling(range, cmdName, value);
                    range.select();
                  }

                  //trace:981
                  //domUtils.mergeToParent(span)
                }
                domUtils.remove(text);
              }


            }
            return true;
          },
          queryCommandValue: function (cmdName) {
            var startNode = this.selection.getStart();

            //trace:946
            if (cmdName == 'underline' || cmdName == 'strikethrough') {
              var tmpNode = startNode, value;
              while (tmpNode && !domUtils.isBlockElm(tmpNode) && !domUtils.isBody(tmpNode)) {
                if (tmpNode.nodeType == 1) {
                  value = domUtils.getComputedStyle(tmpNode, style);
                  if (value != 'none') {
                    return value;
                  }
                }

                tmpNode = tmpNode.parentNode;
              }
              return 'none';
            }
            if (cmdName == 'fontborder') {
              var tmp = startNode, val;
              while (tmp && dtd.$inline[tmp.tagName]) {
                if (val = domUtils.getComputedStyle(tmp, 'border')) {

                  if (/1px/.test(val) && /solid/.test(val)) {
                    return val;
                  }
                }
                tmp = tmp.parentNode;
              }
              return ''
            }

            if (cmdName == 'FontSize') {
              var styleVal = domUtils.getComputedStyle(startNode, style),
                tmp = /^([\d\.]+)(\w+)$/.exec(styleVal);

              if (tmp) {

                return Math.floor(tmp[1]) + tmp[2];

              }

              return styleVal;

            }

            return domUtils.getComputedStyle(startNode, style);
          },
          queryCommandState: function (cmdName) {
            if (!needCmd[cmdName]) {
              return 0;
            }
            var val = this.queryCommandValue(cmdName);
            if (cmdName == 'fontborder') {
              return /1px/.test(val) && /solid/.test(val)
            }
            return cmdName == 'underline' ? /underline/.test(val) : /line\-through/.test(val);


          }
        };
      })(p, fonts[p]);
    }
  };

  // plugins/link.js
  /**
   * 超链接
   * @file
   * @since 1.2.6.1
   */

  /**
   * 插入超链接
   * @command link
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { Object } options   设置自定义属性，例如：url、title、target
   * @example
   * ```javascript
   * editor.execCommand( 'link', '{
   *     url:'ueditor.baidu.com',
   *     title:'ueditor',
   *     target:'_blank'
   * }' );
   * ```
   */
  /**
   * 返回当前选中的第一个超链接节点
   * @command link
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { Element } 超链接节点
   * @example
   * ```javascript
   * editor.queryCommandValue( 'link' );
   * ```
   */

  /**
   * 取消超链接
   * @command unlink
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'unlink');
   * ```
   */

  AX.plugins['link'] = function () {
    function optimize(range) {
      var start = range.startContainer, end = range.endContainer;

      if (start = domUtils.findParentByTagName(start, 'a', true)) {
        range.setStartBefore(start);
      }
      if (end = domUtils.findParentByTagName(end, 'a', true)) {
        range.setEndAfter(end);
      }
    }


    AX.commands['unlink'] = {
      execCommand: function () {
        var range = this.selection.getRange(),
          bookmark;
        if (range.collapsed && !domUtils.findParentByTagName(range.startContainer, 'a', true)) {
          return;
        }
        bookmark = range.createBookmark();
        optimize(range);
        range.removeInlineStyle('a').moveToBookmark(bookmark).select();
      },
      queryCommandState: function () {
        return !this.highlight && this.queryCommandValue('link') ? 0 : -1;
      }

    };

    function doLink(range, opt, me) {
      var rngClone = range.cloneRange(),
        link = me.queryCommandValue('link');
      optimize(range = range.adjustmentBoundary());
      var start = range.startContainer;
      if (start.nodeType == 1 && link) {
        start = start.childNodes[range.startOffset];
        if (start && start.nodeType == 1 && start.tagName == 'A' && /^(?:https?|ftp|file)\s*:\s*\/\//.test(start[browser.ie ? 'innerText' : 'textContent'])) {
          start[browser.ie ? 'innerText' : 'textContent'] = utils.html(opt.textValue || opt.href);

        }
      }
      if (!rngClone.collapsed || link) {
        range.removeInlineStyle('a');
        rngClone = range.cloneRange();
      }

      if (rngClone.collapsed) {
        var a = range.document.createElement('a'),
          text = '';
        if (opt.textValue) {

          text = utils.html(opt.textValue);
          delete opt.textValue;
        } else {
          text = utils.html(opt.href);

        }
        domUtils.setAttributes(a, opt);
        start = domUtils.findParentByTagName(rngClone.startContainer, 'a', true);
        if (start && domUtils.isInNodeEndBoundary(rngClone, start)) {
          range.setStartAfter(start).collapse(true);

        }
        a[browser.ie ? 'innerText' : 'textContent'] = text;
        range.insertNode(a).selectNode(a);
      } else {
        range.applyInlineStyle('a', opt);

      }
    }

    AX.commands['link'] = {
      execCommand: function (cmdName, opt) {
        var range;
        opt._href && (opt._href = utils.unhtml(opt._href, /[<">]/g));
        opt.href && (opt.href = utils.unhtml(opt.href, /[<">]/g));
        opt.textValue && (opt.textValue = utils.unhtml(opt.textValue, /[<">]/g));
        doLink(range = this.selection.getRange(), opt, this);
        //闭合都不加占位符，如果加了会在a后边多个占位符节点，导致a是图片背景组成的列表，出现空白问题
        range.collapse().select(true);

      },
      queryCommandValue: function () {
        var range = this.selection.getRange(),
          node;
        if (range.collapsed) {
          //                    node = this.selection.getStart();
          //在ie下getstart()取值偏上了
          node = range.startContainer;
          node = node.nodeType == 1 ? node : node.parentNode;

          if (node && (node = domUtils.findParentByTagName(node, 'a', true)) && !domUtils.isInNodeEndBoundary(range, node)) {

            return node;
          }
        } else {
          //trace:1111  如果是<p><a>xx</a></p> startContainer是p就会找不到a
          range.shrinkBoundary();
          var start = range.startContainer.nodeType == 3 || !range.startContainer.childNodes[range.startOffset] ? range.startContainer : range.startContainer.childNodes[range.startOffset],
            end = range.endContainer.nodeType == 3 || range.endOffset == 0 ? range.endContainer : range.endContainer.childNodes[range.endOffset - 1],
            common = range.getCommonAncestor();
          node = domUtils.findParentByTagName(common, 'a', true);
          if (!node && common && common.nodeType == 1) {

            var as = common.getElementsByTagName('a'),
              ps, pe;

            for (var i = 0, ci; ci = as[i++];) {
              ps = domUtils.getPosition(ci, start), pe = domUtils.getPosition(ci, end);
              if ((ps & domUtils.POSITION_FOLLOWING || ps & domUtils.POSITION_CONTAINS)
                &&
                (pe & domUtils.POSITION_PRECEDING || pe & domUtils.POSITION_CONTAINS)
              ) {
                node = ci;
                break;
              }
            }
          }
          return node;
        }

      },
      queryCommandState: function () {
        //判断如果是视频的话连接不可用
        //fix 853
        var img = this.selection.getRange().getClosedNode(),
          flag = img && (img.className == "edui-faked-video" || img.className.indexOf("edui-upload-video") != -1);
        return flag ? -1 : 0;
      }
    };
  };

  // plugins/iframe.js
  ///import core
  ///import plugins\inserthtml.js
  ///commands 插入框架
  ///commandsName  InsertFrame
  ///commandsTitle  插入Iframe
  ///commandsDialog  dialogs\insertframe

  AX.plugins['insertframe'] = function () {
    var me = this;

    function deleteIframe() {
      me._iframe && delete me._iframe;
    }

    me.addListener("selectionchange", function () {
      deleteIframe();
    });

  };


  // plugins/scrawl.js
  ///import core
  ///commands 涂鸦
  ///commandsName  Scrawl
  ///commandsTitle  涂鸦
  ///commandsDialog  dialogs\scrawl
  AX.commands['scrawl'] = {
    queryCommandState: function () {
      return browser.ie && browser.version <= 8 ? -1 : 0;
    }
  };


  // plugins/removeformat.js
  /**
   * 清除格式
   * @file
   * @since 1.2.6.1
   */

  /**
   * 清除文字样式
   * @command removeformat
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param   {String}   tags     以逗号隔开的标签。如：strong
   * @param   {String}   style    样式如：color
   * @param   {String}   attrs    属性如:width
   * @example
   * ```javascript
   * editor.execCommand( 'removeformat', 'strong','color','width' );
   * ```
   */

  AX.plugins['removeformat'] = function () {
    var me = this;
    me.setOpt({
      'removeFormatTags': 'b,big,code,del,dfn,em,font,i,ins,kbd,q,samp,small,span,strike,strong,sub,sup,tt,u,var',
      // 'removeFormatAttributes': 'class,style,lang,width,height,align,hspace,valign'
      'removeFormatAttributes': 'style,lang,width,height,align,hspace,valign'// 因为axplugins 元素 不能删除class
    });
    me.commands['removeformat'] = {
      execCommand: function (cmdName, tags, style, attrs, notIncludeA) {

        var tagReg = new RegExp('^(?:' + (tags || this.options.removeFormatTags).replace(/,/g, '|') + ')$', 'i'),
          removeFormatAttributes = style ? [] : (attrs || this.options.removeFormatAttributes).split(','),
          range = new dom.Range(this.document),
          bookmark, node, parent,
          filter = function (node) {
            return node.nodeType == 1;
          };

        function isRedundantSpan(node) {
          if (node.nodeType == 3 || node.tagName.toLowerCase() != 'span') {
            return 0;
          }
          if (browser.ie) {
            //ie 下判断实效，所以只能简单用style来判断
            //return node.style.cssText == '' ? 1 : 0;
            var attrs = node.attributes;
            if (attrs.length) {
              for (var i = 0, l = attrs.length; i < l; i++) {
                if (attrs[i].specified) {
                  return 0;
                }
              }
              return 1;
            }
          }
          return !node.attributes.length;
        }

        function doRemove(range) {

          var bookmark1 = range.createBookmark();
          if (range.collapsed) {
            range.enlarge(true);
          }

          //不能把a标签切了
          if (!notIncludeA) {
            var aNode = domUtils.findParentByTagName(range.startContainer, 'a', true);
            if (aNode) {
              range.setStartBefore(aNode);
            }

            aNode = domUtils.findParentByTagName(range.endContainer, 'a', true);
            if (aNode) {
              range.setEndAfter(aNode);
            }

          }


          bookmark = range.createBookmark();

          node = bookmark.start;

          // 执行 removeformat 指令； axplugins 元素不需要切片     yang 07-11 START
          var axpluNode = domUtils.findParent(node, function (node) {
            return node.getAttribute('axplugins') != null;
          }, true)
          if (!axpluNode) {
            // 执行 removeformat 指令；axplugins 元素不需要切片     yang 07-11 END

            //切开始
            while ((parent = node.parentNode) && !domUtils.isBlockElm(parent)) {
              domUtils.breakParent(node, parent);

              domUtils.clearEmptySibling(node);
            }
            if (bookmark.end) {
              //切结束
              node = bookmark.end;
              //  ctrl-value 元素 不需要 breakParent  yang 07-12
              while ((parent = node.parentNode) && !domUtils.isBlockElm(parent) && !domUtils.hasClass(node.parentNode, 'ctrl-value')) {
                domUtils.breakParent(node, parent);
                domUtils.clearEmptySibling(node);
              }

              //开始去除样式
              var current = domUtils.getNextDomNode(bookmark.start, false, filter),
                next;
              while (current) {
                if (current == bookmark.end) {
                  break;
                }

                next = domUtils.getNextDomNode(current, true, filter);

                if (!dtd.$empty[current.tagName.toLowerCase()] && !domUtils.isBookmarkNode(current)) {
                  // ctrl-value ctrl-field 元素 是 span 标签 不可删除啊  yang 07-12
                  if (tagReg.test(current.tagName) && !domUtils.hasClass(current, 'ctrl-value') && !domUtils.hasClass(current, 'ctrl-field')) {
                    if (style) {
                      domUtils.removeStyle(current, style);
                      if (isRedundantSpan(current) && style != 'text-decoration') {
                        domUtils.remove(current, true);
                      }
                    } else {
                      domUtils.remove(current, true);
                    }
                  } else {
                    //trace:939  不能把list上的样式去掉
                    if (!dtd.$tableContent[current.tagName] && !dtd.$list[current.tagName]) {
                      domUtils.removeAttributes(current, removeFormatAttributes);
                      if (isRedundantSpan(current)) {
                        domUtils.remove(current, true);
                      }
                    }

                  }
                }
                current = next;
              }
            }
          }
          //trace:1035
          //trace:1096 不能把td上的样式去掉，比如边框
          var pN = bookmark.start.parentNode;
          if (domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName] && !dtd.$list[pN.tagName] && pN.tagName != 'BODY') {
            domUtils.removeAttributes(pN, removeFormatAttributes);
          }
          pN = bookmark.end.parentNode;
          if (bookmark.end && domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName] && !dtd.$list[pN.tagName] && pN.tagName != 'BODY') {
            domUtils.removeAttributes(pN, removeFormatAttributes);
          }
          range.moveToBookmark(bookmark).moveToBookmark(bookmark1);
          //清除冗余的代码 <b><bookmark></b>
          var node = range.startContainer,
            tmp,
            collapsed = range.collapsed;
          while (node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]) {
            tmp = node.parentNode;
            range.setStartBefore(node);
            //trace:937
            //更新结束边界
            if (range.startContainer === range.endContainer) {
              range.endOffset--;
            }
            domUtils.remove(node);
            node = tmp;
          }

          if (!collapsed) {
            node = range.endContainer;
            while (node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]) {
              tmp = node.parentNode;
              range.setEndBefore(node);
              domUtils.remove(node);

              node = tmp;
            }


          }
        }


        range = this.selection.getRange();
        doRemove(range);
        range.select();

      }

    };

  };


  // plugins/blockquote.js
  /**
   * 添加引用
   * @file
   * @since 1.2.6.1
   */

  /**
   * 添加引用
   * @command blockquote
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'blockquote' );
   * ```
   */

  /**
   * 添加引用
   * @command blockquote
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { Object } attrs 节点属性
   * @example
   * ```javascript
   * editor.execCommand( 'blockquote',{
   *     style: "color: red;"
   * } );
   * ```
   */


  AX.plugins['blockquote'] = function () {
    var me = this;

    function getObj(editor) {
      return domUtils.filterNodeList(editor.selection.getStartElementPath(), 'blockquote');
    }

    me.commands['blockquote'] = {
      execCommand: function (cmdName, attrs) {
        var range = this.selection.getRange(),
          obj = getObj(this),
          blockquote = dtd.blockquote,
          bookmark = range.createBookmark();

        if (obj) {

          var start = range.startContainer,
            startBlock = domUtils.isBlockElm(start) ? start : domUtils.findParent(start, function (node) {
              return domUtils.isBlockElm(node)
            }),

            end = range.endContainer,
            endBlock = domUtils.isBlockElm(end) ? end : domUtils.findParent(end, function (node) {
              return domUtils.isBlockElm(node)
            });

          //处理一下li
          startBlock = domUtils.findParentByTagName(startBlock, 'li', true) || startBlock;
          endBlock = domUtils.findParentByTagName(endBlock, 'li', true) || endBlock;


          if (startBlock.tagName == 'LI' || startBlock.tagName == 'TD' || startBlock === obj || domUtils.isBody(startBlock)) {
            domUtils.remove(obj, true);
          } else {
            domUtils.breakParent(startBlock, obj);
          }

          if (startBlock !== endBlock) {
            obj = domUtils.findParentByTagName(endBlock, 'blockquote');
            if (obj) {
              if (endBlock.tagName == 'LI' || endBlock.tagName == 'TD' || domUtils.isBody(endBlock)) {
                obj.parentNode && domUtils.remove(obj, true);
              } else {
                domUtils.breakParent(endBlock, obj);
              }

            }
          }

          var blockquotes = domUtils.getElementsByTagName(this.document, 'blockquote');
          for (var i = 0, bi; bi = blockquotes[i++];) {
            if (!bi.childNodes.length) {
              domUtils.remove(bi);
            } else if (domUtils.getPosition(bi, startBlock) & domUtils.POSITION_FOLLOWING && domUtils.getPosition(bi, endBlock) & domUtils.POSITION_PRECEDING) {
              domUtils.remove(bi, true);
            }
          }


        } else {

          var tmpRange = range.cloneRange(),
            node = tmpRange.startContainer.nodeType == 1 ? tmpRange.startContainer : tmpRange.startContainer.parentNode,
            preNode = node,
            doEnd = 1;

          //调整开始
          while (1) {
            if (domUtils.isBody(node)) {
              if (preNode !== node) {
                if (range.collapsed) {
                  tmpRange.selectNode(preNode);
                  doEnd = 0;
                } else {
                  tmpRange.setStartBefore(preNode);
                }
              } else {
                tmpRange.setStart(node, 0);
              }

              break;
            }
            if (!blockquote[node.tagName]) {
              if (range.collapsed) {
                tmpRange.selectNode(preNode);
              } else {
                tmpRange.setStartBefore(preNode);
              }
              break;
            }

            preNode = node;
            node = node.parentNode;
          }

          //调整结束
          if (doEnd) {
            preNode = node = node = tmpRange.endContainer.nodeType == 1 ? tmpRange.endContainer : tmpRange.endContainer.parentNode;
            while (1) {

              if (domUtils.isBody(node)) {
                if (preNode !== node) {

                  tmpRange.setEndAfter(preNode);

                } else {
                  tmpRange.setEnd(node, node.childNodes.length);
                }

                break;
              }
              if (!blockquote[node.tagName]) {
                tmpRange.setEndAfter(preNode);
                break;
              }

              preNode = node;
              node = node.parentNode;
            }

          }


          node = range.document.createElement('blockquote');
          domUtils.setAttributes(node, attrs);
          node.appendChild(tmpRange.extractContents());
          tmpRange.insertNode(node);
          //去除重复的
          var childs = domUtils.getElementsByTagName(node, 'blockquote');
          for (var i = 0, ci; ci = childs[i++];) {
            if (ci.parentNode) {
              domUtils.remove(ci, true);
            }
          }

        }
        range.moveToBookmark(bookmark).select();
      },
      queryCommandState: function () {
        return getObj(this) ? 1 : 0;
      }
    };
  };


  // plugins/convertcase.js
  /**
   * 大小写转换
   * @file
   * @since 1.2.6.1
   */

  /**
   * 把选区内文本变大写，与“tolowercase”命令互斥
   * @command touppercase
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'touppercase' );
   * ```
   */

  /**
   * 把选区内文本变小写，与“touppercase”命令互斥
   * @command tolowercase
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'tolowercase' );
   * ```
   */
  AX.commands['touppercase'] =
    AX.commands['tolowercase'] = {
      execCommand: function (cmd) {
        var me = this;
        var rng = me.selection.getRange();
        if (rng.collapsed) {
          return rng;
        }
        var bk = rng.createBookmark(),
          bkEnd = bk.end,
          filterFn = function (node) {
            return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
          },
          curNode = domUtils.getNextDomNode(bk.start, false, filterFn);
        while (curNode && domUtils.getPosition(curNode, bkEnd) & domUtils.POSITION_PRECEDING) {

          if (curNode.nodeType == 3) {
            curNode.nodeValue = curNode.nodeValue[cmd == 'touppercase' ? 'toUpperCase' : 'toLowerCase']();
          }
          curNode = domUtils.getNextDomNode(curNode, true, filterFn);
          if (curNode === bkEnd) {
            break;
          }

        }
        rng.moveToBookmark(bk).select();
      }
    };


  // plugins/indent.js
  /**
   * 首行缩进
   * @file
   * @since 1.2.6.1
   */

  /**
   * 缩进
   * @command indent
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'indent' );
   * ```
   */
  AX.commands['indent'] = {
    execCommand: function (cmdName, indentVal) {
      var me = this;
      var indentVal = indentVal || me.options.indentValue || '2em';

      if (indentVal) {
        var indentVal = indentVal;
        var value = indentVal;
      } else {
        var indentVal = indentVal || me.options.indentValue || '2em';
        var value = me.queryCommandState("indent") ? "0em" : indentVal;
      }
      me.execCommand('Paragraph', 'p', { style: 'text-indent:' + value });
    },
    queryCommandState: function () {
      var pN = domUtils.filterNodeList(this.selection.getStartElementPath(), 'p h1 h2 h3 h4 h5 h6');
      return pN && pN.style.textIndent && parseInt(pN.style.textIndent) ? 1 : 0;
    },
    queryCommandValue: function () {
      var pN = domUtils.filterNodeList(this.selection.getStartElementPath(), 'p h1 h2 h3 h4 h5 h6');
      var indent = '';
      if (pN && pN.style.textIndent) {
        indent = pN.style.textIndent;
      } else {
        indent = '0em';
      }
      return indent;
    }
  };


  // plugins/print.js
  /**
   * 打印
   * @file
   * @since 1.2.6.1
   */

  /**
   * 打印
   * @command print
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'print' );
   * ```
   */
  AX.commands['print'] = {
    execCommand: function () {
      this.window.print();
    },
    notNeedUndo: 1
  };


  // plugins/preview.js
  /**
   * 预览
   * @file
   * @since 1.2.6.1
   */

  /**
   * 预览
   * @command preview
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'preview' );
   * ```
   */
  // AX.commands['preview'] = {
  //     execCommand: function(){
  //         var w = window.open('', '_blank', ''),
  //             d = w.document;
  //         d.open();
  //         d.write('<!DOCTYPE html><html><head><meta charset="utf-8"/><script src="' + this.options.AXEDITOR_HOME_URL + 'axeditor.parse.min.js"></script><script>' +
  //             "setTimeout(function(){uParse('div',{rootPath: '" + this.options.AXEDITOR_HOME_URL + "'})},300)" +
  //             '</script></head><body><div>' + this.getContent(null,null,true) + '</div></body></html>');
  //         d.close();
  //     },
  //     notNeedUndo: 1
  // };


  // plugins/selectall.js
  /**
   * 全选
   * @file
   * @since 1.2.6.1
   */

  /**
   * 选中所有内容
   * @command selectall
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'selectall' );
   * ```
   */
  AX.plugins['selectall'] = function () {
    var me = this;
    me.commands['selectall'] = {
      execCommand: function () {
        //去掉了原生的selectAll,因为会出现报错和当内容为空时，不能出现闭合状态的光标
        var me = this, body = me.document.querySelectorAll(".ax-page-wrapper"),
          range = me.selection.getRange();
        // range.selectNodeContents(body);
        range.setStart(body[0], 0)
        range.setEndAtLast(body[body.length - 1]);
        if (domUtils.isEmptyBlock(body)) {
          //opera不能自动合并到元素的里边，要手动处理一下
          if (browser.opera && body.firstChild && body.firstChild.nodeType == 1) {
            range.setStartAtFirst(body.firstChild);
          }
          range.collapse(true);
        }
        range.select(true);
      },
      notNeedUndo: 1
    };


    //快捷键
    me.addshortcutkey({
      "selectAll": "ctrl+65"
    });
  };


  // plugins/paragraph.js
  /**
   * 段落样式
   * @file
   * @since 1.2.6.1
   */

  /**
   * 段落格式
   * @command paragraph
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param {String}   style               标签值为：'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'
   * @param {Object}   attrs               标签的属性
   * @example
   * ```javascript
   * editor.execCommand( 'Paragraph','h1','{
   *     class:'test'
   * }' );
   * ```
   */

  /**
   * 返回选区内节点标签名
   * @command paragraph
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 节点标签名
   * @example
   * ```javascript
   * editor.queryCommandValue( 'Paragraph' );
   * ```
   */

  AX.plugins['paragraph'] = function () {
    var me = this,
      block = domUtils.isBlockElm,
      notExchange = ['TD', 'LI', 'PRE'],

      doParagraph = function (range, style, attrs, sourceCmdName) {
        var bookmark = range.createBookmark(),
          filterFn = function (node) {
            return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' && !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace(node);
          },
          para;

        range.enlarge(true);
        var bookmark2 = range.createBookmark(),
          current = domUtils.getNextDomNode(bookmark2.start, false, filterFn),
          tmpRange = range.cloneRange(),
          tmpNode;
        while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
          if (current.nodeType == 3 || !block(current)) {
            tmpRange.setStartBefore(current);
            while (current && current !== bookmark2.end && !block(current)) {
              tmpNode = current;
              current = domUtils.getNextDomNode(current, false, null, function (node) {
                return !block(node);
              });
            }
            tmpRange.setEndAfter(tmpNode);

            para = range.document.createElement(style);
            if (attrs) {
              domUtils.setAttributes(para, attrs);
              if (sourceCmdName && sourceCmdName == 'customstyle' && attrs.style) {
                para.style.cssText = attrs.style;
              }
            }
            para.appendChild(tmpRange.extractContents());
            //需要内容占位
            if (domUtils.isEmptyNode(para)) {
              domUtils.fillChar(range.document, para);

            }
            tmpRange.insertNode(para);

            var parent = para.parentNode;
            //如果para上一级是一个block元素且不是body,td就删除它
            if (block(parent) && !domUtils.isBody(para.parentNode) && utils.indexOf(notExchange, parent.tagName) == -1) {
              //存储dir,style
              if (!(sourceCmdName && sourceCmdName == 'customstyle')) {
                parent.getAttribute('dir') && para.setAttribute('dir', parent.getAttribute('dir'));
                //trace:1070
                parent.style.cssText && (para.style.cssText = parent.style.cssText + ';' + para.style.cssText);
                //trace:1030
                parent.style.textAlign && !para.style.textAlign && (para.style.textAlign = parent.style.textAlign);
                parent.style.textIndent && !para.style.textIndent && (para.style.textIndent = parent.style.textIndent);
                parent.style.padding && !para.style.padding && (para.style.padding = parent.style.padding);
              }

              //trace:1706 选择的就是h1-6要删除
              if (attrs && /h\d/i.test(parent.tagName) && !/h\d/i.test(para.tagName)) {
                domUtils.setAttributes(parent, attrs);
                if (sourceCmdName && sourceCmdName == 'customstyle' && attrs.style) {
                  parent.style.cssText = attrs.style;
                }
                domUtils.remove(para, true);
                para = parent;
              } else {
                domUtils.remove(para.parentNode, true);
              }

            }
            if (utils.indexOf(notExchange, parent.tagName) != -1) {
              current = parent;
            } else {
              current = para;
            }


            current = domUtils.getNextDomNode(current, false, filterFn);
          } else {
            current = domUtils.getNextDomNode(current, true, filterFn);
          }
        }
        return range.moveToBookmark(bookmark2).moveToBookmark(bookmark);
      };
    me.setOpt('paragraph', { 'p': '', 'h1': '', 'h2': '', 'h3': '', 'h4': '', 'h5': '', 'h6': '' });
    me.commands['paragraph'] = {
      execCommand: function (cmdName, style, attrs, sourceCmdName) {
        var range = this.selection.getRange();
        //闭合时单独处理
        if (range.collapsed) {
          var txt = this.document.createTextNode('p');
          range.insertNode(txt);
          //去掉冗余的fillchar
          if (browser.ie) {
            var node = txt.previousSibling;
            if (node && domUtils.isWhitespace(node)) {
              domUtils.remove(node);
            }
            node = txt.nextSibling;
            if (node && domUtils.isWhitespace(node)) {
              domUtils.remove(node);
            }
          }

        }
        range = doParagraph(range, style, attrs, sourceCmdName);
        if (txt) {
          range.setStartBefore(txt).collapse(true);
          pN = txt.parentNode;

          domUtils.remove(txt);

          if (domUtils.isBlockElm(pN) && domUtils.isEmptyNode(pN)) {
            domUtils.fillNode(this.document, pN);
          }

        }

        if (browser.gecko && range.collapsed && range.startContainer.nodeType == 1) {
          var child = range.startContainer.childNodes[range.startOffset];
          if (child && child.nodeType == 1 && child.tagName.toLowerCase() == style) {
            range.setStart(child, 0).collapse(true);
          }
        }
        //trace:1097 原来有true，原因忘了，但去了就不能清除多余的占位符了
        me.document.body.innerHTML = me.document.body.innerHTML.replace(/\u200B/g, '');
        range.select();
        return true;
      },
      queryCommandValue: function () {
        var node = domUtils.filterNodeList(this.selection.getStartElementPath(), 'p h1 h2 h3 h4 h5 h6');
        return node ? node.tagName.toLowerCase() : '';
      }
    };
  };


  // plugins/directionality.js
  /**
   * 设置文字输入的方向的插件
   * @file
   * @since 1.2.6.1
   */
  (function () {
    var block = domUtils.isBlockElm,
      getObj = function (editor) {
        //            var startNode = editor.selection.getStart(),
        //                parents;
        //            if ( startNode ) {
        //                //查找所有的是block的父亲节点
        //                parents = domUtils.findParents( startNode, true, block, true );
        //                for ( var i = 0,ci; ci = parents[i++]; ) {
        //                    if ( ci.getAttribute( 'dir' ) ) {
        //                        return ci;
        //                    }
        //                }
        //            }
        return domUtils.filterNodeList(editor.selection.getStartElementPath(), function (n) {
          return n && n.nodeType == 1 && n.getAttribute('dir')
        });

      },
      doDirectionality = function (range, editor, forward) {

        var bookmark,
          filterFn = function (node) {
            return node.nodeType == 1 ? !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace(node);
          },

          obj = getObj(editor);

        if (obj && range.collapsed) {
          obj.setAttribute('dir', forward);
          return range;
        }
        bookmark = range.createBookmark();
        range.enlarge(true);
        var bookmark2 = range.createBookmark(),
          current = domUtils.getNextDomNode(bookmark2.start, false, filterFn),
          tmpRange = range.cloneRange(),
          tmpNode;
        while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
          if (current.nodeType == 3 || !block(current)) {
            tmpRange.setStartBefore(current);
            while (current && current !== bookmark2.end && !block(current)) {
              tmpNode = current;
              current = domUtils.getNextDomNode(current, false, null, function (node) {
                return !block(node);
              });
            }
            tmpRange.setEndAfter(tmpNode);
            var common = tmpRange.getCommonAncestor();
            if (!domUtils.isBody(common) && block(common)) {
              //遍历到了block节点
              common.setAttribute('dir', forward);
              current = common;
            } else {
              //没有遍历到，添加一个block节点
              var p = range.document.createElement('p');
              p.setAttribute('dir', forward);
              var frag = tmpRange.extractContents();
              p.appendChild(frag);
              tmpRange.insertNode(p);
              current = p;
            }

            current = domUtils.getNextDomNode(current, false, filterFn);
          } else {
            current = domUtils.getNextDomNode(current, true, filterFn);
          }
        }
        return range.moveToBookmark(bookmark2).moveToBookmark(bookmark);
      };

    /**
     * 文字输入方向
     * @command directionality
     * @method execCommand
     * @param { String } cmdName 命令字符串
     * @param { String } forward 传入'ltr'表示从左向右输入，传入'rtl'表示从右向左输入
     * @example
     * ```javascript
     * editor.execCommand( 'directionality', 'ltr');
     * ```
     */

    /**
     * 查询当前选区的文字输入方向
     * @command directionality
     * @method queryCommandValue
     * @param { String } cmdName 命令字符串
     * @return { String } 返回'ltr'表示从左向右输入，返回'rtl'表示从右向左输入
     * @example
     * ```javascript
     * editor.queryCommandValue( 'directionality');
     * ```
     */
    AX.commands['directionality'] = {
      execCommand: function (cmdName, forward) {
        var range = this.selection.getRange();
        //闭合时单独处理
        if (range.collapsed) {
          var txt = this.document.createTextNode('d');
          range.insertNode(txt);
        }
        doDirectionality(range, this, forward);
        if (txt) {
          range.setStartBefore(txt).collapse(true);
          domUtils.remove(txt);
        }

        range.select();
        return true;
      },
      queryCommandValue: function () {
        var node = getObj(this);
        return node ? node.getAttribute('dir') : 'ltr';
      }
    };
  })();


  // plugins/horizontal.js
  /**
   * 插入分割线插件
   * @file
   * @since 1.2.6.1
   */

  /**
   * 插入分割线
   * @command horizontal
   * @method execCommand
   * @param { String } cmdName 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'horizontal' );
   * ```
   */
  AX.plugins['horizontal'] = function () {
    var me = this;
    me.commands['horizontal'] = {
      execCommand: function (cmdName) {
        var me = this;
        if (me.queryCommandState(cmdName) !== -1) {
          me.execCommand('insertHtml', '<hr>');
          var range = me.selection.getRange(),
            start = range.startContainer;
          if (start.nodeType == 1 && !start.childNodes[range.startOffset]) {

            var tmp;
            if (tmp = start.childNodes[range.startOffset - 1]) {
              if (tmp.nodeType == 1 && tmp.tagName == 'HR') {
                if (me.options.enterTag == 'p') {
                  tmp = me.document.createElement('p');
                  range.insertNode(tmp);
                  range.setStart(tmp, 0).setCursor();

                } else {
                  tmp = me.document.createElement('br');
                  range.insertNode(tmp);
                  range.setStartBefore(tmp).setCursor();
                }
              }
            }

          }
          return true;
        }

      },
      //边界在table里不能加分隔线
      queryCommandState: function () {
        return domUtils.filterNodeList(this.selection.getStartElementPath(), 'table') ? -1 : 0;
      }
    };
    //    me.addListener('delkeyup',function(){
    //        var rng = this.selection.getRange();
    //        if(browser.ie && browser.version > 8){
    //            rng.txtToElmBoundary(true);
    //            if(domUtils.isStartInblock(rng)){
    //                var tmpNode = rng.startContainer;
    //                var pre = tmpNode.previousSibling;
    //                if(pre && domUtils.isTagNode(pre,'hr')){
    //                    domUtils.remove(pre);
    //                    rng.select();
    //                    return;
    //                }
    //            }
    //        }
    //        if(domUtils.isBody(rng.startContainer)){
    //            var hr = rng.startContainer.childNodes[rng.startOffset -1];
    //            if(hr && hr.nodeName == 'HR'){
    //                var next = hr.nextSibling;
    //                if(next){
    //                    rng.setStart(next,0)
    //                }else if(hr.previousSibling){
    //                    rng.setStartAtLast(hr.previousSibling)
    //                }else{
    //                    var p = this.document.createElement('p');
    //                    hr.parentNode.insertBefore(p,hr);
    //                    domUtils.fillNode(this.document,p);
    //                    rng.setStart(p,0);
    //                }
    //                domUtils.remove(hr);
    //                rng.setCursor(false,true);
    //            }
    //        }
    //    })
    me.addListener('delkeydown', function (name, evt) {
      var rng = this.selection.getRange();
      rng.txtToElmBoundary(true);
      if (domUtils.isStartInblock(rng)) {
        var tmpNode = rng.startContainer;
        var pre = tmpNode.previousSibling;
        if (pre && domUtils.isTagNode(pre, 'hr')) {
          domUtils.remove(pre);
          rng.select();
          domUtils.preventDefault(evt);
          return true;

        }
      }

    })
  };


  // plugins/time.js
  /**
   * 插入时间和日期
   * @file
   * @since 1.2.6.1
   */

  /**
   * 插入时间，默认格式：12:59:59
   * @command time
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'time');
   * ```
   */

  /**
   * 插入日期，默认格式：2013-08-30
   * @command date
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'date');
   * ```
   */
  AX.commands['time'] = AX.commands["date"] = {
    execCommand: function (cmd, format) {
      var date = new Date;

      function formatTime(date, format) {
        var hh = ('0' + date.getHours()).slice(-2),
          ii = ('0' + date.getMinutes()).slice(-2),
          ss = ('0' + date.getSeconds()).slice(-2);
        format = format || 'hh:ii:ss';
        return format.replace(/hh/ig, hh).replace(/ii/ig, ii).replace(/ss/ig, ss);
      }

      function formatDate(date, format) {
        var yyyy = ('000' + date.getFullYear()).slice(-4),
          yy = yyyy.slice(-2),
          mm = ('0' + (date.getMonth() + 1)).slice(-2),
          dd = ('0' + date.getDate()).slice(-2);
        format = format || 'yyyy-mm-dd';
        return format.replace(/yyyy/ig, yyyy).replace(/yy/ig, yy).replace(/mm/ig, mm).replace(/dd/ig, dd);
      }

      this.execCommand('insertHtml', cmd == "time" ? formatTime(date, format) : formatDate(date, format));
    }
  };


  // plugins/rowspacing.js
  /**
   * 段前段后间距插件
   * @file
   * @since 1.2.6.1
   */

  /**
   * 设置段间距
   * @command rowspacing
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param { String } value 段间距的值，以px为单位
   * @param { String } dir 间距位置，top或bottom，分别表示段前和段后
   * @example
   * ```javascript
   * editor.execCommand( 'rowspacing', '10', 'top' );
   * ```
   */

  AX.plugins['rowspacing'] = function () {
    var me = this;
    me.setOpt({
      'rowspacingtop': ['5', '10', '15', '20', '25'],
      'rowspacingbottom': ['5', '10', '15', '20', '25']

    });
    me.commands['rowspacing'] = {
      execCommand: function (cmdName, value, dir) {
        this.execCommand('paragraph', 'div', { style: 'margin-' + dir + ':' + value + 'px' });
        return true;
      },
      queryCommandValue: function (cmdName, dir) {
        var pN = domUtils.filterNodeList(this.selection.getStartElementPath(), function (node) {
          return domUtils.isBlockElm(node)
        }),
          value;
        //trace:1026
        if (pN) {
          if (pN.className && pN.className.indexOf("paragraphContent") != -1 && pN.parentNode && pN.parentNode.getAttribute('axplugins') === 'paragraphele') {
            return value = domUtils.getComputedStyle(pN.parentNode, 'margin-' + dir).replace(/[^.\d]/g, '');
          }
          value = domUtils.getComputedStyle(pN, 'margin-' + dir).replace(/[^.\d]/g, ''); // 修改正则，避免将小数点删除
          return !value ? 0 : value;
        }
        return 0;

      }
    };
  };

  // plugins/lineheight.js
  /**
   * 设置行内间距
   * @file
   * @since 1.2.6.1
   */
  AX.plugins['lineheight'] = function () {
    var me = this;
    me.setOpt({ 'lineheight': ['1', '1.5', '1.75', '2', '3', '4', '5'] });

    /**
     * 行距
     * @command lineheight
     * @method execCommand
     * @param { String } cmdName 命令字符串
     * @param { String } value 传入的行高值， 该值是当前字体的倍数， 例如： 1.5, 1.75
     * @example
     * ```javascript
     * editor.execCommand( 'lineheight', 1.5);
     * ```
     */
    /**
     * 查询当前选区内容的行高大小
     * @command lineheight
     * @method queryCommandValue
     * @param { String } cmd 命令字符串
     * @return { String } 返回当前行高大小
     * @example
     * ```javascript
     * editor.queryCommandValue( 'lineheight' );
     * ```
     */

    me.commands['lineheight'] = {
      execCommand: function (cmdName, value) {
        this.execCommand('paragraph', 'p', { style: 'line-height:' + (value == "1" ? "normal !important" : value + 'em !important') });
        return true;
      },
      queryCommandValue: function () {
        var pN = domUtils.filterNodeList(this.selection.getStartElementPath(), function (node) {
          return domUtils.isBlockElm(node)
        });
        if (pN) {
          var value = domUtils.getComputedStyle(pN, 'line-height');
          return value == 'normal' ? 1 : value.replace(/[^\d.]*/ig, "");
        }
      }
    };
  };

  // plugins/insertcode.js
  /**
   * 插入代码插件
   * @file
   * @since 1.2.6.1
   */

  AX.plugins['insertcode'] = function () {
    var me = this;
    me.ready(function () {
      utils.cssRule('pre', 'pre{margin:.5em 0;padding:.4em .6em;border-radius:8px;background:#f8f8f8;}',
        me.document)
    });
    me.setOpt('insertcode', {
      'as3': 'ActionScript3',
      'bash': 'Bash/Shell',
      'cpp': 'C/C++',
      'css': 'Css',
      'cf': 'CodeFunction',
      'c#': 'C#',
      'delphi': 'Delphi',
      'diff': 'Diff',
      'erlang': 'Erlang',
      'groovy': 'Groovy',
      'html': 'Html',
      'java': 'Java',
      'jfx': 'JavaFx',
      'js': 'Javascript',
      'pl': 'Perl',
      'php': 'Php',
      'plain': 'Plain Text',
      'ps': 'PowerShell',
      'python': 'Python',
      'ruby': 'Ruby',
      'scala': 'Scala',
      'sql': 'Sql',
      'vb': 'Vb',
      'xml': 'Xml'
    });

    /**
     * 插入代码
     * @command insertcode
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @param { String } lang 插入代码的语言
     * @example
     * ```javascript
     * editor.execCommand( 'insertcode', 'javascript' );
     * ```
     */

    /**
     * 如果选区所在位置是插入插入代码区域，返回代码的语言
     * @command insertcode
     * @method queryCommandValue
     * @param { String } cmd 命令字符串
     * @return { String } 返回代码的语言
     * @example
     * ```javascript
     * editor.queryCommandValue( 'insertcode' );
     * ```
     */

    me.commands['insertcode'] = {
      execCommand: function (cmd, lang) {
        var me = this,
          rng = me.selection.getRange(),
          pre = domUtils.findParentByTagName(rng.startContainer, 'pre', true);
        if (pre) {
          pre.className = 'brush:' + lang + ';toolbar:false;';
        } else {
          var code = '';
          if (rng.collapsed) {
            code = browser.ie && browser.ie11below ? browser.version <= 8 ? '&nbsp;' : '' : '<br/>';
          } else {
            var frag = rng.extractContents();
            var div = me.document.createElement('div');
            div.appendChild(frag);

            utils.each(AX.filterNode(AX.htmlparser(div.innerHTML.replace(/[\r\t]/g, '')), me.options.filterTxtRules).children, function (node) {
              if (browser.ie && browser.ie11below && browser.version > 8) {

                if (node.type == 'element') {
                  if (node.tagName == 'br') {
                    code += '\n'
                  } else if (!dtd.$empty[node.tagName]) {
                    utils.each(node.children, function (cn) {
                      if (cn.type == 'element') {
                        if (cn.tagName == 'br') {
                          code += '\n'
                        } else if (!dtd.$empty[node.tagName]) {
                          code += cn.innerText();
                        }
                      } else {
                        code += cn.data
                      }
                    })
                    if (!/\n$/.test(code)) {
                      code += '\n';
                    }
                  }
                } else {
                  code += node.data + '\n'
                }
                if (!node.nextSibling() && /\n$/.test(code)) {
                  code = code.replace(/\n$/, '');
                }
              } else {
                if (browser.ie && browser.ie11below) {

                  if (node.type == 'element') {
                    if (node.tagName == 'br') {
                      code += '<br>'
                    } else if (!dtd.$empty[node.tagName]) {
                      utils.each(node.children, function (cn) {
                        if (cn.type == 'element') {
                          if (cn.tagName == 'br') {
                            code += '<br>'
                          } else if (!dtd.$empty[node.tagName]) {
                            code += cn.innerText();
                          }
                        } else {
                          code += cn.data
                        }
                      });
                      if (!/br>$/.test(code)) {
                        code += '<br>';
                      }
                    }
                  } else {
                    code += node.data + '<br>'
                  }
                  if (!node.nextSibling() && /<br>$/.test(code)) {
                    code = code.replace(/<br>$/, '');
                  }

                } else {
                  code += node.type == 'element' ? dtd.$empty[node.tagName] ? '' : node.innerText() : node.data;
                  if (!/br\/?\s*>$/.test(code)) {
                    if (!node.nextSibling()) {
                      return;
                    }
                    code += '<br>'
                  }
                }

              }

            });
          }
          me.execCommand('inserthtml', '<pre id="coder"class="brush:' + lang + ';toolbar:false">' + code + '</pre>', true);

          pre = me.document.getElementById('coder');
          domUtils.removeAttributes(pre, 'id');
          var tmpNode = pre.previousSibling;

          if (tmpNode && (tmpNode.nodeType == 3 && tmpNode.nodeValue.length == 1 && browser.ie && browser.version == 6 || domUtils.isEmptyBlock(tmpNode))) {

            domUtils.remove(tmpNode)
          }
          var rng = me.selection.getRange();
          if (domUtils.isEmptyBlock(pre)) {
            rng.setStart(pre, 0).setCursor(false, true)
          } else {
            rng.selectNodeContents(pre).select()
          }
        }


      },
      queryCommandValue: function () {
        var path = this.selection.getStartElementPath();
        var lang = '';
        utils.each(path, function (node) {
          if (node.nodeName == 'PRE') {
            var match = node.className.match(/brush:([^;]+)/);
            lang = match && match[1] ? match[1] : '';
            return false;
          }
        });
        return lang;
      }
    };

    me.addInputRule(function (root) {
      utils.each(root.getNodesByTagName('pre'), function (pre) {
        var brs = pre.getNodesByTagName('br');
        if (brs.length) {
          browser.ie && browser.ie11below && browser.version > 8 && utils.each(brs, function (br) {
            var txt = AX.uNode.createText('\n');
            br.parentNode.insertBefore(txt, br);
            br.parentNode.removeChild(br);
          });
          return;
        }
        if (browser.ie && browser.ie11below && browser.version > 8) {
          return;
        }
        var code = pre.innerText().split(/\n/);
        pre.innerHTML('');
        utils.each(code, function (c) {
          if (c.length) {
            pre.appendChild(AX.uNode.createText(c));
          }
          pre.appendChild(AX.uNode.createElement('br'))
        })
      })
    });
    me.addOutputRule(function (root) {
      utils.each(root.getNodesByTagName('pre'), function (pre) {
        var code = '';
        utils.each(pre.children, function (n) {
          if (n.type == 'text') {
            //在ie下文本内容有可能末尾带有\n要去掉
            //trace:3396
            code += n.data.replace(/[ ]/g, '&nbsp;').replace(/\n$/, '');
          } else {
            if (n.tagName == 'br') {
              code += '\n'
            } else {
              code += !dtd.$empty[n.tagName] ? '' : n.innerText();
            }

          }

        });

        pre.innerText(code.replace(/(&nbsp;|\n)+$/, ''))
      })
    });
    //不需要判断highlight的command列表
    me.notNeedCodeQuery = {
      help: 1,
      undo: 1,
      redo: 1,
      source: 1,
      print: 1,
      searchreplace: 1,
      fullscreen: 1,
      preview: 1,
      insertparagraph: 1,
      elementpath: 1,
      insertcode: 1,
      inserthtml: 1,
      selectall: 1
    };
    //将queyCommamndState重置
    var orgQuery = me.queryCommandState;
    me.queryCommandState = function (cmd) {
      var me = this;

      if (!me.notNeedCodeQuery[cmd.toLowerCase()] && me.selection && me.queryCommandValue('insertcode')) {
        return -1;
      }
      return AX.Editor.prototype.queryCommandState.apply(this, arguments)
    };
    me.addListener('beforeenterkeydown', function () {
      var rng = me.selection.getRange();
      var pre = domUtils.findParentByTagName(rng.startContainer, 'pre', true);
      if (pre) {
        me.fireEvent('saveScene');
        if (!rng.collapsed) {
          rng.deleteContents();
        }
        if (!browser.ie || browser.ie9above) {
          var tmpNode = me.document.createElement('br'), pre;
          rng.insertNode(tmpNode).setStartAfter(tmpNode).collapse(true);
          var next = tmpNode.nextSibling;
          if (!next && (!browser.ie || browser.version > 10)) {
            rng.insertNode(tmpNode.cloneNode(false));
          } else {
            rng.setStartAfter(tmpNode);
          }
          pre = tmpNode.previousSibling;
          var tmp;
          while (pre) {
            tmp = pre;
            pre = pre.previousSibling;
            if (!pre || pre.nodeName == 'BR') {
              pre = tmp;
              break;
            }
          }
          if (pre) {
            var str = '';
            while (pre && pre.nodeName != 'BR' && new RegExp('^[\\s' + domUtils.fillChar + ']*$').test(pre.nodeValue)) {
              str += pre.nodeValue;
              pre = pre.nextSibling;
            }
            if (pre.nodeName != 'BR') {
              var match = pre.nodeValue.match(new RegExp('^([\\s' + domUtils.fillChar + ']+)'));
              if (match && match[1]) {
                str += match[1]
              }

            }
            if (str) {
              str = me.document.createTextNode(str);
              rng.insertNode(str).setStartAfter(str);
            }
          }
          rng.collapse(true).select(true);
        } else {
          if (browser.version > 8) {

            var txt = me.document.createTextNode('\n');
            var start = rng.startContainer;
            if (rng.startOffset == 0) {
              var preNode = start.previousSibling;
              if (preNode) {
                rng.insertNode(txt);
                var fillchar = me.document.createTextNode(' ');
                rng.setStartAfter(txt).insertNode(fillchar).setStart(fillchar, 0).collapse(true).select(true)
              }
            } else {
              rng.insertNode(txt).setStartAfter(txt);
              var fillchar = me.document.createTextNode(' ');
              start = rng.startContainer.childNodes[rng.startOffset];
              if (start && !/^\n/.test(start.nodeValue)) {
                rng.setStartBefore(txt)
              }
              rng.insertNode(fillchar).setStart(fillchar, 0).collapse(true).select(true)
            }

          } else {
            var tmpNode = me.document.createElement('br');
            rng.insertNode(tmpNode);
            rng.insertNode(me.document.createTextNode(domUtils.fillChar));
            rng.setStartAfter(tmpNode);
            pre = tmpNode.previousSibling;
            var tmp;
            while (pre) {
              tmp = pre;
              pre = pre.previousSibling;
              if (!pre || pre.nodeName == 'BR') {
                pre = tmp;
                break;
              }
            }
            if (pre) {
              var str = '';
              while (pre && pre.nodeName != 'BR' && new RegExp('^[ ' + domUtils.fillChar + ']*$').test(pre.nodeValue)) {
                str += pre.nodeValue;
                pre = pre.nextSibling;
              }
              if (pre.nodeName != 'BR') {
                var match = pre.nodeValue.match(new RegExp('^([ ' + domUtils.fillChar + ']+)'));
                if (match && match[1]) {
                  str += match[1]
                }

              }

              str = me.document.createTextNode(str);
              rng.insertNode(str).setStartAfter(str);
            }
            rng.collapse(true).select();
          }


        }
        me.fireEvent('saveScene');
        return true;
      }


    });

    me.addListener('tabkeydown', function (cmd, evt) {
      var rng = me.selection.getRange();
      var pre = domUtils.findParentByTagName(rng.startContainer, 'pre', true);
      if (pre) {
        me.fireEvent('saveScene');
        if (evt.shiftKey) {

        } else {
          if (!rng.collapsed) {
            var bk = rng.createBookmark();
            var start = bk.start.previousSibling;

            while (start) {
              if (pre.firstChild === start && !domUtils.isBr(start)) {
                pre.insertBefore(me.document.createTextNode('    '), start);

                break;
              }
              if (domUtils.isBr(start)) {
                pre.insertBefore(me.document.createTextNode('    '), start.nextSibling);

                break;
              }
              start = start.previousSibling;
            }
            var end = bk.end;
            start = bk.start.nextSibling;
            if (pre.firstChild === bk.start) {
              pre.insertBefore(me.document.createTextNode('    '), start.nextSibling)

            }
            while (start && start !== end) {
              if (domUtils.isBr(start) && start.nextSibling) {
                if (start.nextSibling === end) {
                  break;
                }
                pre.insertBefore(me.document.createTextNode('    '), start.nextSibling)
              }

              start = start.nextSibling;
            }
            rng.moveToBookmark(bk).select();
          } else {
            var tmpNode = me.document.createTextNode('    ');
            rng.insertNode(tmpNode).setStartAfter(tmpNode).collapse(true).select(true);
          }
        }


        me.fireEvent('saveScene');
        return true;
      }


    });


    me.addListener('beforeinserthtml', function (evtName, html) {
      var me = this,
        rng = me.selection.getRange(),
        pre = domUtils.findParentByTagName(rng.startContainer, 'pre', true);
      if (pre) {
        if (!rng.collapsed) {
          rng.deleteContents()
        }
        var htmlstr = '';
        if (browser.ie && browser.version > 8) {

          utils.each(AX.filterNode(AX.htmlparser(html), me.options.filterTxtRules).children, function (node) {
            if (node.type == 'element') {
              if (node.tagName == 'br') {
                htmlstr += '\n'
              } else if (!dtd.$empty[node.tagName]) {
                utils.each(node.children, function (cn) {
                  if (cn.type == 'element') {
                    if (cn.tagName == 'br') {
                      htmlstr += '\n'
                    } else if (!dtd.$empty[node.tagName]) {
                      htmlstr += cn.innerText();
                    }
                  } else {
                    htmlstr += cn.data
                  }
                })
                if (!/\n$/.test(htmlstr)) {
                  htmlstr += '\n';
                }
              }
            } else {
              htmlstr += node.data + '\n'
            }
            if (!node.nextSibling() && /\n$/.test(htmlstr)) {
              htmlstr = htmlstr.replace(/\n$/, '');
            }
          });
          var tmpNode = me.document.createTextNode(utils.html(htmlstr.replace(/&nbsp;/g, ' ')));
          rng.insertNode(tmpNode).selectNode(tmpNode).select();
        } else {
          var frag = me.document.createDocumentFragment();

          utils.each(AX.filterNode(AX.htmlparser(html), me.options.filterTxtRules).children, function (node) {
            if (node.type == 'element') {
              if (node.tagName == 'br') {
                frag.appendChild(me.document.createElement('br'))
              } else if (!dtd.$empty[node.tagName]) {
                utils.each(node.children, function (cn) {
                  if (cn.type == 'element') {
                    if (cn.tagName == 'br') {

                      frag.appendChild(me.document.createElement('br'))
                    } else if (!dtd.$empty[node.tagName]) {
                      frag.appendChild(me.document.createTextNode(utils.html(cn.innerText().replace(/&nbsp;/g, ' '))));

                    }
                  } else {
                    frag.appendChild(me.document.createTextNode(utils.html(cn.data.replace(/&nbsp;/g, ' '))));

                  }
                })
                if (frag.lastChild.nodeName != 'BR') {
                  frag.appendChild(me.document.createElement('br'))
                }
              }
            } else {
              frag.appendChild(me.document.createTextNode(utils.html(node.data.replace(/&nbsp;/g, ' '))));
            }
            if (!node.nextSibling() && frag.lastChild.nodeName == 'BR') {
              frag.removeChild(frag.lastChild)
            }


          });
          rng.insertNode(frag).select();

        }

        return true;
      }
    });
    //方向键的处理
    me.addListener('keydown', function (cmd, evt) {
      var me = this, keyCode = evt.keyCode || evt.which;
      if (keyCode == 40) {
        var rng = me.selection.getRange(), pre, start = rng.startContainer;
        if (rng.collapsed && (pre = domUtils.findParentByTagName(rng.startContainer, 'pre', true)) && !pre.nextSibling) {
          var last = pre.lastChild
          while (last && last.nodeName == 'BR') {
            last = last.previousSibling;
          }
          if (last === start || rng.startContainer === pre && rng.startOffset == pre.childNodes.length) {
            me.execCommand('insertparagraph');
            domUtils.preventDefault(evt)
          }

        }
      }
    });
    //trace:3395
    me.addListener('delkeydown', function (type, evt) {
      var rng = this.selection.getRange();
      rng.txtToElmBoundary(true);
      var start = rng.startContainer;
      if (domUtils.isTagNode(start, 'pre') && rng.collapsed && domUtils.isStartInblock(rng)) {
        var p = me.document.createElement('p');
        domUtils.fillNode(me.document, p);
        start.parentNode.insertBefore(p, start);
        domUtils.remove(start);
        rng.setStart(p, 0).setCursor(false, true);
        domUtils.preventDefault(evt);
        return true;
      }
    })
  };


  // plugins/cleardoc.js
  /**
   * 清空文档插件
   * @file
   * @since 1.2.6.1
   */

  /**
   * 清空文档
   * @command cleardoc
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * //editor 是编辑器实例
   * editor.execCommand('cleardoc');
   * ```
   */

  AX.commands['cleardoc'] = {
    execCommand: function (cmdName) {
      // ax-update: 更新清楚文档操作，适配最新的分页逻辑
      // var me = this,
      //   enterTag = me.options.enterTag,
      //   range = me.selection.getRange();
      // if (enterTag == "br") {
      //   me.body.innerHTML = "<br/>";
      //   range.setStart(me.body, 0).setCursor();
      // } else {
      //   me.body.innerHTML = "<p>" + (ie ? "" : "<br/>") + "</p>";
      //   range.setStart(me.body.firstChild, 0).setCursor(false, true);
      // }
      var me = this;
      AX.pageControler.clearDoc()
      setTimeout(function () {
        me.fireEvent("clearDoc");
      }, 0);

    }
  };


  // plugins/anchor.js
  /**
   * 锚点插件，为UEditor提供插入锚点支持
   * @file
   * @since 1.2.6.1
   */
  AX.plugin.register('anchor', function () {

    return {
      bindEvents: {
        'ready': function () {
          utils.cssRule('anchor',
            '.anchorclass{background: url(\''
            + this.options.themePath
            + this.options.theme + '/images/anchor.gif\') no-repeat scroll left center transparent;cursor: auto;display: inline-block;height: 16px;width: 15px;}',
            this.document);
        }
      },
      outputRule: function (root) {
        utils.each(root.getNodesByTagName('img'), function (a) {
          var val;
          if (val = a.getAttr('anchorname')) {
            a.tagName = 'a';
            a.setAttr({
              anchorname: '',
              name: val,
              'class': ''
            })
          }
        })
      },
      inputRule: function (root) {
        utils.each(root.getNodesByTagName('a'), function (a) {
          var val;
          if ((val = a.getAttr('name')) && !a.getAttr('href')) {
            a.tagName = 'img';
            a.setAttr({
              anchorname: a.getAttr('name'),
              'class': 'anchorclass'
            });
            a.setAttr('name')

          }
        })

      },
      commands: {
        /**
         * 插入锚点
         * @command anchor
         * @method execCommand
         * @param { String } cmd 命令字符串
         * @param { String } name 锚点名称字符串
         * @example
         * ```javascript
         * //editor 是编辑器实例
         * editor.execCommand('anchor', 'anchor1');
         * ```
         */
        'anchor': {
          execCommand: function (cmd, name) {
            var range = this.selection.getRange(), img = range.getClosedNode();
            if (img && img.getAttribute('anchorname')) {
              if (name) {
                img.setAttribute('anchorname', name);
              } else {
                range.setStartBefore(img).setCursor();
                domUtils.remove(img);
              }
            } else {
              if (name) {
                //只在选区的开始插入
                var anchor = this.document.createElement('img');
                range.collapse(true);
                domUtils.setAttributes(anchor, {
                  'anchorname': name,
                  'class': 'anchorclass'
                });
                range.insertNode(anchor).setStartAfter(anchor).setCursor(false, true);
              }
            }
          }
        }
      }
    }
  });


  // plugins/wordcount.js
  ///import core
  ///commands 字数统计
  ///commandsName  WordCount,wordCount
  ///commandsTitle  字数统计
  /*
 * Created by JetBrains WebStorm.
 * User: taoqili
 * Date: 11-9-7
 * Time: 下午8:18
 * To change this template use File | Settings | File Templates.
 */

  AX.plugins['wordcount'] = function () {
    var me = this;
    me.setOpt('wordCount', true);
    me.addListener('contentchange', function () {
      me.fireEvent('wordcount');
    });
    var timer;
    me.addListener('ready', function () {
      var me = this;
      domUtils.on(me.body, "keyup", function (evt) {
        var code = evt.keyCode || evt.which,
          //忽略的按键,ctr,alt,shift,方向键
          ignores = { "16": 1, "18": 1, "20": 1, "37": 1, "38": 1, "39": 1, "40": 1 };
        if (code in ignores) {
          return;
        }
        clearTimeout(timer);
        timer = setTimeout(function () {
          me.fireEvent('wordcount');
        }, 200)
      })
    });
  };


  // plugins/pagebreak.js
  /**
   * 分页功能插件
   * @file
   * @since 1.2.6.1
   */
  AX.plugins['pagebreak'] = function () {
    var me = this,
      notBreakTags = ['td'];
    me.setOpt('pageBreakTag', '_ueditor_page_break_tag_');

    function fillNode(node) {
      if (domUtils.isEmptyBlock(node)) {
        var firstChild = node.firstChild, tmpNode;

        while (firstChild && firstChild.nodeType == 1 && domUtils.isEmptyBlock(firstChild)) {
          tmpNode = firstChild;
          firstChild = firstChild.firstChild;
        }
        !tmpNode && (tmpNode = node);
        domUtils.fillNode(me.document, tmpNode);
      }
    }

    //分页符样式添加

    me.ready(function () {
      utils.cssRule('pagebreak', '.pagebreak{display:block;clear:both !important;cursor:default !important;width: 100% !important;margin:0;}', me.document);
    });

    function isHr(node) {
      return node && node.nodeType == 1 && node.tagName == 'HR' && node.className == 'pagebreak';
    }

    me.addInputRule(function (root) {
      root.traversal(function (node) {
        if (node.type == 'text' && node.data == me.options.pageBreakTag) {
          var hr = AX.uNode.createElement('<hr class="pagebreak" noshade="noshade" size="5" style="-webkit-user-select: none;">');
          node.parentNode.insertBefore(hr, node);
          node.parentNode.removeChild(node)
        }
      })
    });
    me.addOutputRule(function (node) {
      utils.each(node.getNodesByTagName('hr'), function (n) {
        if (n.getAttr('class') == 'pagebreak') {
          var txt = AX.uNode.createText(me.options.pageBreakTag);
          n.parentNode.insertBefore(txt, n);
          n.parentNode.removeChild(n);
        }
      })

    });

    /**
     * 插入分页符
     * @command pagebreak
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @remind 在表格中插入分页符会把表格切分成两部分
     * @remind 获取编辑器内的数据时， 编辑器会把分页符转换成“_ueditor_page_break_tag_”字符串，
     *          以便于提交数据到服务器端后处理分页。
     * @example
     * ```javascript
     * editor.execCommand( 'pagebreak'); //插入一个hr标签，带有样式类名pagebreak
     * ```
     */

    me.commands['pagebreak'] = {
      execCommand: function () {
        var range = me.selection.getRange(), hr = me.document.createElement('hr');
        domUtils.setAttributes(hr, {
          'class': 'pagebreak',
          noshade: "noshade",
          size: "5"
        });
        domUtils.unSelectable(hr);
        //table单独处理
        var node = domUtils.findParentByTagName(range.startContainer, notBreakTags, true),

          parents = [], pN;
        if (node) {
          switch (node.tagName) {
            case 'TD':
              pN = node.parentNode;
              if (!pN.previousSibling) {
                var table = domUtils.findParentByTagName(pN, 'table');
                //                            var tableWrapDiv = table.parentNode;
                //                            if(tableWrapDiv && tableWrapDiv.nodeType == 1
                //                                && tableWrapDiv.tagName == 'DIV'
                //                                && tableWrapDiv.getAttribute('dropdrag')
                //                                ){
                //                                domUtils.remove(tableWrapDiv,true);
                //                            }
                table.parentNode.insertBefore(hr, table);
                parents = domUtils.findParents(hr, true);

              } else {
                pN.parentNode.insertBefore(hr, pN);
                parents = domUtils.findParents(hr);

              }
              pN = parents[1];
              if (hr !== pN) {
                domUtils.breakParent(hr, pN);

              }
              //table要重写绑定一下拖拽
              me.fireEvent('afteradjusttable', me.document);
          }

        } else {

          if (!range.collapsed) {
            range.deleteContents();
            var start = range.startContainer;
            while (!domUtils.isBody(start) && domUtils.isBlockElm(start) && domUtils.isEmptyNode(start)) {
              range.setStartBefore(start).collapse(true);
              domUtils.remove(start);
              start = range.startContainer;
            }

          }
          range.insertNode(hr);

          var pN = hr.parentNode, nextNode;
          while (!domUtils.isBody(pN)) {
            domUtils.breakParent(hr, pN);
            nextNode = hr.nextSibling;
            if (nextNode && domUtils.isEmptyBlock(nextNode)) {
              domUtils.remove(nextNode);
            }
            pN = hr.parentNode;
          }
          nextNode = hr.nextSibling;
          var pre = hr.previousSibling;
          if (isHr(pre)) {
            domUtils.remove(pre);
          } else {
            pre && fillNode(pre);
          }

          if (!nextNode) {
            var p = me.document.createElement('p');

            hr.parentNode.appendChild(p);
            domUtils.fillNode(me.document, p);
            range.setStart(p, 0).collapse(true);
          } else {
            if (isHr(nextNode)) {
              domUtils.remove(nextNode);
            } else {
              fillNode(nextNode);
            }
            range.setEndAfter(hr).collapse(false);
          }

          range.select(true);

        }

      }
    };
  };

  // plugins/wordimage.js
  ///import core
  ///commands 本地图片引导上传
  ///commandsName  WordImage
  ///commandsTitle  本地图片引导上传
  ///commandsDialog  dialogs\wordimage

  AX.plugin.register('wordimage', function () {
    var me = this,
      images = [];
    return {
      commands: {
        'wordimage': {
          execCommand: function () {
            var images = domUtils.getElementsByTagName(me.body, "img");
            var urlList = [];
            for (var i = 0, ci; ci = images[i++];) {
              var url = ci.getAttribute("word_img");
              url && urlList.push(url);
            }
            return urlList;
          },
          queryCommandState: function () {
            images = domUtils.getElementsByTagName(me.body, "img");
            for (var i = 0, ci; ci = images[i++];) {
              if (ci.getAttribute("word_img")) {
                return 1;
              }
            }
            return -1;
          },
          notNeedUndo: true
        }
      },
      inputRule: function (root) {
        utils.each(root.getNodesByTagName('img'), function (img) {
          var attrs = img.attrs,
            flag = parseInt(attrs.width) < 128 || parseInt(attrs.height) < 43,
            opt = me.options,
            src = opt.AXEDITOR_HOME_URL + 'themes/default/images/spacer.gif';
          if (attrs['src'] && /^(?:(file:\/+))/.test(attrs['src'])) {
            img.setAttr({
              width: attrs.width,
              height: attrs.height,
              alt: attrs.alt,
              word_img: attrs.src,
              src: src,
              'style': 'background:url(' + (flag ? opt.themePath + opt.theme + '/images/word.gif' : opt.langPath + opt.lang + '/images/localimage.png') + ') no-repeat center center;border:1px solid #ddd'
            })
          }
        })
      }
    }
  });

  // plugins/dragdrop.js
  AX.plugins['dragdrop'] = function () {

    var me = this;
    me.ready(function () {
      domUtils.on(this.body, 'dragend', function () {
        var rng = me.selection.getRange();
        var node = rng.getClosedNode() || me.selection.getStart();

        if (node && node.tagName == 'IMG') {

          var pre = node.previousSibling, next;
          while (next = node.nextSibling) {
            if (next.nodeType == 1 && next.tagName == 'SPAN' && !next.firstChild) {
              domUtils.remove(next)
            } else {
              break;
            }
          }


          if ((pre && pre.nodeType == 1 && !domUtils.isEmptyBlock(pre) || !pre) && (!next || next && !domUtils.isEmptyBlock(next))) {
            if (pre && pre.tagName == 'P' && !domUtils.isEmptyBlock(pre)) {
              pre.appendChild(node);
              domUtils.moveChild(next, pre);
              domUtils.remove(next);
            } else if (next && next.tagName == 'P' && !domUtils.isEmptyBlock(next)) {
              next.insertBefore(node, next.firstChild);
            }

            if (pre && pre.tagName == 'P' && domUtils.isEmptyBlock(pre)) {
              domUtils.remove(pre)
            }
            if (next && next.tagName == 'P' && domUtils.isEmptyBlock(next)) {
              domUtils.remove(next)
            }
            rng.selectNode(node).select();
            me.fireEvent('saveScene');

          }

        }

      })
    });
    me.addListener('keyup', function (type, evt) {
      var keyCode = evt.keyCode || evt.which;
      if (keyCode == 13) {
        var rng = me.selection.getRange(), node;
        if (node = domUtils.findParentByTagName(rng.startContainer, 'p', true)) {
          if (domUtils.getComputedStyle(node, 'text-align') == 'center') {
            // domUtils.removeStyle(node, 'text-align')
          }
        }
      }
    })
  };


  // plugins/undo.js
  /**
   * undo redo
   * @file
   * @since 1.2.6.1
   */

  /**
   * 撤销上一次执行的命令
   * @command undo
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'undo' );
   * ```
   */

  /**
   * 重做上一次执行的命令
   * @command redo
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'redo' );
   * ```
   */

  //   AX.plugins['undo'] = function () {
  //     var saveSceneTimer;
  //     var me = this,
  //         maxUndoCount = me.options.maxUndoCount || 20,
  //         maxInputCount = me.options.maxInputCount || 20,
  //         fillchar = new RegExp(domUtils.fillChar + '|<\/hr>', 'gi');// ie会产生多余的</hr>
  //     var noNeedFillCharTags = {
  //         ol:1,ul:1,table:1,tbody:1,tr:1,body:1
  //     };
  //     var orgState = me.options.autoClearEmptyNode;

  //     function UndoManager() {
  //         this.list = [];
  //         this.index = 0;
  //         this.hasUndo = false;
  //         this.hasRedo = false;
  //         this.undo = function () {

  //         };
  //         this.redo = function () {
  //             if (this.hasRedo) {
  //                 while (this.list[this.index].content == this.list[this.index + 1].content) {
  //                     this.index++;
  //                     if (this.index == this.list.length - 1) {
  //                         return this.restore(this.index);
  //                     }
  //                 }
  //                 this.restore(++this.index);
  //             }
  //         };

  //         this.restore = function () {
  //             var me = this.editor;
  //             var scene = this.list[this.index];
  //             var root = UE.htmlparser(scene.content.replace(fillchar, ''));
  //             me.options.autoClearEmptyNode = false;
  //             me.filterInputRule(root);
  //             me.options.autoClearEmptyNode = orgState;
  //             //trace:873
  //             //去掉展位符
  //             me.document.body.innerHTML = root.toHtml();
  //             me.fireEvent('afterscencerestore');
  //             //处理undo后空格不展位的问题
  //             if (browser.ie) {
  //                 utils.each(domUtils.getElementsByTagName(me.document,'td th caption p'),function(node){
  //                     if(domUtils.isEmptyNode(node)){
  //                         domUtils.fillNode(me.document, node);
  //                     }
  //                 })
  //             }

  //             try{
  //                 var rng = new dom.Range(me.document).moveToAddress(scene.address);
  //                 rng.select(noNeedFillCharTags[rng.startContainer.nodeName.toLowerCase()]);
  //             }catch(e){}

  //             this.update();
  //             this.clearKey();
  //             //不能把自己reset了
  //             me.fireEvent('reset', true);
  //         };

  //         this.getScene = function () {
  //             var me = this.editor;
  //             var rng = me.selection.getRange(),
  //                 rngAddress = rng.createAddress(false,true);
  //             me.fireEvent('beforegetscene');
  //             var root = UE.htmlparser(me.body.innerHTML);
  //             me.options.autoClearEmptyNode = false;
  //             me.filterOutputRule(root);
  //             me.options.autoClearEmptyNode = orgState;
  //             var cont = root.toHtml();
  //             //trace:3461
  //             //这个会引起回退时导致空格丢失的情况
  // //            browser.ie && (cont = cont.replace(/>&nbsp;</g, '><').replace(/\s*</g, '<').replace(/>\s*/g, '>'));
  //             me.fireEvent('aftergetscene');

  //             return {
  //                 address:rngAddress,
  //                 content:cont
  //             }
  //         };
  //         this.save = function (notCompareRange,notSetCursor) {
  //             clearTimeout(saveSceneTimer);
  //             return;
  //             var currentScene = this.getScene(notSetCursor),
  //                 lastScene = this.list[this.index];

  //             if(lastScene && lastScene.content != currentScene.content){
  //                 me.trigger('contentchange')
  //             }
  //             //内容相同位置相同不存
  //             if (lastScene && lastScene.content == currentScene.content &&
  //                 ( notCompareRange ? 1 : compareRangeAddress(lastScene.address, currentScene.address) )
  //                 ) {
  //                 return;
  //             }
  //             this.list = this.list.slice(0, this.index + 1);
  //             this.list.push(currentScene);
  //             //如果大于最大数量了，就把最前的剔除
  //             if (this.list.length > maxUndoCount) {
  //                 this.list.shift();
  //             }
  //             this.index = this.list.length - 1;
  //             this.clearKey();
  //             //跟新undo/redo状态
  //             this.update();

  //         };
  //         this.update = function () {
  //             this.hasRedo = !!this.list[this.index + 1];
  //             this.hasUndo = !!this.list[this.index - 1];
  //         };
  //         this.reset = function () {
  //             this.list = [];
  //             this.index = 0;
  //             this.hasUndo = false;
  //             this.hasRedo = false;
  //             this.clearKey();
  //         };
  //         this.clearKey = function () {
  //             keycont = 0;
  //             lastKeyCode = null;
  //         };
  //     }

  //     me.undoManger = new UndoManager();
  //     me.undoManger.editor = me;
  //     function saveScene() {
  //         this.undoManger.save();
  //     }

  //     me.addListener('saveScene', function () {
  //         var args = Array.prototype.splice.call(arguments,1);
  //         this.undoManger.save.apply(this.undoManger,args);
  //     });

  // //    me.addListener('beforeexeccommand', saveScene);
  // //    me.addListener('afterexeccommand', saveScene);

  //     me.addListener('reset', function (type, exclude) {
  //         if (!exclude) {
  //             this.undoManger.reset();
  //         }
  //     });
  //     me.commands['redo'] = me.commands['undo'] = {
  //         execCommand:function (cmdName) {
  //             this.undoManger[cmdName]();
  //         },
  //         queryCommandState:function (cmdName) {
  //             return this.undoManger['has' + (cmdName.toLowerCase() == 'undo' ? 'Undo' : 'Redo')] ? 0 : -1;
  //         },
  //         notNeedUndo:1
  //     };

  //     var keys = {
  //             //  /*Backspace*/ 8:1, /*Delete*/ 46:1,
  //             /*Shift*/ 16:1, /*Ctrl*/ 17:1, /*Alt*/ 18:1,
  //             37:1, 38:1, 39:1, 40:1

  //         },
  //         keycont = 0,
  //         lastKeyCode;
  //     //输入法状态下不计算字符数
  //     var inputType = false;
  //     me.addListener('ready', function () {
  //         domUtils.on(this.body, 'compositionstart', function () {
  //             inputType = true;
  //         });
  //         domUtils.on(this.body, 'compositionend', function () {
  //             inputType = false;
  //         })
  //     });
  //     //快捷键
  //     me.addshortcutkey({
  //         "Undo":"ctrl+90", //undo
  //         "Redo":"ctrl+89" //redo

  //     });
  //     //扩展实例，添加关闭和开启命令undo
  //     me.stopCmdUndo = function(){
  //         me.__hasEnterExecCommand = true;
  //     };
  //     me.startCmdUndo = function(){
  //         me.__hasEnterExecCommand = false;
  //     }
  // };

  // plugins/list.js
  /**
   * 有序列表,无序列表插件
   * @file
   * @since 1.2.6.1
   */

  AX.plugins['list'] = function () {
    var me = this,
      notExchange = {
        'TD': 1,
        'PRE': 1,
        'BLOCKQUOTE': 1
      };
    var customStyle = {
      'cn': 'cn-1-',
      'cn1': 'cn-2-',
      'cn2': 'cn-3-',
      'num': 'num-1-',
      'num1': 'num-2-',
      'num2': 'num-3-',
      'dash': 'dash',
      'dot': 'dot'
    };

    me.setOpt({
      'autoTransWordToList': false,
      'insertorderedlist': {
        'num': '',
        'num1': '',
        'num2': '',
        'cn': '',
        'cn1': '',
        'cn2': '',
        'decimal': '',
        'lower-alpha': '',
        'lower-roman': '',
        'upper-alpha': '',
        'upper-roman': ''
      },
      'insertunorderedlist': {
        'circle': '',
        'disc': '',
        'square': '',
        'dash': '',
        'dot': ''
      },
      listDefaultPaddingLeft: '30',
      listiconpath: 'http://bs.baidu.com/listicon/',
      maxListLevel: -1,//-1不限制
      disablePInList: false
    });

    function listToArray(list) {
      var arr = [];
      for (var p in list) {
        arr.push(p)
      }
      return arr;
    }

    var listStyle = {
      'OL': listToArray(me.options.insertorderedlist),
      'UL': listToArray(me.options.insertunorderedlist)
    };
    var liiconpath = me.options.listiconpath;

    //根据用户配置，调整customStyle
    for (var s in customStyle) {
      if (!me.options.insertorderedlist.hasOwnProperty(s) && !me.options.insertunorderedlist.hasOwnProperty(s)) {
        delete customStyle[s];
      }
    }

    me.ready(function () {
      var customCss = [];
      for (var p in customStyle) {
        if (p == 'dash' || p == 'dot') {
          customCss.push('li.list-' + customStyle[p] + '{background-image:url(' + liiconpath + customStyle[p] + '.gif)}');
          customCss.push('ul.custom_' + p + '{list-style:none;}ul.custom_' + p + ' li{background-position:0 3px;background-repeat:no-repeat}');
        } else {
          for (var i = 0; i < 99; i++) {
            customCss.push('li.list-' + customStyle[p] + i + '{background-image:url(' + liiconpath + 'list-' + customStyle[p] + i + '.gif)}')
          }
          customCss.push('ol.custom_' + p + '{list-style:none;}ol.custom_' + p + ' li{background-position:0 3px;background-repeat:no-repeat}');
        }
        switch (p) {
          case 'cn':
            customCss.push('li.list-' + p + '-paddingleft-1{padding-left:25px}');
            customCss.push('li.list-' + p + '-paddingleft-2{padding-left:40px}');
            customCss.push('li.list-' + p + '-paddingleft-3{padding-left:55px}');
            break;
          case 'cn1':
            customCss.push('li.list-' + p + '-paddingleft-1{padding-left:30px}');
            customCss.push('li.list-' + p + '-paddingleft-2{padding-left:40px}');
            customCss.push('li.list-' + p + '-paddingleft-3{padding-left:55px}');
            break;
          case 'cn2':
            customCss.push('li.list-' + p + '-paddingleft-1{padding-left:40px}');
            customCss.push('li.list-' + p + '-paddingleft-2{padding-left:55px}');
            customCss.push('li.list-' + p + '-paddingleft-3{padding-left:68px}');
            break;
          case 'num':
          case 'num1':
            customCss.push('li.list-' + p + '-paddingleft-1{padding-left:25px}');
            break;
          case 'num2':
            customCss.push('li.list-' + p + '-paddingleft-1{padding-left:35px}');
            customCss.push('li.list-' + p + '-paddingleft-2{padding-left:40px}');
            break;
          case 'dash':
            customCss.push('li.list-' + p + '-paddingleft{padding-left:35px}');
            break;
          case 'dot':
            customCss.push('li.list-' + p + '-paddingleft{padding-left:20px}');
        }
      }
      customCss.push('.list-paddingleft-1{padding-left:0}');
      customCss.push('.list-paddingleft-2{padding-left:' + me.options.listDefaultPaddingLeft + 'px}');
      customCss.push('.list-paddingleft-3{padding-left:' + me.options.listDefaultPaddingLeft * 2 + 'px}');
      //如果不给宽度会在自定应样式里出现滚动条
      utils.cssRule('list', 'ol,ul{margin:0;pading:0;' + (browser.ie ? '' : 'width:95%') + '}li{clear:both;}' + customCss.join('\n'), me.document);
    });
    //单独处理剪切的问题
    me.ready(function () {
      domUtils.on(me.body, 'cut', function () {
        setTimeout(function () {
          var rng = me.selection.getRange(), li;
          //trace:3416
          if (!rng.collapsed) {
            if (li = domUtils.findParentByTagName(rng.startContainer, 'li', true)) {
              if (!li.nextSibling && domUtils.isEmptyBlock(li)) {
                var pn = li.parentNode, node;
                if (node = pn.previousSibling) {
                  domUtils.remove(pn);
                  rng.setStartAtLast(node).collapse(true);
                  rng.select(true);
                } else if (node = pn.nextSibling) {
                  domUtils.remove(pn);
                  rng.setStartAtFirst(node).collapse(true);
                  rng.select(true);
                } else {
                  var tmpNode = me.document.createElement('p');
                  domUtils.fillNode(me.document, tmpNode);
                  pn.parentNode.insertBefore(tmpNode, pn);
                  domUtils.remove(pn);
                  rng.setStart(tmpNode, 0).collapse(true);
                  rng.select(true);
                }
              }
            }
          }

        })
      })
    });

    function getStyle(node) {
      var cls = node.className;
      if (domUtils.hasClass(node, /custom_/)) {
        return cls.match(/custom_(\w+)/)[1]
      }
      return domUtils.getStyle(node, 'list-style-type')

    }

    me.addListener('beforepaste', function (type, html) {
      var me = this,
        rng = me.selection.getRange(), li;
      var root = html && AX.htmlparser(html.html, true);
      if (li = domUtils.findParentByTagName(rng.startContainer, 'li', true)) {
        var list = li.parentNode, tagName = list.tagName == 'OL' ? 'ul' : 'ol';
        utils.each(root.getNodesByTagName(tagName), function (n) {
          n.tagName = list.tagName;
          n.setAttr();
          if (n.parentNode === root) {
            type = getStyle(list) || (list.tagName == 'OL' ? 'decimal' : 'disc')
          } else {
            var className = n.parentNode.getAttr('class');
            if (className && /custom_/.test(className)) {
              type = className.match(/custom_(\w+)/)[1]
            } else {
              type = n.parentNode.getStyle('list-style-type');
            }
            if (!type) {
              type = list.tagName == 'OL' ? 'decimal' : 'disc';
            }
          }
          var index = utils.indexOf(listStyle[list.tagName], type);
          if (n.parentNode !== root) {
            index = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
          }
          var currentStyle = listStyle[list.tagName][index];
          if (customStyle[currentStyle]) {
            n.setAttr('class', 'custom_' + currentStyle)

          } else {
            n.setStyle('list-style-type', currentStyle)
          }
        })

      }

      html && (html.html = root && root.toHtml());
    });
    //导出时，去掉p标签
    me.getOpt('disablePInList') === true && me.addOutputRule(function (root) {
      utils.each(root.getNodesByTagName('li'), function (li) {
        var newChildrens = [], index = 0;
        utils.each(li.children, function (n) {
          if (n.tagName == 'p') {
            var tmpNode;
            while (tmpNode = n.children.pop()) {
              newChildrens.splice(index, 0, tmpNode);
              tmpNode.parentNode = li;
              lastNode = tmpNode;
            }
            tmpNode = newChildrens[newChildrens.length - 1];
            if (!tmpNode || tmpNode.type != 'element' || tmpNode.tagName != 'br') {
              var br = AX.uNode.createElement('br');
              br.parentNode = li;
              newChildrens.push(br);
            }

            index = newChildrens.length;
          }
        });
        if (newChildrens.length) {
          li.children = newChildrens;
        }
      });
    });
    //进入编辑器的li要套p标签
    me.addInputRule(function (root) {
      utils.each(root.getNodesByTagName('li'), function (li) {
        var tmpP = AX.uNode.createElement('p');
        for (var i = 0, ci; ci = li.children[i];) {
          if (ci.type == 'text' || dtd.p[ci.tagName]) {
            tmpP.appendChild(ci);
          } else {
            if (tmpP.firstChild()) {
              li.insertBefore(tmpP, ci);
              tmpP = AX.uNode.createElement('p');
              i = i + 2;
            } else {
              i++;
            }

          }
        }
        if (tmpP.firstChild() && !tmpP.parentNode || !li.firstChild()) {
          li.appendChild(tmpP);
        }
        //trace:3357
        //p不能为空
        if (!tmpP.firstChild()) {
          tmpP.innerHTML(browser.ie ? '&nbsp;' : '<br/>')
        }
        //去掉末尾的空白
        var p = li.firstChild();
        var lastChild = p.lastChild();
        if (lastChild && lastChild.type == 'text' && /^\s*$/.test(lastChild.data)) {
          p.removeChild(lastChild)
        }
      });
      if (me.options.autoTransWordToList) {
        var orderlisttype = {
          'num1': /^\d+\)/,
          'decimal': /^\d+\./,
          'lower-alpha': /^[a-z]+\)/,
          'upper-alpha': /^[A-Z]+\./,
          'cn': /^[\u4E00\u4E8C\u4E09\u56DB\u516d\u4e94\u4e03\u516b\u4e5d]+[\u3001]/,
          'cn2': /^\([\u4E00\u4E8C\u4E09\u56DB\u516d\u4e94\u4e03\u516b\u4e5d]+\)/
        },
          unorderlisttype = {
            'square': 'n'
          };

        function checkListType(content, container) {
          var span = container.firstChild();
          if (span && span.type == 'element' && span.tagName == 'span' && /Wingdings|Symbol/.test(span.getStyle('font-family'))) {
            for (var p in unorderlisttype) {
              if (unorderlisttype[p] == span.data) {
                return p
              }
            }
            return 'disc'
          }
          for (var p in orderlisttype) {
            if (orderlisttype[p].test(content)) {
              return p;
            }
          }

        }

        utils.each(root.getNodesByTagName('p'), function (node) {
          if (node.getAttr('class') != 'MsoListParagraph') {
            return
          }

          //word粘贴过来的会带有margin要去掉,但这样也可能会误命中一些央视
          node.setStyle('margin', '');
          node.setStyle('margin-left', '');
          node.setAttr('class', '');

          function appendLi(list, p, type) {
            if (list.tagName == 'ol') {
              if (browser.ie) {
                var first = p.firstChild();
                if (first.type == 'element' && first.tagName == 'span' && orderlisttype[type].test(first.innerText())) {
                  p.removeChild(first);
                }
              } else {
                p.innerHTML(p.innerHTML().replace(orderlisttype[type], ''));
              }
            } else {
              p.removeChild(p.firstChild())
            }

            var li = AX.uNode.createElement('li');
            li.appendChild(p);
            list.appendChild(li);
          }

          var tmp = node, type, cacheNode = node;

          if (node.parentNode.tagName != 'li' && (type = checkListType(node.innerText(), node))) {

            var list = AX.uNode.createElement(me.options.insertorderedlist.hasOwnProperty(type) ? 'ol' : 'ul');
            if (customStyle[type]) {
              list.setAttr('class', 'custom_' + type)
            } else {
              list.setStyle('list-style-type', type)
            }
            while (node && node.parentNode.tagName != 'li' && checkListType(node.innerText(), node)) {
              tmp = node.nextSibling();
              if (!tmp) {
                node.parentNode.insertBefore(list, node)
              }
              appendLi(list, node, type);
              node = tmp;
            }
            if (!list.parentNode && node && node.parentNode) {
              node.parentNode.insertBefore(list, node)
            }
          }
          var span = cacheNode.firstChild();
          if (span && span.type == 'element' && span.tagName == 'span' && /^\s*(&nbsp;)+\s*$/.test(span.innerText())) {
            span.parentNode.removeChild(span)
          }
        })
      }

    });

    //调整索引标签
    me.addListener('contentchange', function () {
      console.log(1111111)
      adjustListStyle(me.document)
    });

    function adjustListStyle(doc, ignore) {
      utils.each(domUtils.getElementsByTagName(doc, 'ol ul'), function (node) {

        if (!domUtils.inDoc(node, doc)) {
          return;
        }

        var parent = node.parentNode;
        if (parent.tagName == node.tagName) {
          var nodeStyleType = getStyle(node) || (node.tagName == 'OL' ? 'decimal' : 'disc'),
            parentStyleType = getStyle(parent) || (parent.tagName == 'OL' ? 'decimal' : 'disc');
          if (nodeStyleType == parentStyleType) {
            var styleIndex = utils.indexOf(listStyle[node.tagName], nodeStyleType);
            styleIndex = styleIndex + 1 == listStyle[node.tagName].length ? 0 : styleIndex + 1;
            setListStyle(node, listStyle[node.tagName][styleIndex])
          }

        }
        var index = 0, type = 2;
        if (domUtils.hasClass(node, /custom_/)) {
          if (!(/[ou]l/i.test(parent.tagName) && domUtils.hasClass(parent, /custom_/))) {
            type = 1;
          }
        } else {
          if (/[ou]l/i.test(parent.tagName) && domUtils.hasClass(parent, /custom_/)) {
            type = 3;
          }
        }

        var style = domUtils.getStyle(node, 'list-style-type');
        style && (node.style.cssText = 'list-style-type:' + style);
        node.className = utils.trim(node.className.replace(/list-paddingleft-\w+/, '')) + ' list-paddingleft-' + type;
        utils.each(domUtils.getElementsByTagName(node, 'li'), function (li) {
          li.style.cssText && (li.style.cssText = '');
          if (!li.firstChild) {
            domUtils.remove(li);
            return;
          }
          if (li.parentNode !== node) {
            return;
          }
          index++;
          if (domUtils.hasClass(node, /custom_/)) {
            var paddingLeft = 1, currentStyle = getStyle(node);
            if (node.tagName == 'OL') {
              if (currentStyle) {
                switch (currentStyle) {
                  case 'cn':
                  case 'cn1':
                  case 'cn2':
                    if (index > 10 && (index % 10 == 0 || index > 10 && index < 20)) {
                      paddingLeft = 2
                    } else if (index > 20) {
                      paddingLeft = 3
                    }
                    break;
                  case 'num2':
                    if (index > 9) {
                      paddingLeft = 2
                    }
                }
              }
              li.className = 'list-' + customStyle[currentStyle] + index + ' ' + 'list-' + currentStyle + '-paddingleft-' + paddingLeft;
            } else {
              li.className = 'list-' + customStyle[currentStyle] + ' ' + 'list-' + currentStyle + '-paddingleft';
            }
          } else {
            li.className = li.className.replace(/list-[\w\-]+/gi, '');
          }
          var className = li.getAttribute('class');
          if (className !== null && !className.replace(/\s/g, '')) {
            domUtils.removeAttributes(li, 'class')
          }
        });
        !ignore && adjustList(node, node.tagName.toLowerCase(), getStyle(node) || domUtils.getStyle(node, 'list-style-type'), true);
      })
    }

    function adjustList(list, tag, style, ignoreEmpty) {
      var nextList = list.nextSibling;
      if (nextList && nextList.nodeType == 1 && nextList.tagName.toLowerCase() == tag && (getStyle(nextList) || domUtils.getStyle(nextList, 'list-style-type') || (tag == 'ol' ? 'decimal' : 'disc')) == style) {
        domUtils.moveChild(nextList, list);
        if (nextList.childNodes.length == 0) {
          domUtils.remove(nextList);
        }
      }
      if (nextList && domUtils.isFillChar(nextList)) {
        domUtils.remove(nextList);
      }
      var preList = list.previousSibling;
      if (preList && preList.nodeType == 1 && preList.tagName.toLowerCase() == tag && (getStyle(preList) || domUtils.getStyle(preList, 'list-style-type') || (tag == 'ol' ? 'decimal' : 'disc')) == style) {
        domUtils.moveChild(list, preList);
      }
      if (preList && domUtils.isFillChar(preList)) {
        domUtils.remove(preList);
      }
      // !ignoreEmpty && domUtils.isEmptyBlock(list) && domUtils.remove(list);
      if (getStyle(list)) {
        adjustListStyle(list.ownerDocument, true)
      }
    }

    function setListStyle(list, style) {
      if (customStyle[style]) {
        list.className = 'custom_' + style;
      }
      try {
        domUtils.setStyle(list, 'list-style-type', style);
      } catch (e) {
      }
    }

    function clearEmptySibling(node) {
      var tmpNode = node.previousSibling;
      if (tmpNode && domUtils.isEmptyBlock(tmpNode)) {
        domUtils.remove(tmpNode);
      }
      tmpNode = node.nextSibling;
      if (tmpNode && domUtils.isEmptyBlock(tmpNode)) {
        domUtils.remove(tmpNode);
      }
    }

    me.addListener('keydown', function (type, evt) {
      function preventAndSave() {
        evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
        me.fireEvent('contentchange');
        me.undoManger && me.undoManger.save();
      }

      function findList(node, filterFn) {
        while (node && !domUtils.isBody(node)) {
          if (filterFn(node)) {
            return null
          }
          if (node.nodeType == 1 && /[ou]l/i.test(node.tagName)) {
            return node;
          }
          node = node.parentNode;
        }
        return null;
      }

      var keyCode = evt.keyCode || evt.which;
      if (keyCode == 13 && !evt.shiftKey) {//回车
        var rng = me.selection.getRange(),
          parent = domUtils.findParent(rng.startContainer, function (node) {
            return domUtils.isBlockElm(node)
          }, true),
          li = domUtils.findParentByTagName(rng.startContainer, 'li', true);
        if (parent && parent.tagName != 'PRE' && !li) {
          var html = parent.innerHTML.replace(new RegExp(domUtils.fillChar, 'g'), '');
          if (/^\s*1\s*\.[^\d]/.test(html) && li) { // 屏蔽文本包含序号时，自动增加有序列表
            parent.innerHTML = html.replace(/^\s*1\s*\./, '');
            rng.setStartAtLast(parent).collapse(true).select();
            me.__hasEnterExecCommand = true;
            me.execCommand('insertorderedlist');
            me.__hasEnterExecCommand = false;
          }
        }
        var range = me.selection.getRange(),
          start = findList(range.startContainer, function (node) {
            return node.tagName == 'TABLE';
          }),
          end = range.collapsed ? start : findList(range.endContainer, function (node) {
            return node.tagName == 'TABLE';
          });

        if (start && end && start === end) {

          if (!range.collapsed) {
            start = domUtils.findParentByTagName(range.startContainer, 'li', true);
            end = domUtils.findParentByTagName(range.endContainer, 'li', true);
            if (start && end && start === end) {
              range.deleteContents();
              li = domUtils.findParentByTagName(range.startContainer, 'li', true);
              if (li && domUtils.isEmptyBlock(li)) {

                pre = li.previousSibling;
                next = li.nextSibling;
                p = me.document.createElement('p');

                domUtils.fillNode(me.document, p);
                parentList = li.parentNode;
                if (pre && next) {
                  range.setStart(next, 0).collapse(true).select(true);
                  domUtils.remove(li);

                } else {
                  if (!pre && !next || !pre) {

                    parentList.parentNode.insertBefore(p, parentList);


                  } else {
                    li.parentNode.parentNode.insertBefore(p, parentList.nextSibling);
                  }
                  domUtils.remove(li);
                  if (!parentList.firstChild) {
                    domUtils.remove(parentList);
                  }
                  range.setStart(p, 0).setCursor();


                }
                preventAndSave();
                return;

              }
            } else {
              var tmpRange = range.cloneRange(),
                bk = tmpRange.collapse(false).createBookmark();

              range.deleteContents();
              tmpRange.moveToBookmark(bk);
              var li = domUtils.findParentByTagName(tmpRange.startContainer, 'li', true);

              clearEmptySibling(li);
              tmpRange.select();
              preventAndSave();
              return;
            }
          }


          li = domUtils.findParentByTagName(range.startContainer, 'li', true);

          if (li) {
            // if (domUtils.isEmptyBlock(li)) {
            //   bk = range.createBookmark();
            //   var parentList = li.parentNode;
            //   if (li !== parentList.lastChild) {
            //     domUtils.breakParent(li, parentList);
            //     clearEmptySibling(li);
            //   } else {

            //     parentList.parentNode.insertBefore(li, parentList.nextSibling);
            //     if (domUtils.isEmptyNode(parentList)) {
            //       // domUtils.remove(parentList);
            //     }
            //   }
            //   //嵌套不处理
            //   if (!dtd.$list[li.parentNode.tagName]) {

            //     if (!domUtils.isBlockElm(li.firstChild)) {
            //       p = me.document.createElement('p');
            //       li.parentNode.insertBefore(p, li);
            //       while (li.firstChild) {
            //         p.appendChild(li.firstChild);
            //       }
            //       domUtils.remove(li);
            //     } else {
            //       domUtils.remove(li, true);
            //     }
            //   }
            //   range.moveToBookmark(bk).select();


            // } else {
            var first = li.firstChild;
            if (!first || !domUtils.isBlockElm(first)) {
              var p = me.document.createElement('p');

              !li.firstChild && domUtils.fillNode(me.document, p);
              while (li.firstChild) {

                p.appendChild(li.firstChild);
              }
              li.appendChild(p);
              first = p;
            }

            var span = me.document.createElement('span');

            range.insertNode(span);
            domUtils.breakParent(span, li);

            var nextLi = span.nextSibling;
            first = nextLi.firstChild;

            if (!first) {
              p = me.document.createElement('p');

              domUtils.fillNode(me.document, p);
              nextLi.appendChild(p);
              first = p;
            }
            if (domUtils.isEmptyNode(first)) {
              // first.innerHTML = '';
              domUtils.fillNode(me.document, first);
            }

            range.setStart(first, 0).collapse(true).shrinkBoundary().select();
            domUtils.remove(span);
            var pre = nextLi.previousSibling;
            if (pre && domUtils.isEmptyBlock(pre)) {
              // pre.innerHTML = '<p></p>';
              domUtils.fillNode(me.document, pre.firstChild);
            }

            // }
            //                        }
            preventAndSave();
          }


        }

      }
      if (keyCode == 8 && browser.ie) {
        //修中ie中li下的问题
        range = me.selection.getRange();
        if (range.collapsed && domUtils.isStartInblock(range)) {
          tmpRange = range.cloneRange().trimBoundary();
          li = domUtils.findParentByTagName(range.startContainer, 'li', true);
          //要在li的最左边，才能处理
          if (li && domUtils.isStartInblock(tmpRange)) {
            start = domUtils.findParentByTagName(range.startContainer, 'p', true);
            if (start && start !== li.firstChild) {
              var parentList = domUtils.findParentByTagName(start, ['ol', 'ul']);
              domUtils.breakParent(start, parentList);
              clearEmptySibling(start);
              me.fireEvent('contentchange');
              range.setStart(start, 0).setCursor(false, true);
              me.fireEvent('saveScene');
              domUtils.preventDefault(evt);
              return;
            }

            if (li && (pre = li.previousSibling)) {
              if (keyCode == 46 && li.childNodes.length) {
                return;
              }
              //有可能上边的兄弟节点是个2级菜单，要追加到2级菜单的最后的li
              if (dtd.$list[pre.tagName]) {
                pre = pre.lastChild;
              }
              me.undoManger && me.undoManger.save();
              first = li.firstChild;
              if (domUtils.isBlockElm(first)) {
                if (domUtils.isEmptyNode(first)) {
                  //                                    range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
                  pre.appendChild(first);
                  range.setStart(first, 0).setCursor(false, true);
                  //first不是唯一的节点
                  while (li.firstChild) {
                    pre.appendChild(li.firstChild);
                  }
                } else {

                  span = me.document.createElement('span');
                  range.insertNode(span);
                  //判断pre是否是空的节点,如果是<p><br/></p>类型的空节点，干掉p标签防止它占位
                  if (domUtils.isEmptyBlock(pre)) {
                    pre.innerHTML = '';
                  }
                  domUtils.moveChild(li, pre);
                  range.setStartBefore(span).collapse(true).select(true);

                  domUtils.remove(span);

                }
              } else {
                if (domUtils.isEmptyNode(li)) {
                  var p = me.document.createElement('p');
                  pre.appendChild(p);
                  range.setStart(p, 0).setCursor();
                  //                                    range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
                } else {
                  range.setEnd(pre, pre.childNodes.length).collapse().select(true);
                  while (li.firstChild) {
                    pre.appendChild(li.firstChild);
                  }
                }
              }
              domUtils.remove(li);
              me.fireEvent('contentchange');
              me.fireEvent('saveScene');
              domUtils.preventDefault(evt);
              return;

            }
            //trace:980

            if (li && !li.previousSibling) {
              var parentList = li.parentNode;
              var bk = range.createBookmark();
              if (domUtils.isTagNode(parentList.parentNode, 'ol ul')) {
                parentList.parentNode.insertBefore(li, parentList);
                if (domUtils.isEmptyNode(parentList)) {
                  domUtils.remove(parentList)
                }
              } else {

                while (li.firstChild) {
                  parentList.parentNode.insertBefore(li.firstChild, parentList);
                }

                domUtils.remove(li);
                if (domUtils.isEmptyNode(parentList)) {
                  domUtils.remove(parentList)
                }

              }
              range.moveToBookmark(bk).setCursor(false, true);
              me.fireEvent('contentchange');
              me.fireEvent('saveScene');
              domUtils.preventDefault(evt);
              return;

            }


          }


        }

      }
    });

    me.addListener('keyup', function (type, evt) {
      var keyCode = evt.keyCode || evt.which;
      if (keyCode == 8) {
        var rng = me.selection.getRange(), list;
        if (list = domUtils.findParentByTagName(rng.startContainer, ['ol', 'ul'], true)) {
          adjustList(list, list.tagName.toLowerCase(), getStyle(list) || domUtils.getComputedStyle(list, 'list-style-type'), true)
        }
      }
    });
    //处理tab键
    me.addListener('tabkeydown', function () {

      var range = me.selection.getRange();

      //控制级数
      function checkLevel(li) {
        if (me.options.maxListLevel != -1) {
          var level = li.parentNode, levelNum = 0;
          while (/[ou]l/i.test(level.tagName)) {
            levelNum++;
            level = level.parentNode;
          }
          if (levelNum >= me.options.maxListLevel) {
            return true;
          }
        }
      }

      //只以开始为准
      //todo 后续改进
      var li = domUtils.findParentByTagName(range.startContainer, 'li', true);
      if (li) {

        var bk;
        if (range.collapsed) {
          if (checkLevel(li)) {
            return true;
          }
          var parentLi = li.parentNode,
            list = me.document.createElement(parentLi.tagName),
            index = utils.indexOf(listStyle[list.tagName], getStyle(parentLi) || domUtils.getComputedStyle(parentLi, 'list-style-type'));
          index = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
          var currentStyle = listStyle[list.tagName][index];
          setListStyle(list, currentStyle);
          if (domUtils.isStartInblock(range)) {
            me.fireEvent('saveScene');
            bk = range.createBookmark();
            parentLi.insertBefore(list, li);
            list.appendChild(li);
            adjustList(list, list.tagName.toLowerCase(), currentStyle);
            me.fireEvent('contentchange');
            range.moveToBookmark(bk).select(true);
            return true;
          }
        } else {
          me.fireEvent('saveScene');
          bk = range.createBookmark();
          for (var i = 0, closeList, parents = domUtils.findParents(li), ci; ci = parents[i++];) {
            if (domUtils.isTagNode(ci, 'ol ul')) {
              closeList = ci;
              break;
            }
          }
          var current = li;
          if (bk.end) {
            while (current && !(domUtils.getPosition(current, bk.end) & domUtils.POSITION_FOLLOWING)) {
              if (checkLevel(current)) {
                current = domUtils.getNextDomNode(current, false, null, function (node) {
                  return node !== closeList
                });
                continue;
              }
              var parentLi = current.parentNode,
                list = me.document.createElement(parentLi.tagName),
                index = utils.indexOf(listStyle[list.tagName], getStyle(parentLi) || domUtils.getComputedStyle(parentLi, 'list-style-type'));
              var currentIndex = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
              var currentStyle = listStyle[list.tagName][currentIndex];
              setListStyle(list, currentStyle);
              parentLi.insertBefore(list, current);
              while (current && !(domUtils.getPosition(current, bk.end) & domUtils.POSITION_FOLLOWING)) {
                li = current.nextSibling;
                list.appendChild(current);
                if (!li || domUtils.isTagNode(li, 'ol ul')) {
                  if (li) {
                    while (li = li.firstChild) {
                      if (li.tagName == 'LI') {
                        break;
                      }
                    }
                  } else {
                    li = domUtils.getNextDomNode(current, false, null, function (node) {
                      return node !== closeList
                    });
                  }
                  break;
                }
                current = li;
              }
              adjustList(list, list.tagName.toLowerCase(), currentStyle);
              current = li;
            }
          }
          me.fireEvent('contentchange');
          range.moveToBookmark(bk).select();
          return true;
        }
      }

    });

    function getLi(start) {
      while (start && !domUtils.isBody(start)) {
        if (start.nodeName == 'TABLE') {
          return null;
        }
        if (start.nodeName == 'LI') {
          return start
        }
        start = start.parentNode;
      }
    }

    /**
     * 有序列表，与“insertunorderedlist”命令互斥
     * @command insertorderedlist
     * @method execCommand
     * @param { String } command 命令字符串
     * @param { String } style 插入的有序列表类型，值为：decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
     * @example
     * ```javascript
     * editor.execCommand( 'insertorderedlist','decimal');
     * ```
     */
    /**
     * 查询当前选区内容是否有序列表
     * @command insertorderedlist
     * @method queryCommandState
     * @param { String } cmd 命令字符串
     * @return { int } 如果当前选区是有序列表返回1，否则返回0
     * @example
     * ```javascript
     * editor.queryCommandState( 'insertorderedlist' );
     * ```
     */
    /**
     * 查询当前选区内容是否有序列表
     * @command insertorderedlist
     * @method queryCommandValue
     * @param { String } cmd 命令字符串
     * @return { String } 返回当前有序列表的类型，值为null或decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
     * @example
     * ```javascript
     * editor.queryCommandValue( 'insertorderedlist' );
     * ```
     */

    /**
     * 无序列表，与“insertorderedlist”命令互斥
     * @command insertunorderedlist
     * @method execCommand
     * @param { String } command 命令字符串
     * @param { String } style 插入的无序列表类型，值为：circle,disc,square,dash,dot
     * @example
     * ```javascript
     * editor.execCommand( 'insertunorderedlist','circle');
     * ```
     */
    /**
     * 查询当前是否有word文档粘贴进来的图片
     * @command insertunorderedlist
     * @method insertunorderedlist
     * @param { String } command 命令字符串
     * @return { int } 如果当前选区是无序列表返回1，否则返回0
     * @example
     * ```javascript
     * editor.queryCommandState( 'insertunorderedlist' );
     * ```
     */
    /**
     * 查询当前选区内容是否有序列表
     * @command insertunorderedlist
     * @method queryCommandValue
     * @param { String } command 命令字符串
     * @return { String } 返回当前无序列表的类型，值为null或circle,disc,square,dash,dot
     * @example
     * ```javascript
     * editor.queryCommandValue( 'insertunorderedlist' );
     * ```
     */

    me.commands['insertorderedlist'] =
      me.commands['insertunorderedlist'] = {
        execCommand: function (command, style) {

          if (!style) {
            style = command.toLowerCase() == 'insertorderedlist' ? 'decimal' : 'disc';
          }
          var me = this,
            range = this.selection.getRange(),
            filterFn = function (node) {
              return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' : !domUtils.isWhitespace(node);
            },
            tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul',
            frag = me.document.createDocumentFragment();
          //去掉是因为会出现选到末尾，导致adjustmentBoundary缩到ol/ul的位置
          //range.shrinkBoundary();//.adjustmentBoundary();
          range.adjustmentBoundary().shrinkBoundary();
          var bko = range.createBookmark(true),
            start = getLi(me.document.getElementById(bko.start)),
            modifyStart = 0,
            end = getLi(me.document.getElementById(bko.end)),
            modifyEnd = 0,
            startParent, endParent,
            list, tmp;

          if (start || end) {
            start && (startParent = start.parentNode);
            if (!bko.end) {
              end = start;
            }
            end && (endParent = end.parentNode);

            if (startParent === endParent) {
              while (start !== end) {
                tmp = start;
                start = start.nextSibling;
                if (!domUtils.isBlockElm(tmp.firstChild)) {
                  var p = me.document.createElement('p');
                  while (tmp.firstChild) {
                    p.appendChild(tmp.firstChild);
                  }
                  tmp.appendChild(p);
                }
                frag.appendChild(tmp);
              }
              tmp = me.document.createElement('span');
              startParent.insertBefore(tmp, end);
              if (!domUtils.isBlockElm(end.firstChild)) {
                p = me.document.createElement('p');
                while (end.firstChild) {
                  p.appendChild(end.firstChild);
                }
                end.appendChild(p);
              }
              frag.appendChild(end);
              domUtils.breakParent(tmp, startParent);
              if (domUtils.isEmptyNode(tmp.previousSibling)) {
                domUtils.remove(tmp.previousSibling);
              }
              if (domUtils.isEmptyNode(tmp.nextSibling)) {
                domUtils.remove(tmp.nextSibling)
              }
              var nodeStyle = getStyle(startParent) || domUtils.getComputedStyle(startParent, 'list-style-type') || (command.toLowerCase() == 'insertorderedlist' ? 'decimal' : 'disc');
              if (startParent.tagName.toLowerCase() == tag && nodeStyle == style) {
                for (var i = 0, ci, tmpFrag = me.document.createDocumentFragment(); ci = frag.firstChild;) {
                  if (domUtils.isTagNode(ci, 'ol ul')) {
                    //                                  删除时，子列表不处理
                    //                                  utils.each(domUtils.getElementsByTagName(ci,'li'),function(li){
                    //                                        while(li.firstChild){
                    //                                            tmpFrag.appendChild(li.firstChild);
                    //                                        }
                    //
                    //                                    });
                    tmpFrag.appendChild(ci);
                  } else {
                    while (ci.firstChild) {

                      tmpFrag.appendChild(ci.firstChild);
                      domUtils.remove(ci);
                    }
                  }

                }
                tmp.parentNode.insertBefore(tmpFrag, tmp);
              } else {
                list = me.document.createElement(tag);
                setListStyle(list, style);
                list.appendChild(frag);
                tmp.parentNode.insertBefore(list, tmp);
              }

              domUtils.remove(tmp);
              list && adjustList(list, tag, style);
              range.moveToBookmark(bko).select();
              return;
            }
            //开始
            if (start) {
              while (start) {
                tmp = start.nextSibling;
                if (domUtils.isTagNode(start, 'ol ul')) {
                  frag.appendChild(start);
                } else {
                  var tmpfrag = me.document.createDocumentFragment(),
                    hasBlock = 0;
                  while (start.firstChild) {
                    if (domUtils.isBlockElm(start.firstChild)) {
                      hasBlock = 1;
                    }
                    tmpfrag.appendChild(start.firstChild);
                  }
                  if (!hasBlock) {
                    var tmpP = me.document.createElement('p');
                    tmpP.appendChild(tmpfrag);
                    frag.appendChild(tmpP);
                  } else {
                    frag.appendChild(tmpfrag);
                  }
                  domUtils.remove(start);
                }

                start = tmp;
              }
              startParent.parentNode.insertBefore(frag, startParent.nextSibling);
              if (domUtils.isEmptyNode(startParent)) {
                range.setStartBefore(startParent);
                domUtils.remove(startParent);
              } else {
                range.setStartAfter(startParent);
              }
              modifyStart = 1;
            }

            if (end && domUtils.inDoc(endParent, me.document)) {
              //结束
              start = endParent.firstChild;
              while (start && start !== end) {
                tmp = start.nextSibling;
                if (domUtils.isTagNode(start, 'ol ul')) {
                  frag.appendChild(start);
                } else {
                  tmpfrag = me.document.createDocumentFragment();
                  hasBlock = 0;
                  while (start.firstChild) {
                    if (domUtils.isBlockElm(start.firstChild)) {
                      hasBlock = 1;
                    }
                    tmpfrag.appendChild(start.firstChild);
                  }
                  if (!hasBlock) {
                    tmpP = me.document.createElement('p');
                    tmpP.appendChild(tmpfrag);
                    frag.appendChild(tmpP);
                  } else {
                    frag.appendChild(tmpfrag);
                  }
                  domUtils.remove(start);
                }
                start = tmp;
              }
              var tmpDiv = domUtils.createElement(me.document, 'div', {
                'tmpDiv': 1
              });
              domUtils.moveChild(end, tmpDiv);

              frag.appendChild(tmpDiv);
              domUtils.remove(end);
              endParent.parentNode.insertBefore(frag, endParent);
              range.setEndBefore(endParent);
              if (domUtils.isEmptyNode(endParent)) {
                domUtils.remove(endParent);
              }

              modifyEnd = 1;
            }


          }

          if (!modifyStart) {
            range.setStartBefore(me.document.getElementById(bko.start));
          }
          if (bko.end && !modifyEnd) {
            range.setEndAfter(me.document.getElementById(bko.end));
          }
          range.enlarge(true, function (node) {
            return notExchange[node.tagName];
          });

          frag = me.document.createDocumentFragment();

          var bk = range.createBookmark(),
            current = domUtils.getNextDomNode(bk.start, false, filterFn),
            tmpRange = range.cloneRange(),
            tmpNode,
            block = domUtils.isBlockElm;

          while (current && current !== bk.end && domUtils.getPosition(current, bk.end) & domUtils.POSITION_PRECEDING) {

            if (current.nodeType == 3 || dtd.li[current.tagName]) {
              if (current.nodeType == 1 && dtd.$list[current.tagName]) {
                while (current.firstChild) {
                  frag.appendChild(current.firstChild);
                }
                tmpNode = domUtils.getNextDomNode(current, false, filterFn);
                domUtils.remove(current);
                current = tmpNode;
                continue;

              }
              tmpNode = current;
              tmpRange.setStartBefore(current);

              while (current && current !== bk.end && (!block(current) || domUtils.isBookmarkNode(current))) {
                tmpNode = current;
                current = domUtils.getNextDomNode(current, false, null, function (node) {
                  return !notExchange[node.tagName];
                });
              }

              if (current && block(current)) {
                tmp = domUtils.getNextDomNode(tmpNode, false, filterFn);
                if (tmp && domUtils.isBookmarkNode(tmp)) {
                  current = domUtils.getNextDomNode(tmp, false, filterFn);
                  tmpNode = tmp;
                }
              }
              tmpRange.setEndAfter(tmpNode);

              current = domUtils.getNextDomNode(tmpNode, false, filterFn);

              var li = range.document.createElement('li');
              li.innerHTML = "<p></p>"
              li.children[0].appendChild(tmpRange.extractContents());

              if (domUtils.isEmptyNode(li)) {
                var tmpNode = range.document.createElement('p');
                while (li.firstChild) {
                  tmpNode.appendChild(li.firstChild)
                }
                li.appendChild(tmpNode);
              }
              frag.appendChild(li);
            } else {
              current = domUtils.getNextDomNode(current, true, filterFn);
            }
          }
          range.moveToBookmark(bk).collapse(true);
          list = me.document.createElement(tag);
          setListStyle(list, style);
          list.appendChild(frag);
          // if(range.startContainer.getAttribute("class").indexOf("ax-page-wrapper") > -1) {
          //   var tm = axTools.getByClass("ax-page-content", range.startContainer)[0];
          //   tm.append(list);
          // }else{
          range.insertNode(list);
          // }
          //当前list上下看能否合并
          adjustList(list, tag, style);
          //去掉冗余的tmpDiv
          for (var i = 0, ci, tmpDivs = domUtils.getElementsByTagName(list, 'div'); ci = tmpDivs[i++];) {
            if (ci.getAttribute('tmpDiv')) {
              domUtils.remove(ci, true)
            }
          }
          range.moveToBookmark(bko).select();
        },
        queryCommandState: function (command) {
          var tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul';
          var path = this.selection.getStartElementPath();
          for (var i = 0, ci; ci = path[i++];) {
            if (ci.nodeName == 'TABLE') {
              return 0
            }
            if (tag == ci.nodeName.toLowerCase()) {
              return 1
            }
            ;
          }
          return 0;

        },
        queryCommandValue: function (command) {
          var tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul';
          var path = this.selection.getStartElementPath(),
            node;
          for (var i = 0, ci; ci = path[i++];) {
            if (ci.nodeName == 'TABLE') {
              node = null;
              break;
            }
            if (tag == ci.nodeName.toLowerCase()) {
              node = ci;
              break;
            }
            ;
          }
          return node ? getStyle(node) || domUtils.getComputedStyle(node, 'list-style-type') : null;
        }
      };
  };


  // plugins/source.js
  /**
   * 源码编辑插件
   * @file
   * @since 1.2.6.1
   */

  (function () {
    var sourceEditors = {
      textarea: function (editor, holder) {
        var textarea = holder.ownerDocument.createElement('textarea');
        textarea.style.cssText = 'position:absolute;resize:none;width:100%;height:100%;border:0;padding:0;margin:0;overflow-y:auto;';
        // todo: IE下只有onresize属性可用... 很纠结
        if (browser.ie && browser.version < 8) {
          textarea.style.width = holder.offsetWidth + 'px';
          textarea.style.height = holder.offsetHeight + 'px';
          holder.onresize = function () {
            textarea.style.width = holder.offsetWidth + 'px';
            textarea.style.height = holder.offsetHeight + 'px';
          };
        }
        holder.appendChild(textarea);
        return {
          setContent: function (content) {
            textarea.value = content;
          },
          getContent: function () {
            return textarea.value;
          },
          select: function () {
            var range;
            if (browser.ie) {
              range = textarea.createTextRange();
              range.collapse(true);
              range.select();
            } else {
              //todo: chrome下无法设置焦点
              textarea.setSelectionRange(0, 0);
              textarea.focus();
            }
          },
          dispose: function () {
            holder.removeChild(textarea);
            // todo
            holder.onresize = null;
            textarea = null;
            holder = null;
          }
        };
      },
      codemirror: function (editor, holder) {

        var codeEditor = window.CodeMirror(holder, {
          mode: "text/html",
          tabMode: "indent",
          lineNumbers: true,
          lineWrapping: true
        });
        var dom = codeEditor.getWrapperElement();
        dom.style.cssText = 'position:absolute;left:0;top:0;width:100%;height:100%;font-family:consolas,"Courier new",monospace;font-size:13px;';
        codeEditor.getScrollerElement().style.cssText = 'position:absolute;left:0;top:0;width:100%;height:100%;';
        codeEditor.refresh();
        return {
          getCodeMirror: function () {
            return codeEditor;
          },
          setContent: function (content) {
            codeEditor.setValue(content);
          },
          getContent: function () {
            return codeEditor.getValue();
          },
          select: function () {
            codeEditor.focus();
          },
          dispose: function () {
            holder.removeChild(dom);
            dom = null;
            codeEditor = null;
          }
        };
      }
    };

    AX.plugins['source'] = function () {
      var me = this;
      var opt = this.options;
      var sourceMode = false;
      var sourceEditor;
      var orgSetContent;
      opt.sourceEditor = browser.ie ? 'textarea' : opt.sourceEditor || 'codemirror';

      me.setOpt({
        sourceEditorFirst: false
      });

      function createSourceEditor(holder) {
        return sourceEditors[opt.sourceEditor == 'codemirror' && window.CodeMirror ? 'codemirror' : 'textarea'](me, holder);
      }

      var bakCssText;
      //解决在源码模式下getContent不能得到最新的内容问题
      var oldGetContent,
        bakAddress;

      /**
       * 切换源码模式和书写模式
       * @command source
       * @method execCommand
       * @param { String } cmd 命令字符串
       * @example
       * ```javascript
       * editor.execCommand( 'source');
       * ```
       */

      /**
       * 查询当前编辑区域的状态是源码模式还是可视化模式
       * @command source
       * @method queryCommandState
       * @param { String } cmd 命令字符串
       * @return { int } 如果当前是源码书写模式，返回1，否则返回0
       * @example
       * ```javascript
       * editor.queryCommandState( 'source' );
       * ```
       */

      me.commands['source'] = {
        execCommand: function () {

          sourceMode = !sourceMode;
          if (sourceMode) {
            bakAddress = me.selection.getRange().createAddress(false, true);
            me.undoManger && me.undoManger.save(true);
            if (browser.gecko) {
              me.body.contentEditable = false;
            }

            bakCssText = me.iframe.style.cssText;
            me.iframe.style.cssText += 'position:absolute;left:-32768px;top:-32768px;';


            me.fireEvent('beforegetcontent');
            var root = AX.htmlparser(me.body.innerHTML);
            me.filterOutputRule(root);
            root.traversal(function (node) {
              if (node.type == 'element') {
                switch (node.tagName) {
                  case 'td':
                  case 'th':
                  case 'caption':
                    if (node.children && node.children.length == 1) {
                      if (node.firstChild().tagName == 'br') {
                        node.removeChild(node.firstChild())
                      }
                    }
                    ;
                    break;
                  case 'pre':
                    node.innerText(node.innerText().replace(/&nbsp;/g, ' '))

                }
              }
            });

            me.fireEvent('aftergetcontent');

            var content = root.toHtml(true);

            sourceEditor = createSourceEditor(me.iframe.parentNode);

            sourceEditor.setContent(content);

            orgSetContent = me.setContent;

            me.setContent = function (html) {
              //这里暂时不触发事件，防止报错
              var root = AX.htmlparser(html);
              me.filterInputRule(root);
              html = root.toHtml();
              sourceEditor.setContent(html);
            };

            setTimeout(function () {
              sourceEditor.select();
              me.addListener('fullscreenchanged', function () {
                try {
                  sourceEditor.getCodeMirror().refresh()
                } catch (e) {
                }
              });
            });

            //重置getContent，源码模式下取值也能是最新的数据
            oldGetContent = me.getContent;
            me.getContent = function () {
              return sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>') + '</p>';
            };
          } else {
            me.iframe.style.cssText = bakCssText;
            var cont = sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>') + '</p>';
            //处理掉block节点前后的空格,有可能会误命中，暂时不考虑
            cont = cont.replace(new RegExp('[\\r\\t\\n ]*<\/?(\\w+)\\s*(?:[^>]*)>', 'g'), function (a, b) {
              if (b && !dtd.$inlineWithA[b.toLowerCase()]) {
                return a.replace(/(^[\n\r\t ]*)|([\n\r\t ]*$)/g, '');
              }
              return a.replace(/(^[\n\r\t]*)|([\n\r\t]*$)/g, '')
            });

            me.setContent = orgSetContent;

            me.setContent(cont);
            sourceEditor.dispose();
            sourceEditor = null;
            //还原getContent方法
            me.getContent = oldGetContent;
            var first = me.body.firstChild;
            //trace:1106 都删除空了，下边会报错，所以补充一个p占位
            if (!first) {
              me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';
              first = me.body.firstChild;
            }


            //要在ifm为显示时ff才能取到selection,否则报错
            //这里不能比较位置了
            me.undoManger && me.undoManger.save(true);

            if (browser.gecko) {

              var input = document.createElement('input');
              input.style.cssText = 'position:absolute;left:0;top:-32768px';

              document.body.appendChild(input);

              me.body.contentEditable = false;
              setTimeout(function () {
                domUtils.setViewportOffset(input, { left: -32768, top: 0 });
                input.focus();
                setTimeout(function () {
                  me.body.contentEditable = true;
                  me.selection.getRange().moveToAddress(bakAddress).select(true);
                  domUtils.remove(input);
                });

              });
            } else {
              //ie下有可能报错，比如在代码顶头的情况
              try {
                me.selection.getRange().moveToAddress(bakAddress).select(true);
              } catch (e) {
              }

            }

          }
          this.fireEvent('sourcemodechanged', sourceMode);
        },
        queryCommandState: function () {
          return sourceMode | 0;
        },
        notNeedUndo: 1
      };
      var oldQueryCommandState = me.queryCommandState;

      me.queryCommandState = function (cmdName) {
        cmdName = cmdName.toLowerCase();
        if (sourceMode) {
          //源码模式下可以开启的命令
          return cmdName in {
            'source': 1,
            'fullscreen': 1
          } ? 1 : -1
        }
        return oldQueryCommandState.apply(this, arguments);
      };

      if (opt.sourceEditor == "codemirror") {

        me.addListener("ready", function () {
          utils.loadFile(document, {
            src: opt.codeMirrorJsUrl || opt.AXEDITOR_HOME_URL + "third-party/codemirror/codemirror.min.js",
            tag: "script",
            type: "text/javascript",
            defer: "defer"
          }, function () {
            if (opt.sourceEditorFirst) {
              setTimeout(function () {
                me.execCommand("source");
              }, 0);
            }
          });
          utils.loadFile(document, {
            tag: "link",
            rel: "stylesheet",
            type: "text/css",
            href: opt.codeMirrorCssUrl || opt.AXEDITOR_HOME_URL + "third-party/codemirror/codemirror.min.css"
          });
        });
      }
    };
  })();

  // plugins/enterkey.js
  ///import core
  ///import plugins/undo.js
  ///commands 设置回车标签p或br
  ///commandsName  EnterKey
  ///commandsTitle  设置回车标签p或br
  /**
   * @description 处理回车
   * @author zhanyi
   */
  AX.plugins['enterkey'] = function () {
    var hTag,
      me = this,
      tag = me.options.enterTag;
    me.addListener('keyup', function (type, evt) {

      var keyCode = evt.keyCode || evt.which;
      if (keyCode == 13) {
        var range = me.selection.getRange(),
          start = range.startContainer,
          doSave;

        //修正在h1-h6里边回车后不能嵌套p的问题
        if (!browser.ie) {

          if (/h\d/i.test(hTag)) {
            if (browser.gecko) {
              var h = domUtils.findParentByTagName(start, ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'caption', 'table'], true);
              if (!h) {
                me.document.execCommand('formatBlock', false, '<div>');
                doSave = 1;
              }
            } else {
              //chrome remove div
              if (start.nodeType == 1) {
                var tmp = me.document.createTextNode(''), div;
                range.insertNode(tmp);
                div = domUtils.findParentByTagName(tmp, 'div', true);
                if (div) {
                  var p = me.document.createElement('p');
                  while (div.firstChild) {
                    p.appendChild(div.firstChild);
                  }
                  div.parentNode.insertBefore(p, div);
                  domUtils.remove(div);
                  range.setStartBefore(tmp).setCursor();
                  doSave = 1;
                }
                domUtils.remove(tmp);

              }
            }

            if (me.undoManger && doSave) {
              me.undoManger.save();
            }
          }

          // 处理段落回车出现div标签
          var parentCtrl = AX.dom.domUtils.findParent(start, function(dom){
            return dom.tagName == "SPAN" && dom.getAttribute("attrs");
          })
          var parentParag = AX.dom.domUtils.findParent(start, function(dom){
            return dom.className.indexOf("paragraphContent")>-1;
          })
          if(parentParag && !parentCtrl) {
            axTools.stopDefault(evt);
            // me.document.execCommand('formatBlock', false, '<div>');
          }
          //没有站位符，会出现多行的问题
          browser.opera && range.select();
        } else {
          me.fireEvent('saveScene', true, true)
        }
      }
    });

    me.addListener('keydown', function (type, evt) {

      var keyCode = evt.keyCode || evt.which;
      if (keyCode == 13) {//回车
        var range = me.selection.getRange(),
          isInCtrl = AX.dom.domUtils.findParent(range.startContainer, function (dom) {
            return axTools.hasClass(dom, 'ctrl-bg') && dom.getAttribute('axPlugins') != 'paragraphele';
          }, true, true);
        //控件内禁用回车
        if (isInCtrl) {
          return;
        }
        if (me.fireEvent('beforeenterkeydown')) {
          domUtils.preventDefault(evt);
          return;
        }
        me.fireEvent('saveScene', true, true);
        hTag = '';

        var isEdit = 'true';
        var rang = range.startContainer;
        if(rang.nodeType !== 1) {
          rang = rang.parentElement;
        }
        while(!rang.getAttribute('contenteditable') && rang.tagName && rang.tagName !== 'BODY'){
          rang = rang.parentElement;
        }
        isEdit = rang.getAttribute('contenteditable');
        if(isEdit === 'false'){// 控件不能编辑时，禁止回车
          axTools.stopDefault(evt);
          axTools.stopPropagation(evt);
          return;
        }
        if (!range.collapsed) {
          //跨td不能删
          var start = range.startContainer,
            end = range.endContainer,
            startTd = domUtils.findParentByTagName(start, 'td', true),
            endTd = domUtils.findParentByTagName(end, 'td', true);
          if (startTd && endTd && startTd !== endTd || !startTd && endTd || startTd && !endTd) {
            evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
            return;
          }
        }
        if (tag == 'p') {


          if (!browser.ie) {

            start = domUtils.findParentByTagName(range.startContainer, ['ol', 'ul', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'caption'], true);

            //opera下执行formatblock会在table的场景下有问题，回车在opera原生支持很好，所以暂时在opera去掉调用这个原生的command
            //trace:2431
            if (!start && !browser.opera) {

              // FIXED table 里面 select selectmulti datedomain 元素回车增加P标签的问题  yang  START//
              var startContainer = me.selection.getRange().startContainer;
              var parentNode = AX.dom.domUtils.findParent(startContainer, function (dom) {//axplugins attrs属性 节点
                return dom.tagName === "SPAN" && dom.getAttribute('axplugins') != null && dom.getAttribute('attrs');
              }, true);
              var parentTdNode = false;
              if ((range.startOffset == range.startContainer.length) && range.startContainer.nextSibling) {
                parentTdNode = true;
              }
              if (parentNode) {
                var axplugins = parentNode.getAttribute("axplugins");
                //  父节点没有 td  没有axplugins="select" 等以下元素 可以执行 加P 标签的操作
                if (axplugins != "select" && axplugins != "selectmulti" && axplugins != "datedomain" && axplugins != "numberelement" && parentTdNode != null) {
                  me.document.execCommand('formatBlock', false, '<div>');
                }
              } else {
                if (parentTdNode) { // 兼容结构化元素前回车，防止出现多行
                  br = range.document.createElement('br');
                  range.insertNode(br).setStartAfter(br).setCursor();;
                  evt.preventDefault();
                } else {
                  if(range.startContainer.nodeType == 1 && range.startContainer.className.indexOf("ax-page-content") > -1) {
                    var offset = range.startOffset;
                    var isTable = range.startContainer.children[range.startOffset - 1].tagName == "TABLE";
                    if(isTable) {
                      var p = me.document.createElement("p");
                      p.innerHTML = "<br>"
                      AX.dom.domUtils.insertAfter(range.startContainer.children[range.startOffset - 1], p);
                    }else{
                      me.document.execCommand('formatBlock', false, '<div>');
                    }
                  }else{
                    me.document.execCommand('formatBlock', false, '<p>');
                  }
                }
              }
              // FIXED table 里面 select selectmulti datedomain 元素回车增加P标签的问题  yang  END

              if (browser.gecko) {
                range = me.selection.getRange();
                start = domUtils.findParentByTagName(range.startContainer, 'p', true);
                start && domUtils.removeDirtyAttr(start);
              }


            } else {
              hTag = start.tagName;
              start.tagName.toLowerCase() == 'p' && browser.gecko && domUtils.removeDirtyAttr(start);
            }

          }

        } else {
          evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
          if (!range.collapsed) {
            range.deleteContents();
            start = range.startContainer;
            if (start.nodeType == 1 && (start = start.childNodes[range.startOffset])) {
              while (start.nodeType == 1) {
                if (dtd.$empty[start.tagName]) {
                  range.setStartBefore(start).setCursor();
                  if (me.undoManger) {
                    me.undoManger.save();
                  }
                  return false;
                }
                if (!start.firstChild) {
                  var br = range.document.createElement('br');
                  start.appendChild(br);
                  range.setStart(start, 0).setCursor();
                  if (me.undoManger) {
                    me.undoManger.save();
                  }
                  return false;
                }
                start = start.firstChild;
              }
              if (start === range.startContainer.childNodes[range.startOffset]) {
                br = range.document.createElement('br');
                range.insertNode(br).setCursor();

              } else {
                range.setStart(start, 0).setCursor();
              }


            } else {
              br = range.document.createElement('br');
              range.insertNode(br).setStartAfter(br).setCursor();
            }


          } else {
            br = range.document.createElement('br');
            range.insertNode(br);
            var parent = br.parentNode;
            if (parent.lastChild === br) {
              br.parentNode.insertBefore(br.cloneNode(true), br);
              range.setStartBefore(br);
            } else {
              range.setStartAfter(br);
            }
            range.setCursor();

          }

        }

      }
    });
  };


  // plugins/keystrokes.js
  /* 处理特殊键的兼容性问题 */
  AX.plugins['keystrokes'] = function () {
    var me = this;
    var collapsed = true;
    me.addListener('keydown', function (type, evt) {
      var keyCode = evt.keyCode || evt.which,
        rng = me.selection.getRange();
      //处理全选的情况
      if (!rng.collapsed && !(evt.ctrlKey || evt.shiftKey || evt.altKey || evt.metaKey) && (keyCode >= 65 && keyCode <= 90
        || keyCode >= 48 && keyCode <= 57 ||
        keyCode >= 96 && keyCode <= 111 || {
          13: 1,
          8: 1,
          46: 1
        }[keyCode])
      ) {

        var tmpNode = rng.startContainer;
        if (domUtils.isFillChar(tmpNode)) {
          rng.setStartBefore(tmpNode)
        }
        tmpNode = rng.endContainer;
        if (domUtils.isFillChar(tmpNode)) {
          rng.setEndAfter(tmpNode)
        }
        rng.txtToElmBoundary();
        //结束边界可能放到了br的前边，要把br包含进来
        // x[xxx]<br/>
        if (rng.endContainer && rng.endContainer.nodeType == 1) {
          tmpNode = rng.endContainer.childNodes[rng.endOffset];
          if (tmpNode && domUtils.isBr(tmpNode)) {
            rng.setEndAfter(tmpNode);
          }
        }
        if (rng.startOffset == 0) {
          tmpNode = rng.startContainer;
          if (domUtils.isBoundaryNode(tmpNode, 'firstChild')) {
            tmpNode = rng.endContainer;
            if (rng.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode, 'lastChild')) {
              me.fireEvent('saveScene');
              me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';
              rng.setStart(me.body.firstChild, 0).setCursor(false, true);
              me._selectionChange();
              return;
            }
          }
        }
      }

      if (keyCode == 83 && evt.ctrlKey) { // ctrl + s 暂存
        evt.preventDefault();
        // evt.returnValue = false;
        if (typeof me.options.saveMethod == "function") {
          axTools.addMarkDisable(me);
          me.options.saveMethod(me.getContent());
        } else {
          alert(me.getLang("ax.noSaveMethod"));
        }
      }

      /**
       * ctrl + ←  OR  ctrl + →  跳出组件编辑区域
       */

      if (keyCode == 37 || keyCode == 39) {
        if (evt.ctrlKey) {
          evt.preventDefault();
          var box = me.selection.getStart();
          if (!!!box.getAttribute('axplugins')) {
            box = box.parentElement;
          }
          if (keyCode == 37) {
            while (!box.previousSibling) {
              box = box.parentElement;
              if (box.tagName === 'BODY') {
                break;
              }
            }
            if (box.tagName !== 'P') {
              box = box.previousSibling;
            }
            me.document.body.click(); // 使原有控件失去焦点
            var rangeLeft = me.document.createRange();
            rangeLeft.setStart(box, 0); //
            if (box.tagName === 'P') {
              rangeLeft.setStart(box, 0);
            } else {
              rangeLeft.selectNodeContents(box);
            }
            rangeLeft.collapse(false);
            var selLeft = me.window.getSelection();
            selLeft.removeAllRanges();
            selLeft.addRange(rangeLeft);
          } else {
            while (!box.nextSibling) {
              box = box.parentElement;
              if (box.tagName === 'BODY') {
                break;
              }
            }
            box = box.nextSibling;
            me.document.body.click();
            var rangeRight = me.document.createRange();
            rangeRight.setStart(box, 0);
            rangeRight.collapse(false);
            var selRight = me.window.getSelection();
            selRight.removeAllRanges();
            selRight.addRange(rangeRight);
          }

        }
      }

      //处理backspace
      if (keyCode == keymap.Backspace) {
        rng = me.selection.getRange();
        collapsed = rng.collapsed;
        if (me.fireEvent('delkeydown', evt)) {
          return;
        }
        var start, end;
        //避免按两次删除才能生效的问题
        if (rng.collapsed && rng.inFillChar()) {
          start = rng.startContainer;

          if (domUtils.isFillChar(start)) {
            rng.setStartBefore(start).shrinkBoundary(true).collapse(true);
            domUtils.remove(start)
            axTools.stopDefault(evt)
          } else {
            start.nodeValue = start.nodeValue.replace(new RegExp('^' + domUtils.fillChar), '');
            rng.startOffset--;
            rng.collapse(true).select(true)
          }
        }

        //解决选中control元素不能删除的问题
        if (start = rng.getClosedNode()) {
          me.fireEvent('saveScene');
          rng.setStartBefore(start);
          domUtils.remove(start);
          rng.setCursor();
          me.fireEvent('saveScene');
          domUtils.preventDefault(evt);
          return;
        }
        //阻止在table上的删除
        if (!browser.ie) {
          start = domUtils.findParentByTagName(rng.startContainer, 'table', true);
          end = domUtils.findParentByTagName(rng.endContainer, 'table', true);
          if (start && !end || !start && end || start !== end) {
            evt.preventDefault();
            return;
          }
        }

      }
      // ctrl + (left or right)
      // if (keyCode === 37 || keyCode === 39) { // 37: left  39: right
      //   console.log(evt);
      //   if (evt.ctrlKey) {
      //     if (keyCode === 37) {
      //       var range = me.selection.getRange();
      //           parentDom = range.startContainer.parentNode
      //       // while (parentDom) {

      //       // }
      //     }
      //   }
      // }
      // enter键 禁止跳过
      function enterReturnHandler(type){
        var ignoreEle = [
          "haveornot", "radio", "checkbox", "select", "selectmulti", "text", "datedomain", "signature"
        ]
        if(ignoreEle.indexOf(type) > -1){
          return true;
        }else {
          return false;
        }
      }

      //处理tab键的逻辑
      if (keyCode == keymap.Tab || keyCode == keymap.Enter) {
        //不处理以下标签
        var excludeTagNameForTabKey = {
          'ol': 1,
          'ul': 1,
          'table': 1
        };
        //处理组件里的tab按下事件
        if (keyCode == keymap.Tab && me.fireEvent('tabkeydown', evt)) {
          domUtils.preventDefault(evt);
          return;
        }
        var range = me.selection.getRange(),
          start = me.selection.getStart(),
          ctrlValues = $(me.body).find("span[tabindex]");//domUtils.getByClass('ctrl-value', me.document),
        var isShift = false, // 是否为回退到上一个控件 （shift+tab)
          isParagraph = AX.dom.domUtils.findParent(range.startContainer, function (dom) {
            return dom.tagName === "DIV" && axTools.hasClass(dom, 'paragraphele');
          }, true, true);
        var par = null;
        if(!axTools.hasClass(start, 'ctrl-value')) {
          start = AX.dom.domUtils.findParent(start, function (dom) {
            return dom.tagName === "SPAN" && axTools.hasClass(dom, 'ctrl-value');
          }, true, true);
        }else{
          domUtils.preventDefault(evt);
        }
        if(!start) {
          domUtils.preventDefault(evt);
          return;
        }
        var startType = start.getAttribute('type');
        //段落内阻止tab键默认添加空格行为，改为控件切换
        if (isParagraph && start.tabIndex == -1 && keyCode == keymap.Tab) {
          evt.preventDefault();
          start = axTools.getByClass('ctrl-value', isParagraph).length > 0 ? axTools.getByClass('ctrl-value', isParagraph)[0] : start;
        }
        // 单复选框、组合元素、留痕信息节点获取焦点时，控件应定位到其父元素
        // if (enterReturnHandler(startType) || axTools.hasClass(start, '_textnode_') || axTools.hasClass(start, 'editor-free-text')) {
        //   start = AX.dom.domUtils.findParent(start, function (dom) {
        //     return dom.tagName === "SPAN" && axTools.hasClass(dom, 'ctrl-value');
        //   }, true, true);
        // }
        if (axTools.hasClass(start, "ctrl-value")) {
          setTimeout(function (){
            var startTabIndex = start.tabIndex;
            domUtils.preventDefault(evt);

            //shift+tab键实现回退上一个控件功能
            // if (!evt.shiftKey && (startTabIndex + 1) >= ctrlValues.length) {
            //   startTabIndex = -1;
            // }
            var nextCtrlIndex = startTabIndex;
            // if (evt.shiftKey) {
            //   isShift = true
            //   if (startTabIndex == 0) {
            //     startTabIndex = ctrlValues.length;
            //   }
            //   nextCtrlIndex = startTabIndex - 1;
            // }
            var usable = true; // 遍历当前元素时，是否可用
            var isEdit = 0;// 记录当前集合遍历次数
            var m = null;
            var lastTabindex = ctrlValues[ctrlValues.length - 1].getAttribute("tabindex")
            while(!isNaN(lastTabindex) && nextCtrlIndex <= Number(lastTabindex)) {
              nextCtrlIndex++;
              m = $(me.body).find("span[tabindex="+nextCtrlIndex+"]")[0];
              if(m) {
                break;
              }
            }
            for(var a = 0; a < ctrlValues.length; a++) {
              var aTabIndex = ctrlValues[a].getAttribute("tabindex");
              if(aTabIndex == start.tabIndex || !usable) {
                if(!evt.shiftKey) { // 向下
                  nextCtrlIndex = a + 1;
                  if(nextCtrlIndex >= ctrlValues.length) {
                    nextCtrlIndex = 0;
                    m = ctrlValues[nextCtrlIndex];
                  }else{
                    m = ctrlValues[nextCtrlIndex];
                  }
                  while(m.parentElement.style.display === "none") { // 当前元素未显示时，跳过
                    nextCtrlIndex += 1;
                    if(nextCtrlIndex >= ctrlValues.length) {
                      nextCtrlIndex = 0;
                      m = ctrlValues[nextCtrlIndex];
                    }else{
                      m = ctrlValues[nextCtrlIndex];
                    }
                  }
                }else{ // 向上
                  isShift = true;
                  nextCtrlIndex = a - 1;
                  if(nextCtrlIndex < 0) {
                    nextCtrlIndex = ctrlValues.length - 1;
                    m = ctrlValues[nextCtrlIndex];
                  }else{
                    m = ctrlValues[nextCtrlIndex];
                  }
                  while(m.parentElement.style.display === "none") { // 当前元素未显示时，跳过
                    nextCtrlIndex -= 1;
                    if(nextCtrlIndex < 0) {
                      nextCtrlIndex = ctrlValues.length - 1;
                      m = ctrlValues[nextCtrlIndex];
                    }else{
                      m = ctrlValues[nextCtrlIndex];
                    }
                  }
                }
                par = AX.dom.domUtils.findParent(m, function (dom) {
                  return dom.tagName === "SPAN";
                }, false);
                if (par != null) {
                  var isCheck = enterReturnHandler(par.getAttribute("axplugins"));//par.getAttribute("axplugins") == 'checkbox' || par.getAttribute("axplugins") == 'radio'
                }


                var needSpaceCtrls = ["datedomain", "signature", "haveornot", "select", "selectmulti"];
                if ((par.tagName !== 'STRONG' && m.getAttribute('contenteditable') !== 'false' && m.getAttribute('contenteditable') !== null) || isCheck) { // && ctrlValues[i].getAttribute('contenteditable') !== 'false' && ctrlValues[i].getAttribute('contenteditable') !== null
                  if((needSpaceCtrls.indexOf(par.getAttribute("axplugins")) > -1) && m.innerText.replace(/\u200B/g,'') == "") {
                    m.innerHTML = "&#8203";
                  }
                }else{
                  usable = false;
                  if(a == ctrlValues.length - 1){
                    a = 0;
                    isEdit++;
                    if(isEdit > 1) return; // 避免死循环
                  }
                  continue;
                }
                break;
              }
            }

            /**
             * 遍历当前元素后面的元素集合，跳过不可编辑与标题
             */
            var parf = AX.dom.domUtils.findParent(start, function (dom) {
              return dom.tagName === "SPAN" && dom.getAttribute("attrs");
            }, false);
            if(keyCode == keymap.Enter && parf && enterReturnHandler(parf.getAttribute("axplugins"))) {
              domUtils.preventDefault(evt);
              return;
            }

            /** tab切换时关闭当前下拉框 */
            var selectBoxs = axTools.getByClass('edui-for-editattr', document);
            for (var i = 0; i < selectBoxs.length; i++) {
              selectBoxs[i].style.visibility = 'hidden';
            }
            // 此处是做兼容处理，当控件产生bug消失时，此处会出现找不到下一个控件的问题
            if (!m) {
              m = ctrlValues[nextCtrlIndex];
              if (!m) {
                return;
              }
            }
            // try{
            //   m.parentNode.setAttribute('currItem','');
            // }catch(e){}

            // 存入tabindex,供tab键使用
            var tabIndexBox = me.document.getElementById('tabIndexBox');
            if (!tabIndexBox) {
              tabIndexBox = document.createElement('input');
              tabIndexBox.setAttribute('id', 'tabIndexBox');
              tabIndexBox.setAttribute('type', 'hidden');
              me.document.body.appendChild(tabIndexBox);
            }
            tabIndexBox.setAttribute('value', nextCtrlIndex);
            m.focus();
            m.click();
          }, 300)
          return;
        }
        if (keyCode == keymap.Enter) {
          return;
        }
        //控件中tab切换时不需要触发内容变化（即插入tab空格）
        if (domUtils.hasClass(range.startContainer.parentNode, 'ctrl-bg')) {
          return;
        }
        me.fireEvent('saveScene');
        for (var i = 0, txt = '', tabSize = me.options.tabSize || 4, tabNode = me.options.tabNode || '&nbsp;'; i < tabSize; i++) {
          txt += tabNode;
        }
        var span = me.document.createElement('span');
        span.innerHTML = txt + domUtils.fillChar;
        if (range.collapsed) {
          range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
        } else {
          var filterFn = function (node) {
            return domUtils.isBlockElm(node) && !excludeTagNameForTabKey[node.tagName.toLowerCase()]

          };
          //普通的情况
          start = domUtils.findParent(range.startContainer, filterFn, true);
          end = domUtils.findParent(range.endContainer, filterFn, true);
          if (start && end && start === end) {
            range.deleteContents();
            range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
          } else {
            var bookmark = range.createBookmark();
            range.enlarge(true);
            var bookmark2 = range.createBookmark(),
              current = domUtils.getNextDomNode(bookmark2.start, false, filterFn);
            while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
              current.insertBefore(span.cloneNode(true).firstChild, current.firstChild);
              current = domUtils.getNextDomNode(current, false, filterFn);
            }
            range.moveToBookmark(bookmark2).moveToBookmark(bookmark).select();
          }
        }
        domUtils.preventDefault(evt)
      }
      //trace:1634
      //ff的del键在容器空的时候，也会删除
      if (browser.gecko && keyCode == 46) {
        range = me.selection.getRange();
        if (range.collapsed) {
          start = range.startContainer;
          if (domUtils.isEmptyBlock(start)) {
            var parent = start.parentNode;
            while (domUtils.getChildCount(parent) == 1 && !domUtils.isBody(parent)) {
              start = parent;
              parent = parent.parentNode;
            }
            if (start === parent.lastChild) {
              evt.preventDefault();
            }
            return;
          }
        }
      }
    });
    me.addListener('keyup', function (type, evt) {
      var keyCode = evt.keyCode || evt.which,
        rng, me = this;
      if (keyCode == keymap.Backspace) {
        if (me.fireEvent('delkeyup')) {
          return;
        }
        rng = me.selection.getRange();
        if (rng.collapsed) {
          var tmpNode,
            autoClearTagName = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
          if (tmpNode = domUtils.findParentByTagName(rng.startContainer, autoClearTagName, true)) {
            if (domUtils.isEmptyBlock(tmpNode)) {
              var pre = tmpNode.previousSibling;
              if (pre && pre.nodeName != 'TABLE') {
                domUtils.remove(tmpNode);
                rng.setStartAtLast(pre).setCursor(false, true);
                return;
              }
              var next = tmpNode.nextSibling;
              if (next && next.nodeName != 'TABLE') {
                domUtils.remove(tmpNode);
                rng.setStartAtFirst(next).setCursor(false, true);
                return;
              }

            }
          }
          //处理当删除到body时，要重新给p标签展位
          if (domUtils.isBody(rng.startContainer)) {
            var tmpNode = domUtils.createElement(me.document, 'p', {
              'innerHTML': browser.ie ? domUtils.fillChar : '<br/>'
            });
            rng.insertNode(tmpNode).setStart(tmpNode, 0).setCursor(false, true);
          }
        }

        //chrome下如果删除了inline标签，浏览器会有记忆，在输入文字还是会套上刚才删除的标签，所以这里再选一次就不会了
        if (!collapsed && (rng.startContainer.nodeType == 3 || rng.startContainer.nodeType == 1 && domUtils.isEmptyBlock(rng.startContainer))) {
          if (browser.ie) {
            var span = rng.document.createElement('span');
            rng.insertNode(span).setStartBefore(span).collapse(true);
            rng.select();
            domUtils.remove(span)
          } else {
            rng.select()
          }

        }
      }
    })
  };

  // plugins/fiximgclick.js
  ///import core
  ///commands 修复chrome下图片不能点击的问题，出现八个角可改变大小
  ///commandsName  FixImgClick
  ///commandsTitle  修复chrome下图片不能点击的问题，出现八个角可改变大小
  //修复chrome下图片不能点击的问题，出现八个角可改变大小

  AX.plugins['fiximgclick'] = (function () {

    var elementUpdated = false;

    function Scale() {
      this.editor = null;
      this.resizer = null;
      this.cover = null;
      this.doc = document;
      this.prePos = { x: 0, y: 0 };
      this.startPos = { x: 0, y: 0 };
    }

    (function () {
      var rect = [
        //[left, top, width, height]
        [0, 0, -1, -1],
        [0, 0, 0, -1],
        [0, 0, 1, -1],
        [0, 0, -1, 0],
        [0, 0, 1, 0],
        [0, 0, -1, 1],
        [0, 0, 0, 1],
        [0, 0, 1, 1]
      ];

      Scale.prototype = {
        init: function (editor) {
          var me = this;
          me.editor = editor;
          me.startPos = this.prePos = { x: 0, y: 0 };
          me.dragId = -1;

          var hands = [],
            cover = me.cover = document.createElement('div'),
            resizer = me.resizer = document.createElement('div');

          cover.id = me.editor.ui.id + '_imagescale_cover';
          cover.style.cssText = 'position:absolute;display:none;z-index:' + me.editor.options.zIndex + ';filter:alpha(opacity=0); opacity:0;background:#CCC;';
          domUtils.on(cover, 'mousedown click', function () {
            me.hide();
          });
          // author: kuangzihe
          // 增加元素的双击修改功能
          domUtils.on(resizer, 'dblclick', function (evt) {
            var type = me.target.getAttribute("axplugins");
            if (type) {
              baidu.editor.plugins[type].editdom = me.target;
              me.editor.execCommand(type);
            }
          });

          for (i = 0; i < 8; i++) {
            hands.push('<span class="edui-editor-imagescale-hand' + i + '"></span>');
          }
          resizer.id = me.editor.ui.id + '_imagescale';
          resizer.className = 'edui-editor-imagescale';
          resizer.innerHTML = hands.join('');
          resizer.style.cssText += ';display:none;border:1px solid #3b77ff;z-index:' + me.editor.options.zIndex + ';';

          me.editor.ui.getDom().appendChild(cover);
          me.editor.ui.getDom().appendChild(resizer);

          me.initStyle();
          me.initEvents();
        },
        initStyle: function () {
          utils.cssRule('imagescale', '.edui-editor-imagescale{display:none;position:absolute;border:1px solid #38B2CE;cursor:hand;-webkit-box-sizing: content-box;-moz-box-sizing: content-box;box-sizing: content-box;}' +
            '.edui-editor-imagescale span{position:absolute;width:6px;height:6px;overflow:hidden;font-size:0px;display:block;background-color:#3C9DD0;}'
            + '.edui-editor-imagescale .edui-editor-imagescale-hand0{cursor:nw-resize;top:0;margin-top:-4px;left:0;margin-left:-4px;}'
            + '.edui-editor-imagescale .edui-editor-imagescale-hand1{cursor:n-resize;top:0;margin-top:-4px;left:50%;margin-left:-4px;}'
            + '.edui-editor-imagescale .edui-editor-imagescale-hand2{cursor:ne-resize;top:0;margin-top:-4px;left:100%;margin-left:-3px;}'
            + '.edui-editor-imagescale .edui-editor-imagescale-hand3{cursor:w-resize;top:50%;margin-top:-4px;left:0;margin-left:-4px;}'
            + '.edui-editor-imagescale .edui-editor-imagescale-hand4{cursor:e-resize;top:50%;margin-top:-4px;left:100%;margin-left:-3px;}'
            + '.edui-editor-imagescale .edui-editor-imagescale-hand5{cursor:sw-resize;top:100%;margin-top:-3px;left:0;margin-left:-4px;}'
            + '.edui-editor-imagescale .edui-editor-imagescale-hand6{cursor:s-resize;top:100%;margin-top:-3px;left:50%;margin-left:-4px;}'
            + '.edui-editor-imagescale .edui-editor-imagescale-hand7{cursor:se-resize;top:100%;margin-top:-3px;left:100%;margin-left:-3px;}'
          );
        },
        initEvents: function () {
          var me = this;

          me.startPos.x = me.startPos.y = 0;
          me.isDraging = false;
        },
        _eventHandler: function (e) {
          var me = this;
          var ratio = (me.resizer.style.width.replace(/px/g, '') / me.resizer.style.height.replace(/px/g, '')).toFixed(2);
          switch (e.type) {
            case 'mousedown':
              var hand = e.target || e.srcElement, hand;
              if (hand.className.indexOf('edui-editor-imagescale-hand') != -1 && me.dragId == -1) {
                me.dragId = hand.className.slice(-1);
                me.startPos.x = me.prePos.x = e.clientX;
                me.startPos.y = me.prePos.y = e.clientY;
                domUtils.on(me.doc, 'mousemove', me.proxy(me._eventHandler, me));
              }
              break;
            case 'mousemove':
              if (me.dragId != -1) {
                me.updateContainerStyle(me.dragId, { x: e.clientX - me.prePos.x, y: e.clientY - me.prePos.y }, ratio);
                me.prePos.x = e.clientX;
                me.prePos.y = e.clientY;
                elementUpdated = true;
                me.updateTargetElement();

              }
              break;
            case 'mouseup':
              if (me.dragId != -1) {
                me.updateContainerStyle(me.dragId, { x: e.clientX - me.prePos.x, y: e.clientY - me.prePos.y }, ratio);
                me.updateTargetElement();
                if (me.target.parentNode) {
                  me.attachTo(me.target);
                }
                me.dragId = -1;
              }
              domUtils.un(me.doc, 'mousemove', me.proxy(me._eventHandler, me));
              //修复只是点击挪动点，但没有改变大小，不应该触发contentchange
              if (elementUpdated) {
                elementUpdated = false;
                me.editor.fireEvent('contentchange');
              }

              break;
            default:
              break;
          }
        },
        updateTargetElement: function () {
          var me = this;
          domUtils.setStyles(me.target, {
            'width': me.resizer.style.width,
            'height': me.resizer.style.height
          });
          me.target.width = parseInt(me.resizer.style.width);
          me.target.height = parseInt(me.resizer.style.height);
          me.attachTo(me.target);
        },
        updateContainerStyle: function (dir, offset, ratio) {
          var me = this,
            dom = me.resizer, tmp,
            marginLeft = parseInt(me.editor.document.body.style.marginLeft),
            marginTop = parseInt(me.editor.document.body.style.marginTop);

          marginLeft = isNaN(marginLeft) ? 0 : marginLeft;
          marginTop = isNaN(marginTop) ? 0 : marginTop;

          if (rect[dir][0] != 0) {
            tmp = parseInt(dom.style.left) + offset.x;
            dom.style.left = me._validScaledProp('left', tmp + marginLeft) + 'px';
          }
          if (rect[dir][1] != 0) {
            tmp = parseInt(dom.style.top) + offset.y;
            dom.style.top = me._validScaledProp('top', tmp + marginTop) + 'px';
          }
          if (rect[dir][2] != 0) {
            tmp = dom.clientWidth + rect[dir][2] * offset.x;
            dom.style.width = me._validScaledProp('width', tmp) + 'px';
            dom.style.height = (me._validScaledProp('width', tmp) / ratio).toFixed(2) + 'px';
          }
          if (rect[dir][3] != 0) {
            tmp = dom.clientHeight + rect[dir][3] * offset.y;
            dom.style.height = me._validScaledProp('height', tmp) + 'px';
            dom.style.width = me._validScaledProp('height', tmp) * ratio + 'px'
          }
        },
        _validScaledProp: function (prop, value) {
          var ele = this.resizer,
            wrap = document;

          value = isNaN(value) ? 0 : value;
          switch (prop) {
            case 'left':
              return value < 0 ? 0 : value + ele.clientWidth > wrap.clientWidth ? wrap.clientWidth - ele.clientWidth : value;
            case 'top':
              return value < 0 ? 0 : value + ele.clientHeight > wrap.clientHeight ? wrap.clientHeight - ele.clientHeight : value;
            case 'width':
              return value <= 0 ? 1 : value + ele.offsetLeft > wrap.clientWidth ? wrap.clientWidth - ele.offsetLeft : value;
            case 'height':
              return value <= 0 ? 1 : value + ele.offsetTop > wrap.clientHeight ? wrap.clientHeight - ele.offsetTop : value;
          }
        },
        hideCover: function () {
          this.cover.style.display = 'none';
        },
        showCover: function () {
          var me = this,
            editorPos = domUtils.getXY(me.editor.ui.getDom()),
            iframePos = domUtils.getXY(me.editor.iframe),
            marginLeft = parseInt(me.editor.document.body.style.marginLeft),
            marginTop = parseInt(me.editor.document.body.style.marginTop);

          marginLeft = isNaN(marginLeft) ? 0 : marginLeft;
          marginTop = isNaN(marginTop) ? 0 : marginTop;

          domUtils.setStyles(me.cover, {
            'width': me.editor.iframe.offsetWidth + 'px',
            'height': me.editor.iframe.offsetHeight + 'px',
            'top': iframePos.y - editorPos.y + marginTop + 'px',
            'left': iframePos.x - editorPos.x + marginLeft + 'px',
            'position': 'absolute',
            'display': ''
          })
        },
        show: function (targetObj) {
          var me = this;
          me.resizer.style.display = 'block';
          if (targetObj) {
            me.attachTo(targetObj);
          }

          domUtils.on(this.resizer, 'mousedown', me.proxy(me._eventHandler, me));
          domUtils.on(me.doc, 'mouseup', me.proxy(me._eventHandler, me));

          me.showCover();
          me.editor.fireEvent('afterscaleshow', me);
          me.editor.fireEvent('saveScene');
        },
        hide: function () {
          var me = this;
          me.hideCover();
          me.resizer.style.display = 'none';

          domUtils.un(me.resizer, 'mousedown', me.proxy(me._eventHandler, me));
          domUtils.un(me.doc, 'mouseup', me.proxy(me._eventHandler, me));
          me.editor.fireEvent('afterscalehide', me);
        },
        proxy: function (fn, context) {
          return function (e) {
            return fn.apply(context || this, arguments);
          };
        },
        attachTo: function (targetObj) {
          var me = this,
            target = me.target = targetObj,
            resizer = this.resizer,
            imgPos = domUtils.getXY(target),
            iframePos = domUtils.getXY(me.editor.iframe),
            editorPos = domUtils.getXY(resizer.parentNode),
            marginLeft = parseInt(me.editor.document.body.style.marginLeft),
            marginTop = parseInt(me.editor.document.body.style.marginTop);

          marginLeft = isNaN(marginLeft) ? 0 : marginLeft;
          marginTop = isNaN(marginTop) ? 0 : marginTop;
          var midWidth = parseInt(me.editor.iframe.offsetWidth - me.editor.document.body.offsetWidth); // 防止图片操作框位置偏移
          domUtils.setStyles(resizer, {
            'width': target.width + 'px',
            'height': target.height + 'px',
            'left': iframePos.x + imgPos.x + midWidth / 2 - me.editor.document.body.scrollLeft - editorPos.x - parseInt(resizer.style.borderLeftWidth) + marginLeft + 'px',
            'top': iframePos.y + imgPos.y - me.editor.document.documentElement.scrollTop - editorPos.y - parseInt(resizer.style.borderTopWidth) + 'px' //iframePos.y + imgPos.y - me.editor.document.body.scrollTop - editorPos.y - parseInt(resizer.style.borderTopWidth) + marginTop + 'px'
          });
        }
      }
    })();

    return function () {
      var me = this,
        imageScale;

      me.setOpt('imageScaleEnabled', true);

      if (!browser.ie && me.options.imageScaleEnabled) {
        me.addListener('click', function (type, e) {

          var range = me.selection.getRange(),
            img = range.getClosedNode();

          if (img && img.tagName == 'IMG' && me.body.contentEditable != "false") {

            if (img.className.indexOf("edui-faked-music") != -1 ||
              img.getAttribute("anchorname") ||
              domUtils.hasClass(img, 'loadingclass') ||
              domUtils.hasClass(img, 'loaderrorclass')) {
              return
            }

            if (!imageScale) {
              imageScale = new Scale();
              imageScale.init(me);
              me.ui.getDom().appendChild(imageScale.resizer);

              var _keyDownHandler = function (e) {
                imageScale.hide();
                if (imageScale.target) {
                  me.selection.getRange().selectNode(imageScale.target).select();
                }
              }, _mouseDownHandler = function (e) {
                var ele = e.target || e.srcElement;
                if (ele && (ele.className === undefined || ele.className.indexOf('edui-editor-imagescale') == -1)) {
                  _keyDownHandler(e);
                }
              }, timer;

              me.addListener('afterscaleshow', function (e) {
                me.addListener('beforekeydown', _keyDownHandler);
                me.addListener('beforemousedown', _mouseDownHandler);
                domUtils.on(document, 'keydown', _keyDownHandler);
                domUtils.on(document, 'mousedown', _mouseDownHandler);
                me.selection.getNative().removeAllRanges();
              });
              me.addListener('afterscalehide', function (e) {
                me.removeListener('beforekeydown', _keyDownHandler);
                me.removeListener('beforemousedown', _mouseDownHandler);
                domUtils.un(document, 'keydown', _keyDownHandler);
                domUtils.un(document, 'mousedown', _mouseDownHandler);
                var target = imageScale.target;
                if (target.parentNode) {
                  me.selection.getRange().selectNode(target).select();
                }
              });
              //TODO 有iframe的情况，mousedown不能往下传。。
              domUtils.on(imageScale.resizer, 'mousedown', function (e) {
                me.selection.getNative().removeAllRanges();
                var ele = e.target || e.srcElement;
                if (ele && ele.className.indexOf('edui-editor-imagescale-hand') == -1) {
                  timer = setTimeout(function () {
                    imageScale.hide();
                    if (imageScale.target) {
                      me.selection.getRange().selectNode(ele).select();
                    }
                  }, 200);
                }
              });
              domUtils.on(imageScale.resizer, 'mouseup', function (e) {
                var ele = e.target || e.srcElement;
                if (ele && ele.className.indexOf('edui-editor-imagescale-hand') == -1) {
                  clearTimeout(timer);
                }
              });
            }
            imageScale.show(img);
          } else {
            if (imageScale && imageScale.resizer.style.display != 'none') {
              imageScale.hide();
            }
          }
        });
      }

      if (browser.webkit) {
        me.addListener('click', function (type, e) {
          if (e.target.tagName == 'IMG' && me.body.contentEditable != "false") {
            var range = new dom.Range(me.document);
            range.selectNode(e.target).select();
          }
        });
      }
    }
  })();

  // plugins/autolink.js
  ///import core
  ///commands 为非ie浏览器自动添加a标签
  ///commandsName  AutoLink
  ///commandsTitle  自动增加链接
  /**
   * @description 为非ie浏览器自动添加a标签
   * @author zhanyi
   */

  AX.plugin.register('autolink', function () {
    var cont = 0;

    return !browser.ie ? {

      bindEvents: {
        'reset': function () {
          cont = 0;
        },
        'keydown': function (type, evt) {
          var me = this;
          var keyCode = evt.keyCode || evt.which;

          if (keyCode == 32 || keyCode == 13) {
            var sel = me.selection.getNative(),
              range = sel.getRangeAt(0).cloneRange(),
              offset,
              charCode;

            var start = range.startContainer;
            while (start.nodeType == 1 && range.startOffset > 0) {
              start = range.startContainer.childNodes[range.startOffset - 1];
              if (!start) {
                break;
              }
              range.setStart(start, start.nodeType == 1 ? start.childNodes.length : start.nodeValue.length);
              range.collapse(true);
              start = range.startContainer;
            }

            do {
              if (range.startOffset == 0) {
                start = range.startContainer.previousSibling;

                while (start && start.nodeType == 1) {
                  start = start.lastChild;
                }
                if (!start || domUtils.isFillChar(start)) {
                  break;
                }
                offset = start.nodeValue.length;
              } else {
                start = range.startContainer;
                offset = range.startOffset;
              }
              range.setStart(start, offset - 1);
              charCode = range.toString().charCodeAt(0);
            } while (charCode != 160 && charCode != 32);

            if (range.toString().replace(new RegExp(domUtils.fillChar, 'g'), '').match(/(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i)) {
              while (range.toString().length) {
                if (/^(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i.test(range.toString())) {
                  break;
                }
                try {
                  range.setStart(range.startContainer, range.startOffset + 1);
                } catch (e) {
                  //trace:2121
                  var start = range.startContainer;
                  while (!(next = start.nextSibling)) {
                    if (domUtils.isBody(start)) {
                      return;
                    }
                    start = start.parentNode;

                  }
                  range.setStart(next, 0);

                }

              }
              //range的开始边界已经在a标签里的不再处理
              if (domUtils.findParentByTagName(range.startContainer, 'a', true)) {
                return;
              }
              var a = me.document.createElement('a'), text = me.document.createTextNode(' '), href;

              me.undoManger && me.undoManger.save();
              a.appendChild(range.extractContents());
              a.href = a.innerHTML = a.innerHTML.replace(/<[^>]+>/g, '');
              href = a.getAttribute("href").replace(new RegExp(domUtils.fillChar, 'g'), '');
              href = /^(?:https?:\/\/)/ig.test(href) ? href : "http://" + href;
              a.setAttribute('_src', utils.html(href));
              a.href = utils.html(href);

              range.insertNode(a);
              a.parentNode.insertBefore(text, a.nextSibling);
              range.setStart(text, 0);
              range.collapse(true);
              sel.removeAllRanges();
              sel.addRange(range);
              me.undoManger && me.undoManger.save();
            }
          }
        }
      }
    } : {}
  }, function () {
    var keyCodes = {
      37: 1, 38: 1, 39: 1, 40: 1,
      13: 1, 32: 1
    };

    function checkIsCludeLink(node) {
      if (node.nodeType == 3) {
        return null
      }
      if (node.nodeName == 'A') {
        return node;
      }
      var lastChild = node.lastChild;

      while (lastChild) {
        if (lastChild.nodeName == 'A') {
          return lastChild;
        }
        if (lastChild.nodeType == 3) {
          if (domUtils.isWhitespace(lastChild)) {
            lastChild = lastChild.previousSibling;
            continue;
          }
          return null
        }
        lastChild = lastChild.lastChild;
      }
    }

    browser.ie && this.addListener('keyup', function (cmd, evt) {
      var me = this, keyCode = evt.keyCode;
      if (keyCodes[keyCode]) {
        var rng = me.selection.getRange();
        var start = rng.startContainer;

        if (keyCode == 13) {
          while (start && !domUtils.isBody(start) && !domUtils.isBlockElm(start)) {
            start = start.parentNode;
          }
          if (start && !domUtils.isBody(start) && start.nodeName == 'P') {
            var pre = start.previousSibling;
            if (pre && pre.nodeType == 1) {
              var pre = checkIsCludeLink(pre);
              if (pre && !pre.getAttribute('_href')) {
                domUtils.remove(pre, true);
              }
            }
          }
        } else if (keyCode == 32) {
          if (start.nodeType == 3 && /^\s$/.test(start.nodeValue)) {
            start = start.previousSibling;
            if (start && start.nodeName == 'A' && !start.getAttribute('_href')) {
              domUtils.remove(start, true);
            }
          }
        } else {
          start = domUtils.findParentByTagName(start, 'a', true);
          if (start && !start.getAttribute('_href')) {
            var bk = rng.createBookmark();

            domUtils.remove(start, true);
            rng.moveToBookmark(bk).select(true)
          }
        }

      }


    });
  }
  );

  // plugins/autoheight.js
  ///import core
  ///commands 当输入内容超过编辑器高度时，编辑器自动增高
  ///commandsName  AutoHeight,autoHeightEnabled
  ///commandsTitle  自动增高
  /**
   * @description 自动伸展
   * @author zhanyi
   */
  AX.plugins['autoheight'] = function () {
    var me = this;
    //提供开关，就算加载也可以关闭
    me.autoHeightEnabled = me.options.autoHeightEnabled !== false;
    if (!me.autoHeightEnabled) {
      return;
    }

    var bakOverflow,
      lastHeight = 0,
      options = me.options,
      currentHeight,
      timer;

    function adjustHeight() {
      var me = this;
      clearTimeout(timer);
      if (isFullscreen) {
        return;
      }
      if (!me.queryCommandState || me.queryCommandState && me.queryCommandState('source') != 1) {
        timer = setTimeout(function () {

          var node = me.body.lastChild;
          while (node && node.nodeType != 1) {
            node = node.previousSibling;
          }
          if (node && node.nodeType == 1) {
            node.style.clear = 'both';
            currentHeight = Math.max(domUtils.getXY(node).y + node.offsetHeight + 25, Math.max(options.minFrameHeight, options.initialFrameHeight));
            if (currentHeight != lastHeight) {
              if (currentHeight !== parseInt(me.iframe.parentNode.style.height)) {
                me.iframe.parentNode.style.height = currentHeight + 'px';
              }
              me.body.style.height = currentHeight + 'px';
              lastHeight = currentHeight;
            }
            domUtils.removeStyle(node, 'clear');
          }


        }, 50)
      }
    }

    var isFullscreen;
    me.addListener('fullscreenchanged', function (cmd, f) {
      isFullscreen = f
    });
    me.addListener('destroy', function () {
      me.removeListener('contentchange afterinserthtml keyup mouseup', adjustHeight)
    });
    me.enableAutoHeight = function () {
      var me = this;
      if (!me.autoHeightEnabled) {
        return;
      }
      var doc = me.document;
      me.autoHeightEnabled = true;
      bakOverflow = doc.body.style.overflowY;
      doc.body.style.overflowY = 'hidden';
      me.addListener('contentchange afterinserthtml keyup mouseup', adjustHeight);
      //ff不给事件算得不对

      setTimeout(function () {
        adjustHeight.call(me);
      }, browser.gecko ? 100 : 0);
      me.fireEvent('autoheightchanged', me.autoHeightEnabled);
    };
    me.disableAutoHeight = function () {

      me.body.style.overflowY = bakOverflow || '';

      me.removeListener('contentchange', adjustHeight);
      me.removeListener('keyup', adjustHeight);
      me.removeListener('mouseup', adjustHeight);
      me.autoHeightEnabled = false;
      me.fireEvent('autoheightchanged', me.autoHeightEnabled);
    };

    me.on('setHeight', function () {
      me.disableAutoHeight()
    });
    me.addListener('ready', function () {
      me.enableAutoHeight();
      //trace:1764
      var timer;
      domUtils.on(browser.ie ? me.body : me.document, browser.webkit ? 'dragover' : 'drop', function () {
        clearTimeout(timer);
        timer = setTimeout(function () {
          //trace:3681
          adjustHeight.call(me);
        }, 100);

      });
      //修复内容过多时，回到顶部，顶部内容被工具栏遮挡问题
      var lastScrollY;
      window.onscroll = function () {
        if (lastScrollY === null) {
          lastScrollY = this.scrollY
        } else if (this.scrollY == 0 && lastScrollY != 0) {
          me.window.scrollTo(0, 0);
          lastScrollY = null;
        }
      }
    });
  };


  // plugins/autofloat.js
  ///import core
  ///commands 悬浮工具栏
  ///commandsName  AutoFloat,autoFloatEnabled
  ///commandsTitle  悬浮工具栏
  /**
   *  modified by chengchao01
   *  注意： 引入此功能后，在IE6下会将body的背景图片覆盖掉！
   */
  AX.plugins['autofloat'] = function () {
    var me = this,
      lang = me.getLang();
    me.setOpt({
      topOffset: 0
    });
    var optsAutoFloatEnabled = me.options.autoFloatEnabled !== false,
      topOffset = me.options.topOffset;


    //如果不固定toolbar的位置，则直接退出
    if (!optsAutoFloatEnabled) {
      return;
    }
    var uiUtils = AX.ui.uiUtils,
      LteIE6 = browser.ie && browser.version <= 6,
      quirks = browser.quirks;

    function checkHasUI() {
      if (!AX.ui) {
        alert(lang.autofloatMsg);
        return 0;
      }
      return 1;
    }

    function fixIE6FixedPos() {
      var docStyle = document.body.style;
      docStyle.backgroundImage = 'url("about:blank")';
      docStyle.backgroundAttachment = 'fixed';
    }

    var bakCssText,
      placeHolder = document.createElement('div'),
      toolbarBox, orgTop,
      getPosition,
      flag = true; //ie7模式下需要偏移
    function setFloating() {
      var toobarBoxPos = domUtils.getXY(toolbarBox),
        origalFloat = domUtils.getComputedStyle(toolbarBox, 'position'),
        origalLeft = domUtils.getComputedStyle(toolbarBox, 'left');
      toolbarBox.style.width = toolbarBox.offsetWidth + 'px';
      toolbarBox.style.zIndex = me.options.zIndex * 1 + 1;
      toolbarBox.parentNode.insertBefore(placeHolder, toolbarBox);
      if (LteIE6 || quirks && browser.ie) {
        if (toolbarBox.style.position != 'absolute') {
          toolbarBox.style.position = 'absolute';
        }
        toolbarBox.style.top = (document.body.scrollTop || document.documentElement.scrollTop) - orgTop + topOffset + 'px';
      } else {
        if (browser.ie7Compat && flag) {
          flag = false;
          toolbarBox.style.left = domUtils.getXY(toolbarBox).x - document.documentElement.getBoundingClientRect().left + 2 + 'px';
        }
        if (toolbarBox.style.position != 'fixed') {
          toolbarBox.style.position = 'fixed';
          toolbarBox.style.top = topOffset + "px";
          (origalFloat == 'absolute' || origalFloat == 'relative') && parseFloat(origalLeft) && (toolbarBox.style.left = toobarBoxPos.x + 'px');
        }
      }
    }

    function unsetFloating() {
      flag = true;
      if (placeHolder.parentNode) {
        placeHolder.parentNode.removeChild(placeHolder);
      }

      toolbarBox.style.cssText = bakCssText;
    }

    function updateFloating() {
      var rect3 = getPosition(me.container);
      var offset = me.options.toolbarTopOffset || 0;
      if (rect3.top < 0 && rect3.bottom - toolbarBox.offsetHeight > offset) {
        setFloating();
      } else {
        unsetFloating();
      }
    }

    var defer_updateFloating = utils.defer(function () {
      updateFloating();
    }, browser.ie ? 200 : 100, true);

    me.addListener('destroy', function () {
      domUtils.un(window, ['scroll', 'resize'], updateFloating);
      me.removeListener('keydown', defer_updateFloating);
    });

    me.addListener('ready', function () {
      if (checkHasUI(me)) {
        //加载了ui组件，但在new时，没有加载ui，导致编辑器实例上没有ui类，所以这里做判断
        if (!me.ui) {
          return;
        }
        getPosition = uiUtils.getClientRect;
        toolbarBox = me.ui.getDom('toolbarbox');
        orgTop = getPosition(toolbarBox).top;
        bakCssText = toolbarBox.style.cssText;
        placeHolder.style.height = toolbarBox.offsetHeight + 'px';
        if (LteIE6) {
          fixIE6FixedPos();
        }
        domUtils.on(window, ['scroll', 'resize'], updateFloating);
        me.addListener('keydown', defer_updateFloating);

        me.addListener('beforefullscreenchange', function (t, enabled) {
          if (enabled) {
            unsetFloating();
          }
        });
        me.addListener('fullscreenchanged', function (t, enabled) {
          if (!enabled) {
            updateFloating();
          }
        });
        me.addListener('sourcemodechanged', function (t, enabled) {
          setTimeout(function () {
            updateFloating();
          }, 0);
        });
        me.addListener("clearDoc", function () {
          setTimeout(function () {
            updateFloating();
          }, 0);

        })
      }
    });
  };


  // plugins/video.js
  /**
   * video插件， 为UEditor提供视频插入支持
   * @file
   * @since 1.2.6.1
   */

  AX.plugins['video'] = function () {
    var me = this;

    /**
     * 创建插入视频字符窜
     * @param url 视频地址
     * @param width 视频宽度
     * @param height 视频高度
     * @param align 视频对齐
     * @param toEmbed 是否以flash代替显示
     * @param addParagraph  是否需要添加P 标签
     */
    function creatInsertStr(url, width, height, id, align, classname, type) {

      url = utils.unhtmlForUrl(url);
      align = utils.unhtml(align);
      classname = utils.unhtml(classname);

      width = parseInt(width, 10) || 0;
      height = parseInt(height, 10) || 0;

      var str;
      switch (type) {
        case 'image':
          str = '<img ' + (id ? 'id="' + id + '"' : '') + ' width="' + width + '" height="' + height + '" _url="' + url + '" class="' + classname.replace(/\bvideo-js\b/, '') + '"' +
            ' src="' + me.options.AXEDITOR_HOME_URL + 'themes/default/images/spacer.gif" style="background:url(' + me.options.AXEDITOR_HOME_URL + 'themes/default/images/videologo.gif) no-repeat center center; border:1px solid gray;' + (align ? 'float:' + align + ';' : '') + '" />'
          break;
        case 'embed':
          str = '<embed type="application/x-shockwave-flash" class="' + classname + '" pluginspage="http://www.macromedia.com/go/getflashplayer"' +
            ' src="' + utils.html(url) + '" width="' + width + '" height="' + height + '"' + (align ? ' style="float:' + align + '"' : '') +
            ' wmode="transparent" play="true" loop="false" menu="false" allowscriptaccess="never" allowfullscreen="true" >';
          break;
        case 'video':
          var ext = url.substr(url.lastIndexOf('.') + 1);
          if (ext == 'ogv') {
            ext = 'ogg';
          }
          str = '<video' + (id ? ' id="' + id + '"' : '') + ' class="' + classname + ' video-js" ' + (align ? ' style="float:' + align + '"' : '') +
            ' controls preload="none" width="' + width + '" height="' + height + '" src="' + url + '" data-setup="{}">' +
            '<source src="' + url + '" type="video/' + ext + '" /></video>';
          break;
      }
      return str;
    }

    function switchImgAndVideo(root, img2video) {
      utils.each(root.getNodesByTagName(img2video ? 'img' : 'embed video'), function (node) {
        var className = node.getAttr('class');
        if (className && className.indexOf('edui-faked-video') != -1) {
          var html = creatInsertStr(img2video ? node.getAttr('_url') : node.getAttr('src'), node.getAttr('width'), node.getAttr('height'), null, node.getStyle('float') || '', className, img2video ? 'embed' : 'image');
          node.parentNode.replaceChild(AX.uNode.createElement(html), node);
        }
        if (className && className.indexOf('edui-upload-video') != -1) {
          var html = creatInsertStr(img2video ? node.getAttr('_url') : node.getAttr('src'), node.getAttr('width'), node.getAttr('height'), null, node.getStyle('float') || '', className, img2video ? 'video' : 'image');
          node.parentNode.replaceChild(AX.uNode.createElement(html), node);
        }
      })
    }

    me.addOutputRule(function (root) {
      switchImgAndVideo(root, true)
    });
    me.addInputRule(function (root) {
      switchImgAndVideo(root)
    });

    /**
     * 插入视频
     * @command insertvideo
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @param { Object } videoAttr 键值对对象， 描述一个视频的所有属性
     * @example
     * ```javascript
     *
     * var videoAttr = {
     *      //视频地址
     *      url: 'http://www.youku.com/xxx',
     *      //视频宽高值， 单位px
     *      width: 200,
     *      height: 100
     * };
     *
     * //editor 是编辑器实例
     * //向编辑器插入单个视频
     * editor.execCommand( 'insertvideo', videoAttr );
     * ```
     */

    /**
     * 插入视频
     * @command insertvideo
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @param { Array } videoArr 需要插入的视频的数组， 其中的每一个元素都是一个键值对对象， 描述了一个视频的所有属性
     * @example
     * ```javascript
     *
     * var videoAttr1 = {
     *      //视频地址
     *      url: 'http://www.youku.com/xxx',
     *      //视频宽高值， 单位px
     *      width: 200,
     *      height: 100
     * },
     * videoAttr2 = {
     *      //视频地址
     *      url: 'http://www.youku.com/xxx',
     *      //视频宽高值， 单位px
     *      width: 200,
     *      height: 100
     * }
     *
     * //editor 是编辑器实例
     * //该方法将会向编辑器内插入两个视频
     * editor.execCommand( 'insertvideo', [ videoAttr1, videoAttr2 ] );
     * ```
     */

    /**
     * 查询当前光标所在处是否是一个视频
     * @command insertvideo
     * @method queryCommandState
     * @param { String } cmd 需要查询的命令字符串
     * @return { int } 如果当前光标所在处的元素是一个视频对象， 则返回1，否则返回0
     * @example
     * ```javascript
     *
     * //editor 是编辑器实例
     * editor.queryCommandState( 'insertvideo' );
     * ```
     */
    me.commands["insertvideo"] = {
      execCommand: function (cmd, videoObjs, type) {
        videoObjs = utils.isArray(videoObjs) ? videoObjs : [videoObjs];
        var html = [], id = 'tmpVedio', cl;
        for (var i = 0, vi, len = videoObjs.length; i < len; i++) {
          vi = videoObjs[i];
          cl = type == 'upload' ? 'edui-upload-video video-js vjs-default-skin' : 'edui-faked-video';
          html.push(creatInsertStr(vi.url, vi.width || 420, vi.height || 280, id + i, null, cl, 'image'));
        }
        me.execCommand("inserthtml", html.join(""), true);
        var rng = this.selection.getRange();
        for (var i = 0, len = videoObjs.length; i < len; i++) {
          var img = this.document.getElementById('tmpVedio' + i);
          domUtils.removeAttributes(img, 'id');
          rng.selectNode(img).select();
          me.execCommand('imagefloat', videoObjs[i].align)
        }
      },
      queryCommandState: function () {
        var img = me.selection.getRange().getClosedNode(),
          flag = img && (img.className == "edui-faked-video" || img.className.indexOf("edui-upload-video") != -1);
        return flag ? 1 : 0;
      }
    };
  };


  // plugins/table.core.js
  /**
   * Created with JetBrains WebStorm.
   * User: taoqili
   * Date: 13-1-18
   * Time: 上午11:09
   * To change this template use File | Settings | File Templates.
   */
  /**
   * UE表格操作类
   * @param table
   * @constructor
   */
  (function () {
    var UETable = AX.UETable = function (table) {
      this.table = table;
      this.indexTable = [];
      this.selectedTds = [];
      this.cellsRange = {};
      this.update(table);
    };

    //===以下为静态工具方法===
    UETable.removeSelectedClass = function (cells) {
      utils.each(cells, function (cell) {
        domUtils.removeClasses(cell, "selectTdClass");
      })
    };
    UETable.addSelectedClass = function (cells) {
      utils.each(cells, function (cell) {
        domUtils.addClass(cell, "selectTdClass");
      })
    };
    UETable.isEmptyBlock = function (node) {
      var reg = new RegExp(domUtils.fillChar, 'g');
      if (node[browser.ie ? 'innerText' : 'textContent'].replace(/^\s*$/, '').replace(reg, '').length > 0) {
        return 0;
      }
      for (var i in dtd.$isNotEmpty) {
        if (dtd.$isNotEmpty.hasOwnProperty(i)) {
          if (node.getElementsByTagName(i).length) {
            return 0;
          }
        }
      }
      return 1;
    };
    UETable.getWidth = function (cell) {
      if (!cell) {
        return 0;
      }
      return parseInt(domUtils.getComputedStyle(cell, "width"), 10);
    };

    /**
     * 获取单元格或者单元格组的“对齐”状态。 如果当前的检测对象是一个单元格组， 只有在满足所有单元格的 水平和竖直 对齐属性都相同的
     * 条件时才会返回其状态值，否则将返回null； 如果当前只检测了一个单元格， 则直接返回当前单元格的对齐状态；
     * @param table cell or table cells , 支持单个单元格dom对象 或者 单元格dom对象数组
     * @return { align: 'left' || 'right' || 'center', valign: 'top' || 'middle' || 'bottom' } 或者 null
     */
    UETable.getTableCellAlignState = function (cells) {

      !utils.isArray(cells) && (cells = [cells]);

      var result = {},
        status = ['align', 'valign'],
        tempStatus = null,
        isSame = true;//状态是否相同

      utils.each(cells, function (cellNode) {

        utils.each(status, function (currentState) {

          tempStatus = cellNode.getAttribute(currentState);

          if (!result[currentState] && tempStatus) {
            result[currentState] = tempStatus;
          } else if (!result[currentState] || tempStatus !== result[currentState]) {
            isSame = false;
            return false;
          }

        });

        return isSame;

      });

      return isSame ? result : null;

    };

    /**
     * 根据当前选区获取相关的table信息
     * @return {Object}
     */
    UETable.getTableItemsByRange = function (editor) {
      var start = editor.selection.getStart();

      //ff下会选中bookmark
      if (start && start.id && start.id.indexOf('_baidu_bookmark_start_') === 0 && start.nextSibling) {
        start = start.nextSibling;
      }

      //在table或者td边缘有可能存在选中tr的情况
      var cell = start && domUtils.findParentByTagName(start, ["td", "th"], true),
        tr = cell && cell.parentNode,
        caption = start && domUtils.findParentByTagName(start, 'caption', true),
        table = caption ? caption.parentNode : tr && tr.parentNode.parentNode;

      return {
        cell: cell,
        tr: tr,
        table: table,
        caption: caption
      }
    };
    UETable.getUETableBySelected = function (editor) {
      var table = UETable.getTableItemsByRange(editor).table;
      if (table && table.ueTable && table.ueTable.selectedTds.length) {
        return table.ueTable;
      }
      return null;
    };

    UETable.getDefaultValue = function (editor, table) {
      var borderMap = {
        thin: '0px',
        medium: '1px',
        thick: '2px'
      },
        tableBorder, tdPadding, tdBorder, tmpValue;
      if (!table) {
        table = editor.document.createElement('table');
        table.insertRow(0).insertCell(0).innerHTML = 'xxx';
        editor.body.appendChild(table);
        var td = table.getElementsByTagName('td')[0];
        tmpValue = domUtils.getComputedStyle(table, 'border-left-width');
        tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
        tmpValue = domUtils.getComputedStyle(td, 'padding-left');
        tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
        tmpValue = domUtils.getComputedStyle(td, 'border-left-width');
        tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
        domUtils.remove(table);
        return {
          tableBorder: tableBorder,
          tdPadding: tdPadding,
          tdBorder: tdBorder
        };
      }
      td = table.getElementsByTagName('td')[0];
      tmpValue = domUtils.getComputedStyle(table, 'border-left-width');
      tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
      tmpValue = domUtils.getComputedStyle(td, 'padding-left');
      tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
      tmpValue = domUtils.getComputedStyle(td, 'border-left-width');
      tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
      return {
        tableBorder: tableBorder,
        tdPadding: tdPadding,
        tdBorder: tdBorder
      };

    };
    /**
     * 根据当前点击的td或者table获取索引对象
     * @param tdOrTable
     */
    UETable.getUETable = function (tdOrTable) {
      var tag = tdOrTable.tagName.toLowerCase();
      tdOrTable = tag == "td" || tag == "th" || tag == 'caption' ? domUtils.findParentByTagName(tdOrTable, "table", true) : tdOrTable;
      if (!tdOrTable.ueTable) {
        tdOrTable.ueTable = new UETable(tdOrTable);
      }
      return tdOrTable.ueTable;
    };

    UETable.cloneCell = function (cell, ignoreMerge, keepPro) {
      if (!cell || utils.isString(cell)) {
        return this.table.ownerDocument.createElement(cell || 'td');
      }
      var flag = domUtils.hasClass(cell, "selectTdClass");
      flag && domUtils.removeClasses(cell, "selectTdClass");
      var tmpCell = cell.cloneNode(true);
      if (ignoreMerge) {
        tmpCell.rowSpan = tmpCell.colSpan = 1;
      }
      //去掉宽高
      !keepPro && domUtils.removeAttributes(tmpCell, 'width height');
      !keepPro && domUtils.removeAttributes(tmpCell, 'style');

      tmpCell.style.borderLeftStyle = "";
      tmpCell.style.borderTopStyle = "";
      tmpCell.style.borderLeftColor = cell.style.borderRightColor;
      tmpCell.style.borderLeftWidth = cell.style.borderRightWidth;
      tmpCell.style.borderTopColor = cell.style.borderBottomColor;
      tmpCell.style.borderTopWidth = cell.style.borderBottomWidth;
      flag && domUtils.addClass(cell, "selectTdClass");
      return tmpCell;
    }

    UETable.prototype = {
      getMaxRows: function () {
        var rows = this.table.rows, maxLen = 1;
        for (var i = 0, row; row = rows[i]; i++) {
          var currentMax = 1;
          for (var j = 0, cj; cj = row.cells[j++];) {
            currentMax = Math.max(cj.rowSpan || 1, currentMax);
          }
          maxLen = Math.max(currentMax + i, maxLen);
        }
        return maxLen;
      },
      /**
       * 获取当前表格的最大列数
       */
      getMaxCols: function () {
        var rows = this.table.rows, maxLen = 0, cellRows = {};
        for (var i = 0, row; row = rows[i]; i++) {
          var cellsNum = 0;
          for (var j = 0, cj; cj = row.cells[j++];) {
            cellsNum += cj.colSpan || 1;
            if (cj.rowSpan && cj.rowSpan > 1) {
              for (var k = 1; k < cj.rowSpan; k++) {
                if (!cellRows['row_' + (i + k)]) {
                  cellRows['row_' + (i + k)] = cj.colSpan || 1;
                } else {
                  cellRows['row_' + (i + k)]++
                }
              }

            }
          }
          cellsNum += cellRows['row_' + i] || 0;
          maxLen = Math.max(cellsNum, maxLen);
        }
        return maxLen;
      },
      getCellColIndex: function (cell) {

      },
      /**
       * 获取当前cell旁边的单元格，
       * @param cell
       * @param right
       */
      getHSideCell: function (cell, right) {
        try {
          var cellInfo = this.getCellInfo(cell),
            previewRowIndex, previewColIndex;
          var len = this.selectedTds.length,
            range = this.cellsRange;
          //首行或者首列没有前置单元格
          if (!right && (!len ? !cellInfo.colIndex : !range.beginColIndex) || right && (!len ? cellInfo.colIndex == this.colsNum - 1 : range.endColIndex == this.colsNum - 1)) {
            return null;
          }

          previewRowIndex = !len ? cellInfo.rowIndex : range.beginRowIndex;
          previewColIndex = !right ? !len ? cellInfo.colIndex < 1 ? 0 : cellInfo.colIndex - 1 : range.beginColIndex - 1
            : !len ? cellInfo.colIndex + 1 : range.endColIndex + 1;
          return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
        } catch (e) {
          showError(e);
        }
      },
      getTabNextCell: function (cell, preRowIndex) {
        var cellInfo = this.getCellInfo(cell),
          rowIndex = preRowIndex || cellInfo.rowIndex,
          colIndex = cellInfo.colIndex + 1 + (cellInfo.colSpan - 1),
          nextCell;
        try {
          nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
        } catch (e) {
          try {
            rowIndex = rowIndex * 1 + 1;
            colIndex = 0;
            nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
          } catch (e) {
          }
        }
        return nextCell;

      },
      /**
       * 获取视觉上的后置单元格
       * @param cell
       * @param bottom
       */
      getVSideCell: function (cell, bottom, ignoreRange) {
        try {
          var cellInfo = this.getCellInfo(cell),
            nextRowIndex, nextColIndex;
          var len = this.selectedTds.length && !ignoreRange,
            range = this.cellsRange;
          //末行或者末列没有后置单元格
          if (!bottom && cellInfo.rowIndex == 0 || bottom && (!len ? cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1 : range.endRowIndex == this.rowsNum - 1)) {
            return null;
          }

          nextRowIndex = !bottom ? !len ? cellInfo.rowIndex - 1 : range.beginRowIndex - 1
            : !len ? cellInfo.rowIndex + cellInfo.rowSpan : range.endRowIndex + 1;
          nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
          return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
        } catch (e) {
          showError(e);
        }
      },
      /**
       * 获取相同结束位置的单元格，xOrY指代了是获取x轴相同还是y轴相同
       */
      getSameEndPosCells: function (cell, xOrY) {
        try {
          var flag = xOrY.toLowerCase() === "x",
            end = domUtils.getXY(cell)[flag ? 'x' : 'y'] + cell["offset" + (flag ? 'Width' : 'Height')],
            rows = this.table.rows,
            cells = null, returns = [];
          for (var i = 0; i < this.rowsNum; i++) {
            cells = rows[i].cells;
            for (var j = 0, tmpCell; tmpCell = cells[j++];) {
              var tmpEnd = domUtils.getXY(tmpCell)[flag ? 'x' : 'y'] + tmpCell["offset" + (flag ? 'Width' : 'Height')];
              //对应行的td已经被上面行rowSpan了
              if (tmpEnd > end && flag) {
                break;
              }
              if (cell == tmpCell || end == tmpEnd) {
                //只获取单一的单元格
                //todo 仅获取单一单元格在特定情况下会造成returns为空，从而影响后续的拖拽实现，修正这个。需考虑性能
                if (tmpCell[flag ? "colSpan" : "rowSpan"] == 1) {
                  returns.push(tmpCell);
                }
                if (flag) {
                  break;
                }
              }
            }
          }
          return returns;
        } catch (e) {
          showError(e);
        }
      },
      setCellContent: function (cell, content) {
        cell.innerHTML = content || (browser.ie ? domUtils.fillChar : "<br />");
      },
      cloneCell: UETable.cloneCell,
      /**
       * 获取跟当前单元格的右边竖线为左边的所有未合并单元格
       */
      getSameStartPosXCells: function (cell) {
        try {
          var start = domUtils.getXY(cell).x + cell.offsetWidth,
            rows = this.table.rows, cells, returns = [];
          for (var i = 0; i < this.rowsNum; i++) {
            cells = rows[i].cells;
            for (var j = 0, tmpCell; tmpCell = cells[j++];) {
              var tmpStart = domUtils.getXY(tmpCell).x;
              if (tmpStart > start) {
                break;
              }
              if (tmpStart == start && tmpCell.colSpan == 1) {
                returns.push(tmpCell);
                break;
              }
            }
          }
          return returns;
        } catch (e) {
          showError(e);
        }
      },
      /**
       * 更新table对应的索引表
       */
      update: function (table) {
        this.table = table || this.table;
        this.selectedTds = [];
        this.cellsRange = {};
        this.indexTable = [];
        var rows = this.table.rows,
          rowsNum = this.getMaxRows(),
          dNum = rowsNum - rows.length,
          colsNum = this.getMaxCols();
        while (dNum--) {
          this.table.insertRow(rows.length);
        }
        this.rowsNum = rowsNum;
        this.colsNum = colsNum;
        for (var i = 0, len = rows.length; i < len; i++) {
          this.indexTable[i] = new Array(colsNum);
        }
        //填充索引表
        for (var rowIndex = 0, row; row = rows[rowIndex]; rowIndex++) {
          for (var cellIndex = 0, cell, cells = row.cells; cell = cells[cellIndex]; cellIndex++) {
            //修正整行被rowSpan时导致的行数计算错误
            if (cell.rowSpan > rowsNum) {
              cell.rowSpan = rowsNum;
            }
            var colIndex = cellIndex,
              rowSpan = cell.rowSpan || 1,
              colSpan = cell.colSpan || 1;
            //当已经被上一行rowSpan或者被前一列colSpan了，则跳到下一个单元格进行
            while (this.indexTable[rowIndex][colIndex]) {
              colIndex++;
            }
            for (var j = 0; j < rowSpan; j++) {
              for (var k = 0; k < colSpan; k++) {
                this.indexTable[rowIndex + j][colIndex + k] = {
                  rowIndex: rowIndex,
                  cellIndex: cellIndex,
                  colIndex: colIndex,
                  rowSpan: rowSpan,
                  colSpan: colSpan
                }
              }
            }
          }
        }
        //修复残缺td
        for (j = 0; j < rowsNum; j++) {
          for (k = 0; k < colsNum; k++) {
            if (this.indexTable[j][k] === undefined) {
              row = rows[j];
              cell = row.cells[row.cells.length - 1];
              cell = cell ? cell.cloneNode(true) : this.table.ownerDocument.createElement("td");
              this.setCellContent(cell);
              if (cell.colSpan !== 1) {
                cell.colSpan = 1;
              }
              if (cell.rowSpan !== 1) {
                cell.rowSpan = 1;
              }
              row.appendChild(cell);
              this.indexTable[j][k] = {
                rowIndex: j,
                cellIndex: cell.cellIndex,
                colIndex: k,
                rowSpan: 1,
                colSpan: 1
              }
            }
          }
        }
        //当框选后删除行或者列后撤销，需要重建选区。
        var tds = domUtils.getElementsByTagName(this.table, "td"),
          selectTds = [];
        utils.each(tds, function (td) {
          if (domUtils.hasClass(td, "selectTdClass")) {
            selectTds.push(td);
          }
        });
        if (selectTds.length) {
          var start = selectTds[0],
            end = selectTds[selectTds.length - 1],
            startInfo = this.getCellInfo(start),
            endInfo = this.getCellInfo(end);
          this.selectedTds = selectTds;
          this.cellsRange = {
            beginRowIndex: startInfo.rowIndex,
            beginColIndex: startInfo.colIndex,
            endRowIndex: endInfo.rowIndex + endInfo.rowSpan - 1,
            endColIndex: endInfo.colIndex + endInfo.colSpan - 1
          };
        }
        //给第一行设置firstRow的样式名称,在排序图标的样式上使用到
        if (!domUtils.hasClass(this.table.rows[0], "firstRow")) {
          domUtils.addClass(this.table.rows[0], "firstRow");
          for (var i = 1; i < this.table.rows.length; i++) {
            domUtils.removeClasses(this.table.rows[i], "firstRow");
          }
        }
      },
      /**
       * 获取单元格的索引信息
       */
      getCellInfo: function (cell) {
        if (!cell) {
          return;
        }
        var cellIndex = cell.cellIndex,
          rowIndex = cell.parentNode.rowIndex,
          rowInfo = this.indexTable[rowIndex],
          numCols = this.colsNum;
        for (var colIndex = cellIndex; colIndex < numCols; colIndex++) {
          var cellInfo = rowInfo[colIndex];
          if (cellInfo.rowIndex === rowIndex && cellInfo.cellIndex === cellIndex) {
            return cellInfo;
          }
        }
      },
      /**
       * 根据行列号获取单元格
       */
      getCell: function (rowIndex, cellIndex) {
        return rowIndex < this.rowsNum && this.table.rows[rowIndex].cells[cellIndex] || null;
      },
      /**
       * 删除单元格
       */
      deleteCell: function (cell, rowIndex) {
        rowIndex = typeof rowIndex == 'number' ? rowIndex : cell.parentNode.rowIndex;
        var row = this.table.rows[rowIndex];
        row.deleteCell(cell.cellIndex);
      },
      /**
       * 根据始末两个单元格获取被框选的所有单元格范围
       */
      getCellsRange: function (cellA, cellB) {
        function checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex) {
          var tmpBeginRowIndex = beginRowIndex,
            tmpBeginColIndex = beginColIndex,
            tmpEndRowIndex = endRowIndex,
            tmpEndColIndex = endColIndex,
            cellInfo, colIndex, rowIndex;
          // 通过indexTable检查是否存在超出TableRange上边界的情况
          if (beginRowIndex > 0) {
            for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
              cellInfo = me.indexTable[beginRowIndex][colIndex];
              rowIndex = cellInfo.rowIndex;
              if (rowIndex < beginRowIndex) {
                tmpBeginRowIndex = Math.min(rowIndex, tmpBeginRowIndex);
              }
            }
          }
          // 通过indexTable检查是否存在超出TableRange右边界的情况
          if (endColIndex < me.colsNum) {
            for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
              cellInfo = me.indexTable[rowIndex][endColIndex];
              colIndex = cellInfo.colIndex + cellInfo.colSpan - 1;
              if (colIndex > endColIndex) {
                tmpEndColIndex = Math.max(colIndex, tmpEndColIndex);
              }
            }
          }
          // 检查是否有超出TableRange下边界的情况
          if (endRowIndex < me.rowsNum) {
            for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
              cellInfo = me.indexTable[endRowIndex][colIndex];
              rowIndex = cellInfo.rowIndex + cellInfo.rowSpan - 1;
              if (rowIndex > endRowIndex) {
                tmpEndRowIndex = Math.max(rowIndex, tmpEndRowIndex);
              }
            }
          }
          // 检查是否有超出TableRange左边界的情况
          if (beginColIndex > 0) {
            for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
              cellInfo = me.indexTable[rowIndex][beginColIndex];
              colIndex = cellInfo.colIndex;
              if (colIndex < beginColIndex) {
                tmpBeginColIndex = Math.min(cellInfo.colIndex, tmpBeginColIndex);
              }
            }
          }
          //递归调用直至所有完成所有框选单元格的扩展
          if (tmpBeginRowIndex != beginRowIndex || tmpBeginColIndex != beginColIndex || tmpEndRowIndex != endRowIndex || tmpEndColIndex != endColIndex) {
            return checkRange(tmpBeginRowIndex, tmpBeginColIndex, tmpEndRowIndex, tmpEndColIndex);
          }
          // 不需要扩展TableRange的情况
          return {
            beginRowIndex: beginRowIndex,
            beginColIndex: beginColIndex,
            endRowIndex: endRowIndex,
            endColIndex: endColIndex
          };

        }

        try {
          var me = this,
            cellAInfo = me.getCellInfo(cellA);
          if (cellA === cellB) {
            return {
              beginRowIndex: cellAInfo.rowIndex,
              beginColIndex: cellAInfo.colIndex,
              endRowIndex: cellAInfo.rowIndex + cellAInfo.rowSpan - 1,
              endColIndex: cellAInfo.colIndex + cellAInfo.colSpan - 1
            };
          }
          var cellBInfo = me.getCellInfo(cellB);
          // 计算TableRange的四个边
          var beginRowIndex = Math.min(cellAInfo.rowIndex, cellBInfo.rowIndex),
            beginColIndex = Math.min(cellAInfo.colIndex, cellBInfo.colIndex),
            endRowIndex = Math.max(cellAInfo.rowIndex + cellAInfo.rowSpan - 1, cellBInfo.rowIndex + cellBInfo.rowSpan - 1),
            endColIndex = Math.max(cellAInfo.colIndex + cellAInfo.colSpan - 1, cellBInfo.colIndex + cellBInfo.colSpan - 1);

          return checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex);
        } catch (e) {
          //throw e;
        }
      },
      /**
       * 依据cellsRange获取对应的单元格集合
       */
      getCells: function (range) {
        //每次获取cells之前必须先清除上次的选择，否则会对后续获取操作造成影响
        this.clearSelected();
        var beginRowIndex = range.beginRowIndex,
          beginColIndex = range.beginColIndex,
          endRowIndex = range.endRowIndex,
          endColIndex = range.endColIndex,
          cellInfo, rowIndex, colIndex, tdHash = {}, returnTds = [];
        for (var i = beginRowIndex; i <= endRowIndex; i++) {
          for (var j = beginColIndex; j <= endColIndex; j++) {
            cellInfo = this.indexTable[i][j];
            rowIndex = cellInfo.rowIndex;
            colIndex = cellInfo.colIndex;
            // 如果Cells里已经包含了此Cell则跳过
            var key = rowIndex + '|' + colIndex;
            if (tdHash[key]) {
              continue;
            }
            tdHash[key] = 1;
            if (rowIndex < i || colIndex < j || rowIndex + cellInfo.rowSpan - 1 > endRowIndex || colIndex + cellInfo.colSpan - 1 > endColIndex) {
              return null;
            }
            returnTds.push(this.getCell(rowIndex, cellInfo.cellIndex));
          }
        }
        return returnTds;
      },
      /**
       * 清理已经选中的单元格
       */
      clearSelected: function () {
        UETable.removeSelectedClass(this.selectedTds);
        this.selectedTds = [];
        this.cellsRange = {};
      },
      /**
       * 根据range设置已经选中的单元格
       */
      setSelected: function (range) {
        var cells = this.getCells(range);
        UETable.addSelectedClass(cells);
        this.selectedTds = cells;
        this.cellsRange = range;
      },
      isFullRow: function () {
        var range = this.cellsRange;
        return range.endColIndex - range.beginColIndex + 1 == this.colsNum;
      },
      isFullCol: function () {
        var range = this.cellsRange,
          table = this.table,
          ths = table.getElementsByTagName("th"),
          rows = range.endRowIndex - range.beginRowIndex + 1;
        return !ths.length ? rows == this.rowsNum : rows == this.rowsNum || rows == this.rowsNum - 1;

      },
      /**
       * 获取视觉上的前置单元格，默认是左边，top传入时
       * @param cell
       * @param top
       */
      getNextCell: function (cell, bottom, ignoreRange) {
        try {
          var cellInfo = this.getCellInfo(cell),
            nextRowIndex, nextColIndex;
          var len = this.selectedTds.length && !ignoreRange,
            range = this.cellsRange;
          //末行或者末列没有后置单元格
          if (!bottom && cellInfo.rowIndex == 0 || bottom && (!len ? cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1 : range.endRowIndex == this.rowsNum - 1)) {
            return null;
          }

          nextRowIndex = !bottom ? !len ? cellInfo.rowIndex - 1 : range.beginRowIndex - 1
            : !len ? cellInfo.rowIndex + cellInfo.rowSpan : range.endRowIndex + 1;
          nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
          return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
        } catch (e) {
          showError(e);
        }
      },
      getPreviewCell: function (cell, top) {
        try {
          var cellInfo = this.getCellInfo(cell),
            previewRowIndex, previewColIndex;
          var len = this.selectedTds.length,
            range = this.cellsRange;
          //首行或者首列没有前置单元格
          if (!top && (!len ? !cellInfo.colIndex : !range.beginColIndex) || top && (!len ? cellInfo.rowIndex > this.colsNum - 1 : range.endColIndex == this.colsNum - 1)) {
            return null;
          }

          previewRowIndex = !top ? !len ? cellInfo.rowIndex : range.beginRowIndex
            : !len ? cellInfo.rowIndex < 1 ? 0 : cellInfo.rowIndex - 1 : range.beginRowIndex;
          previewColIndex = !top ? !len ? cellInfo.colIndex < 1 ? 0 : cellInfo.colIndex - 1 : range.beginColIndex - 1
            : !len ? cellInfo.colIndex : range.endColIndex + 1;
          return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
        } catch (e) {
          showError(e);
        }
      },
      /**
       * 移动单元格中的内容
       */
      moveContent: function (cellTo, cellFrom) {
        if (UETable.isEmptyBlock(cellFrom)) {
          return;
        }
        if (UETable.isEmptyBlock(cellTo)) {
          cellTo.innerHTML = cellFrom.innerHTML;
          return;
        }
        var child = cellTo.lastChild;
        if (child.nodeType == 3 || !dtd.$block[child.tagName]) {
          cellTo.appendChild(cellTo.ownerDocument.createElement('br'))
        }
        while (child = cellFrom.firstChild) {
          cellTo.appendChild(child);
        }
      },
      /**
       * 向右合并单元格
       */
      mergeRight: function (cell) {
        var cellInfo = this.getCellInfo(cell),
          rightColIndex = cellInfo.colIndex + cellInfo.colSpan,
          rightCellInfo = this.indexTable[cellInfo.rowIndex][rightColIndex],
          rightCell = this.getCell(rightCellInfo.rowIndex, rightCellInfo.cellIndex);
        //合并
        cell.colSpan = cellInfo.colSpan + rightCellInfo.colSpan;
        //被合并的单元格不应存在宽度属性
        cell.removeAttribute("width");
        //移动内容
        this.moveContent(cell, rightCell);
        //删掉被合并的Cell
        this.deleteCell(rightCell, rightCellInfo.rowIndex);
        this.update();
      },
      /**
       * 向下合并单元格
       */
      mergeDown: function (cell) {
        var cellInfo = this.getCellInfo(cell),
          downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan,
          downCellInfo = this.indexTable[downRowIndex][cellInfo.colIndex],
          downCell = this.getCell(downCellInfo.rowIndex, downCellInfo.cellIndex);
        cell.rowSpan = cellInfo.rowSpan + downCellInfo.rowSpan;
        cell.removeAttribute("height");
        this.moveContent(cell, downCell);
        this.deleteCell(downCell, downCellInfo.rowIndex);
        this.update();
      },
      /**
       * 合并整个range中的内容
       */
      mergeRange: function () {
        //由于合并操作可以在任意时刻进行，所以无法通过鼠标位置等信息实时生成range，只能通过缓存实例中的cellsRange对象来访问
        var range = this.cellsRange,
          leftTopCell = this.getCell(range.beginRowIndex, this.indexTable[range.beginRowIndex][range.beginColIndex].cellIndex);

        if (leftTopCell.tagName == "TH" && range.endRowIndex !== range.beginRowIndex) {
          var index = this.indexTable,
            info = this.getCellInfo(leftTopCell);
          leftTopCell = this.getCell(1, index[1][info.colIndex].cellIndex);
          range = this.getCellsRange(leftTopCell, this.getCell(index[this.rowsNum - 1][info.colIndex].rowIndex, index[this.rowsNum - 1][info.colIndex].cellIndex));
        }

        // 删除剩余的Cells
        var cells = this.getCells(range);
        for (var i = 0, ci; ci = cells[i++];) {
          if (ci !== leftTopCell) {
            this.moveContent(leftTopCell, ci);
            this.deleteCell(ci);
          }
        }
        // 修改左上角Cell的rowSpan和colSpan，并调整宽度属性设置
        leftTopCell.rowSpan = range.endRowIndex - range.beginRowIndex + 1;
        leftTopCell.rowSpan > 1 && leftTopCell.removeAttribute("height");
        leftTopCell.colSpan = range.endColIndex - range.beginColIndex + 1;
        leftTopCell.colSpan > 1 && leftTopCell.removeAttribute("width");
        if (leftTopCell.rowSpan == this.rowsNum && leftTopCell.colSpan != 1) {
          leftTopCell.colSpan = 1;
        }

        if (leftTopCell.colSpan == this.colsNum && leftTopCell.rowSpan != 1) {
          var rowIndex = leftTopCell.parentNode.rowIndex;
          //解决IE下的表格操作问题
          if (this.table.deleteRow) {
            for (var i = rowIndex + 1, curIndex = rowIndex + 1, len = leftTopCell.rowSpan; i < len; i++) {
              this.table.deleteRow(curIndex);
            }
          } else {
            for (var i = 0, len = leftTopCell.rowSpan - 1; i < len; i++) {
              var row = this.table.rows[rowIndex + 1];
              row.parentNode.removeChild(row);
            }
          }
          leftTopCell.rowSpan = 1;
        }
        this.update();
      },
      /**
       * 插入一行单元格
       */
      insertRow: function (rowIndex, sourceCell) {
        var numCols = this.colsNum,
          table = this.table,
          row = table.insertRow(rowIndex), cell,
          isInsertTitle = typeof sourceCell == 'string' && sourceCell.toUpperCase() == 'TH';

        function replaceTdToTh(colIndex, cell, tableRow) {
          if (colIndex == 0) {
            var tr = tableRow.nextSibling || tableRow.previousSibling,
              th = tr.cells[colIndex];
            if (th.tagName == 'TH') {
              th = cell.ownerDocument.createElement("th");
              th.appendChild(cell.firstChild);
              tableRow.insertBefore(th, cell);
              domUtils.remove(cell)
            }
          } else {
            if (cell.tagName == 'TH') {
              var td = cell.ownerDocument.createElement("td");
              td.appendChild(cell.firstChild);
              tableRow.insertBefore(td, cell);
              domUtils.remove(cell)
            }
          }
        }

        //首行直接插入,无需考虑部分单元格被rowspan的情况
        if (rowIndex == 0 || rowIndex == this.rowsNum) {
          for (var colIndex = 0; colIndex < numCols; colIndex++) {
            cell = this.cloneCell(sourceCell, true);
            this.setCellContent(cell);
            cell.getAttribute('vAlign') && cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
            row.appendChild(cell);
            if (!isInsertTitle) {
              replaceTdToTh(colIndex, cell, row);
            }
          }
        } else {
          var infoRow = this.indexTable[rowIndex],
            cellIndex = 0;
          for (colIndex = 0; colIndex < numCols; colIndex++) {
            var cellInfo = infoRow[colIndex];
            //如果存在某个单元格的rowspan穿过待插入行的位置，则修改该单元格的rowspan即可，无需插入单元格
            if (cellInfo.rowIndex < rowIndex) {
              cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
              cell.rowSpan = cellInfo.rowSpan + 1;
            } else {
              cell = this.cloneCell(sourceCell, true);
              this.setCellContent(cell);
              row.appendChild(cell);
            }
            if (!isInsertTitle) {
              replaceTdToTh(colIndex, cell, row);
            }
          }
        }
        //框选时插入不触发contentchange，需要手动更新索引。
        this.update();
        return row;
      },
      /**
       * 删除一行单元格
       * @param rowIndex
       */
      deleteRow: function (rowIndex) {
        var row = this.table.rows[rowIndex],
          infoRow = this.indexTable[rowIndex],
          colsNum = this.colsNum,
          count = 0; //处理计数
        for (var colIndex = 0; colIndex < colsNum;) {
          var cellInfo = infoRow[colIndex],
            cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
          if (cell.rowSpan > 1) {
            if (cellInfo.rowIndex == rowIndex) {
              var clone = cell.cloneNode(true);
              clone.rowSpan = cell.rowSpan - 1;
              clone.innerHTML = "";
              cell.rowSpan = 1;
              var nextRowIndex = rowIndex + 1,
                nextRow = this.table.rows[nextRowIndex],
                insertCellIndex,
                preMerged = this.getPreviewMergedCellsNum(nextRowIndex, colIndex) - count;
              if (preMerged < colIndex) {
                insertCellIndex = colIndex - preMerged - 1;
                //nextRow.insertCell(insertCellIndex);
                domUtils.insertAfter(nextRow.cells[insertCellIndex], clone);
              } else {
                if (nextRow.cells.length) {
                  nextRow.insertBefore(clone, nextRow.cells[0])
                }
              }
              count += 1;
              //cell.parentNode.removeChild(cell);
            }
          }
          colIndex += cell.colSpan || 1;
        }
        var deleteTds = [], cacheMap = {};
        for (colIndex = 0; colIndex < colsNum; colIndex++) {
          var tmpRowIndex = infoRow[colIndex].rowIndex,
            tmpCellIndex = infoRow[colIndex].cellIndex,
            key = tmpRowIndex + "_" + tmpCellIndex;
          if (cacheMap[key]) {
            continue;
          }
          cacheMap[key] = 1;
          cell = this.getCell(tmpRowIndex, tmpCellIndex);
          deleteTds.push(cell);
        }
        var mergeTds = [];
        utils.each(deleteTds, function (td) {
          if (td.rowSpan == 1) {
            td.parentNode.removeChild(td);
          } else {
            mergeTds.push(td);
          }
        });
        utils.each(mergeTds, function (td) {
          td.rowSpan--;
        });
        row.parentNode.removeChild(row);
        //浏览器方法本身存在bug,采用自定义方法删除
        //this.table.deleteRow(rowIndex);
        this.update();
      },
      insertCol: function (colIndex, sourceCell, defaultValue) {
        var rowsNum = this.rowsNum,
          rowIndex = 0,
          tableRow, cell,
          backWidth = parseInt((this.table.offsetWidth - (this.colsNum + 1) * 20 - (this.colsNum + 1)) / (this.colsNum + 1), 10),
          isInsertTitleCol = typeof sourceCell == 'string' && sourceCell.toUpperCase() == 'TH';

        function replaceTdToTh(rowIndex, cell, tableRow) {
          if (rowIndex == 0) {
            var th = cell.nextSibling || cell.previousSibling;
            if (th.tagName == 'TH') {
              th = cell.ownerDocument.createElement("th");
              th.appendChild(cell.firstChild);
              tableRow.insertBefore(th, cell);
              domUtils.remove(cell)
            }
          } else {
            if (cell.tagName == 'TH') {
              var td = cell.ownerDocument.createElement("td");
              td.appendChild(cell.firstChild);
              tableRow.insertBefore(td, cell);
              domUtils.remove(cell)
            }
          }
        }

        var preCell;
        if (colIndex == 0 || colIndex == this.colsNum) {
          for (; rowIndex < rowsNum; rowIndex++) {
            tableRow = this.table.rows[rowIndex];
            preCell = tableRow.cells[colIndex == 0 ? colIndex : tableRow.cells.length];
            cell = this.cloneCell(sourceCell, true); //tableRow.insertCell(colIndex == 0 ? colIndex : tableRow.cells.length);
            this.setCellContent(cell);
            cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
            preCell && cell.setAttribute('width', preCell.getAttribute('width'));
            if (!colIndex) {
              tableRow.insertBefore(cell, tableRow.cells[0]);
            } else {
              domUtils.insertAfter(tableRow.cells[tableRow.cells.length - 1], cell);
            }
            if (!isInsertTitleCol) {
              replaceTdToTh(rowIndex, cell, tableRow)
            }
          }
        } else {
          for (; rowIndex < rowsNum; rowIndex++) {
            var cellInfo = this.indexTable[rowIndex][colIndex];
            if (cellInfo.colIndex < colIndex) {
              cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
              cell.colSpan = cellInfo.colSpan + 1;
            } else {
              tableRow = this.table.rows[rowIndex];
              preCell = tableRow.cells[cellInfo.cellIndex];

              cell = this.cloneCell(sourceCell, true);//tableRow.insertCell(cellInfo.cellIndex);
              this.setCellContent(cell);
              cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
              preCell && cell.setAttribute('width', preCell.getAttribute('width'));
              //防止IE下报错
              preCell ? tableRow.insertBefore(cell, preCell) : tableRow.appendChild(cell);
            }
            if (!isInsertTitleCol) {
              replaceTdToTh(rowIndex, cell, tableRow);
            }
          }
        }
        //框选时插入不触发contentchange，需要手动更新索引
        this.update();
        this.updateWidth(backWidth, defaultValue || { tdPadding: 10, tdBorder: 1 });
      },
      updateWidth: function (width, defaultValue) {
        var table = this.table,
          tmpWidth = UETable.getWidth(table) - defaultValue.tdPadding * 2 - defaultValue.tdBorder + width;
        if (tmpWidth < table.ownerDocument.body.offsetWidth) {
          // table.setAttribute("width", tmpWidth);
          return;
        }
        var tds = domUtils.getElementsByTagName(this.table, "td th");
        utils.each(tds, function (td) {
          td.setAttribute("width", width);
        })
      },
      deleteCol: function (colIndex) {
        var indexTable = this.indexTable,
          tableRows = this.table.rows,
          backTableWidth = this.table.getAttribute("width"),
          backTdWidth = 0,
          rowsNum = this.rowsNum,
          cacheMap = {};
        for (var rowIndex = 0; rowIndex < rowsNum;) {
          var infoRow = indexTable[rowIndex],
            cellInfo = infoRow[colIndex],
            key = cellInfo.rowIndex + '_' + cellInfo.colIndex;
          // 跳过已经处理过的Cell
          if (cacheMap[key]) {
            continue;
          }
          cacheMap[key] = 1;
          var cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
          if (!backTdWidth) {
            backTdWidth = cell && parseInt(cell.offsetWidth / cell.colSpan, 10).toFixed(0);
          }
          // 如果Cell的colSpan大于1, 就修改colSpan, 否则就删掉这个Cell
          if (cell.colSpan > 1) {
            cell.colSpan--;
          } else {
            tableRows[rowIndex].deleteCell(cellInfo.cellIndex);
          }
          rowIndex += cellInfo.rowSpan || 1;
        }
        this.table.setAttribute("width", backTableWidth - backTdWidth);
        this.update();
      },
      splitToCells: function (cell) {
        var me = this,
          cells = this.splitToRows(cell);
        utils.each(cells, function (cell) {
          me.splitToCols(cell);
        })
      },
      splitToRows: function (cell) {
        var cellInfo = this.getCellInfo(cell),
          rowIndex = cellInfo.rowIndex,
          colIndex = cellInfo.colIndex,
          results = [];
        // 修改Cell的rowSpan
        cell.rowSpan = 1;
        results.push(cell);
        // 补齐单元格
        for (var i = rowIndex, endRow = rowIndex + cellInfo.rowSpan; i < endRow; i++) {
          if (i == rowIndex) {
            continue;
          }
          var tableRow = this.table.rows[i],
            tmpCell = tableRow.insertCell(colIndex - this.getPreviewMergedCellsNum(i, colIndex));
          tmpCell.colSpan = cellInfo.colSpan;
          this.setCellContent(tmpCell);
          tmpCell.setAttribute('vAlign', cell.getAttribute('vAlign'));
          tmpCell.setAttribute('align', cell.getAttribute('align'));
          if (cell.style.cssText) {
            tmpCell.style.cssText = cell.style.cssText;
          }
          results.push(tmpCell);
        }
        this.update();
        return results;
      },
      getPreviewMergedCellsNum: function (rowIndex, colIndex) {
        var indexRow = this.indexTable[rowIndex],
          num = 0;
        for (var i = 0; i < colIndex;) {
          var colSpan = indexRow[i].colSpan,
            tmpRowIndex = indexRow[i].rowIndex;
          num += colSpan - (tmpRowIndex == rowIndex ? 1 : 0);
          i += colSpan;
        }
        return num;
      },
      splitToCols: function (cell) {
        var backWidth = (cell.offsetWidth / cell.colSpan - 22).toFixed(0),

          cellInfo = this.getCellInfo(cell),
          rowIndex = cellInfo.rowIndex,
          colIndex = cellInfo.colIndex,
          results = [];
        // 修改Cell的rowSpan
        cell.colSpan = 1;
        cell.setAttribute("width", backWidth);
        results.push(cell);
        // 补齐单元格
        for (var j = colIndex, endCol = colIndex + cellInfo.colSpan; j < endCol; j++) {
          if (j == colIndex) {
            continue;
          }
          var tableRow = this.table.rows[rowIndex],
            tmpCell = tableRow.insertCell(this.indexTable[rowIndex][j].cellIndex + 1);
          tmpCell.rowSpan = cellInfo.rowSpan;
          this.setCellContent(tmpCell);
          tmpCell.setAttribute('vAlign', cell.getAttribute('vAlign'));
          tmpCell.setAttribute('align', cell.getAttribute('align'));
          tmpCell.setAttribute('width', backWidth);
          if (cell.style.cssText) {
            tmpCell.style.cssText = cell.style.cssText;
          }
          //处理th的情况
          if (cell.tagName == 'TH') {
            var th = cell.ownerDocument.createElement('th');
            th.appendChild(tmpCell.firstChild);
            th.setAttribute('vAlign', cell.getAttribute('vAlign'));
            th.rowSpan = tmpCell.rowSpan;
            tableRow.insertBefore(th, tmpCell);
            domUtils.remove(tmpCell);
          }
          results.push(tmpCell);
        }
        this.update();
        return results;
      },
      isLastCell: function (cell, rowsNum, colsNum) {
        rowsNum = rowsNum || this.rowsNum;
        colsNum = colsNum || this.colsNum;
        var cellInfo = this.getCellInfo(cell);
        return cellInfo.rowIndex + cellInfo.rowSpan == rowsNum &&
          cellInfo.colIndex + cellInfo.colSpan == colsNum;
      },
      getLastCell: function (cells) {
        cells = cells || this.table.getElementsByTagName("td");
        var firstInfo = this.getCellInfo(cells[0]);
        var me = this, last = cells[0],
          tr = last.parentNode,
          cellsNum = 0, cols = 0, rows;
        utils.each(cells, function (cell) {
          if (cell.parentNode == tr) {
            cols += cell.colSpan || 1;
          }
          cellsNum += cell.rowSpan * cell.colSpan || 1;
        });
        rows = cellsNum / cols;
        utils.each(cells, function (cell) {
          if (me.isLastCell(cell, rows, cols)) {
            last = cell;
            return false;
          }
        });
        return last;

      },
      selectRow: function (rowIndex) {
        var indexRow = this.indexTable[rowIndex],
          start = this.getCell(indexRow[0].rowIndex, indexRow[0].cellIndex),
          end = this.getCell(indexRow[this.colsNum - 1].rowIndex, indexRow[this.colsNum - 1].cellIndex),
          range = this.getCellsRange(start, end);
        this.setSelected(range);
      },
      selectTable: function () {
        var tds = this.table.getElementsByTagName("td"),
          range = this.getCellsRange(tds[0], tds[tds.length - 1]);
        this.setSelected(range);
      },
      setBackground: function (cells, value) {
        if (typeof value === "string") {
          utils.each(cells, function (cell) {
            cell.style.backgroundColor = value;
          })
        } else if (typeof value === "object") {
          value = utils.extend({
            repeat: true,
            colorList: ["#ddd", "#fff"]
          }, value);
          var rowIndex = this.getCellInfo(cells[0]).rowIndex,
            count = 0,
            colors = value.colorList,
            getColor = function (list, index, repeat) {
              return list[index] ? list[index] : repeat ? list[index % list.length] : "";
            };
          for (var i = 0, cell; cell = cells[i++];) {
            var cellInfo = this.getCellInfo(cell);
            cell.style.backgroundColor = getColor(colors, rowIndex + count == cellInfo.rowIndex ? count : ++count, value.repeat);
          }
        }
      },
      removeBackground: function (cells) {
        utils.each(cells, function (cell) {
          cell.style.backgroundColor = "";
        })
      }


    };

    function showError(e) {
    }
  })();

  // plugins/table.cmds.js
  /**
   * Created with JetBrains PhpStorm.
   * User: taoqili
   * Date: 13-2-20
   * Time: 下午6:25
   * To change this template use File | Settings | File Templates.
   */
  ;
  (function () {
    var UT = AX.UETable,
      getTableItemsByRange = function (editor) {
        return UT.getTableItemsByRange(editor);
      },
      getUETableBySelected = function (editor) {
        return UT.getUETableBySelected(editor)
      },
      getDefaultValue = function (editor, table) {
        return UT.getDefaultValue(editor, table);
      },
      getUETable = function (tdOrTable) {
        return UT.getUETable(tdOrTable);
      };


    AX.commands['inserttable'] = {
      queryCommandState: function () {
        // 满足 table 嵌套 table需求，注释掉 这段代码。 杨国超 7.2  START
        // return getTableItemsByRange(this).table ? -1 : 0;
        return getTableItemsByRange(this).table ? 0 : 0;
        // 满足 table 嵌套 table需求，注释掉 这段代码。 杨国超 7.2  END
      },
      execCommand: function (cmd, opt) {
        // 创建 table 节点
        function createTable(opt, tdWidth) {
          var html = [],
            rowsNum = opt.numRows, // 行数
            colsNum = opt.numCols; // 列数
          for (var r = 0; r < rowsNum; r++) {
            html.push('<tr' + (r == 0 ? ' class="firstRow"' : '') + '>');
            for (var c = 0; c < colsNum; c++) {
              html.push('<td width="' + tdWidth + '"  vAlign="' + opt.tdvalign + '" >' + (browser.ie && browser.version < 11 ? domUtils.fillChar : '<br/>') + '</td>')
            }
            html.push('</tr>')
          }
          //禁止指定table-width
          return '<table width="100%"><tbody>' + html.join('') + '</tbody></table>'
        }

        if (!opt) {
          opt = utils.extend({}, {
            numCols: this.options.defaultCols,
            numRows: this.options.defaultRows,
            tdvalign: this.options.tdvalign
          })
        }
        var me = this;
        var range = this.selection.getRange(),
          start = range.startContainer,
          firstParentBlock = domUtils.findParent(start, function (node) {
            return domUtils.isBlockElm(node);
          }, true) || me.body;

        var defaultValue = getDefaultValue(me),
          tableWidth = firstParentBlock.offsetWidth,
          tdWidth = Math.floor(tableWidth / opt.numCols - defaultValue.tdPadding * 2 - defaultValue.tdBorder);

        //todo其他属性
        !opt.tdvalign && (opt.tdvalign = me.options.tdvalign);
        me.execCommand("inserthtml", createTable(opt, tdWidth));
      }
    };
    AX.commands['checkwidth'] = {
      queryCommandState: function () {
        var rng = this.selection.getRange();
        var parentTd = AX.dom.domUtils.findParent(
          rng.startContainer,
          function (dom) {
            return dom.tagName == "TD";
          },
          true
        );
        return parentTd;
      }
    };

    AX.commands['insertparagraphbeforetable'] = {
      queryCommandState: function () {
        return getTableItemsByRange(this).cell ? 0 : -1;
      },
      execCommand: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          var p = this.document.createElement("p");
          p.innerHTML = browser.ie ? '&nbsp;' : '<br />';
          table.parentNode.insertBefore(p, table);
          this.selection.getRange().setStart(p, 0).setCursor();
        }
      }
    };

    AX.commands['deletetable'] = {
      queryCommandState: function () {
        var rng = this.selection.getRange();
        return domUtils.findParentByTagName(rng.startContainer, 'table', true) ? 0 : -1;
      },
      execCommand: function (cmd, table) {
        var rng = this.selection.getRange();
        table = table || domUtils.findParentByTagName(rng.startContainer, 'table', true);
        if (table) {
          var next = table.nextSibling;
          if (!next) {
            next = domUtils.createElement(this.document, 'p', {
              'innerHTML': browser.ie ? domUtils.fillChar : '<br/>'
            });
            table.parentNode.insertBefore(next, table);
          }
          domUtils.remove(table);
          rng = this.selection.getRange();
          if (next.nodeType == 3) {
            rng.setStartBefore(next)
          } else {
            rng.setStart(next, 0)
          }
          rng.setCursor(false, true)
          this.fireEvent("tablehasdeleted")

        }

      }
    };
    AX.commands['cellalign'] = {
      queryCommandState: function () {
        return getSelectedArr(this).length ? 0 : -1
      },
      execCommand: function (cmd, align) {
        var selectedTds = getSelectedArr(this);
        if (selectedTds.length) {
          for (var i = 0, ci; ci = selectedTds[i++];) {
            ci.setAttribute('align', align);
          }
        }
      }
    };
    AX.commands['cellvalign'] = {
      queryCommandState: function () {
        return getSelectedArr(this).length ? 0 : -1;
      },
      execCommand: function (cmd, valign) {
        var selectedTds = getSelectedArr(this);
        if (selectedTds.length) {
          for (var i = 0, ci; ci = selectedTds[i++];) {
            ci.setAttribute('vAlign', valign);
          }
        }
      }
    };
    AX.commands['insertcaption'] = {
      queryCommandState: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          return table.getElementsByTagName('caption').length == 0 ? 1 : -1;
        }
        return -1;
      },
      execCommand: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          var caption = this.document.createElement('caption');
          caption.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';
          table.insertBefore(caption, table.firstChild);
          var range = this.selection.getRange();
          range.setStart(caption, 0).setCursor();
        }

      }
    };
    AX.commands['deletecaption'] = {
      queryCommandState: function () {
        var rng = this.selection.getRange(),
          table = domUtils.findParentByTagName(rng.startContainer, 'table');
        if (table) {
          return table.getElementsByTagName('caption').length == 0 ? -1 : 1;
        }
        return -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          table = domUtils.findParentByTagName(rng.startContainer, 'table');
        if (table) {
          domUtils.remove(table.getElementsByTagName('caption')[0]);
          var range = this.selection.getRange();
          range.setStart(table.rows[0].cells[0], 0).setCursor();
        }

      }
    };
    AX.commands['inserttitle'] = {
      queryCommandState: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          var firstRow = table.rows[0];
          return firstRow.cells[firstRow.cells.length - 1].tagName.toLowerCase() != 'th' ? 0 : -1
        }
        return -1;
      },
      execCommand: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          getUETable(table).insertRow(0, 'th');
        }
        var th = table.getElementsByTagName('th')[0];
        this.selection.getRange().setStart(th, 0).setCursor(false, true);
      }
    };
    AX.commands['deletetitle'] = {
      queryCommandState: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          var firstRow = table.rows[0];
          return firstRow.cells[firstRow.cells.length - 1].tagName.toLowerCase() == 'th' ? 0 : -1
        }
        return -1;
      },
      execCommand: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          domUtils.remove(table.rows[0])
        }
        var td = table.getElementsByTagName('td')[0];
        this.selection.getRange().setStart(td, 0).setCursor(false, true);
      }
    };
    AX.commands['inserttitlecol'] = {
      queryCommandState: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          var lastRow = table.rows[table.rows.length - 1];
          return lastRow.getElementsByTagName('th').length ? -1 : 0;
        }
        return -1;
      },
      execCommand: function (cmd) {
        var table = getTableItemsByRange(this).table;
        if (table) {
          getUETable(table).insertCol(0, 'th');
        }
        resetTdWidth(table, this);
        var th = table.getElementsByTagName('th')[0];
        this.selection.getRange().setStart(th, 0).setCursor(false, true);
      }
    };
    AX.commands['deletetitlecol'] = {
      queryCommandState: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          var lastRow = table.rows[table.rows.length - 1];
          return lastRow.getElementsByTagName('th').length ? 0 : -1;
        }
        return -1;
      },
      execCommand: function () {
        var table = getTableItemsByRange(this).table;
        if (table) {
          for (var i = 0; i < table.rows.length; i++) {
            domUtils.remove(table.rows[i].children[0])
          }
        }
        resetTdWidth(table, this);
        var td = table.getElementsByTagName('td')[0];
        this.selection.getRange().setStart(td, 0).setCursor(false, true);
      }
    };

    AX.commands["mergeright"] = {
      queryCommandState: function (cmd) {
        var tableItems = getTableItemsByRange(this),
          table = tableItems.table,
          cell = tableItems.cell;

        if (!table || !cell) {
          return -1;
        }
        var ut = getUETable(table);
        if (ut.selectedTds.length) {
          return -1;
        }

        var cellInfo = ut.getCellInfo(cell),
          rightColIndex = cellInfo.colIndex + cellInfo.colSpan;
        if (rightColIndex >= ut.colsNum) {
          return -1;
        } // 如果处于最右边则不能向右合并

        var rightCellInfo = ut.indexTable[cellInfo.rowIndex][rightColIndex],
          rightCell = table.rows[rightCellInfo.rowIndex].cells[rightCellInfo.cellIndex];
        if (!rightCell || cell.tagName != rightCell.tagName) {
          return -1;
        } // TH和TD不能相互合并

        // 当且仅当两个Cell的开始列号和结束列号一致时能进行合并
        return rightCellInfo.rowIndex == cellInfo.rowIndex && rightCellInfo.rowSpan == cellInfo.rowSpan ? 0 : -1;
      },
      execCommand: function (cmd) {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.mergeRight(cell);
        rng.moveToBookmark(bk).select();
      }
    };
    AX.commands["mergedown"] = {
      queryCommandState: function (cmd) {
        var tableItems = getTableItemsByRange(this),
          table = tableItems.table,
          cell = tableItems.cell;

        if (!table || !cell) {
          return -1;
        }
        var ut = getUETable(table);
        if (ut.selectedTds.length) {
          return -1;
        }

        var cellInfo = ut.getCellInfo(cell),
          downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan;
        if (downRowIndex >= ut.rowsNum) {
          return -1;
        } // 如果处于最下边则不能向下合并

        var downCellInfo = ut.indexTable[downRowIndex][cellInfo.colIndex],
          downCell = table.rows[downCellInfo.rowIndex].cells[downCellInfo.cellIndex];
        if (!downCell || cell.tagName != downCell.tagName) {
          return -1;
        } // TH和TD不能相互合并

        // 当且仅当两个Cell的开始列号和结束列号一致时能进行合并
        return downCellInfo.colIndex == cellInfo.colIndex && downCellInfo.colSpan == cellInfo.colSpan ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.mergeDown(cell);
        rng.moveToBookmark(bk).select();
      }
    };
    AX.commands["mergecells"] = {
      queryCommandState: function () {
        return getUETableBySelected(this) ? 0 : -1;
      },
      execCommand: function () {
        var ut = getUETableBySelected(this);
        if (ut && ut.selectedTds.length) {
          var cell = ut.selectedTds[0];
          ut.mergeRange();
          var rng = this.selection.getRange();
          if (domUtils.isEmptyBlock(cell)) {
            rng.setStart(cell, 0).collapse(true)
          } else {
            rng.selectNodeContents(cell)
          }
          rng.select();
        }


      }
    };
    AX.commands["insertrow"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        return cell && (cell.tagName == "TD" || cell.tagName == 'TH' && tableItems.tr !== tableItems.table.rows[0]) &&
          getUETable(tableItems.table).rowsNum < this.options.maxRowNum ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell,
          table = tableItems.table,
          ut = getUETable(table),
          cellInfo = ut.getCellInfo(cell);
        //ut.insertRow(!ut.selectedTds.length ? cellInfo.rowIndex:ut.cellsRange.beginRowIndex,'');
        if (!ut.selectedTds.length) {
          ut.insertRow(cellInfo.rowIndex, cell);
        } else {
          var range = ut.cellsRange;
          for (var i = 0, len = range.endRowIndex - range.beginRowIndex + 1; i < len; i++) {
            ut.insertRow(range.beginRowIndex, cell);
          }
        }
        rng.moveToBookmark(bk).select();
        if (table.getAttribute("interlaced") === "enabled") {
          this.fireEvent("interlacetable", table);
        }
      }
    };
    //后插入行
    AX.commands["insertrownext"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        return cell && cell.tagName == "TD" && getUETable(tableItems.table).rowsNum < this.options.maxRowNum ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell,
          table = tableItems.table,
          ut = getUETable(table),
          cellInfo = ut.getCellInfo(cell);
        //ut.insertRow(!ut.selectedTds.length? cellInfo.rowIndex + cellInfo.rowSpan : ut.cellsRange.endRowIndex + 1,'');
        if (!ut.selectedTds.length) {
          ut.insertRow(cellInfo.rowIndex + cellInfo.rowSpan, cell);
        } else {
          var range = ut.cellsRange;
          for (var i = 0, len = range.endRowIndex - range.beginRowIndex + 1; i < len; i++) {
            ut.insertRow(range.endRowIndex + 1, cell);
          }
        }
        rng.moveToBookmark(bk).select();
        if (table.getAttribute("interlaced") === "enabled") {
          this.fireEvent("interlacetable", table);
        }
      }
    };
    AX.commands["deleterow"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this);
        return tableItems.cell ? 0 : -1;
      },
      execCommand: function () {
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell),
          cellsRange = ut.cellsRange,
          cellInfo = ut.getCellInfo(cell),
          preCell = ut.getVSideCell(cell),
          nextCell = ut.getVSideCell(cell, true),
          rng = this.selection.getRange();
        if (utils.isEmptyObject(cellsRange)) {
          ut.deleteRow(cellInfo.rowIndex);
        } else {
          for (var i = cellsRange.beginRowIndex; i < cellsRange.endRowIndex + 1; i++) {
            ut.deleteRow(cellsRange.beginRowIndex);
          }
        }
        var table = ut.table;
        if (!table.getElementsByTagName('td').length) {
          var nextSibling = table.nextSibling;
          domUtils.remove(table);
          if (nextSibling) {
            rng.setStart(nextSibling, 0).setCursor(false, true);
          }
        } else {
          if (cellInfo.rowSpan == 1 || cellInfo.rowSpan == cellsRange.endRowIndex - cellsRange.beginRowIndex + 1) {
            if (nextCell || preCell) {
              rng.selectNodeContents(nextCell || preCell).setCursor(false, true);
            }
          } else {
            var newCell = ut.getCell(cellInfo.rowIndex, ut.indexTable[cellInfo.rowIndex][cellInfo.colIndex].cellIndex);
            if (newCell) {
              rng.selectNodeContents(newCell).setCursor(false, true);
            }
          }
        }
        if (table.getAttribute("interlaced") === "enabled") {
          this.fireEvent("interlacetable", table);
        }
      }
    };
    AX.commands["insertcol"] = {
      queryCommandState: function (cmd) {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        return cell && (cell.tagName == "TD" || cell.tagName == 'TH' && cell !== tableItems.tr.cells[0]) &&
          getUETable(tableItems.table).colsNum < this.options.maxColNum ? 0 : -1;
      },
      execCommand: function (cmd) {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        if (this.queryCommandState(cmd) == -1) {
          return;
        }
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell),
          cellInfo = ut.getCellInfo(cell);

        //ut.insertCol(!ut.selectedTds.length ? cellInfo.colIndex:ut.cellsRange.beginColIndex);
        if (!ut.selectedTds.length) {
          ut.insertCol(cellInfo.colIndex, cell);
        } else {
          var range = ut.cellsRange;
          for (var i = 0, len = range.endColIndex - range.beginColIndex + 1; i < len; i++) {
            ut.insertCol(range.beginColIndex, cell);
          }
        }
        rng.moveToBookmark(bk).select(true);
      }
    };
    AX.commands["insertcolnext"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        return cell && getUETable(tableItems.table).colsNum < this.options.maxColNum ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell),
          cellInfo = ut.getCellInfo(cell);
        //ut.insertCol(!ut.selectedTds.length ? cellInfo.colIndex + cellInfo.colSpan:ut.cellsRange.endColIndex +1);
        if (!ut.selectedTds.length) {
          ut.insertCol(cellInfo.colIndex + cellInfo.colSpan, cell);
        } else {
          var range = ut.cellsRange;
          for (var i = 0, len = range.endColIndex - range.beginColIndex + 1; i < len; i++) {
            ut.insertCol(range.endColIndex + 1, cell);
          }
        }
        rng.moveToBookmark(bk).select();
      }
    };

    AX.commands["deletecol"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this);
        return tableItems.cell ? 0 : -1;
      },
      execCommand: function () {
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell),
          range = ut.cellsRange,
          cellInfo = ut.getCellInfo(cell),
          preCell = ut.getHSideCell(cell),
          nextCell = ut.getHSideCell(cell, true);
        if (utils.isEmptyObject(range)) {
          ut.deleteCol(cellInfo.colIndex);
        } else {
          for (var i = range.beginColIndex; i < range.endColIndex + 1; i++) {
            ut.deleteCol(range.beginColIndex);
          }
        }
        var table = ut.table,
          rng = this.selection.getRange();

        if (!table.getElementsByTagName('td').length) {
          var nextSibling = table.nextSibling;
          domUtils.remove(table);
          if (nextSibling) {
            rng.setStart(nextSibling, 0).setCursor(false, true);
          }
        } else {
          if (domUtils.inDoc(cell, this.document)) {
            rng.setStart(cell, 0).setCursor(false, true);
          } else {
            if (nextCell && domUtils.inDoc(nextCell, this.document)) {
              rng.selectNodeContents(nextCell).setCursor(false, true);
            } else {
              if (preCell && domUtils.inDoc(preCell, this.document)) {
                rng.selectNodeContents(preCell).setCursor(true, true);
              }
            }
          }
        }
      }
    };
    AX.commands["splittocells"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        if (!cell) {
          return -1;
        }
        var ut = getUETable(tableItems.table);
        if (ut.selectedTds.length > 0) {
          return -1;
        }
        return cell && (cell.colSpan > 1 || cell.rowSpan > 1) ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.splitToCells(cell);
        rng.moveToBookmark(bk).select();
      }
    };
    AX.commands["splittorows"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        if (!cell) {
          return -1;
        }
        var ut = getUETable(tableItems.table);
        if (ut.selectedTds.length > 0) {
          return -1;
        }
        return cell && cell.rowSpan > 1 ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.splitToRows(cell);
        rng.moveToBookmark(bk).select();
      }
    };
    AX.commands["splittocols"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        if (!cell) {
          return -1;
        }
        var ut = getUETable(tableItems.table);
        if (ut.selectedTds.length > 0) {
          return -1;
        }
        return cell && cell.colSpan > 1 ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.splitToCols(cell);
        rng.moveToBookmark(bk).select();

      }
    };

    AX.commands["adaptbytext"] =
      AX.commands["adaptbywindow"] = {
        queryCommandState: function () {
          return getTableItemsByRange(this).table ? 0 : -1
        },
        execCommand: function (cmd) {
          var me = this;
          var tableItems = getTableItemsByRange(this),
            table = tableItems.table;
          if (table) {
            if (cmd == 'adaptbywindow') {
              resetTdWidth(table, this);
            } else {
              var axSplitSign = table.getAttribute("ax-split-sign");
              var tables = axTools.getByTagAttr("table", "ax-split-sign", axSplitSign, me.document);
              for (var i = 0; i < tables.length; i++) {
                var cells = domUtils.getElementsByTagName(tables[i], "td th");
                utils.each(cells, function (cell) {
                  cell.removeAttribute("width");
                });
                tables[i].removeAttribute("width");
              }
            }
          }
        }
      };

    //平均分配各列
    AX.commands['averagedistributecol'] = {
      queryCommandState: function () {
        var ut = getUETableBySelected(this);
        if (!ut) {
          return -1;
        }
        return ut.isFullRow() || ut.isFullCol() ? 0 : -1;
      },
      execCommand: function (cmd) {
        var me = this,
          ut = getUETableBySelected(me);

        function getAverageWidth() {
          var tb = ut.table,
            averageWidth, sumWidth = 0, colsNum = 0,
            tbAttr = getDefaultValue(me, tb);

          if (ut.isFullRow()) {
            sumWidth = tb.offsetWidth;
            colsNum = ut.colsNum;
          } else {
            var begin = ut.cellsRange.beginColIndex,
              end = ut.cellsRange.endColIndex,
              node;
            for (var i = begin; i <= end;) {
              node = ut.selectedTds[i];
              sumWidth += node.offsetWidth;
              i += node.colSpan;
              colsNum += 1;
            }
          }
          averageWidth = Math.ceil(sumWidth / colsNum) - tbAttr.tdBorder * 2 - tbAttr.tdPadding * 2;
          return averageWidth;
        }

        function setAverageWidth(averageWidth) {
          utils.each(domUtils.getElementsByTagName(ut.table, "th"), function (node) {
            node.setAttribute("width", "");
          });
          var cells = ut.isFullRow() ? domUtils.getElementsByTagName(ut.table, "td") : ut.selectedTds;

          utils.each(cells, function (node) {
            if (node.colSpan == 1) {
              node.setAttribute("width", averageWidth);
            }
          });
        }

        if (ut && ut.selectedTds.length) {
          setAverageWidth(getAverageWidth());
        }
      }
    };
    //平均分配各行
    AX.commands['averagedistributerow'] = {
      queryCommandState: function () {
        var ut = getUETableBySelected(this);
        if (!ut) {
          return -1;
        }
        if (ut.selectedTds && /th/ig.test(ut.selectedTds[0].tagName)) {
          return -1;
        }
        return ut.isFullRow() || ut.isFullCol() ? 0 : -1;
      },
      execCommand: function (cmd) {
        var me = this,
          ut = getUETableBySelected(me);

        function getAverageHeight() {
          var averageHeight, rowNum, sumHeight = 0,
            tb = ut.table,
            tbAttr = getDefaultValue(me, tb),
            tdpadding = parseInt(domUtils.getComputedStyle(tb.getElementsByTagName('td')[0], "padding-top"));

          if (ut.isFullCol()) {
            var captionArr = domUtils.getElementsByTagName(tb, "caption"),
              thArr = domUtils.getElementsByTagName(tb, "th"),
              captionHeight, thHeight;

            if (captionArr.length > 0) {
              captionHeight = captionArr[0].offsetHeight;
            }
            if (thArr.length > 0) {
              thHeight = thArr[0].offsetHeight;
            }

            sumHeight = tb.offsetHeight - (captionHeight || 0) - (thHeight || 0);
            rowNum = thArr.length == 0 ? ut.rowsNum : ut.rowsNum - 1;
          } else {
            var begin = ut.cellsRange.beginRowIndex,
              end = ut.cellsRange.endRowIndex,
              count = 0,
              trs = domUtils.getElementsByTagName(tb, "tr");
            for (var i = begin; i <= end; i++) {
              sumHeight += trs[i].offsetHeight;
              count += 1;
            }
            rowNum = count;
          }
          //ie8下是混杂模式
          if (browser.ie && browser.version < 9) {
            averageHeight = Math.ceil(sumHeight / rowNum);
          } else {
            averageHeight = Math.ceil(sumHeight / rowNum) - tbAttr.tdBorder * 2 - tdpadding * 2;
          }
          return averageHeight;
        }

        function setAverageHeight(averageHeight) {
          var cells = ut.isFullCol() ? domUtils.getElementsByTagName(ut.table, "td") : ut.selectedTds;
          utils.each(cells, function (node) {
            if (node.rowSpan == 1) {
              node.setAttribute("height", averageHeight);
            }
          });
        }

        if (ut && ut.selectedTds.length) {
          setAverageHeight(getAverageHeight());
        }
      }
    };

    //单元格对齐方式
    AX.commands['cellalignment'] = {
      queryCommandState: function () {
        return getTableItemsByRange(this).table ? 0 : -1
      },
      execCommand: function (cmd, data) {
        var me = this,
          ut = getUETableBySelected(me);

        if (!ut) {
          var start = me.selection.getStart(),
            cell = start && domUtils.findParentByTagName(start, ["td", "th", "caption"], true);
          if (!/caption/ig.test(cell.tagName)) {
            domUtils.setAttributes(cell, data);
          } else {
            cell.style.textAlign = data.align;
            cell.style.verticalAlign = data.vAlign;
          }
          me.selection.getRange().setCursor(true);
        } else {
          utils.each(ut.selectedTds, function (cell) {
            domUtils.setAttributes(cell, data);
          });
        }
      },
      /**
       * 查询当前点击的单元格的对齐状态， 如果当前已经选择了多个单元格， 则会返回所有单元格经过统一协调过后的状态
       * @see AX.UETable.getTableCellAlignState
       */
      queryCommandValue: function (cmd) {

        var activeMenuCell = getTableItemsByRange(this).cell;

        if (!activeMenuCell) {
          activeMenuCell = getSelectedArr(this)[0];
        }

        if (!activeMenuCell) {

          return null;

        }

        //获取同时选中的其他单元格
        var cells = AX.UETable.getUETable(activeMenuCell).selectedTds;

        !cells.length && (cells = activeMenuCell);

        return AX.UETable.getTableCellAlignState(cells);


      }
    };
    //表格对齐方式
    AX.commands['tablealignment'] = {
      queryCommandState: function () {
        if (browser.ie && browser.version < 8) {
          return -1;
        }
        return getTableItemsByRange(this).table ? 0 : -1
      },
      execCommand: function (cmd, value) {
        var me = this,
          start = me.selection.getStart(),
          table = start && domUtils.findParentByTagName(start, ["table"], true);

        if (table) {
          table.setAttribute("align", value);
        }
      }
    };

    //表格属性
    AX.commands['edittable'] = {
      queryCommandState: function () {
        return getTableItemsByRange(this).table ? 0 : -1
      },
      execCommand: function (cmd, color) {
        var rng = this.selection.getRange(),
          table = domUtils.findParentByTagName(rng.startContainer, 'table');
        if (table) {
          var arr = domUtils.getElementsByTagName(table, "td").concat(
            domUtils.getElementsByTagName(table, "th"),
            domUtils.getElementsByTagName(table, "caption")
          );
          table.className = "";
          utils.each(arr, function (node) {
            node.style.borderColor = color;
          });
        }
      }
    };
    //单元格属性
    AX.commands['edittd'] = {
      queryCommandState: function () {
        return getTableItemsByRange(this).table ? 0 : -1
      },
      execCommand: function (cmd, bkColor) {
        var me = this,
          ut = getUETableBySelected(me);

        if (!ut) {
          var start = me.selection.getStart(),
            cell = start && domUtils.findParentByTagName(start, ["td", "th", "caption"], true);
          if (cell) {
            cell.style.backgroundColor = bkColor;
          }
        } else {
          utils.each(ut.selectedTds, function (cell) {
            cell.style.backgroundColor = bkColor;
          });
        }
      }
    };

    AX.commands["settablebackground"] = {
      queryCommandState: function () {
        return getSelectedArr(this).length > 1 ? 0 : -1;
      },
      execCommand: function (cmd, value) {
        var cells, ut;
        cells = getSelectedArr(this);
        ut = getUETable(cells[0]);
        ut.setBackground(cells, value);
      }
    };

    AX.commands["cleartablebackground"] = {
      queryCommandState: function () {
        var cells = getSelectedArr(this);
        if (!cells.length) {
          return -1;
        }
        for (var i = 0, cell; cell = cells[i++];) {
          if (cell.style.backgroundColor !== "") {
            return 0;
          }
        }
        return -1;
      },
      execCommand: function () {
        var cells = getSelectedArr(this),
          ut = getUETable(cells[0]);
        ut.removeBackground(cells);
      }
    };

    AX.commands["interlacetable"] = AX.commands["uninterlacetable"] = {
      queryCommandState: function (cmd) {
        var table = getTableItemsByRange(this).table;
        if (!table) {
          return -1;
        }
        var interlaced = table.getAttribute("interlaced");
        if (cmd == "interlacetable") {
          //TODO 待定
          //是否需要待定，如果设置，则命令只能单次执行成功，但反射具备toggle效果；否则可以覆盖前次命令，但反射将不存在toggle效果
          return interlaced === "enabled" ? -1 : 0;
        }
        return !interlaced || interlaced === "disabled" ? -1 : 0;

      },
      execCommand: function (cmd, classList) {
        var table = getTableItemsByRange(this).table;
        if (cmd == "interlacetable") {
          table.setAttribute("interlaced", "enabled");
          this.fireEvent("interlacetable", table, classList);
        } else {
          table.setAttribute("interlaced", "disabled");
          this.fireEvent("uninterlacetable", table);
        }
      }
    };
    AX.commands["setbordervisible"] = {
      queryCommandState: function (cmd) {
        var table = getTableItemsByRange(this).table;
        if (!table) {
          return -1;
        }
        return 0;
      },
      execCommand: function () {
        var table = getTableItemsByRange(this).table;
        table.className = "";
        utils.each(domUtils.getElementsByTagName(table, 'td'), function (td) {
          td.style.borderWidth = '1px';
          td.style.borderStyle = 'solid';
        })
      }
    };

    function resetTdWidth(table, editor) {
      var tds = domUtils.getElementsByTagName(table, 'td th');
      utils.each(tds, function (td) {
        td.removeAttribute("width");
      });
      var axSplitSign = table.getAttribute("ax-split-sign");
      var tables = axTools.getByTagAttr("table", "ax-split-sign", axSplitSign, editor.document);
      for (var i = 0; i < tables.length; i++) {
        tables[i].setAttribute('width', '100%');
      }
      //getTableWidth(editor, true, getDefaultValue(editor, table)));
      var tdsWidths = [];
      setTimeout(function () {
        utils.each(tds, function (td) {
          td.colSpan == 1 && tdsWidths.push(td.offsetWidth)
        })
        utils.each(tds, function (td, i) {
          td.colSpan == 1 && td.setAttribute("width", tdsWidths[i] + "");
        })
      }, 0);
    }

    function getTableWidth(editor, needIEHack, defaultValue) {
      var body = editor.body;
      return body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (editor.options.offsetWidth || 0);
    }

    function getSelectedArr(editor) {
      var cell = getTableItemsByRange(editor).cell;
      if (cell) {
        var ut = getUETable(cell);
        return ut.selectedTds.length ? ut.selectedTds : [cell];
      }
      return [];

    }
  })();


  // plugins/table.action.js
  /**
   * Created with JetBrains PhpStorm.
   * User: taoqili
   * Date: 12-10-12
   * Time: 上午10:05
   * To change this template use File | Settings | File Templates.
   */
  AX.plugins['table'] = function () {
    var me = this,
      tabTimer = null,
      //拖动计时器
      tableDragTimer = null,
      //双击计时器
      tableResizeTimer = null,
      //单元格最小宽度
      cellMinWidth = 5,
      isInResizeBuffer = false,
      //单元格边框大小
      cellBorderWidth = 5,
      //鼠标偏移距离
      offsetOfTableCell = 15,
      //记录在有限时间内的点击状态， 共有3个取值， 0, 1, 2。 0代表未初始化， 1代表单击了1次，2代表2次
      singleClickState = 0,
      userActionStatus = null,
      //双击允许的时间范围
      dblclickTime = 360,
      UT = AX.UETable,
      getUETable = function (tdOrTable) {
        return UT.getUETable(tdOrTable);
      },
      getUETableBySelected = function (editor) {
        return UT.getUETableBySelected(editor);
      },
      getDefaultValue = function (editor, table) {
        return UT.getDefaultValue(editor, table);
      },
      removeSelectedClass = function (cells) {
        return UT.removeSelectedClass(cells);
      };
    var isFlag = true;
    function showError(e) {
      //        throw e;
    }

    me.ready(function () {
      var me = this;
      var orgGetText = me.selection.getText;
      me.selection.getText = function () {
        var table = getUETableBySelected(me);
        if (table) {
          var str = '';
          utils.each(table.selectedTds, function (td) {
            str += td[browser.ie ? 'innerText' : 'textContent'];
          })
          return str;
        }
        return orgGetText.call(me.selection)


      }
    })

    //处理拖动及框选相关方法
    var startTd = null, //鼠标按下时的锚点td
      currentTd = null, //当前鼠标经过时的td
      onDrag = "", //指示当前拖动状态，其值可为"","h","v" ,分别表示未拖动状态，横向拖动状态，纵向拖动状态，用于鼠标移动过程中的判断
      onBorder = false, //检测鼠标按下时是否处在单元格边缘位置
      dragButton = null,
      dragOver = false,
      dragLine = null, //模拟的拖动线
      dragTd = null; //发生拖动的目标td

    var mousedown = false,
      //todo 判断混乱模式
      needIEHack = true;

    me.setOpt({
      'maxColNum': 20,
      'maxRowNum': 100,
      'defaultCols': 5,
      'defaultRows': 5,
      'tdvalign': 'top',
      'cursorpath': me.options.AXEDITOR_HOME_URL + "themes/default/images/cursor_",
      'tableDragable': false,
      'classList': ["ue-table-interlace-color-single", "ue-table-interlace-color-double"]
    });
    me.getUETable = getUETable;
    var commands = {
      'deletetable': 1,
      'inserttable': 1,
      'cellvalign': 1,
      'insertcaption': 1,
      'deletecaption': 1,
      'inserttitle': 1,
      'deletetitle': 1,
      "mergeright": 1,
      "mergedown": 1,
      "mergecells": 1,
      "insertrow": 1,
      "insertrownext": 1,
      "deleterow": 1,
      "insertcol": 1,
      "insertcolnext": 1,
      "deletecol": 1,
      "splittocells": 1,
      "splittorows": 1,
      "splittocols": 1,
      "adaptbytext": 1,
      "adaptbywindow": 1,
      "adaptbycustomer": 1,
      "insertparagraph": 1,
      "insertparagraphbeforetable": 1,
      "averagedistributecol": 1,
      "averagedistributerow": 1
    };
    me.ready(function () {
      utils.cssRule('table',
        //选中的td上的样式
        '.selectTdClass{background-color:#edf5fa !important}' +
        'table.noBorderTable td,table.noBorderTable th,table.noBorderTable caption{border:1px dashed #ddd !important}' +
        //插入的表格的默认样式
        'table{margin-bottom:10px;border-collapse:collapse;display:table;}' +
        'td,th{padding: 5px 10px;border: 1px solid #DDD;}' +
        'caption{border:1px dashed #DDD;border-bottom:0;padding:3px;text-align:center;}' +
        'th{border-top:1px solid #BBB;background-color:#F7F7F7;}' +
        'table tr.firstRow th{border-top-width:2px;}' +
        '.ue-table-interlace-color-single{ background-color: #fcfcfc; } .ue-table-interlace-color-double{ background-color: #f7faff; }' +
        'td p{margin:0;padding:0;}', me.document);

      var tableCopyList, isFullCol, isFullRow;
      //注册del/backspace事件
      // if (!isFlag) {
      //   return
      // }
      // isFlag = false;
      me.addListener('keydown', function (cmd, evt) {
        var me = this;
        var keyCode = evt.keyCode || evt.which;

        if (keyCode == 8) {

          var ut = getUETableBySelected(me);
          if (ut && ut.selectedTds.length) {
            var ctrls = AX.dom.domUtils.findParent(
              ut.table,
              function (dom) {
                return axTools.hasClass(dom, "ctrl-bg");
              },
              true
            );
            if (ctrls && ctrls.getAttribute("contenteditable") == "false") {
              domUtils.preventDefault(evt);
              return;
            };
            if (ut.isFullCol()) {
              me.execCommand('deletecol')
            } else if (ut.isFullRow()) {
              me.execCommand('deleterow')
            } else {
              me.fireEvent('delcells');
            }
            domUtils.preventDefault(evt);
          }

          var caption = domUtils.findParentByTagName(me.selection.getStart(), 'caption', true),
            range = me.selection.getRange();
          if (range.collapsed && caption && isEmptyBlock(caption)) {
            me.fireEvent('saveScene');
            var table = caption.parentNode;
            domUtils.remove(caption);
            if (table) {
              range.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
            }
            me.fireEvent('saveScene');
          }
        }

        if (keyCode == 46) {

          ut = getUETableBySelected(me);
          if (ut) {
            me.fireEvent('saveScene');
            for (var i = 0, ci; ci = ut.selectedTds[i++];) {
              domUtils.fillNode(me.document, ci)
            }
            me.fireEvent('saveScene');
            domUtils.preventDefault(evt);

          }

        }
        if (keyCode == 13) {
          var rng = me.selection.getRange(),
            caption = domUtils.findParentByTagName(rng.startContainer, 'caption', true);
          if (caption) {
            var table = domUtils.findParentByTagName(caption, 'table');
            if (!rng.collapsed) {

              rng.deleteContents();
              me.fireEvent('saveScene');
            } else {
              if (caption) {
                rng.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
              }
            }
            domUtils.preventDefault(evt);
            return;
          }
          if (rng.collapsed) {
            var table = domUtils.findParentByTagName(rng.startContainer, 'table');
            if (table) {
              var cell = table.rows[0].cells[0],
                start = domUtils.findParentByTagName(me.selection.getStart(), ['td', 'th'], true),
                preNode = table.previousSibling;
              if (cell === start && (!preNode || preNode.nodeType == 1 && preNode.tagName == 'TABLE') && domUtils.isStartInblock(rng)) {
                var first = domUtils.findParent(me.selection.getStart(), function (n) {
                  return domUtils.isBlockElm(n)
                }, true);
                if (first && (/t(h|d)/i.test(first.tagName) || first === start.firstChild)) {
                  // me.execCommand('insertparagraphbeforetable');
                  // domUtils.preventDefault(evt);
                }

              }
            }
          }
        }

        if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == '67') {
          tableCopyList = null;
          var ut = getUETableBySelected(me);
          if (ut) {
            var tds = ut.selectedTds;
            isFullCol = ut.isFullCol();
            isFullRow = ut.isFullRow();
            tableCopyList = [
              [ut.cloneCell(tds[0], null, true)]
            ];
            for (var i = 1, ci; ci = tds[i]; i++) {
              if (ci.parentNode !== tds[i - 1].parentNode) {
                tableCopyList.push([ut.cloneCell(ci, null, true)]);
              } else {
                tableCopyList[tableCopyList.length - 1].push(ut.cloneCell(ci, null, true));
              }

            }
          }
        }
      });
      me.addListener("tablehasdeleted", function () {
        toggleDraggableState(this, false, "", null);
        if (dragButton) {
          domUtils.remove(dragButton);
        }
      });
      me.addListener('beforepaste', function (cmd, html) {
        var me = this;
        var rng = me.selection.getRange();
        if (domUtils.findParentByTagName(rng.startContainer, 'caption', true)) {
          var div = me.document.createElement("div");
          div.innerHTML = html.html;
          //trace:3729
          html.html = div[browser.ie9below ? 'innerText' : 'textContent'];
          return;
        }
        var table = getUETableBySelected(me);
        if (tableCopyList) {
          me.fireEvent('saveScene');
          var rng = me.selection.getRange();
          var td = domUtils.findParentByTagName(rng.startContainer, ['td', 'th'], true), tmpNode, preNode;
          if (td) {
            var ut = getUETable(td);
            if (isFullRow) {
              var rowIndex = ut.getCellInfo(td).rowIndex;
              if (td.tagName == 'TH') {
                rowIndex++;
              }
              for (var i = 0, ci; ci = tableCopyList[i++];) {
                var tr = ut.insertRow(rowIndex++, "td");
                for (var j = 0, cj; cj = ci[j]; j++) {
                  var cell = tr.cells[j];
                  if (!cell) {
                    cell = tr.insertCell(j)
                  }
                  cell.innerHTML = cj.innerHTML;
                  cj.getAttribute('width') && cell.setAttribute('width', cj.getAttribute('width'));
                  cj.getAttribute('vAlign') && cell.setAttribute('vAlign', cj.getAttribute('vAlign'));
                  cj.getAttribute('align') && cell.setAttribute('align', cj.getAttribute('align'));
                  cj.style.cssText && (cell.style.cssText = cj.style.cssText)
                }
                for (var j = 0, cj; cj = tr.cells[j]; j++) {
                  if (!ci[j]) {
                    break;
                  }
                  cj.innerHTML = ci[j].innerHTML;
                  ci[j].getAttribute('width') && cj.setAttribute('width', ci[j].getAttribute('width'));
                  ci[j].getAttribute('vAlign') && cj.setAttribute('vAlign', ci[j].getAttribute('vAlign'));
                  ci[j].getAttribute('align') && cj.setAttribute('align', ci[j].getAttribute('align'));
                  ci[j].style.cssText && (cj.style.cssText = ci[j].style.cssText)
                }
              }
            } else {
              if (isFullCol) {
                cellInfo = ut.getCellInfo(td);
                var maxColNum = 0;
                for (var j = 0, ci = tableCopyList[0], cj; cj = ci[j++];) {
                  maxColNum += cj.colSpan || 1;
                }
                me.__hasEnterExecCommand = true;
                for (i = 0; i < maxColNum; i++) {
                  me.execCommand('insertcol');
                }
                me.__hasEnterExecCommand = false;
                td = ut.table.rows[0].cells[cellInfo.cellIndex];
                if (td.tagName == 'TH') {
                  td = ut.table.rows[1].cells[cellInfo.cellIndex];
                }
              }
              for (var i = 0, ci; ci = tableCopyList[i++];) {
                tmpNode = td;
                for (var j = 0, cj; cj = ci[j++];) {
                  if (td) {
                    td.innerHTML = cj.innerHTML;
                    //todo 定制处理
                    cj.getAttribute('width') && td.setAttribute('width', cj.getAttribute('width'));
                    cj.getAttribute('vAlign') && td.setAttribute('vAlign', cj.getAttribute('vAlign'));
                    cj.getAttribute('align') && td.setAttribute('align', cj.getAttribute('align'));
                    cj.style.cssText && (td.style.cssText = cj.style.cssText);
                    preNode = td;
                    td = td.nextSibling;
                  } else {
                    var cloneTd = cj.cloneNode(true);
                    domUtils.removeAttributes(cloneTd, ['class', 'rowSpan', 'colSpan']);

                    preNode.parentNode.appendChild(cloneTd)
                  }
                }
                td = ut.getNextCell(tmpNode, true, true);
                if (!tableCopyList[i]) {
                  break;
                }
                if (!td) {
                  var cellInfo = ut.getCellInfo(tmpNode);
                  ut.table.insertRow(ut.table.rows.length);
                  ut.update();
                  td = ut.getVSideCell(tmpNode, true);
                }
              }
            }
            ut.update();
          } else {
            table = me.document.createElement('table');
            for (var i = 0, ci; ci = tableCopyList[i++];) {
              var tr = table.insertRow(table.rows.length);
              for (var j = 0, cj; cj = ci[j++];) {
                cloneTd = UT.cloneCell(cj, null, true);
                domUtils.removeAttributes(cloneTd, ['class']);
                tr.appendChild(cloneTd)
              }
              if (j == 2 && cloneTd.rowSpan > 1) {
                cloneTd.rowSpan = 1;
              }
            }

            var defaultValue = getDefaultValue(me),
              width = me.body.offsetWidth -
                (needIEHack ? parseInt(domUtils.getComputedStyle(me.body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (me.options.offsetWidth || 0);
            me.execCommand('insertHTML', '<table  ' +
              (isFullCol && isFullRow ? 'width="' + width + '"' : '') +
              '>' + table.innerHTML.replace(/>\s*</g, '><').replace(/\bth\b/gi, "td") + '</table>')
          }
          me.fireEvent('contentchange');
          me.fireEvent('saveScene');
          html.html = '';
          return true;
        }
        var div = me.document.createElement("div"), tables;
        div.innerHTML = html ? html.html : "";
        tables = div.getElementsByTagName("table");
        if (domUtils.findParentByTagName(me.selection.getStart(), 'table')) {
          utils.each(tables, function (t) {
            domUtils.remove(t)
          });
          if (domUtils.findParentByTagName(me.selection.getStart(), 'caption', true)) {
            div.innerHTML = div[browser.ie ? 'innerText' : 'textContent'];
          }
        } else {
          utils.each(tables, function (table) {
            removeStyleSize(table, true);
            domUtils.removeAttributes(table, ['style', 'border']);
            utils.each(domUtils.getElementsByTagName(table, "td"), function (td) {
              if (isEmptyBlock(td)) {
                domUtils.fillNode(me.document, td);
              }
              removeStyleSize(td, true);
              //                            domUtils.removeAttributes(td, ['style'])
            });
          });
        }
        html && (html.html = div.innerHTML);

      });

      me.addListener('afterpaste', function () {
        utils.each(domUtils.getElementsByTagName(me.body, "table"), function (table) {
          if (table.offsetWidth > me.body.offsetWidth) {
            var defaultValue = getDefaultValue(me, table);
            table.style.width = me.body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(me.body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (me.options.offsetWidth || 0) + 'px'
          }
        })
      });
      me.addListener('blur', function () {
        tableCopyList = null;
      });
      var timer;
      me.addListener('keydown', function () {
        clearTimeout(timer);
        timer = setTimeout(function () {
          var rng = me.selection.getRange(),
            cell = domUtils.findParentByTagName(rng.startContainer, ['th', 'td'], true);
          if (cell) {
            var table = cell.parentNode.parentNode.parentNode;
            if (table.offsetWidth > table.getAttribute("width")) {
              // cell.style.wordBreak = "break-all";
              cell.style.wordBreak = "break-word";
            }
          }

        }, 100);
      });
      me.addListener("selectionchange", function () {
        toggleDraggableState(me, false, "", null);
      });


      //内容变化时触发索引更新
      //todo 可否考虑标记检测，如果不涉及表格的变化就不进行索引重建和更新
      me.addListener("contentchange", function () {
        var me = this;
        //尽可能排除一些不需要更新的状况
        hideDragLine(me);
        if (getUETableBySelected(me)) {
          return;
        }
        var rng = me.selection.getRange();
        var start = rng.startContainer;
        start = domUtils.findParentByTagName(start, ['td', 'th'], true);
        utils.each(domUtils.getElementsByTagName(me.document, 'table'), function (table) {
          if (me.fireEvent("excludetable", table) === true) {
            return;
          }
          table.ueTable = new UT(table);
          //trace:3742
          //                utils.each(domUtils.getElementsByTagName(me.document, 'td'), function (td) {
          //
          //                    if (domUtils.isEmptyBlock(td) && td !== start) {
          //                        domUtils.fillNode(me.document, td);
          //                        if (browser.ie && browser.version == 6) {
          //                            td.innerHTML = '&nbsp;'
          //                        }
          //                    }
          //                });
          //                utils.each(domUtils.getElementsByTagName(me.document, 'th'), function (th) {
          //                    if (domUtils.isEmptyBlock(th) && th !== start) {
          //                        domUtils.fillNode(me.document, th);
          //                        if (browser.ie && browser.version == 6) {
          //                            th.innerHTML = '&nbsp;'
          //                        }
          //                    }
          //                });
          table.onmouseover = function () {
            me.fireEvent('tablemouseover', table);
          };
          table.onmousemove = function (evt) {
            me.fireEvent('tablemousemove', table);
            // mouseMoveEvent(evt);
            me.options.tableDragable && toggleDragButton(true, this, me);
            utils.defer(function () {
              me.fireEvent('contentchange', 50)
            }, true)
          };
          table.onmouseout = function () {
            me.fireEvent('tablemouseout', table);
            toggleDraggableState(me, false, "", null);
            hideDragLine(me);
          };
          table.onclick = function (evt) {
            evt = me.window.event || evt;
            var target = getParentTdOrTh(evt.target || evt.srcElement);
            if (!target) {
              return;
            }
            var ut = getUETable(target),
              table = ut.table,
              cellInfo = ut.getCellInfo(target),
              cellsRange,
              rng = me.selection.getRange();
            //        if ("topLeft" == inPosition(table, mouseCoords(evt))) {
            //            cellsRange = ut.getCellsRange(ut.table.rows[0].cells[0], ut.getLastCell());
            //            ut.setSelected(cellsRange);
            //            return;
            //        }
            //        if ("bottomRight" == inPosition(table, mouseCoords(evt))) {

            //            return;
            //        }
            // if (inTableSide(table, target, evt, true)) {
            //   var endTdCol = ut.getCell(ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].rowIndex, ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].cellIndex);
            //   if (evt.shiftKey && ut.selectedTds.length) {
            //     if (ut.selectedTds[0] !== endTdCol) {
            //       cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdCol);
            //       ut.setSelected(cellsRange);
            //     } else {
            //       rng && rng.selectNodeContents(endTdCol).select();
            //     }
            //   } else {
            //     if (target !== endTdCol) {
            //       cellsRange = ut.getCellsRange(target, endTdCol);
            //       ut.setSelected(cellsRange);
            //     } else {
            //       rng && rng.selectNodeContents(endTdCol).select();
            //     }
            //   }
            //   return;
            // }
            // if (inTableSide(table, target, evt)) {
            //   var endTdRow = ut.getCell(ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].rowIndex, ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].cellIndex);
            //   if (evt.shiftKey && ut.selectedTds.length) {
            //     if (ut.selectedTds[0] !== endTdRow) {
            //       cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdRow);
            //       ut.setSelected(cellsRange);
            //     } else {
            //       rng && rng.selectNodeContents(endTdRow).select();
            //     }
            //   } else {
            //     if (target !== endTdRow) {
            //       cellsRange = ut.getCellsRange(target, endTdRow);
            //       ut.setSelected(cellsRange);
            //     } else {
            //       rng && rng.selectNodeContents(endTdRow).select();
            //     }
            //   }
            // }
          };
        });

        switchBorderColor(me, true);
      });

      domUtils.on(me.document, "mousemove", mouseMoveEvent);

      domUtils.on(me.document, "mouseout", function (evt) {
        var target = evt.target || evt.srcElement;
        if (target.tagName == "TABLE") {
          toggleDraggableState(me, false, "", null);
        }
      });
      /**
       * 表格隔行变色
       */
      me.addListener("interlacetable", function (type, table, classList) {
        if (!table) {
          return;
        }
        var me = this,
          rows = table.rows,
          len = rows.length,
          getClass = function (list, index, repeat) {
            return list[index] ? list[index] : repeat ? list[index % list.length] : "";
          };
        for (var i = 0; i < len; i++) {
          rows[i].className = getClass(classList || me.options.classList, i, true);
        }
      });
      me.addListener("uninterlacetable", function (type, table) {
        if (!table) {
          return;
        }
        var me = this,
          rows = table.rows,
          classList = me.options.classList,
          len = rows.length;
        for (var i = 0; i < len; i++) {
          domUtils.removeClasses(rows[i], classList);
        }
      });

      me.addListener("mousedown", mouseDownEvent);
      me.addListener("mouseup", mouseUpEvent);
      //拖动的时候触发mouseup
      domUtils.on(me.body, 'dragstart', function (evt) {
        mouseUpEvent.call(me, 'dragstart', evt);
      });
      me.addOutputRule(function (root) {
        utils.each(root.getNodesByTagName('div'), function (n) {
          if (n.getAttr('id') == 'ue_tableDragLine') {
            n.parentNode.removeChild(n);
          }
        });
      });

      var currentRowIndex = 0;
      me.addListener("mousedown", function () {
        currentRowIndex = 0;
      });
      // me.addListener('tabkeydown', function () {
      //     var range = this.selection.getRange(),
      //         common = range.getCommonAncestor(true, true),
      //         table = domUtils.findParentByTagName(common, 'table');
      //     if (table) {
      //         if (domUtils.findParentByTagName(common, 'caption', true)) {
      //             var cell = domUtils.getElementsByTagName(table, 'th td');
      //             if (cell && cell.length) {
      //                 range.setStart(cell[0], 0).setCursor(false, true)
      //             }
      //         } else {
      //             var cell = domUtils.findParentByTagName(common, ['td', 'th'], true),
      //                 ua = getUETable(cell);
      //             currentRowIndex = cell.rowSpan > 1 ? currentRowIndex : ua.getCellInfo(cell).rowIndex;
      //             var nextCell = ua.getTabNextCell(cell, currentRowIndex);
      //             if (nextCell) {
      //                 if (isEmptyBlock(nextCell)) {
      //                     range.setStart(nextCell, 0).setCursor(false, true)
      //                 } else {
      //                     range.selectNodeContents(nextCell).select()
      //                 }
      //             } else {
      //                 me.fireEvent('saveScene');
      //                 me.__hasEnterExecCommand = true;
      //                 this.execCommand('insertrownext');
      //                 me.__hasEnterExecCommand = false;
      //                 range = this.selection.getRange();
      //                 range.setStart(table.rows[table.rows.length - 1].cells[0], 0).setCursor();
      //                 me.fireEvent('saveScene');
      //             }
      //         }
      //         return true;
      //     }

      // });
      browser.ie && me.addListener('selectionchange', function () {
        toggleDraggableState(this, false, "", null);
      });
      me.addListener("keydown", function (type, evt) {
        var me = this;
        //处理在表格的最后一个输入tab产生新的表格
        var keyCode = evt.keyCode || evt.which;
        if (keyCode == 8 || keyCode == 46) {
          return;
        }
        var notCtrlKey = !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey;
        notCtrlKey && removeSelectedClass(domUtils.getElementsByTagName(me.body, "td"));
        var ut = getUETableBySelected(me);
        if (!ut) {
          return;
        }
        notCtrlKey && ut.clearSelected();
      });

      me.addListener("beforegetcontent", function () {
        switchBorderColor(this, false);
        browser.ie && utils.each(this.document.getElementsByTagName('caption'), function (ci) {
          if (domUtils.isEmptyNode(ci)) {
            ci.innerHTML = '&nbsp;'
          }
        });
      });
      me.addListener("aftergetcontent", function () {
        switchBorderColor(this, true);
      });
      me.addListener("getAllHtml", function () {
        removeSelectedClass(me.document.getElementsByTagName("td"));
      });
      //修正全屏状态下插入的表格宽度在非全屏状态下撑开编辑器的情况
      me.addListener("fullscreenchanged", function (type, fullscreen) {
        if (!fullscreen) {
          var ratio = this.body.offsetWidth / document.body.offsetWidth,
            tables = domUtils.getElementsByTagName(this.body, "table");
          utils.each(tables, function (table) {
            if (table.offsetWidth < me.body.offsetWidth) {
              return false;
            }
            var tds = domUtils.getElementsByTagName(table, "td"),
              backWidths = [];
            utils.each(tds, function (td) {
              backWidths.push(td.offsetWidth);
            });
            for (var i = 0, td; td = tds[i]; i++) {
              td.setAttribute("width", Math.floor(backWidths[i] * ratio));
            }
            table.setAttribute("width", Math.floor(getTableWidth(me, needIEHack, getDefaultValue(me))))
          });
        }
      });

      //重写execCommand命令，用于处理框选时的处理
      var oldExecCommand = me.execCommand;
      me.execCommand = function (cmd, datatat) {

        var me = this,
          args = arguments;

        cmd = cmd.toLowerCase();
        var ut = getUETableBySelected(me), tds,
          range = new dom.Range(me.document),
          cmdFun = me.commands[cmd] || AX.commands[cmd],
          result;
        if (!cmdFun) {
          return;
        }
        if (ut && !commands[cmd] && !cmdFun.notNeedUndo && !me.__hasEnterExecCommand) {
          me.__hasEnterExecCommand = true;
          me.fireEvent("beforeexeccommand", cmd);
          tds = ut.selectedTds;
          var lastState = -2, lastValue = -2, value, state;
          for (var i = 0, td; td = tds[i]; i++) {
            if (isEmptyBlock(td)) {
              range.setStart(td, 0).setCursor(false, true)
            } else {
              range.selectNode(td).select(true);
            }
            state = me.queryCommandState(cmd);
            value = me.queryCommandValue(cmd);
            if (state != -1) {
              if (lastState !== state || lastValue !== value) {
                me._ignoreContentChange = true;
                result = oldExecCommand.apply(me, arguments);
                me._ignoreContentChange = false;

              }
              lastState = me.queryCommandState(cmd);
              lastValue = me.queryCommandValue(cmd);
              // ax-update: 这里会导致表格内的元素，在框选后被删除
              // if (domUtils.isEmptyBlock(td)) {
              // domUtils.fillNode(me.document, td)
              // }
            }
          }
          range.setStart(tds[0], 0).shrinkBoundary(true).setCursor(false, true);
          me.fireEvent('contentchange');
          me.fireEvent("afterexeccommand", cmd);
          me.__hasEnterExecCommand = false;
          me._selectionChange();
        } else {
          // if (!me.__hasEnterExecCommand) {
          //   me.__hasEnterExecCommand = true;
          //   result = oldExecCommand.apply(me, arguments);
          //   me.__hasEnterExecCommand = false;
          // }
          result = oldExecCommand.apply(me, arguments);


        }
        return result;
      };


    });

    /**
     * 删除obj的宽高style，改成属性宽高
     * @param obj
     * @param replaceToProperty
     */
    function removeStyleSize(obj, replaceToProperty) {
      removeStyle(obj, "width", true);
      removeStyle(obj, "height", true);
    }

    function removeStyle(obj, styleName, replaceToProperty) {
      if (obj.style[styleName]) {
        replaceToProperty && obj.setAttribute(styleName, parseInt(obj.style[styleName], 10));
        obj.style[styleName] = "";
      }
    }

    function getParentTdOrTh(ele) {
      if (ele.tagName == "TD" || ele.tagName == "TH") {
        return ele;
      }
      var td;
      if (td = domUtils.findParentByTagName(ele, "td", true) || domUtils.findParentByTagName(ele, "th", true)) {
        return td;
      }
      return null;
    }

    function isEmptyBlock(node) {
      var reg = new RegExp(domUtils.fillChar, 'g');
      if (node[browser.ie ? 'innerText' : 'textContent'].replace(/^\s*$/, '').replace(reg, '').length > 0) {
        return 0;
      }
      for (var n in dtd.$isNotEmpty) {
        if (node.getElementsByTagName(n).length) {
          return 0;
        }
      }
      return 1;
    }


    function mouseCoords(evt) {
      if (evt.pageX || evt.pageY) {
        return { x: evt.pageX, y: evt.pageY };
      }
      return {
        x: evt.clientX + me.document.body.scrollLeft - me.document.body.clientLeft,
        y: evt.clientY + me.document.body.scrollTop - me.document.body.clientTop
      };
    }

    function mouseMoveEvent(evt) {

      if (isEditorDisabled()) {
        return;
      }

      try {

        //普通状态下鼠标移动
        var target = getParentTdOrTh(evt.target || evt.srcElement),
          pos,
          bodyMarginTop = me.document.body.style.marginTop;
        //修复纸张页边距，导致表格拖拽示意线位置不准bug
        bodyMarginTop = bodyMarginTop && !isNaN(parseInt(bodyMarginTop)) ? parseInt(bodyMarginTop) : 0;

        //区分用户的行为是拖动还是双击
        if (isInResizeBuffer) {

          me.body.style.webkitUserSelect = 'none';

          if (Math.abs(userActionStatus.x - evt.clientX) > offsetOfTableCell || Math.abs(userActionStatus.y - evt.clientY) > offsetOfTableCell) {
            clearTableDragTimer();
            isInResizeBuffer = false;
            singleClickState = 0;
            //drag action
            tableBorderDrag(evt);
          }
        }

        //修改单元格大小时的鼠标移动
        if (onDrag && dragTd) {
          singleClickState = 0;
          me.body.style.webkitUserSelect = 'none';
          me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
          pos = mouseCoords(evt);
          toggleDraggableState(me, true, onDrag, pos, target);
          if (onDrag == "h") {
            dragLine.style.left = getPermissionX(dragTd, evt) + "px";
          } else if (onDrag == "v") {
            dragLine.style.top = getPermissionY(dragTd, evt) - bodyMarginTop + "px";
          }
          return;
        }
        //当鼠标处于table上时，修改移动过程中的光标状态
        if (target) {
          //针对使用table作为容器的组件不触发拖拽效果
          if (me.fireEvent('excludetable', target) === true) {
            return;
          }
          pos = mouseCoords(evt);
          var state = getRelation(target, pos),
            table = domUtils.findParentByTagName(target, "table", true);

          if (inTableSide(table, target, evt, true)) {
            if (me.fireEvent("excludetable", table) === true) {
              return;
            }
            me.body.style.cursor = "url(" + me.options.cursorpath + "h.png),pointer";
          } else if (inTableSide(table, target, evt)) {
            if (me.fireEvent("excludetable", table) === true) {
              return;
            }
            me.body.style.cursor = "url(" + me.options.cursorpath + "v.png),pointer";
          } else {
            me.body.style.cursor = "text";
            var curCell = target;
            if (/\d/.test(state)) {
              state = state.replace(/\d/, '');
              target = getUETable(target).getPreviewCell(target, state == "v");
            }
            //位于第一行的顶部或者第一列的左边时不可拖动
            toggleDraggableState(me, target ? !!state : false, target ? state : '', pos, target);

          }
        } else {
          toggleDragButton(false, table, me);
        }

      } catch (e) {
        showError(e);
      }
    }

    var dragButtonTimer;

    function toggleDragButton(show, table, editor) {
      if (!show) {
        if (dragOver) {
          return;
        }
        dragButtonTimer = setTimeout(function () {
          !dragOver && dragButton && dragButton.parentNode && dragButton.parentNode.removeChild(dragButton);
        }, 2000);
      } else {
        createDragButton(table, editor);
      }
    }

    function createDragButton(table, editor) {
      var pos = domUtils.getXY(table),
        doc = table.ownerDocument;
      if (dragButton && dragButton.parentNode) {
        return dragButton;
      }
      dragButton = doc.createElement("div");
      dragButton.contentEditable = false;
      dragButton.innerHTML = "";
      dragButton.style.cssText = "width:15px;height:15px;background-image:url(" + editor.options.AXEDITOR_HOME_URL + "dialogs/table/dragicon.png);position: absolute;cursor:move;top:" + (pos.y - 15) + "px;left:" + pos.x + "px;";
      domUtils.unSelectable(dragButton);
      dragButton.onmouseover = function (evt) {
        dragOver = true;
      };
      dragButton.onmouseout = function (evt) {
        dragOver = false;
      };
      domUtils.on(dragButton, 'click', function (type, evt) {
        doClick(evt, this);
      });
      domUtils.on(dragButton, 'dblclick', function (type, evt) {
        doDblClick(evt);
      });
      domUtils.on(dragButton, 'dragstart', function (type, evt) {
        domUtils.preventDefault(evt);
      });
      var timer;

      function doClick(evt, button) {
        // 部分浏览器下需要清理
        clearTimeout(timer);
        timer = setTimeout(function () {
          editor.fireEvent("tableClicked", table, button);
        }, 300);
      }

      function doDblClick(evt) {
        clearTimeout(timer);
        var ut = getUETable(table),
          start = table.rows[0].cells[0],
          end = ut.getLastCell(),
          range = ut.getCellsRange(start, end);
        editor.selection.getRange().setStart(start, 0).setCursor(false, true);
        ut.setSelected(range);
      }

      doc.body.appendChild(dragButton);
    }


    //    function inPosition(table, pos) {
    //        var tablePos = domUtils.getXY(table),
    //            width = table.offsetWidth,
    //            height = table.offsetHeight;
    //        if (pos.x - tablePos.x < 5 && pos.y - tablePos.y < 5) {
    //            return "topLeft";
    //        } else if (tablePos.x + width - pos.x < 5 && tablePos.y + height - pos.y < 5) {
    //            return "bottomRight";
    //        }
    //    }

    function inTableSide(table, cell, evt, top) {
      var pos = mouseCoords(evt),
        state = getRelation(cell, pos);

      if (top) {
        var caption = table.getElementsByTagName("caption")[0],
          capHeight = caption ? caption.offsetHeight : 0;
        return state == "v1" && pos.y - domUtils.getXY(table).y - capHeight < 8;
      }
      return state == "h1" && pos.x - domUtils.getXY(table).x < 8;

    }

    /**
     * 获取拖动时允许的X轴坐标
     * @param dragTd
     * @param evt
     */
    function getPermissionX(dragTd, evt) {
      var ut = getUETable(dragTd),
        bodyMarginLeft = (me.document.children[0].scrollWidth - me.document.body.scrollWidth) / 2;
      //修复纸张页边距，导致表格拖拽位置不准bug
      bodyMarginLeft = bodyMarginLeft && !isNaN(parseInt(bodyMarginLeft)) ? parseInt(bodyMarginLeft) : 0;
      if (ut) {
        var preTd = ut.getSameEndPosCells(dragTd, "x")[0],
          nextTd = ut.getSameStartPosXCells(dragTd)[0],
          mouseX = mouseCoords(evt).x - bodyMarginLeft,
          left = (preTd ? domUtils.getXY(preTd).x : domUtils.getXY(ut.table).x) + 20,
          right = nextTd ? domUtils.getXY(nextTd).x + nextTd.offsetWidth - 20 : me.body.offsetWidth + 5 || parseInt(domUtils.getComputedStyle(me.body, "width"), 10);

        left += cellMinWidth - bodyMarginLeft;
        right -= cellMinWidth - bodyMarginLeft;

        return mouseX < left ? left : mouseX > right ? right : mouseX;
      }
    }

    /**
     * 获取拖动时允许的Y轴坐标
     */
    function getPermissionY(dragTd, evt) {
      try {
        var top = domUtils.getXY(dragTd).y,
          mousePosY = mouseCoords(evt).y;
        return mousePosY < top ? top : mousePosY;
      } catch (e) {
        showError(e);
      }
    }

    /**
     * 移动状态切换
     */
    function toggleDraggableState(editor, draggable, dir, mousePos, cell) {
      try {
        editor.body.style.cursor = dir == "h" ? "col-resize" : dir == "v" ? "row-resize" : "text";
        if (browser.ie) {
          if (dir && !mousedown && !getUETableBySelected(editor)) {
            getDragLine(editor, editor.document);
            showDragLineAt(dir, cell);
          } else {
            hideDragLine(editor)
          }
        }
        onBorder = draggable;
      } catch (e) {
        showError(e);
      }
    }

    /**
     * 获取与UETable相关的resize line
     * @param uetable UETable对象
     */
    function getResizeLineByUETable() {

      var lineId = '_UETableResizeLine',
        line = this.document.getElementById(lineId);

      if (!line) {
        line = this.document.createElement("div");
        line.id = lineId;
        line.contnetEditable = false;
        line.setAttribute("unselectable", "on");

        var styles = {
          width: 2 * cellBorderWidth + 1 + 'px',
          position: 'absolute',
          'z-index': 100000,
          cursor: 'col-resize',
          background: 'red',
          display: 'none'
        };

        //切换状态
        line.onmouseout = function () {
          this.style.display = 'none';
        };

        utils.extend(line.style, styles);

        this.document.body.appendChild(line);

      }

      return line;

    }

    /**
     * 更新resize-line
     */
    function updateResizeLine(cell, uetable) {

      var line = getResizeLineByUETable.call(this),
        table = uetable.table,
        styles = {
          top: domUtils.getXY(table).y + 'px',
          left: domUtils.getXY(cell).x + cell.offsetWidth - cellBorderWidth + 'px',
          display: 'block',
          height: table.offsetHeight + 'px'
        };

      utils.extend(line.style, styles);

    }

    /**
     * 显示resize-line
     */
    function showResizeLine(cell) {

      var uetable = getUETable(cell);

      updateResizeLine.call(this, cell, uetable);

    }

    /**
     * 获取鼠标与当前单元格的相对位置
     * @param ele
     * @param mousePos
     */
    function getRelation(ele, mousePos) {
      var elePos = domUtils.getXY(ele),
        bodyMarginLeft = (me.document.children[0].scrollWidth - me.document.body.scrollWidth) / 2,
        bodyMarginTop = me.document.body.style.marginTop;
      //修复纸张页边距，导致表格拖拽位置不准bug
      bodyMarginLeft = bodyMarginLeft && !isNaN(parseInt(bodyMarginLeft)) ? parseInt(bodyMarginLeft) : 0;
      bodyMarginTop = bodyMarginTop && !isNaN(parseInt(bodyMarginTop)) ? parseInt(bodyMarginTop) : 0;

      if (!elePos) {
        return '';
      }

      if (elePos.x + ele.offsetWidth - mousePos.x + bodyMarginLeft < cellBorderWidth) {
        return "h";
      }
      if (mousePos.x - elePos.x < cellBorderWidth) {
        return 'h1'
      }
      if (elePos.y + ele.offsetHeight - mousePos.y + bodyMarginTop < cellBorderWidth) {
        return "v";
      }
      if (mousePos.y - elePos.y < cellBorderWidth) {
        return 'v1'
      }
      return '';
    }

    function mouseDownEvent(type, evt) {

      if (isEditorDisabled()) {
        return;
      }

      userActionStatus = {
        x: evt.clientX,
        y: evt.clientY
      };

      //右键菜单单独处理
      if (evt.button == 2) {
        var ut = getUETableBySelected(me),
          flag = false;

        if (ut) {
          var td = getTargetTd(me, evt);
          utils.each(ut.selectedTds, function (ti) {
            if (ti === td) {
              flag = true;
            }
          });
          if (!flag) {
            removeSelectedClass(domUtils.getElementsByTagName(me.body, "th td"));
            ut.clearSelected()
          } else {
            td = ut.selectedTds[0];
            setTimeout(function () {
              me.selection.getRange().setStart(td, 0).setCursor(false, true);
            }, 0);

          }
        }
      } else {
        tableClickHander(evt);
      }

    }

    //清除表格的计时器
    function clearTableTimer() {
      tabTimer && clearTimeout(tabTimer);
      tabTimer = null;
    }

    //双击收缩
    function tableDbclickHandler(evt) {
      singleClickState = 0;
      evt = evt || me.window.event;
      var target = getParentTdOrTh(evt.target || evt.srcElement);
      if (target) {
        var h;
        if (h = getRelation(target, mouseCoords(evt))) {

          hideDragLine(me);

          if (h == 'h1') {
            h = 'h';
            if (inTableSide(domUtils.findParentByTagName(target, "table"), target, evt)) {
              me.execCommand('adaptbywindow');
            } else {
              target = getUETable(target).getPreviewCell(target);
              if (target) {
                var rng = me.selection.getRange();
                rng.selectNodeContents(target).setCursor(true, true)
              }
            }
          }
          if (h == 'h') {
            var ut = getUETable(target),
              table = ut.table,
              cells = getCellsByMoveBorder(target, table, true);

            cells = extractArray(cells, 'left');

            ut.width = ut.offsetWidth;

            var oldWidth = [],
              newWidth = [];

            utils.each(cells, function (cell) {

              oldWidth.push(cell.offsetWidth);

            });

            utils.each(cells, function (cell) {

              cell.removeAttribute("width");

            });

            window.setTimeout(function () {

              //是否允许改变
              var changeable = true;

              utils.each(cells, function (cell, index) {

                var width = cell.offsetWidth;

                if (width > oldWidth[index]) {
                  changeable = false;
                  return false;
                }

                newWidth.push(width);

              });

              var change = changeable ? newWidth : oldWidth;

              utils.each(cells, function (cell, index) {

                cell.width = change[index] - getTabcellSpace();

              });


            }, 0);

            //                    minWidth -= cellMinWidth;
            //
            //                    table.removeAttribute("width");
            //                    utils.each(cells, function (cell) {
            //                        cell.style.width = "";
            //                        cell.width -= minWidth;
            //                    });

          }
        }
      }
    }

    function tableClickHander(evt) {

      removeSelectedClass(domUtils.getElementsByTagName(me.body, "td th"));
      //trace:3113
      //选中单元格，点击table外部，不会清掉table上挂的ueTable,会引起getUETableBySelected方法返回值
      utils.each(me.document.getElementsByTagName('table'), function (t) {
        t.ueTable = null;
      });
      startTd = getTargetTd(me, evt);
      if (!startTd) {
        return;
      }
      var table = domUtils.findParentByTagName(startTd, "table", true);
      ut = getUETable(table);
      ut && ut.clearSelected();

      //判断当前鼠标状态
      if (!onBorder) {
        me.document.body.style.webkitUserSelect = '';
        mousedown = true;
        me.addListener('mouseover', mouseOverEvent);
      } else {
        //边框上的动作处理
        borderActionHandler(evt);
      }


    }

    //处理表格边框上的动作, 这里做延时处理，避免两种动作互相影响
    function borderActionHandler(evt) {

      if (browser.ie) {
        evt = reconstruct(evt);
      }

      clearTableDragTimer();

      //是否正在等待resize的缓冲中
      isInResizeBuffer = true;

      tableDragTimer = setTimeout(function () {
        tableBorderDrag(evt);
      }, dblclickTime);

    }

    function extractArray(originArr, key) {

      var result = [],
        tmp = null;

      for (var i = 0, len = originArr.length; i < len; i++) {

        tmp = originArr[i][key];

        if (tmp) {
          result.push(tmp);
        }

      }

      return result;

    }

    function clearTableDragTimer() {
      tableDragTimer && clearTimeout(tableDragTimer);
      tableDragTimer = null;
    }

    function reconstruct(obj) {

      var attrs = ['pageX', 'pageY', 'clientX', 'clientY', 'srcElement', 'target'],
        newObj = {};

      if (obj) {

        for (var i = 0, key, val; key = attrs[i]; i++) {
          val = obj[key];
          val && (newObj[key] = val);
        }

      }

      return newObj;

    }

    //边框拖动
    function tableBorderDrag(evt) {

      isInResizeBuffer = false;

      startTd = evt.target || evt.srcElement;
      if (!startTd) {
        return;
      }
      var state = getRelation(startTd, mouseCoords(evt));
      if (/\d/.test(state)) {
        state = state.replace(/\d/, '');
        startTd = getUETable(startTd).getPreviewCell(startTd, state == 'v');
      }
      hideDragLine(me);
      getDragLine(me, me.document);
      me.fireEvent('saveScene');
      showDragLineAt(state, startTd);
      mousedown = true;
      //拖动开始
      onDrag = state;
      dragTd = startTd;
    }

    function mouseUpEvent(type, evt) {

      if (isEditorDisabled()) {
        return;
      }

      clearTableDragTimer();

      isInResizeBuffer = false;

      if (onBorder) {
        singleClickState = ++singleClickState % 3;

        userActionStatus = {
          x: evt.clientX,
          y: evt.clientY
        };

        tableResizeTimer = setTimeout(function () {
          singleClickState > 0 && singleClickState--;
        }, dblclickTime);

        if (singleClickState === 2) {

          singleClickState = 0;
          tableDbclickHandler(evt);
          return;

        }

      }

      if (evt.button == 2) {
        return;
      }
      var me = this;
      //清除表格上原生跨选问题
      var range = me.selection.getRange(),
        start = domUtils.findParentByTagName(range.startContainer, 'table', true),
        end = domUtils.findParentByTagName(range.endContainer, 'table', true);

      if (start || end) {
        if (start === end) {
          start = domUtils.findParentByTagName(range.startContainer, ['td', 'th', 'caption'], true);
          end = domUtils.findParentByTagName(range.endContainer, ['td', 'th', 'caption'], true);
          if (start !== end) {
            me.selection.clearRange()
          }
        } else {
          me.selection.clearRange()
        }
      }
      mousedown = false;
      me.document.body.style.webkitUserSelect = '';
      //拖拽状态下的mouseUP
      if (onDrag && dragTd) {

        me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();

        singleClickState = 0;
        dragLine = me.document.getElementById('ue_tableDragLine');

        // trace 3973
        if (dragLine) {
          var dragTdPos = domUtils.getXY(dragTd),
            dragLinePos = domUtils.getXY(dragLine),
            bodyMarginTop = me.document.body.style.marginTop;
          //修复纸张页边距，导致表格拖拽距离不准bug
          bodyMarginTop = bodyMarginTop && !isNaN(parseInt(bodyMarginTop)) ? parseInt(bodyMarginTop) : 0;

          switch (onDrag) {
            case "h":
              changeColWidth(dragTd, dragLinePos.x - dragTdPos.x);
              break;
            case "v":
              changeRowHeight(dragTd, dragLinePos.y - dragTdPos.y - dragTd.offsetHeight);
              break;
            default:
          }
          onDrag = "";
          dragTd = null;

          hideDragLine(me);
          me.fireEvent('saveScene');
          return;
        }
      }
      //正常状态下的mouseup
      if (!startTd) {
        var target = domUtils.findParentByTagName(evt.target || evt.srcElement, "td", true);
        if (!target) {
          target = domUtils.findParentByTagName(evt.target || evt.srcElement, "th", true);
        }
        if (target && (target.tagName == "TD" || target.tagName == "TH")) {
          if (me.fireEvent("excludetable", target) === true) {
            return;
          }
          range = new dom.Range(me.document);
          // range.setStart(target, 0).setCursor(false, true);
        }
      } else {
        var ut = getUETable(startTd),
          cell = ut ? ut.selectedTds[0] : null;
        if (cell) {
          range = new dom.Range(me.document);
          if (domUtils.isEmptyBlock(cell)) {
            range.setStart(cell, 0).setCursor(false, true);
          } else {
            range.selectNodeContents(cell).shrinkBoundary().setCursor(false, true);
          }
        } else {
          range = me.selection.getRange().shrinkBoundary();
          if (!range.collapsed) {
            var start = domUtils.findParentByTagName(range.startContainer, ['td', 'th'], true),
              end = domUtils.findParentByTagName(range.endContainer, ['td', 'th'], true);
            //在table里边的不能清除
            if (start && !end || !start && end || start && end && start !== end) {
              range.setCursor(false, true);
            }
          }
        }
        startTd = null;
        me.removeListener('mouseover', mouseOverEvent);
      }
      me._selectionChange(250, evt);
    }

    function mouseOverEvent(type, evt) {

      if (isEditorDisabled()) {
        return;
      }

      var me = this,
        tar = evt.target || evt.srcElement;
      currentTd = domUtils.findParentByTagName(tar, "td", true) || domUtils.findParentByTagName(tar, "th", true);
      //需要判断两个TD是否位于同一个表格内
      if (startTd && currentTd &&
        (startTd.tagName == "TD" && currentTd.tagName == "TD" || startTd.tagName == "TH" && currentTd.tagName == "TH") &&
        domUtils.findParentByTagName(startTd, 'table') == domUtils.findParentByTagName(currentTd, 'table')) {
        var ut = getUETable(currentTd);
        if (startTd != currentTd) {
          me.document.body.style.webkitUserSelect = 'none';
          me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
          var range = ut.getCellsRange(startTd, currentTd);
          ut.setSelected(range);
        } else {
          me.document.body.style.webkitUserSelect = '';
          ut.clearSelected();
        }

      }
      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
    }

    function setCellHeight(cell, height, backHeight) {
      var lineHight = parseInt(domUtils.getComputedStyle(cell, "line-height"), 10),
        tmpHeight = backHeight + height;
      height = tmpHeight < lineHight ? lineHight : tmpHeight;
      if (cell.style.height) {
        cell.style.height = "";
      }
      cell.rowSpan == 1 ? cell.setAttribute("height", height) : cell.removeAttribute && cell.removeAttribute("height");
    }

    function getWidth(cell) {
      if (!cell) {
        return 0;
      }
      return parseInt(domUtils.getComputedStyle(cell, "width"), 10);
    }

    function changeColWidth(cell, changeValue) {

      var ut = getUETable(cell);
      if (ut) {

        //根据当前移动的边框获取相关的单元格
        var table = ut.table,
          cells = getCellsByMoveBorder(cell, table);

        table.style.width = "";
        table.removeAttribute("width");

        //修正改变量
        changeValue = correctChangeValue(changeValue, cell, cells);

        if (cell.nextSibling) {

          var i = 0;

          utils.each(cells, function (cellGroup) {

            cellGroup.left.width = +cellGroup.left.width + changeValue;
            cellGroup.right && (cellGroup.right.width = +cellGroup.right.width - changeValue);

          });

        } else {

          utils.each(cells, function (cellGroup) {
            cellGroup.left.width -= -changeValue;
          });

        }
      }

    }

    function isEditorDisabled() {
      return me.body.contentEditable === "false";
    }

    function changeRowHeight(td, changeValue) {
      if (Math.abs(changeValue) < 10) {
        return;
      }
      var ut = getUETable(td);
      if (ut) {
        var cells = ut.getSameEndPosCells(td, "y"),
          //备份需要连带变化的td的原始高度，否则后期无法获取正确的值
          backHeight = cells[0] ? cells[0].offsetHeight : 0;
        for (var i = 0, cell; cell = cells[i++];) {
          setCellHeight(cell, changeValue, backHeight);
        }
      }

    }

    /**
     * 获取调整单元格大小的相关单元格
     * @isContainMergeCell 返回的结果中是否包含发生合并后的单元格
     */
    function getCellsByMoveBorder(cell, table, isContainMergeCell) {

      if (!table) {
        table = domUtils.findParentByTagName(cell, 'table');
      }

      if (!table) {
        return null;
      }

      //获取到该单元格所在行的序列号
      var index = domUtils.getNodeIndex(cell),
        temp = cell,
        rows = table.rows,
        colIndex = 0;

      while (temp) {
        //获取到当前单元格在未发生单元格合并时的序列
        if (temp.nodeType === 1) {
          colIndex += temp.colSpan || 1;
        }
        temp = temp.previousSibling;
      }

      temp = null;

      //记录想关的单元格
      var borderCells = [];

      utils.each(rows, function (tabRow) {

        var cells = tabRow.cells,
          currIndex = 0;

        utils.each(cells, function (tabCell) {

          currIndex += tabCell.colSpan || 1;

          if (currIndex === colIndex) {

            borderCells.push({
              left: tabCell,
              right: tabCell.nextSibling || null
            });

            return false;

          } else if (currIndex > colIndex) {

            if (isContainMergeCell) {
              borderCells.push({
                left: tabCell
              });
            }

            return false;
          }


        });

      });

      return borderCells;

    }


    /**
     * 通过给定的单元格集合获取最小的单元格width
     */
    function getMinWidthByTableCells(cells) {

      var minWidth = Number.MAX_VALUE;

      for (var i = 0, curCell; curCell = cells[i]; i++) {

        minWidth = Math.min(minWidth, curCell.width || getTableCellWidth(curCell));

      }

      return minWidth;

    }

    function correctChangeValue(changeValue, relatedCell, cells) {

      //为单元格的paading预留空间
      changeValue -= getTabcellSpace();

      if (changeValue < 0) {
        return 0;
      }

      changeValue -= getTableCellWidth(relatedCell);

      //确定方向
      var direction = changeValue < 0 ? 'left' : 'right';

      changeValue = Math.abs(changeValue);

      //只关心非最后一个单元格就可以
      utils.each(cells, function (cellGroup) {

        var curCell = cellGroup[direction];

        //为单元格保留最小空间
        if (curCell) {
          changeValue = Math.min(changeValue, getTableCellWidth(curCell) - cellMinWidth);
        }


      });


      //修正越界
      changeValue = changeValue < 0 ? 0 : changeValue;

      return direction === 'left' ? -changeValue : changeValue;

    }

    function getTableCellWidth(cell) {

      var width = 0,
        //偏移纠正量
        offset = 0,
        width = cell.offsetWidth - getTabcellSpace();

      //最后一个节点纠正一下
      if (!cell.nextSibling) {

        width -= getTableCellOffset(cell);

      }

      width = width < 0 ? 0 : width;

      try {
        cell.width = width;
      } catch (e) {
      }

      return width;

    }

    /**
     * 获取单元格所在表格的最末单元格的偏移量
     */
    function getTableCellOffset(cell) {

      tab = domUtils.findParentByTagName(cell, "table", false);

      if (tab.offsetVal === undefined) {

        var prev = cell.previousSibling;

        if (prev) {

          //最后一个单元格和前一个单元格的width diff结果 如果恰好为一个border width， 则条件成立
          tab.offsetVal = cell.offsetWidth - prev.offsetWidth === UT.borderWidth ? UT.borderWidth : 0;

        } else {
          tab.offsetVal = 0;
        }

      }

      return tab.offsetVal;

    }

    function getTabcellSpace() {

      if (UT.tabcellSpace === undefined) {

        var cell = null,
          tab = me.document.createElement("table"),
          tbody = me.document.createElement("tbody"),
          trow = me.document.createElement("tr"),
          tabcell = me.document.createElement("td"),
          mirror = null;

        tabcell.style.cssText = 'border: 0;';
        tabcell.width = 1;

        trow.appendChild(tabcell);
        trow.appendChild(mirror = tabcell.cloneNode(false));

        tbody.appendChild(trow);

        tab.appendChild(tbody);

        tab.style.cssText = "visibility: hidden;";

        me.body.appendChild(tab);

        UT.paddingSpace = tabcell.offsetWidth - 1;

        var tmpTabWidth = tab.offsetWidth;

        tabcell.style.cssText = '';
        mirror.style.cssText = '';

        UT.borderWidth = (tab.offsetWidth - tmpTabWidth) / 3;

        UT.tabcellSpace = UT.paddingSpace + UT.borderWidth;

        me.body.removeChild(tab);

      }

      getTabcellSpace = function () {
        return UT.tabcellSpace;
      };

      return UT.tabcellSpace;

    }

    function getDragLine(editor, doc) {
      if (mousedown) {
        return;
      }
      dragLine = editor.document.createElement("div");
      domUtils.setAttributes(dragLine, {
        id: "ue_tableDragLine",
        unselectable: 'on',
        contenteditable: false,
        'onresizestart': 'return false',
        'ondragstart': 'return false',
        'onselectstart': 'return false',
        style: "background-color:blue;position:absolute;padding:0;margin:0;background-image:none;border:0px none;opacity:0;filter:alpha(opacity=0)"
      });
      editor.body.appendChild(dragLine);
    }

    function hideDragLine(editor) {
      if (mousedown) {
        return;
      }
      var line;
      while (line = editor.document.getElementById('ue_tableDragLine')) {
        domUtils.remove(line)
      }
    }

    /**
     * 依据state（v|h）在cell位置显示横线
     * @param state
     * @param cell
     */
    function showDragLineAt(state, cell) {
      if (!cell) {
        return;
      }
      var table = domUtils.findParentByTagName(cell, "table"),
        caption = table.getElementsByTagName('caption'),
        width = table.offsetWidth,
        height = table.offsetHeight - (caption.length > 0 ? caption[0].offsetHeight : 0),
        tablePos = domUtils.getXY(table),
        cellPos = domUtils.getXY(cell), css;

      switch (state) {
        case "h":
          css = 'height:' + height + 'px;top:' + (tablePos.y + (caption.length > 0 ? caption[0].offsetHeight : 0)) + 'px;left:' + (cellPos.x + cell.offsetWidth);
          dragLine.style.cssText = css + 'px;position: absolute;display:block;background-color:blue;width:1px;border:0; color:blue;opacity:.3;filter:alpha(opacity=30)';
          break;
        case "v":
          css = 'width:' + width + 'px;left:' + tablePos.x + 'px;top:' + (cellPos.y + cell.offsetHeight);
          //必须加上border:0和color:blue，否则低版ie不支持背景色显示
          dragLine.style.cssText = css + 'px;overflow:hidden;position: absolute;display:block;background-color:blue;height:1px;border:0;color:blue;opacity:.2;filter:alpha(opacity=20)';
          break;
        default:
      }
    }

    /**
     * 当表格边框颜色为白色时设置为虚线,true为添加虚线
     * @param editor
     * @param flag
     */
    function switchBorderColor(editor, flag) {
      var tableArr = domUtils.getElementsByTagName(editor.body, "table"), color;
      for (var i = 0, node; node = tableArr[i++];) {
        var td = domUtils.getElementsByTagName(node, "td");
        if (td[0]) {
          if (flag) {
            color = td[0].style.borderColor.replace(/\s/g, "");
            if (/(#ffffff)|(rgb\(255,255,255\))/ig.test(color)) {
              domUtils.addClass(node, "noBorderTable")
            }
          } else {
            domUtils.removeClasses(node, "noBorderTable")
          }
        }

      }
    }

    function getTableWidth(editor, needIEHack, defaultValue) {
      var body = editor.body;
      return body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (editor.options.offsetWidth || 0);
    }

    /**
     * 获取当前拖动的单元格
     */
    function getTargetTd(editor, evt) {

      var target = domUtils.findParentByTagName(evt.target || evt.srcElement, ["td", "th"], true),
        dir = null;

      if (!target) {
        return null;
      }

      dir = getRelation(target, mouseCoords(evt));

      //如果有前一个节点， 需要做一个修正， 否则可能会得到一个错误的td

      if (!target) {
        return null;
      }

      if (dir === 'h1' && target.previousSibling) {

        var position = domUtils.getXY(target),
          cellWidth = target.offsetWidth;

        if (Math.abs(position.x + cellWidth - evt.clientX) > cellWidth / 3) {
          target = target.previousSibling;
        }

      } else if (dir === 'v1' && target.parentNode.previousSibling) {

        var position = domUtils.getXY(target),
          cellHeight = target.offsetHeight;

        if (Math.abs(position.y + cellHeight - evt.clientY) > cellHeight / 3) {
          target = target.parentNode.previousSibling.firstChild;
        }

      }


      //排除了非td内部以及用于代码高亮部分的td
      return target && !(editor.fireEvent("excludetable", target) === true) ? target : null;
    }

  };


  // plugins/table.sort.js
  /**
   * Created with JetBrains PhpStorm.
   * User: Jinqn
   * Date: 13-10-12
   * Time: 上午10:20
   * To change this template use File | Settings | File Templates.
   */

  AX.UETable.prototype.sortTable = function (sortByCellIndex, compareFn) {
    var table = this.table,
      rows = table.rows,
      trArray = [],
      flag = rows[0].cells[0].tagName === "TH",
      lastRowIndex = 0;
    if (this.selectedTds.length) {
      var range = this.cellsRange,
        len = range.endRowIndex + 1;
      for (var i = range.beginRowIndex; i < len; i++) {
        trArray[i] = rows[i];
      }
      trArray.splice(0, range.beginRowIndex);
      lastRowIndex = range.endRowIndex + 1 === this.rowsNum ? 0 : range.endRowIndex + 1;
    } else {
      for (var i = 0, len = rows.length; i < len; i++) {
        trArray[i] = rows[i];
      }
    }

    var Fn = {
      'reversecurrent': function (td1, td2) {
        return 1;
      },
      'orderbyasc': function (td1, td2) {
        var value1 = td1.innerText || td1.textContent,
          value2 = td2.innerText || td2.textContent;
        return value1.localeCompare(value2);
      },
      'reversebyasc': function (td1, td2) {
        var value1 = td1.innerHTML,
          value2 = td2.innerHTML;
        return value2.localeCompare(value1);
      },
      'orderbynum': function (td1, td2) {
        var value1 = td1[browser.ie ? 'innerText' : 'textContent'].match(/\d+/),
          value2 = td2[browser.ie ? 'innerText' : 'textContent'].match(/\d+/);
        if (value1) {
          value1 = +value1[0];
        }
        if (value2) {
          value2 = +value2[0];
        }
        return (value1 || 0) - (value2 || 0);
      },
      'reversebynum': function (td1, td2) {
        var value1 = td1[browser.ie ? 'innerText' : 'textContent'].match(/\d+/),
          value2 = td2[browser.ie ? 'innerText' : 'textContent'].match(/\d+/);
        if (value1) {
          value1 = +value1[0];
        }
        if (value2) {
          value2 = +value2[0];
        }
        return (value2 || 0) - (value1 || 0);
      }
    };

    //对表格设置排序的标记data-sort-type
    table.setAttribute('data-sort-type', compareFn && typeof compareFn === "string" && Fn[compareFn] ? compareFn : '');

    //th不参与排序
    flag && trArray.splice(0, 1);
    trArray = utils.sort(trArray, function (tr1, tr2) {
      var result;
      if (compareFn && typeof compareFn === "function") {
        result = compareFn.call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
      } else if (compareFn && typeof compareFn === "number") {
        result = 1;
      } else if (compareFn && typeof compareFn === "string" && Fn[compareFn]) {
        result = Fn[compareFn].call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
      } else {
        result = Fn['orderbyasc'].call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
      }
      return result;
    });
    var fragment = table.ownerDocument.createDocumentFragment();
    for (var j = 0, len = trArray.length; j < len; j++) {
      fragment.appendChild(trArray[j]);
    }
    var tbody = table.getElementsByTagName("tbody")[0];
    if (!lastRowIndex) {
      tbody.appendChild(fragment);
    } else {
      tbody.insertBefore(fragment, rows[lastRowIndex - range.endRowIndex + range.beginRowIndex - 1])
    }
  };

  AX.plugins['tablesort'] = function () {
    var me = this,
      UT = AX.UETable,
      getUETable = function (tdOrTable) {
        return UT.getUETable(tdOrTable);
      },
      getTableItemsByRange = function (editor) {
        return UT.getTableItemsByRange(editor);
      };


    me.ready(function () {
      //添加表格可排序的样式
      utils.cssRule('tablesort',
        'table.sortEnabled tr.firstRow th,table.sortEnabled tr.firstRow td{padding-right:20px;background-repeat: no-repeat;background-position: center right;' +
        '   background-image:url(' + me.options.themePath + me.options.theme + '/images/sortable.png);}',
        me.document);

      //做单元格合并操作时,清除可排序标识
      me.addListener("afterexeccommand", function (type, cmd) {
        if (cmd == 'mergeright' || cmd == 'mergedown' || cmd == 'mergecells') {
          this.execCommand('disablesort');
        }
      });
    });


    //表格排序
    AX.commands['sorttable'] = {
      queryCommandState: function () {
        var me = this,
          tableItems = getTableItemsByRange(me);
        if (!tableItems.cell) {
          return -1;
        }
        var table = tableItems.table,
          cells = table.getElementsByTagName("td");
        for (var i = 0, cell; cell = cells[i++];) {
          if (cell.rowSpan != 1 || cell.colSpan != 1) {
            return -1;
          }
        }
        return 0;
      },
      execCommand: function (cmd, fn) {
        var me = this,
          range = me.selection.getRange(),
          bk = range.createBookmark(true),
          tableItems = getTableItemsByRange(me),
          cell = tableItems.cell,
          ut = getUETable(tableItems.table),
          cellInfo = ut.getCellInfo(cell);
        ut.sortTable(cellInfo.cellIndex, fn);
        range.moveToBookmark(bk);
        try {
          range.select();
        } catch (e) {
        }
      }
    };

    //设置表格可排序,清除表格可排序
    AX.commands["enablesort"] = AX.commands["disablesort"] = {
      queryCommandState: function (cmd) {
        var table = getTableItemsByRange(this).table;
        if (table && cmd == 'enablesort') {
          var cells = domUtils.getElementsByTagName(table, 'th td');
          for (var i = 0; i < cells.length; i++) {
            if (cells[i].getAttribute('colspan') > 1 || cells[i].getAttribute('rowspan') > 1) {
              return -1;
            }
          }
        }

        return !table ? -1 : cmd == 'enablesort' ^ table.getAttribute('data-sort') != 'sortEnabled' ? -1 : 0;
      },
      execCommand: function (cmd) {
        var table = getTableItemsByRange(this).table;
        table.setAttribute("data-sort", cmd == "enablesort" ? "sortEnabled" : "sortDisabled");
        cmd == "enablesort" ? domUtils.addClass(table, "sortEnabled") : domUtils.removeClasses(table, "sortEnabled");
      }
    };
  };


  // plugins/contextmenu.js
  ///import core
  ///commands 右键菜单
  ///commandsName  ContextMenu
  ///commandsTitle  右键菜单
  /**
   * 右键菜单
   * @function
   * @name baidu.editor.plugins.contextmenu
   * @author zhanyi
   */

  AX.plugins['contextmenu'] = function () {
    var me = this;
    me.setOpt('enableContextMenu', true);
    if (me.getOpt('enableContextMenu') === false) {
      return;
    }
    var lang = me.getLang("contextMenu"),
      menu,
      items = me.options.contextMenu || [
        { label: lang['selectall'], cmdName: 'selectall' },
        {
          label: lang.cleardoc,
          cmdName: 'cleardoc',
          exec: function () {
            var self = this;
            me.window.confirmMsg(lang.confirmclear, function (rsl) {
              if (rsl) {
                self.execCommand('cleardoc');
              }
            })
            // if (confirm(lang.confirmclear)) {
            //   this.execCommand('cleardoc');
            // }
          }
        },
        '-',
        {
          label: lang.unlink,
          cmdName: 'unlink'
        },
        '-',
        {
          group: lang.paragraph,
          icon: 'justifyjustify',
          subMenu: [
            {
              label: lang.justifyleft,
              cmdName: 'justify',
              value: 'left'
            },
            {
              label: lang.justifyright,
              cmdName: 'justify',
              value: 'right'
            },
            {
              label: lang.justifycenter,
              cmdName: 'justify',
              value: 'center'
            },
            {
              label: lang.justifyjustify,
              cmdName: 'justify',
              value: 'justify'
            }
          ]
        },
        '-',
        {
          group: lang.transe,
          icon: 'transe',
          subMenu: [
            {
              label: lang.tagelement,
              cmdName: 'transe',
              value: 'tagelement'
            }
          ]
        },
        '-',
        {
          group: lang.table,
          icon: 'table',
          subMenu: [
            {
              label: lang.inserttable,
              cmdName: 'inserttable'
            },
            {
              label: lang.deletetable,
              cmdName: 'deletetable'
            },
            '-',
            {
              label: lang.deleterow,
              cmdName: 'deleterow'
            },
            {
              label: lang.deletecol,
              cmdName: 'deletecol'
            },
            {
              label: lang.insertcol,
              cmdName: 'insertcol'
            },
            {
              label: lang.insertcolnext,
              cmdName: 'insertcolnext'
            },
            {
              label: lang.insertrow,
              cmdName: 'insertrow'
            },
            {
              label: lang.insertrownext,
              cmdName: 'insertrownext'
            },
            '-',
            {
              label: lang.insertcaption,
              cmdName: 'insertcaption'
            },
            {
              label: lang.deletecaption,
              cmdName: 'deletecaption'
            },
            {
              label: lang.inserttitle,
              cmdName: 'inserttitle'
            },
            {
              label: lang.deletetitle,
              cmdName: 'deletetitle'
            },
            {
              label: lang.inserttitlecol,
              cmdName: 'inserttitlecol'
            },
            {
              label: lang.deletetitlecol,
              cmdName: 'deletetitlecol'
            },
            '-',
            {
              label: lang.mergecells,
              cmdName: 'mergecells'
            },
            {
              label: lang.mergeright,
              cmdName: 'mergeright'
            },
            {
              label: lang.mergedown,
              cmdName: 'mergedown'
            },
            '-',
            {
              label: lang.splittorows,
              cmdName: 'splittorows'
            },
            {
              label: lang.splittocols,
              cmdName: 'splittocols'
            },
            {
              label: lang.splittocells,
              cmdName: 'splittocells'
            },
            '-',
            {
              label: lang.averageDiseRow,
              cmdName: 'averagedistributerow'
            },
            {
              label: lang.averageDisCol,
              cmdName: 'averagedistributecol'
            },
            '-',
            {
              label: lang.edittd,
              cmdName: 'edittd',
              exec: function () {
                if (AX.ui['edittd']) {
                  new AX.ui['edittd'](this);
                }
                this.getDialog('edittd').open();
              }
            },
            {
              label: lang.edittable,
              cmdName: 'edittable',
              exec: function () {
                if (AX.ui['edittable']) {
                  new AX.ui['edittable'](this);
                }
                this.getDialog('edittable').open();
              }
            },
            {
              label: lang.setbordervisible,
              cmdName: 'setbordervisible'
            }
          ]
        },
        {
          group: lang.tablesort,
          icon: 'tablesort',
          subMenu: [
            {
              label: lang.enablesort,
              cmdName: 'enablesort'
            },
            {
              label: lang.disablesort,
              cmdName: 'disablesort'
            },
            '-',
            {
              label: lang.reversecurrent,
              cmdName: 'sorttable',
              value: 'reversecurrent'
            },
            {
              label: lang.orderbyasc,
              cmdName: 'sorttable',
              value: 'orderbyasc'
            },
            {
              label: lang.reversebyasc,
              cmdName: 'sorttable',
              value: 'reversebyasc'
            },
            {
              label: lang.orderbynum,
              cmdName: 'sorttable',
              value: 'orderbynum'
            },
            {
              label: lang.reversebynum,
              cmdName: 'sorttable',
              value: 'reversebynum'
            }
          ]
        },
        {
          group: lang.borderbk,
          icon: 'borderBack',
          subMenu: [
            {
              label: lang.setcolor,
              cmdName: "interlacetable",
              exec: function () {
                this.execCommand("interlacetable");
              }
            },
            {
              label: lang.unsetcolor,
              cmdName: "uninterlacetable",
              exec: function () {
                this.execCommand("uninterlacetable");
              }
            },
            {
              label: lang.setbackground,
              cmdName: "settablebackground",
              exec: function () {
                this.execCommand("settablebackground", { repeat: true, colorList: ["#bbb", "#ccc"] });
              }
            },
            {
              label: lang.unsetbackground,
              cmdName: "cleartablebackground",
              exec: function () {
                this.execCommand("cleartablebackground");
              }
            },
            {
              label: lang.redandblue,
              cmdName: "settablebackground",
              exec: function () {
                this.execCommand("settablebackground", { repeat: true, colorList: ["red", "blue"] });
              }
            },
            {
              label: lang.threecolorgradient,
              cmdName: "settablebackground",
              exec: function () {
                this.execCommand("settablebackground", { repeat: true, colorList: ["#aaa", "#bbb", "#ccc"] });
              }
            }
          ]
        },
        {
          group: lang.aligntd,
          icon: 'aligntd',
          subMenu: [
            {
              cmdName: 'cellalignment',
              value: { align: 'left', vAlign: 'top' }
            },
            {
              cmdName: 'cellalignment',
              value: { align: 'center', vAlign: 'top' }
            },
            {
              cmdName: 'cellalignment',
              value: { align: 'right', vAlign: 'top' }
            },
            {
              cmdName: 'cellalignment',
              value: { align: 'left', vAlign: 'middle' }
            },
            {
              cmdName: 'cellalignment',
              value: { align: 'center', vAlign: 'middle' }
            },
            {
              cmdName: 'cellalignment',
              value: { align: 'right', vAlign: 'middle' }
            },
            {
              cmdName: 'cellalignment',
              value: { align: 'left', vAlign: 'bottom' }
            },
            {
              cmdName: 'cellalignment',
              value: { align: 'center', vAlign: 'bottom' }
            },
            {
              cmdName: 'cellalignment',
              value: { align: 'right', vAlign: 'bottom' }
            }
          ]
        },
        {
          group: lang.aligntable,
          icon: 'aligntable',
          subMenu: [
            {
              cmdName: 'tablealignment',
              className: 'left',
              label: lang.tableleft,
              value: "left"
            },
            {
              cmdName: 'tablealignment',
              className: 'center',
              label: lang.tablecenter,
              value: "center"
            },
            {
              cmdName: 'tablealignment',
              className: 'right',
              label: lang.tableright,
              value: "right"
            }
          ]
        },
        '-',
        {
          label: lang.insertparagraphbefore,
          cmdName: 'insertparagraph',
          value: true
        },
        {
          label: lang.insertparagraphafter,
          cmdName: 'insertparagraph'
        }
      ];

    if (!items.length) {
      return;
    }
    var uiUtils = AX.ui.uiUtils;
    me.addListener('contextmenu', function (type, evt) {
      var currModel = me.options.editorModel;
      if (currModel == 'pure' || currModel == 'dirty' || currModel == 'secret') {
        domUtils.preventDefault(evt);
        return;
      }
      // -,
      // {
      //   group: lang.transe,
      //   icon: 'transe',
      //   subMenu: [
      //     {
      //       label: lang.tagelement,
      //       cmdName: 'transe',
      //       value: 'tagelement'
      //     }
      //   ]
      // }
      // 根据鼠标右键位置，修改显示菜单
      var target = evt.target,
        parent = null,
        parents = [];
      parent = AX.dom.domUtils.findParent(target, function (dom) {
        return dom && axTools.hasClass(dom, "ctrl-bg");
      }, true);
      while (!!parent) {
        parents.push(parent);
        parent = AX.dom.domUtils.findParent(parent, function (dom) {
          return dom && axTools.hasClass(dom, "ctrl-bg");
        }, false);
      }

      var elements = {
        "datedomain": { // 日期时间
          group: me.getLang("ax.datedomain"),
          delFunc: function (that) {
            me.window.confirmMsg(me.getLang('ax.delCtrlTip'), function (rsl) {
              if (!rsl) {
                return;
              }
              var targetDom = that;//获取根节点元素，并删除
              if (targetDom.getAttribute('axplugins') === null) {
                targetDom = targetDom.parentNode;
              }
              baidu.editor.dom.domUtils.remove(targetDom, false);
            });
          }
        },
        "barcode": { // 条形码
          group: me.getLang("ax.barcode")
        },
        "diagnose": { // 诊断
          group: me.getLang("ax.diagnose"),
          editFunc: typeof me.options.diagnoseMethod == 'function' ? me.options.diagnoseMethod : function () { alert(me.getLang('ax.configDiagnoseMethod')); }
        },
        "haveornot": {
          group: me.getLang("ax.haveornot"),
          editFunc: function (that) {
            var axplugins = that.getAttribute("axplugins"); //判断是多选 还是单选
            baidu.editor.plugins[axplugins].editdom = that;
            me.execCommand(axplugins, true);
          }
        },
        "macro": {
          group: me.getLang("ax.macro"),
          delFunc: function (that) {
            me.window.confirmMsg(me.getLang("ax.delCtrlTip"), function (rsl) {
              if (!rsl) {
                return;
              }
              var targetDom = that; //获取根节点元素，并删除
              if (targetDom.getAttribute("axplugins") === null) {
                targetDom = targetDom.parentNode;
              }
              baidu.editor.dom.domUtils.remove(targetDom, false);
            });
          }
        },
        "marktag": {
          group: me.getLang("ax.marktag"),
          delFunc: function (that) {
            that.setAttribute('class', that.getAttribute("class") + " editor-free-text-hide");
          }
        },
        "exophthalmos": { // 眼凸表达式
          group: me.getLang("ax.exophthalmos")
        },
        "common1": { // 通用表达式1
          group: me.getLang("ax.common1")
        },
        "common2": { // 通用表达式2
          group: me.getLang("ax.common2")
        },
        "common3": { // 通用表达式3
          group: me.getLang("ax.common3")
        },
        "common4": { // 通用表达式4
          group: me.getLang("ax.common4")
        },
        "menses1": { // 月经表达式1
          group: me.getLang("ax.menses1")
        },
        "menses2": { // 月经表达式2
          group: me.getLang("ax.menses2")
        },
        "menses3": { // 月经表达式3
          group: me.getLang("ax.menses3")
        },
        "menses4": { // 月经表达式4
          group: me.getLang("ax.menses4")
        },
        "pupil": { // 瞳孔表达式
          group: me.getLang("ax.pupil")
        },
        "light": { // 光定位表达式
          group: me.getLang("ax.light")
        },
        "fetal": { // 胎心表达式
          group: me.getLang("ax.fetal")
        },
        "permanentteeth": { // 恒牙表达式
          group: me.getLang("ax.permanentteeth")
        },
        "babyteeth": { // 乳牙表达式
          group: me.getLang("ax.babyteeth")
        },
        "mixteeth": { // 混合牙表达式
          group: me.getLang("ax.mixteeth")
        },
        "mixteeth2": { // 牙体图表达式
          group: me.getLang("ax.mixteeth2")
        },
        "numberelement": { // 数字元素
          group: me.getLang("ax.numberelement")
        },
        "paragraphele": { // 段落
          group: me.getLang("ax.paragraphele")
        },
        "prescription": { // 处方
          group: me.getLang("ax.prescription"),
          editFunc: typeof me.options.prescriptionMethod == 'function' ? me.options.prescriptionMethod : function () { alert(me.getLang('ax.configPrescriptionMethod')); }
        },
        "qrcode": { // 二维码
          group: me.getLang("ax.qrcode")
        },
        "radio": { // 单选
          group: me.getLang("ax.radio"),
          delFunc: function (that) {
            me.window.confirmMsg(me.getLang("ax.delCtrlTip") + 1, function (rsl) {
              if (!rsl) {
                return;
              }
              var targetDom = that; //获取根节点元素，并删除
              if (targetDom.getAttribute("axplugins") === null) {
                targetDom = targetDom.parentNode;
              }
              baidu.editor.dom.domUtils.remove(targetDom, false);
            });
          }
        },
        "checkbox": { // 多选
          group: me.getLang("ax.checkbox")
        },
        "select": { // 单选下拉
          group: me.getLang("ax.select"),
          editFunc: function (that) {
            var axplugins = that.getAttribute("axplugins"); //判断是多选 还是单选
            baidu.editor.plugins[axplugins].editdom = that;
            me.execCommand(axplugins, true);
          }
        },
        "selectmulti": { // 多选下拉
          group: me.getLang("ax.selectmulti"),
          editFunc: function (that) {
            var axplugins = that.getAttribute("axplugins"); //判断是多选 还是单选
            baidu.editor.plugins[axplugins].editdom = that;
            me.execCommand(axplugins, true);
          }
        },
        "signature": { // 签名
          group: me.getLang("ax.signature")
        },
        "svgImg": { // svg编辑图片
          group: me.getLang("ax.svgImg")
        },
        "tagelement": { // 标签
          group: me.getLang("ax.tagelement")
        },
        "text": { // 文本
          group: me.getLang("ax.text")
        },
        "watermark": { // 水印
          group: me.getLang("ax.watermark")
        },
        "combine": {
          group: me.getLang("ax.combine"),
          _edittext: function (that) {
            var axplugins = that.getAttribute("axplugins"); //判断是多选 还是单选
            baidu.editor.plugins[axplugins].editdom = that;
            me.execCommand("combine", true);
          },
          _cassetter: function (that) {//组合元素 级联设置
            var axplugins = that.getAttribute("axplugins"); //判断是多选 还是单选
            baidu.editor.plugins[axplugins].editdom = that;
            me.execCommand('cascadesetter', true);
          },
          _delete: function (that) {
            var self = this;
            me.window.confirmMsg(me.getLang('ax.delCtrlTip'), function (rsl) {
              if (!rsl) {
                return;
              }
              var targetDom = that;//获取根节点元素，并删除
              if (targetDom.getAttribute('axplugins') === null) {
                targetDom = targetDom.parentNode;
              }
              baidu.editor.dom.domUtils.remove(targetDom, false);
            });
          },
          _saveEle: function (that) {
            if (typeof me.options.saveEleMethod == "function") {
              if (that.getAttribute('isQuote') == 'false') {
                alert(me.getLang("ax.noSaveEle"));
                return; // 以引入的元素禁止再次存库
              }
              var json = JSON.parse(that.getAttribute("attrs"));
              json.pluginType = that.getAttribute("axPlugins");
              json.content = that.children[0].innerHTML;
              me.options.saveEleMethod(json);
            } else {
              alert(me.getLang("ax.noGetSaveEleMethod"));
            }
          }
        }
      }
      if(me.options.editorModel != "design"){
        items = [{ label: lang['selectall'], cmdName: 'selectall' }];
      }
      var newMenus = axTools.makeContextMenu(me, elements, parents);
      var _items = [];
      items.forEach(function (it, i) {
        if (it == "-" || it.icon != "null") {
          _items.push(it);
        }
      })
      items = _items;
      _items = null; // 释放
      if (newMenus.length != 0) {
        // items.push("-");
        if (items[0] == "-") {
          items = newMenus.concat(items);
        } else {
          items = newMenus.concat("-").concat(items);
        }
      }
      // if(currModel=='mark' && items[0].cmdName=='savephrase'){
      //   items.shift();
      //   items.shift();
      // }else if(currModel!='mark' && items[0].cmdName!='savephrase'){
      //   items.unshift('-');
      //   items.unshift({label: lang.phrase,cmdName: 'savephrase'});
      // }
      var offset = uiUtils.getViewportOffsetByEvent(evt);
      me.fireEvent('beforeselectionchange');
      if (menu) {
        menu.destroy();
      }
      for (var i = 0, ti, contextItems = []; ti = items[i]; i++) {
        var last;
        (function (item) {
          if (item == '-') {
            if ((last = contextItems[contextItems.length - 1]) && last !== '-') {
              contextItems.push('-');
            }
          } else if (item.hasOwnProperty("group")) {
            for (var j = 0, cj, subMenu = []; cj = item.subMenu[j]; j++) {
              (function (subItem) {
                if (subItem == '-') {
                  if ((last = subMenu[subMenu.length - 1]) && last !== '-') {
                    subMenu.push('-');
                  } else {
                    subMenu.splice(subMenu.length - 1);
                  }
                } else {
                  if (((me.commands[subItem.cmdName] || AX.commands[subItem.cmdName] || subItem.query) &&
                    (subItem.query ? subItem.query() : me.queryCommandState(subItem.cmdName)) > -1) || item.icon == "null") {
                    subMenu.push({
                      'label': subItem.label || me.getLang("contextMenu." + subItem.cmdName + (subItem.value || '')) || "",
                      'className': 'edui-for-' + subItem.cmdName + (subItem.className ? ' edui-for-' + subItem.cmdName + '-' + subItem.className : ''),
                      onclick: subItem.exec ? function () {
                        subItem.exec.call(me, subItem.index, subItem.cb);
                      } : function () {
                        me.execCommand(subItem.cmdName, subItem.value);
                      }
                    });
                  }
                }
              })(cj);
            }
            if (subMenu.length) {
              function getLabel() {
                switch (item.icon) {
                  case "table":
                    return me.getLang("contextMenu.table");
                  case "justifyjustify":
                    return me.getLang("contextMenu.paragraph");
                  case "aligntd":
                    return me.getLang("contextMenu.aligntd");
                  case "aligntable":
                    return me.getLang("contextMenu.aligntable");
                  case "tablesort":
                    return lang.tablesort;
                  case "borderBack":
                    return lang.borderbk;
                  case "transe":
                    return "转换";
                  case "null":
                    return item.group;
                  default:
                    return '';
                }
              }

              contextItems.push({
                //todo 修正成自动获取方式
                'label': getLabel(),
                className: 'edui-for-' + item.icon,
                'subMenu': {
                  items: subMenu,
                  editor: me
                }
              });
            }

          } else {
            //有可能commmand没有加载右键不能出来，或者没有command也想能展示出来添加query方法
            if (((me.commands[item.cmdName] || AX.commands[item.cmdName] || item.query) &&
              (item.query ? item.query.call(me) : me.queryCommandState(item.cmdName)) > -1) || item.icon == "null") {

              contextItems.push({
                'label': item.label || me.getLang("contextMenu." + item.cmdName),
                className: 'edui-for-' + (item.icon ? item.icon : item.cmdName + (item.value || '')),
                onclick: item.exec ? function () {
                  item.exec.call(me, item.index, item.cb);
                } : function () {
                  me.execCommand(item.cmdName, item.value);
                }
              });
            }

          }

        })(ti);
      }
      if (contextItems[contextItems.length - 1] == '-') {
        contextItems.pop();
      }

      menu = new AX.ui.Menu({
        items: contextItems,
        className: "edui-contextmenu",
        editor: me
      });
      menu.render();
      menu.showAt(offset);

      me.fireEvent("aftershowcontextmenu", menu);

      domUtils.preventDefault(evt);
      if (browser.ie) {
        var ieRange;
        try {
          ieRange = me.selection.getNative().createRange();
        } catch (e) {
          return;
        }
        if (ieRange.item) {
          var range = new dom.Range(me.document);
          range.selectNode(ieRange.item(0)).select(true, true);
        }
      }
    });

    // 添加复制的flash按钮
    me.addListener('aftershowcontextmenu', function (type, menu) {
      if (me.zeroclipboard) {
        var items = menu.items;
        for (var key in items) {
          if (items[key].className == 'edui-for-copy') {
            me.zeroclipboard.clip(items[key].getDom());
          }
        }
      }
    });

  };


  // plugins/shortcutmenu.js
  ///import core
  ///commands       弹出菜单
  // commandsName  popupmenu
  ///commandsTitle  弹出菜单
  /**
   * 弹出菜单
   * @function
   * @name baidu.editor.plugins.popupmenu
   * @author xuheng
   */

  AX.plugins['shortcutmenu'] = function () {
    var me = this,
      menu,
      items = me.options.shortcutMenu || [];

    if (!items.length) {
      return;
    }

    me.addListener('contextmenu mouseup', function (type, e) {
      var me = this,
        customEvt = {
          type: type,
          target: e.target || e.srcElement,
          screenX: e.screenX,
          screenY: e.screenY,
          clientX: e.clientX,
          clientY: e.clientY
        };

      setTimeout(function () {
        var rng = me.selection.getRange();
        if (rng.collapsed === false || type == "contextmenu") {

          if (!menu) {
            menu = new baidu.editor.ui.ShortCutMenu({
              editor: me,
              items: items,
              theme: me.options.theme,
              className: 'edui-shortcutmenu'
            });

            menu.render();
            me.fireEvent("afterrendershortcutmenu", menu);
          }

          menu.show(customEvt, !!AX.plugins['contextmenu']);
        }
      });

      if (type == 'contextmenu') {
        domUtils.preventDefault(e);
        if (browser.ie9below) {
          var ieRange;
          try {
            ieRange = me.selection.getNative().createRange();
          } catch (e) {
            return;
          }
          if (ieRange.item) {
            var range = new dom.Range(me.document);
            range.selectNode(ieRange.item(0)).select(true, true);

          }
        }
      }
    });

    me.addListener('keydown', function (type) {
      if (type == "keydown") {
        menu && !menu.isHidden && menu.hide();
      }

    });

  };


  // plugins/basestyle.js
  /**
   * B、I、sub、super命令支持
   * @file
   * @since 1.2.6.1
   */

  AX.plugins['basestyle'] = function () {

    /**
     * 字体加粗
     * @command bold
     * @param { String } cmd 命令字符串
     * @remind 对已加粗的文本内容执行该命令， 将取消加粗
     * @method execCommand
     * @example
     * ```javascript
     * //editor是编辑器实例
     * //对当前选中的文本内容执行加粗操作
     * //第一次执行， 文本内容加粗
     * editor.execCommand( 'bold' );
     *
     * //第二次执行， 文本内容取消加粗
     * editor.execCommand( 'bold' );
     * ```
     */


    /**
     * 字体倾斜
     * @command italic
     * @method execCommand
     * @param { String } cmd 命令字符串
     * @remind 对已倾斜的文本内容执行该命令， 将取消倾斜
     * @example
     * ```javascript
     * //editor是编辑器实例
     * //对当前选中的文本内容执行斜体操作
     * //第一次操作， 文本内容将变成斜体
     * editor.execCommand( 'italic' );
     *
     * //再次对同一文本内容执行， 则文本内容将恢复正常
     * editor.execCommand( 'italic' );
     * ```
     */

    /**
     * 下标文本，与“superscript”命令互斥
     * @command subscript
     * @method execCommand
     * @remind  把选中的文本内容切换成下标文本， 如果当前选中的文本已经是下标， 则该操作会把文本内容还原成正常文本
     * @param { String } cmd 命令字符串
     * @example
     * ```javascript
     * //editor是编辑器实例
     * //对当前选中的文本内容执行下标操作
     * //第一次操作， 文本内容将变成下标文本
     * editor.execCommand( 'subscript' );
     *
     * //再次对同一文本内容执行， 则文本内容将恢复正常
     * editor.execCommand( 'subscript' );
     * ```
     */

    /**
     * 上标文本，与“subscript”命令互斥
     * @command superscript
     * @method execCommand
     * @remind 把选中的文本内容切换成上标文本， 如果当前选中的文本已经是上标， 则该操作会把文本内容还原成正常文本
     * @param { String } cmd 命令字符串
     * @example
     * ```javascript
     * //editor是编辑器实例
     * //对当前选中的文本内容执行上标操作
     * //第一次操作， 文本内容将变成上标文本
     * editor.execCommand( 'superscript' );
     *
     * //再次对同一文本内容执行， 则文本内容将恢复正常
     * editor.execCommand( 'superscript' );
     * ```
     */
    var basestyles = {
      'bold': ['strong', 'b'], // 加粗
      'italic': ['em', 'i'], // 斜体
      'subscript': ['sub'], // 上标
      'superscript': ['sup'] // 下标
    },
      getObj = function (editor, tagNames) {
        return domUtils.filterNodeList(editor.selection.getStartElementPath(), tagNames);
      },
      me = this;
    //添加快捷键
    me.addshortcutkey({
      "Bold": "ctrl+66",//^B
      "Italic": "ctrl+73", //^I
      "Underline": "ctrl+85"//^U
    });
    me.addInputRule(function (root) {
      utils.each(root.getNodesByTagName('b i'), function (node) {
        switch (node.tagName) {
          case 'b':
            node.tagName = 'strong';
            break;
          case 'i':
            node.tagName = 'em';
        }
      });
    });
    for (var style in basestyles) {
      (function (cmd, tagNames) {
        me.commands[cmd] = {
          execCommand: function (cmdName) {
            var range = me.selection.getRange(), obj = getObj(this, tagNames);
            if (range.collapsed) {
              if (obj) {
                var tmpText = me.document.createTextNode('');
                range.insertNode(tmpText).removeInlineStyle(tagNames);
                range.setStartBefore(tmpText);
                domUtils.remove(tmpText);
              } else {
                var tmpNode = range.document.createElement(tagNames[0]);
                if (cmdName == 'superscript' || cmdName == 'subscript') {
                  tmpText = me.document.createTextNode('');
                  range.insertNode(tmpText)
                    .removeInlineStyle(['sub', 'sup'])
                    .setStartBefore(tmpText)
                    .collapse(true);
                }
                range.insertNode(tmpNode).setStart(tmpNode, 0);
              }
              range.collapse(true);
            } else {
              if (cmdName == 'superscript' || cmdName == 'subscript') {
                if (!obj || obj.tagName.toLowerCase() != cmdName) {
                  range.removeInlineStyle(['sub', 'sup']);
                }
              }
              obj ? range.removeInlineStyle(tagNames) : range.applyInlineStyle(tagNames[0]);
            }
            range.select();
          },
          queryCommandState: function () {
            return getObj(this, tagNames) ? 1 : 0;
          }
        };
      })(style, basestyles[style]);
    }
  };


  // plugins/elementpath.js
  /**
   * 选取路径命令
   * @file
   */
  AX.plugins['elementpath'] = function () {
    var currentLevel,
      tagNames,
      me = this;
    me.setOpt('elementPathEnabled', true);
    if (!me.options.elementPathEnabled) {
      return;
    }
    me.commands['elementpath'] = {
      execCommand: function (cmdName, level) {
        var start = tagNames[level],
          range = me.selection.getRange();
        currentLevel = level * 1;
        range.selectNode(start).select();
      },
      queryCommandValue: function () {
        //产生一个副本，不能修改原来的startElementPath;
        var parents = [].concat(this.selection.getStartElementPath()).reverse(),
          names = [];
        tagNames = parents;
        for (var i = 0, ci; ci = parents[i]; i++) {
          if (ci.nodeType == 3) {
            continue;
          }
          var name = ci.tagName.toLowerCase();
          if (name == 'img' && ci.getAttribute('anchorname')) {
            name = 'anchor';
          }
          names[i] = name;
          if (currentLevel == i) {
            currentLevel = -1;
            break;
          }
        }
        return names;
      }
    };
  };


  // plugins/formatmatch.js
  /**
   * 格式刷，只格式inline的
   * @file
   * @since 1.2.6.1
   */

  /**
   * 格式刷
   * @command formatmatch
   * @method execCommand
   * @remind 该操作不能复制段落格式
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * //editor是编辑器实例
   * //获取格式刷
   * editor.execCommand( 'formatmatch' );
   * ```
   */
  AX.plugins['formatmatch'] = function () {

    var me = this,
      list = [], img,
      flag = 0;

    me.addListener('reset', function () {
      list = [];
      flag = 0;
    });

    function addList(type, evt) {

      if (browser.webkit) {
        var target = evt.target.tagName == 'IMG' ? evt.target : null;
      }

      function addFormat(range) {

        if (text) {
          range.selectNode(text);
        }
        return range.applyInlineStyle(list[list.length - 1].tagName, null, list);

      }

      me.undoManger && me.undoManger.save();

      var range = me.selection.getRange(),
        imgT = target || range.getClosedNode();
      if (img && imgT && imgT.tagName == 'IMG') {
        //trace:964

        imgT.style.cssText += ';float:' + (img.style.cssFloat || img.style.styleFloat || 'none') + ';display:' + (img.style.display || 'inline');

        img = null;
      } else {
        if (!img) {
          var collapsed = range.collapsed;
          if (collapsed) {
            var text = me.document.createTextNode('match');
            range.insertNode(text).select();


          }
          me.__hasEnterExecCommand = true;
          //不能把block上的属性干掉
          //trace:1553
          var removeFormatAttributes = me.options.removeFormatAttributes;
          me.options.removeFormatAttributes = '';
          me.execCommand('removeformat');
          me.options.removeFormatAttributes = removeFormatAttributes;
          me.__hasEnterExecCommand = false;
          //trace:969
          range = me.selection.getRange();
          if (list.length) {
            addFormat(range);
          }
          if (text) {
            range.setStartBefore(text).collapse(true);

          }
          range.select();
          text && domUtils.remove(text);
        }

      }


      me.undoManger && me.undoManger.save();
      me.removeListener('mouseup', addList);
      flag = 0;
    }

    me.commands['formatmatch'] = {
      execCommand: function (cmdName) {

        if (flag) {
          flag = 0;
          list = [];
          me.removeListener('mouseup', addList);
          return;
        }


        var range = me.selection.getRange();
        img = range.getClosedNode();
        if (!img || img.tagName != 'IMG') {
          range.collapse(true).shrinkBoundary();
          var start = range.startContainer;
          list = domUtils.findParents(start, true, function (node) {
            return !domUtils.isBlockElm(node) && node.nodeType == 1;
          });
          //a不能加入格式刷, 并且克隆节点
          for (var i = 0, ci; ci = list[i]; i++) {
            if (ci.tagName == 'A') {
              list.splice(i, 1);
              break;
            }
          }

        }

        me.addListener('mouseup', addList);
        flag = 1;


      },
      queryCommandState: function () {
        return flag;
      },
      notNeedUndo: 1
    };
  };


  // plugins/searchreplace.js
  ///import core
  ///commands 查找替换
  ///commandsName  SearchReplace
  ///commandsTitle  查询替换
  ///commandsDialog  dialogs\searchreplace
  /**
   * @description 查找替换
   * @author zhanyi
   */

  AX.plugin.register('searchreplace', function () {
    var me = this;

    var _blockElm = { 'table': 1, 'tbody': 1, 'tr': 1, 'ol': 1, 'ul': 1 };

    function findTextInString(textContent, opt, currentIndex) {
      var str = opt.searchStr;
      if (opt.dir == -1) {
        textContent = textContent.split('').reverse().join('');
        str = str.split('').reverse().join('');
        currentIndex = textContent.length - currentIndex;

      }
      var reg = new RegExp(str, 'g' + (opt.casesensitive ? '' : 'i')), match;

      while (match = reg.exec(textContent)) {
        if (match.index >= currentIndex) {
          return opt.dir == -1 ? textContent.length - match.index - opt.searchStr.length : match.index;
        }
      }
      return -1
    }

    function findTextBlockElm(node, currentIndex, opt) {
      var textContent, index, methodName = opt.all || opt.dir == 1 ? 'getNextDomNode' : 'getPreDomNode';
      if (domUtils.isBody(node)) {
        node = node.firstChild;
      }
      var first = 1;
      while (node) {
        textContent = node.nodeType == 3 ? node.nodeValue : node[browser.ie ? 'innerText' : 'textContent'];
        index = findTextInString(textContent, opt, currentIndex);
        first = 0;
        if (index != -1) {
          return {
            'node': node,
            'index': index
          }
        }
        node = domUtils[methodName](node);
        while (node && _blockElm[node.nodeName.toLowerCase()]) {
          node = domUtils[methodName](node, true);
        }
        if (node) {
          currentIndex = opt.dir == -1 ? (node.nodeType == 3 ? node.nodeValue : node[browser.ie ? 'innerText' : 'textContent']).length : 0;
        }

      }
    }

    function findNTextInBlockElm(node, index, str) {
      var currentIndex = 0,
        currentNode = node.firstChild,
        currentNodeLength = 0,
        result;
      while (currentNode) {
        if (currentNode.nodeType == 3) {
          currentNodeLength = currentNode.nodeValue.replace(/(^[\t\r\n]+)|([\t\r\n]+$)/, '').length;
          currentIndex += currentNodeLength;
          if (currentIndex >= index) {
            return {
              'node': currentNode,
              'index': currentNodeLength - (currentIndex - index)
            }
          }
        } else if (!dtd.$empty[currentNode.tagName]) {
          currentNodeLength = currentNode[browser.ie ? 'innerText' : 'textContent'].replace(/(^[\t\r\n]+)|([\t\r\n]+$)/, '').length
          currentIndex += currentNodeLength;
          if (currentIndex >= index) {
            result = findNTextInBlockElm(currentNode, currentNodeLength - (currentIndex - index), str);
            if (result) {
              return result;
            }
          }
        }
        currentNode = domUtils.getNextDomNode(currentNode);

      }
    }

    function searchReplace(me, opt) {

      var rng = me.selection.getRange(),
        startBlockNode,
        searchStr = opt.searchStr,
        span = me.document.createElement('span');
      span.innerHTML = '$$ueditor_searchreplace_key$$';

      rng.shrinkBoundary(true);

      //判断是不是第一次选中
      if (!rng.collapsed) {
        rng.select();
        var rngText = me.selection.getText();
        if (new RegExp('^' + opt.searchStr + '$', opt.casesensitive ? '' : 'i').test(rngText)) {
          if (opt.replaceStr != undefined) {
            replaceText(rng, opt.replaceStr);
            rng.select();
            return true;
          }
          rng.collapse(opt.dir == -1)


        }
      }


      rng.insertNode(span);
      rng.enlargeToBlockElm(true);
      startBlockNode = rng.startContainer;
      var currentIndex = startBlockNode[browser.ie ? 'innerText' : 'textContent'].indexOf('$$ueditor_searchreplace_key$$');
      rng.setStartBefore(span);
      domUtils.remove(span);
      var result = findTextBlockElm(startBlockNode, currentIndex, opt);
      if (result) {
        var rngStart = findNTextInBlockElm(result.node, result.index, searchStr);
        var rngEnd = findNTextInBlockElm(result.node, result.index + searchStr.length, searchStr);
        rng.setStart(rngStart.node, rngStart.index).setEnd(rngEnd.node, rngEnd.index);

        if (opt.replaceStr !== undefined) {
          replaceText(rng, opt.replaceStr)
        }
        rng.select();
        return true;
      }
      rng.setCursor()


    }

    function replaceText(rng, str) {

      str = me.document.createTextNode(str);
      rng.deleteContents().insertNode(str);

    }

    return {
      commands: {
        'searchreplace': {
          execCommand: function (cmdName, opt) {
            utils.extend(opt, {
              all: false,
              casesensitive: false,
              dir: 1
            }, true);
            var num = 0;
            if (opt.all) {

              var rng = me.selection.getRange(),
                first = me.body.firstChild;
              if (first && first.nodeType == 1) {
                rng.setStart(first, 0);
                rng.shrinkBoundary(true);
              } else if (first.nodeType == 3) {
                rng.setStartBefore(first)
              }
              rng.collapse(true).select(true);
              if (opt.replaceStr !== undefined) {
                me.fireEvent('saveScene');
              }
              var reg = new RegExp(opt.searchStr, "g");
              function replaceText (dom, keyword, rege){
                for(var i = 0; i < dom.childNodes.length; i++) {
                  var item = dom.childNodes[i];
                  if(item.childNodes.length > 0) {
                    replaceText(item, keyword, rege)
                  }else{
                    item.textContent = item.textContent.replace(rege, keyword);
                  }
                }
              }
              replaceText(me.body, opt.replaceStr, reg);
              // while (searchReplace(this, opt)) {
              //   num++;
              // }
              if (num) {
                me.fireEvent('saveScene');
              }
            } else {
              if (opt.replaceStr !== undefined) {
                me.fireEvent('saveScene');
              }
              if (searchReplace(this, opt)) {
                num++
              }
              if (num) {
                me.fireEvent('saveScene');
              }

            }

            return num;
          },
          notNeedUndo: 1
        }
      }
    }
  });

  // plugins/customstyle.js
  /**
   * 自定义样式
   * @file
   * @since 1.2.6.1
   */

  /**
   * 根据config配置文件里“customstyle”选项的值对匹配的标签执行样式替换。
   * @command customstyle
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'customstyle' );
   * ```
   */
  AX.plugins['customstyle'] = function () {
    var me = this;
    me.setOpt({
      'customstyle': [
        {
          tag: 'h1',
          name: 'tc',
          style: 'font-size:32px;font-weight:bold;border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:center;margin:0 0 20px 0;'
        },
        {
          tag: 'h1',
          name: 'tl',
          style: 'font-size:32px;font-weight:bold;border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:left;margin:0 0 10px 0;'
        },
        { tag: 'span', name: 'im', style: 'font-size:16px;font-style:italic;font-weight:bold;line-height:18px;' },
        {
          tag: 'span',
          name: 'hi',
          style: 'font-size:16px;font-style:italic;font-weight:bold;color:rgb(51, 153, 204);line-height:18px;'
        }
      ]
    });
    me.commands['customstyle'] = {
      execCommand: function (cmdName, obj) {
        var me = this,
          tagName = obj.tag,
          node = domUtils.findParent(me.selection.getStart(), function (node) {
            return node.getAttribute('label');
          }, true),
          range, bk, tmpObj = {};
        for (var p in obj) {
          if (obj[p] !== undefined) {
            tmpObj[p] = obj[p];
          }
        }
        delete tmpObj.tag;
        if (node && node.getAttribute('label') == obj.label) {
          range = this.selection.getRange();
          bk = range.createBookmark();
          if (range.collapsed) {
            //trace:1732 删掉自定义标签，要有p来回填站位
            if (dtd.$block[node.tagName]) {
              var fillNode = me.document.createElement('p');
              domUtils.moveChild(node, fillNode);
              node.parentNode.insertBefore(fillNode, node);
              domUtils.remove(node);
            } else {
              domUtils.remove(node, true);
            }

          } else {

            var common = domUtils.getCommonAncestor(bk.start, bk.end),
              nodes = domUtils.getElementsByTagName(common, tagName);
            if (new RegExp(tagName, 'i').test(common.tagName)) {
              nodes.push(common);
            }
            for (var i = 0, ni; ni = nodes[i++];) {
              if (ni.getAttribute('label') == obj.label) {
                var ps = domUtils.getPosition(ni, bk.start), pe = domUtils.getPosition(ni, bk.end);
                if ((ps & domUtils.POSITION_FOLLOWING || ps & domUtils.POSITION_CONTAINS)
                  &&
                  (pe & domUtils.POSITION_PRECEDING || pe & domUtils.POSITION_CONTAINS)
                ) {
                  if (dtd.$block[tagName]) {
                    var fillNode = me.document.createElement('p');
                    domUtils.moveChild(ni, fillNode);
                    ni.parentNode.insertBefore(fillNode, ni);
                  }
                }
                domUtils.remove(ni, true);
              }
            }
            node = domUtils.findParent(common, function (node) {
              return node.getAttribute('label') == obj.label;
            }, true);
            if (node) {

              domUtils.remove(node, true);

            }

          }
          range.moveToBookmark(bk).select();
        } else {
          if (dtd.$block[tagName]) {
            this.execCommand('paragraph', tagName, tmpObj, 'customstyle');
            range = me.selection.getRange();
            if (!range.collapsed) {
              range.collapse();
              node = domUtils.findParent(me.selection.getStart(), function (node) {
                return node.getAttribute('label') == obj.label;
              }, true);
              var pNode = me.document.createElement('p');
              domUtils.insertAfter(node, pNode);
              domUtils.fillNode(me.document, pNode);
              range.setStart(pNode, 0).setCursor();
            }
          } else {

            range = me.selection.getRange();
            if (range.collapsed) {
              node = me.document.createElement(tagName);
              domUtils.setAttributes(node, tmpObj);
              range.insertNode(node).setStart(node, 0).setCursor();

              return;
            }

            bk = range.createBookmark();
            range.applyInlineStyle(tagName, tmpObj).moveToBookmark(bk).select();
          }
        }

      },
      queryCommandValue: function () {
        var parent = domUtils.filterNodeList(
          this.selection.getStartElementPath(),
          function (node) {
            return node.getAttribute('label')
          }
        );
        return parent ? parent.getAttribute('label') : '';
      }
    };
    //当去掉customstyle是，如果是块元素，用p代替
    me.addListener('keyup', function (type, evt) {
      var keyCode = evt.keyCode || evt.which;

      if (keyCode == 32 || keyCode == 13) {
        var range = me.selection.getRange();
        if (range.collapsed) {
          var node = domUtils.findParent(me.selection.getStart(), function (node) {
            return node.getAttribute('label');
          }, true);
          if (node && dtd.$block[node.tagName] && domUtils.isEmptyNode(node)) {
            var p = me.document.createElement('p');
            domUtils.insertAfter(node, p);
            domUtils.fillNode(me.document, p);
            domUtils.remove(node);
            range.setStart(p, 0).setCursor();


          }
        }
      }
    });
  };

  // plugins/catchremoteimage.js
  ///import core
  ///commands 远程图片抓取
  ///commandsName  catchRemoteImage,catchremoteimageenable
  ///commandsTitle  远程图片抓取
  /**
   * 远程图片抓取,当开启本插件时所有不符合本地域名的图片都将被抓取成为本地服务器上的图片
   */
  AX.plugins['catchremoteimage'] = function () {
    var me = this,
      ajax = AX.ajax;

    /* 设置默认值 */
    if (me.options.catchRemoteImageEnable === false) {
      return;
    }
    me.setOpt({
      catchRemoteImageEnable: false
    });

    me.addListener("afterpaste", function () {
      me.fireEvent("catchRemoteImage");
    });

    me.addListener("catchRemoteImage", function () {

      var catcherLocalDomain = me.getOpt('catcherLocalDomain'),
        catcherActionUrl = me.getActionUrl(me.getOpt('catcherActionName')),
        catcherUrlPrefix = me.getOpt('catcherUrlPrefix'),
        catcherFieldName = me.getOpt('catcherFieldName');

      var remoteImages = [],
        imgs = domUtils.getElementsByTagName(me.document, "img"),
        test = function (src, urls) {
          if (src.indexOf(location.host) != -1 || /(^\.)|(^\/)/.test(src)) {
            return true;
          }
          if (urls) {
            for (var j = 0, url; url = urls[j++];) {
              if (src.indexOf(url) !== -1) {
                return true;
              }
            }
          }
          return false;
        };

      for (var i = 0, ci; ci = imgs[i++];) {
        if (ci.getAttribute("word_img")) {
          continue;
        }
        var src = ci.getAttribute("_src") || ci.src || "";
        if (/^(https?|ftp):/i.test(src) && !test(src, catcherLocalDomain)) {
          remoteImages.push(src);
        }
      }

      if (remoteImages.length) {
        catchremoteimage(remoteImages, {
          //成功抓取
          success: function (r) {
            try {
              var info = r.state !== undefined ? r : eval("(" + r.responseText + ")");
            } catch (e) {
              return;
            }

            /* 获取源路径和新路径 */
            var i, j, ci, cj, oldSrc, newSrc, list = info.list;

            for (i = 0; ci = imgs[i++];) {
              oldSrc = ci.getAttribute("_src") || ci.src || "";
              for (j = 0; cj = list[j++];) {
                if (oldSrc == cj.source && cj.state == "SUCCESS") { //抓取失败时不做替换处理
                  newSrc = catcherUrlPrefix + cj.url;
                  domUtils.setAttributes(ci, {
                    "src": newSrc,
                    "_src": newSrc
                  });
                  break;
                }
              }
            }
            me.fireEvent('catchremotesuccess')
          },
          //回调失败，本次请求超时
          error: function () {
            me.fireEvent("catchremoteerror");
          }
        });
      }

      function catchremoteimage(imgs, callbacks) {
        var params = utils.serializeParam(me.queryCommandValue('serverparam')) || '',
          url = utils.formatUrl(catcherActionUrl + (catcherActionUrl.indexOf('?') == -1 ? '?' : '&') + params),
          isJsonp = utils.isCrossDomainUrl(url),
          opt = {
            'method': 'POST',
            'dataType': isJsonp ? 'jsonp' : '',
            'timeout': 60000, //单位：毫秒，回调请求超时设置。目标用户如果网速不是很快的话此处建议设置一个较大的数值
            'onsuccess': callbacks["success"],
            'onerror': callbacks["error"]
          };
        opt[catcherFieldName] = imgs;
        ajax.request(url, opt);
      }

    });
  };

  // plugins/snapscreen.js
  /**
   * 截屏插件，为UEditor提供插入支持
   * @file
   * @since 1.4.2
   */
  AX.plugin.register('snapscreen', function () {

    var me = this;
    var snapplugin;

    function getLocation(url) {
      var search,
        a = document.createElement('a'),
        params = utils.serializeParam(me.queryCommandValue('serverparam')) || '';

      a.href = url;
      if (browser.ie) {
        a.href = a.href;
      }


      search = a.search;
      if (params) {
        search = search + (search.indexOf('?') == -1 ? '?' : '&') + params;
        search = search.replace(/[&]+/ig, '&');
      }
      return {
        'port': a.port,
        'hostname': a.hostname,
        'path': a.pathname + search || +a.hash
      }
    }

    return {
      commands: {
        /**
         * 字体背景颜色
         * @command snapscreen
         * @method execCommand
         * @param { String } cmd 命令字符串
         * @example
         * ```javascript
         * editor.execCommand('snapscreen');
         * ```
         */
        'snapscreen': {
          execCommand: function (cmd) {
            var url, local, res;
            var lang = me.getLang("snapScreen_plugin");

            if (!snapplugin) {
              var container = me.container;
              var doc = me.container.ownerDocument || me.container.document;
              snapplugin = doc.createElement("object");
              try {
                snapplugin.type = "application/x-pluginbaidusnap";
              } catch (e) {
                return;
              }
              snapplugin.style.cssText = "position:absolute;left:-9999px;width:0;height:0;";
              snapplugin.setAttribute("width", "0");
              snapplugin.setAttribute("height", "0");
              container.appendChild(snapplugin);
            }

            function onSuccess(rs) {
              try {
                rs = eval("(" + rs + ")");
                if (rs.state == 'SUCCESS') {
                  var opt = me.options;
                  me.execCommand('insertimage', {
                    src: opt.snapscreenUrlPrefix + rs.url,
                    _src: opt.snapscreenUrlPrefix + rs.url,
                    alt: rs.title || '',
                    floatStyle: opt.snapscreenImgAlign
                  });
                } else {
                  alert(rs.state);
                }
              } catch (e) {
                alert(lang.callBackErrorMsg);
              }
            }

            url = me.getActionUrl(me.getOpt('snapscreenActionName'));
            local = getLocation(url);
            setTimeout(function () {
              try {
                res = snapplugin.saveSnapshot(local.hostname, local.path, local.port);
              } catch (e) {
                me.ui._dialogs['snapscreenDialog'].open();
                return;
              }

              onSuccess(res);
            }, 50);
          },
          queryCommandState: function () {
            return navigator.userAgent.indexOf("Windows", 0) != -1 ? 0 : -1;
          }
        }
      }
    }
  });


  // plugins/insertparagraph.js
  /**
   * 插入段落
   * @file
   * @since 1.2.6.1
   */


  /**
   * 插入段落
   * @command insertparagraph
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * //editor是编辑器实例
   * editor.execCommand( 'insertparagraph' );
   * ```
   */

  AX.commands['insertparagraph'] = {
    execCommand: function (cmdName, front) {
      var me = this,
        range = me.selection.getRange(),
        start = range.startContainer, tmpNode;
      while (start) {
        if (domUtils.isBody(start)) {
          break;
        }
        tmpNode = start;
        start = start.parentNode;
      }
      if (tmpNode) {
        var p = me.document.createElement('p');
        if (front) {
          tmpNode.parentNode.insertBefore(p, tmpNode)
        } else {
          tmpNode.parentNode.insertBefore(p, tmpNode.nextSibling)
        }
        domUtils.fillNode(me.document, p);
        range.setStart(p, 0).setCursor(false, true);
      }
    }
  };

  // plugins/template.js
  ///import core
  ///import plugins\inserthtml.js
  ///import plugins\cleardoc.js
  ///commands 模板
  ///commandsName  template
  ///commandsTitle  模板
  ///commandsDialog  dialogs\template
  AX.plugins['template'] = function () {
    AX.commands['template'] = {
      execCommand: function (cmd, obj) {
        obj.html && this.execCommand("inserthtml", obj.html);
      }
    };
    this.addListener("click", function (type, evt) {
      var el = evt.target || evt.srcElement,
        range = this.selection.getRange();
      var tnode = domUtils.findParent(el, function (node) {
        if (node.className && domUtils.hasClass(node, "ue_t")) {
          return node;
        }
      }, true);
      tnode && range.selectNode(tnode).shrinkBoundary().select();
    });
    this.addListener("keydown", function (type, evt) {
      var range = this.selection.getRange();
      if (!range.collapsed) {
        if (!evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
          var tnode = domUtils.findParent(range.startContainer, function (node) {
            if (node.className && domUtils.hasClass(node, "ue_t")) {
              return node;
            }
          }, true);
          if (tnode) {
            domUtils.removeClasses(tnode, ["ue_t"]);
          }
        }
      }
    });
  };

  // plugins/autoupload.js
  /**
   * @description
   * 1.拖放文件到编辑区域，自动上传并插入到选区
   * 2.插入粘贴板的图片，自动上传并插入到选区
   * @author Jinqn
   * @date 2013-10-14
   */
  AX.plugin.register('autoupload', function () {

    function sendAndInsertFile(file, editor) {
      var me = editor;
      //模拟数据
      var fieldName, urlPrefix, maxSize, allowFiles, actionUrl,
        loadingHtml, errorHandler, successHandler,
        filetype = /image\/\w+/i.test(file.type) ? 'image' : 'file',
        loadingId = 'loading_' + (+new Date()).toString(36);

      fieldName = me.getOpt(filetype + 'FieldName');
      urlPrefix = me.getOpt(filetype + 'UrlPrefix');
      maxSize = me.getOpt(filetype + 'MaxSize');
      allowFiles = me.getOpt(filetype + 'AllowFiles');
      actionUrl = me.getActionUrl(me.getOpt(filetype + 'ActionName'));
      errorHandler = function (title) {
        var loader = me.document.getElementById(loadingId);
        loader && domUtils.remove(loader);
        me.fireEvent('showmessage', {
          'id': loadingId,
          'content': title,
          'type': 'error',
          'timeout': 4000
        });
      };

      if (filetype == 'image') {
        loadingHtml = '<img class="loadingclass" id="' + loadingId + '" src="' +
          me.options.themePath + me.options.theme +
          '/images/spacer.gif" title="' + (me.getLang('autoupload.loading') || '') + '" >';
        successHandler = function (data) {
          var link = urlPrefix + data.url,
            loader = me.document.getElementById(loadingId);
          if (loader) {
            loader.setAttribute('src', link);
            loader.setAttribute('_src', link);
            loader.setAttribute('title', data.title || '');
            loader.setAttribute('alt', data.original || '');
            loader.removeAttribute('id');
            domUtils.removeClasses(loader, 'loadingclass');
          }
        };
      } else {
        loadingHtml = '<p>' +
          '<img class="loadingclass" id="' + loadingId + '" src="' +
          me.options.themePath + me.options.theme +
          '/images/spacer.gif" title="' + (me.getLang('autoupload.loading') || '') + '" >' +
          '</p>';
        successHandler = function (data) {
          var link = urlPrefix + data.url,
            loader = me.document.getElementById(loadingId);

          var rng = me.selection.getRange(),
            bk = rng.createBookmark();
          rng.selectNode(loader).select();
          me.execCommand('insertfile', { 'url': link });
          rng.moveToBookmark(bk).select();
        };
      }

      /* 插入loading的占位符 */
      me.execCommand('inserthtml', loadingHtml);

      /* 判断后端配置是否没有加载成功 */
      if (!me.getOpt(filetype + 'ActionName')) {
        errorHandler(me.getLang('autoupload.errorLoadConfig'));
        return;
      }
      /* 判断文件大小是否超出限制 */
      if (file.size > maxSize) {
        errorHandler(me.getLang('autoupload.exceedSizeError'));
        return;
      }
      /* 判断文件格式是否超出允许 */
      var fileext = file.name ? file.name.substr(file.name.lastIndexOf('.')) : '';
      if (fileext && filetype != 'image' || allowFiles && (allowFiles.join('') + '.').indexOf(fileext.toLowerCase() + '.') == -1) {
        errorHandler(me.getLang('autoupload.exceedTypeError'));
        return;
      }

      /* 创建Ajax并提交 */
      var xhr = new XMLHttpRequest(),
        fd = new FormData(),
        params = utils.serializeParam(me.queryCommandValue('serverparam')) || '',
        url = utils.formatUrl(actionUrl + (actionUrl.indexOf('?') == -1 ? '?' : '&') + params);

      fd.append(fieldName, file, file.name || 'blob.' + file.type.substr('image/'.length));
      fd.append('type', 'ajax');
      xhr.open("post", url, true);
      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      xhr.addEventListener('load', function (e) {
        try {
          var json = new Function("return " + utils.trim(e.target.response))();
          if (json.state == 'SUCCESS' && json.url) {
            successHandler(json);
          } else {
            errorHandler(json.state);
          }
        } catch (er) {
          errorHandler(me.getLang('autoupload.loadError'));
        }
      });
      xhr.send(fd);
    }

    function getPasteImage(e) {
      return e.clipboardData && e.clipboardData.items && e.clipboardData.items.length == 1 && /^image\//.test(e.clipboardData.items[0].type) ? e.clipboardData.items : null;
    }

    function getDropImage(e) {
      return e.dataTransfer && e.dataTransfer.files ? e.dataTransfer.files : null;
    }

    return {
      outputRule: function (root) {
        utils.each(root.getNodesByTagName('img'), function (n) {
          if (/\b(loaderrorclass)|(bloaderrorclass)\b/.test(n.getAttr('class'))) {
            n.parentNode.removeChild(n);
          }
        });
        utils.each(root.getNodesByTagName('p'), function (n) {
          if (/\bloadpara\b/.test(n.getAttr('class'))) {
            n.parentNode.removeChild(n);
          }
        });
      },
      bindEvents: {
        //插入粘贴板的图片，拖放插入图片
        'ready': function (e) {
          var me = this;
          if (window.FormData && window.FileReader) {
            domUtils.on(me.body, 'paste drop', function (e) {
              var hasImg = false,
                items;
              //获取粘贴板文件列表或者拖放文件列表
              items = e.type == 'paste' ? getPasteImage(e) : getDropImage(e);
              if (items) {
                var len = items.length,
                  file;
                while (len--) {
                  file = items[len];
                  if (file.getAsFile) {
                    file = file.getAsFile();
                  }
                  if (file && file.size > 0) {
                    sendAndInsertFile(file, me);
                    hasImg = true;
                  }
                }
                hasImg && e.preventDefault();
              }

            });
            //取消拖放图片时出现的文字光标位置提示
            domUtils.on(me.body, 'dragover', function (e) {
              if (e.dataTransfer.types[0] == 'Files') {
                e.preventDefault();
              }
            });

            //设置loading的样式
            utils.cssRule('loading',
              '.loadingclass{display:inline-block;cursor:default;background: url(\''
              + this.options.themePath
              + this.options.theme + '/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-left:1px;height: 22px;width: 22px;}\n' +
              '.loaderrorclass{display:inline-block;cursor:default;background: url(\''
              + this.options.themePath
              + this.options.theme + '/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;' +
              '}',
              this.document);
          }
        }
      }
    }
  });

  // plugins/autosave.js
  AX.plugin.register('autosave', function () {

    var me = this,
      //无限循环保护
      lastSaveTime = new Date(),
      //最小保存间隔时间
      MIN_TIME = 20,
      //auto save key
      saveKey = null;

    function save(editor) {

      var saveData;

      if (new Date() - lastSaveTime < MIN_TIME) {
        return;
      }

      if (!editor.hasContents()) {
        //这里不能调用命令来删除， 会造成事件死循环
        saveKey && me.removePreferences(saveKey);
        return;
      }

      lastSaveTime = new Date();

      editor._saveFlag = null;

      saveData = me.body.innerHTML;

      if (editor.fireEvent("beforeautosave", {
        content: saveData
      }) === false) {
        return;
      }

      me.setPreferences(saveKey, saveData);

      editor.fireEvent("afterautosave", {
        content: saveData
      });

    }

    return {
      defaultOptions: {
        //默认间隔时间
        saveInterval: 500
      },
      bindEvents: {
        'ready': function () {

          var _suffix = "-drafts-data",
            key = null;

          if (me.key) {
            key = me.key + _suffix;
          } else {
            key = (me.container.parentNode.id || 'ue-common') + _suffix;
          }

          //页面地址+编辑器ID 保持唯一
          saveKey = (location.protocol + location.host + location.pathname).replace(/[.:\/]/g, '_') + key;

        },

        'contentchange': function () {

          if (!saveKey) {
            return;
          }

          if (me._saveFlag) {
            window.clearTimeout(me._saveFlag);
          }

          if (me.options.saveInterval > 0) {

            me._saveFlag = window.setTimeout(function () {

              save(me);

            }, me.options.saveInterval);

          } else {

            save(me);

          }


        }
      },
      commands: {
        'clearlocaldata': {
          execCommand: function (cmd, name) {
            if (saveKey && me.getPreferences(saveKey)) {
              me.removePreferences(saveKey)
            }
          },
          notNeedUndo: true,
          ignoreContentChange: true
        },

        'getlocaldata': {
          execCommand: function (cmd, name) {
            return saveKey ? me.getPreferences(saveKey) || '' : '';
          },
          notNeedUndo: true,
          ignoreContentChange: true
        },

        'drafts': {
          execCommand: function (cmd, name) {
            if (saveKey) {
              me.body.innerHTML = me.getPreferences(saveKey) || '<p>' + domUtils.fillHtml + '</p>';
              // me.focus(true);  // 修复点击草稿箱之后光标自动定位到下一行
            }
          },
          queryCommandState: function () {
            return saveKey ? me.getPreferences(saveKey) === null ? -1 : 0 : -1;
          },
          notNeedUndo: true,
          ignoreContentChange: true
        }
      }
    }

  });

  // plugins/charts.js
  AX.plugin.register('charts', function () {

    var me = this;

    return {
      bindEvents: {
        'chartserror': function () {
        }
      },
      commands: {
        'charts': {
          execCommand: function (cmd, data) {

            var tableNode = domUtils.findParentByTagName(this.selection.getRange().startContainer, 'table', true),
              flagText = [],
              config = {};

            if (!tableNode) {
              return false;
            }

            if (!validData(tableNode)) {
              me.fireEvent("chartserror");
              return false;
            }

            config.title = data.title || '';
            config.subTitle = data.subTitle || '';
            config.xTitle = data.xTitle || '';
            config.yTitle = data.yTitle || '';
            config.suffix = data.suffix || '';
            config.tip = data.tip || '';
            //数据对齐方式
            config.dataFormat = data.tableDataFormat || '';
            //图表类型
            config.chartType = data.chartType || 0;

            for (var key in config) {

              if (!config.hasOwnProperty(key)) {
                continue;
              }

              flagText.push(key + ":" + config[key]);

            }

            tableNode.setAttribute("data-chart", flagText.join(";"));
            domUtils.addClass(tableNode, "edui-charts-table");


          },
          queryCommandState: function (cmd, name) {

            var tableNode = domUtils.findParentByTagName(this.selection.getRange().startContainer, 'table', true);
            return tableNode && validData(tableNode) ? 0 : -1;

          }
        }
      },
      inputRule: function (root) {
        utils.each(root.getNodesByTagName('table'), function (tableNode) {

          if (tableNode.getAttr("data-chart") !== undefined) {
            tableNode.setAttr("style");
          }

        })

      },
      outputRule: function (root) {
        utils.each(root.getNodesByTagName('table'), function (tableNode) {

          if (tableNode.getAttr("data-chart") !== undefined) {
            tableNode.setAttr("style", "display: none;");
          }

        })

      }
    }

    function validData(table) {

      var firstRows = null,
        cellCount = 0;

      //行数不够
      if (table.rows.length < 2) {
        return false;
      }

      //列数不够
      if (table.rows[0].cells.length < 2) {
        return false;
      }

      //第一行所有cell必须是th
      firstRows = table.rows[0].cells;
      cellCount = firstRows.length;

      for (var i = 0, cell; cell = firstRows[i]; i++) {

        if (cell.tagName.toLowerCase() !== 'th') {
          return false;
        }

      }

      for (var i = 1, row; row = table.rows[i]; i++) {

        //每行单元格数不匹配， 返回false
        if (row.cells.length != cellCount) {
          return false;
        }

        //第一列不是th也返回false
        if (row.cells[0].tagName.toLowerCase() !== 'th') {
          return false;
        }

        for (var j = 1, cell; cell = row.cells[j]; j++) {

          var value = utils.trim(cell.innerText || cell.textContent || '');

          value = value.replace(new RegExp(AX.dom.domUtils.fillChar, 'g'), '').replace(/^\s+|\s+$/g, '');

          //必须是数字
          if (!/^\d*\.?\d+$/.test(value)) {
            return false;
          }

        }

      }

      return true;

    }

  });

  // plugins/simpleupload.js
  /**
   * @description
   * 简单上传:点击按钮,直接选择文件上传
   * @author Jinqn
   * @date 2014-03-31
   */
  AX.plugin.register('simpleupload', function () {
    var me = this,
      isLoaded = false,
      containerBtn;

    function initUploadBtn() {
      var w = containerBtn.offsetWidth || 20,
        h = containerBtn.offsetHeight || 20,
        btnIframe = document.createElement('iframe'),
        btnStyle = 'display:block;width:' + w + 'px;height:' + h + 'px;overflow:hidden;border:0;margin:0;padding:0;position:absolute;top:0;left:0;filter:alpha(opacity=0);-moz-opacity:0;-khtml-opacity: 0;opacity: 0;cursor:pointer;';

      domUtils.on(btnIframe, 'load', function () {

        var timestrap = (+new Date()).toString(36),
          wrapper,
          btnIframeDoc,
          btnIframeBody;

        btnIframeDoc = btnIframe.contentDocument || btnIframe.contentWindow.document;
        btnIframeBody = btnIframeDoc.body;
        wrapper = btnIframeDoc.createElement('div');

        wrapper.innerHTML = '<form id="edui_form_' + timestrap + '" target="edui_iframe_' + timestrap + '" method="POST" enctype="multipart/form-data" action="' + me.getOpt('serverUrl') + '" ' +
          'style="' + btnStyle + '">' +
          '<input id="edui_input_' + timestrap + '" type="file" accept="image/*" name="' + me.options.imageFieldName + '" ' +
          'style="' + btnStyle + '">' +
          '</form>' +
          '<iframe id="edui_iframe_' + timestrap + '" name="edui_iframe_' + timestrap + '" style="display:none;width:0;height:0;border:0;margin:0;padding:0;position:absolute;"></iframe>';

        wrapper.className = 'edui-' + me.options.theme;
        wrapper.id = me.ui.id + '_iframeupload';
        btnIframeBody.style.cssText = btnStyle;
        btnIframeBody.style.width = w + 'px';
        btnIframeBody.style.height = h + 'px';
        btnIframeBody.appendChild(wrapper);

        if (btnIframeBody.parentNode) {
          btnIframeBody.parentNode.style.width = w + 'px';
          btnIframeBody.parentNode.style.height = w + 'px';
        }

        var form = btnIframeDoc.getElementById('edui_form_' + timestrap);
        var input = btnIframeDoc.getElementById('edui_input_' + timestrap);
        var iframe = btnIframeDoc.getElementById('edui_iframe_' + timestrap);

        domUtils.on(input, 'change', function () {
          if (!input.value) {
            return;
          }
          var loadingId = 'loading_' + (+new Date()).toString(36);
          var params = utils.serializeParam(me.queryCommandValue('serverparam')) || '';

          var imageActionUrl = me.getActionUrl(me.getOpt('imageActionName'));
          var allowFiles = me.getOpt('imageAllowFiles');

          me.focus();
          me.execCommand('inserthtml', '<img class="loadingclass" id="' + loadingId + '" src="' + me.options.themePath + me.options.theme + '/images/spacer.gif" title="' + (me.getLang('simpleupload.loading') || '') + '" >');

          function callback() {
            try {
              var link, json, loader,
                body = (iframe.contentDocument || iframe.contentWindow.document).body,
                result = body.innerText || body.textContent || '';
              json = new Function("return " + result)();
              link = me.options.imageUrlPrefix + json.url;
              if (json.state == 'SUCCESS' && json.url) {
                loader = me.document.getElementById(loadingId);
                loader.setAttribute('src', link);
                loader.setAttribute('_src', link);
                loader.setAttribute('title', json.title || '');
                loader.setAttribute('alt', json.original || '');
                loader.removeAttribute('id');
                domUtils.removeClasses(loader, 'loadingclass');
              } else {
                showErrorLoader && showErrorLoader(json.state);
              }
            } catch (er) {
              showErrorLoader && showErrorLoader(me.getLang('simpleupload.loadError'));
            }
            form.reset();
            domUtils.un(iframe, 'load', callback);
          }

          function showErrorLoader(title) {
            if (loadingId) {
              var loader = me.document.getElementById(loadingId);
              loader && domUtils.remove(loader);
              me.fireEvent('showmessage', {
                'id': loadingId,
                'content': title,
                'type': 'error',
                'timeout': 4000
              });
            }
          }

          /* 判断后端配置是否没有加载成功 */
          if (!me.getOpt('imageActionName')) {
            errorHandler(me.getLang('autoupload.errorLoadConfig'));
            return;
          }
          // 判断文件格式是否错误
          var filename = input.value,
            fileext = filename ? filename.substr(filename.lastIndexOf('.')) : '';
          if (!fileext || allowFiles && (allowFiles.join('') + '.').indexOf(fileext.toLowerCase() + '.') == -1) {
            showErrorLoader(me.getLang('simpleupload.exceedTypeError'));
            return;
          }

          domUtils.on(iframe, 'load', callback);
          form.action = utils.formatUrl(imageActionUrl + (imageActionUrl.indexOf('?') == -1 ? '?' : '&') + params);
          form.submit();
        });

        var stateTimer;
        me.addListener('selectionchange', function () {
          clearTimeout(stateTimer);
          stateTimer = setTimeout(function () {
            var state = me.queryCommandState('simpleupload');
            if (state == -1) {
              input.disabled = 'disabled';
            } else {
              input.disabled = false;
            }
          }, 400);
        });
        isLoaded = true;
      });

      btnIframe.style.cssText = btnStyle;
      containerBtn.appendChild(btnIframe);
    }

    return {
      bindEvents: {
        'ready': function () {
          //设置loading的样式
          utils.cssRule('loading',
            '.loadingclass{display:inline-block;cursor:default;background: url(\''
            + this.options.themePath
            + this.options.theme + '/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;}\n' +
            '.loaderrorclass{display:inline-block;cursor:default;background: url(\''
            + this.options.themePath
            + this.options.theme + '/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;' +
            '}',
            this.document);
        },
        /* 初始化简单上传按钮 */
        'simpleuploadbtnready': function (type, container) {
          containerBtn = container;
          me.afterConfigReady(initUploadBtn);
        }
      },
      outputRule: function (root) {
        utils.each(root.getNodesByTagName('img'), function (n) {
          if (/\b(loaderrorclass)|(bloaderrorclass)\b/.test(n.getAttr('class'))) {
            n.parentNode.removeChild(n);
          }
        });
      },
      commands: {
        'simpleupload': {
          queryCommandState: function () {
            return isLoaded ? 0 : -1;
          }
        }
      }
    }
  });

  // plugins/serverparam.js
  /**
   * 服务器提交的额外参数列表设置插件
   * @file
   * @since 1.2.6.1
   */
  AX.plugin.register('serverparam', function () {

    var me = this,
      serverParam = {};

    return {
      commands: {
        /**
         * 修改服务器提交的额外参数列表,清除所有项
         * @command serverparam
         * @method execCommand
         * @param { String } cmd 命令字符串
         * @example
         * ```javascript
         * editor.execCommand('serverparam');
         * editor.queryCommandValue('serverparam'); //返回空
         * ```
         */
        /**
         * 修改服务器提交的额外参数列表,删除指定项
         * @command serverparam
         * @method execCommand
         * @param { String } cmd 命令字符串
         * @param { String } key 要清除的属性
         * @example
         * ```javascript
         * editor.execCommand('serverparam', 'name'); //删除属性name
         * ```
         */
        /**
         * 修改服务器提交的额外参数列表,使用键值添加项
         * @command serverparam
         * @method execCommand
         * @param { String } cmd 命令字符串
         * @param { String } key 要添加的属性
         * @param { String } value 要添加属性的值
         * @example
         * ```javascript
         * editor.execCommand('serverparam', 'name', 'hello');
         * editor.queryCommandValue('serverparam'); //返回对象 {'name': 'hello'}
         * ```
         */
        /**
         * 修改服务器提交的额外参数列表,传入键值对对象添加多项
         * @command serverparam
         * @method execCommand
         * @param { String } cmd 命令字符串
         * @param { Object } key 传入的键值对对象
         * @example
         * ```javascript
         * editor.execCommand('serverparam', {'name': 'hello'});
         * editor.queryCommandValue('serverparam'); //返回对象 {'name': 'hello'}
         * ```
         */
        /**
         * 修改服务器提交的额外参数列表,使用自定义函数添加多项
         * @command serverparam
         * @method execCommand
         * @param { String } cmd 命令字符串
         * @param { Function } key 自定义获取参数的函数
         * @example
         * ```javascript
         * editor.execCommand('serverparam', function(editor){
         *     return {'key': 'value'};
         * });
         * editor.queryCommandValue('serverparam'); //返回对象 {'key': 'value'}
         * ```
         */

        /**
         * 获取服务器提交的额外参数列表
         * @command serverparam
         * @method queryCommandValue
         * @param { String } cmd 命令字符串
         * @example
         * ```javascript
         * editor.queryCommandValue( 'serverparam' ); //返回对象 {'key': 'value'}
         * ```
         */
        'serverparam': {
          execCommand: function (cmd, key, value) {
            if (key === undefined || key === null) { //不传参数,清空列表
              serverParam = {};
            } else if (utils.isString(key)) { //传入键值
              if (value === undefined || value === null) {
                delete serverParam[key];
              } else {
                serverParam[key] = value;
              }
            } else if (utils.isObject(key)) { //传入对象,覆盖列表项
              utils.extend(serverParam, key, true);
            } else if (utils.isFunction(key)) { //传入函数,添加列表项
              utils.extend(serverParam, key(), true);
            }
          },
          queryCommandValue: function () {
            return serverParam || {};
          }
        }
      }
    }
  });


  // plugins/insertfile.js
  /**
   * 插入附件
   */
  AX.plugin.register('insertfile', function () {

    var me = this;

    function getFileIcon(url) {
      var ext = url.substr(url.lastIndexOf('.') + 1).toLowerCase(),
        maps = {
          "rar": "icon_rar.gif",
          "zip": "icon_rar.gif",
          "tar": "icon_rar.gif",
          "gz": "icon_rar.gif",
          "bz2": "icon_rar.gif",
          "doc": "icon_doc.gif",
          "docx": "icon_doc.gif",
          "pdf": "icon_pdf.gif",
          "mp3": "icon_mp3.gif",
          "xls": "icon_xls.gif",
          "chm": "icon_chm.gif",
          "ppt": "icon_ppt.gif",
          "pptx": "icon_ppt.gif",
          "avi": "icon_mv.gif",
          "rmvb": "icon_mv.gif",
          "wmv": "icon_mv.gif",
          "flv": "icon_mv.gif",
          "swf": "icon_mv.gif",
          "rm": "icon_mv.gif",
          "exe": "icon_exe.gif",
          "psd": "icon_psd.gif",
          "txt": "icon_txt.gif",
          "jpg": "icon_jpg.gif",
          "png": "icon_jpg.gif",
          "jpeg": "icon_jpg.gif",
          "gif": "icon_jpg.gif",
          "ico": "icon_jpg.gif",
          "bmp": "icon_jpg.gif"
        };
      return maps[ext] ? maps[ext] : maps['txt'];
    }

    return {
      commands: {
        'insertfile': {
          execCommand: function (command, filelist) {
            filelist = utils.isArray(filelist) ? filelist : [filelist];

            var i, item, icon, title,
              html = '',
              URL = me.getOpt('AXEDITOR_HOME_URL'),
              iconDir = URL + (URL.substr(URL.length - 1) == '/' ? '' : '/') + 'dialogs/attachment/fileTypeImages/';
            for (i = 0; i < filelist.length; i++) {
              item = filelist[i];
              icon = iconDir + getFileIcon(item.url);
              title = item.title || item.url.substr(item.url.lastIndexOf('/') + 1);
              html += '<p style="line-height: 16px;">' +
                '<img style="vertical-align: middle; margin-right: 2px;" src="' + icon + '" _src="' + icon + '" />' +
                '<a style="font-size:12px; color:#0066cc;" href="' + item.url + '" title="' + title + '">' + title + '</a>' +
                '</p>';
            }
            me.execCommand('insertHtml', html);
          }
        }
      }
    }
  });


  // plugins/xssFilter.js
  /**
   * @file xssFilter.js
   * @desc xss过滤器
   * @author robbenmu
   */

  AX.plugins.xssFilter = function () {

    var config = AXEDITOR_CONFIG;
    var whitList = config.whitList;

    function filter(node) {

      var tagName = node.tagName;
      var attrs = node.attrs;

      if (!whitList.hasOwnProperty(tagName)) {
        node.parentNode.removeChild(node);
        return false;
      }

      AX.utils.each(attrs, function (val, key) {

        if (whitList[tagName].indexOf(key) === -1) {
          node.setAttr(key);
        }
      });
    }

    // 添加inserthtml\paste等操作用的过滤规则
    if (whitList && config.xssFilterRules) {
      this.options.filterRules = function () {

        var result = {};

        AX.utils.each(whitList, function (val, key) {
          result[key] = function (node) {
            return filter(node);
          };
        });

        return result;
      }();
    }

    var tagList = [];

    AX.utils.each(whitList, function (val, key) {
      tagList.push(key);
    });

    // 添加input过滤规则
    //
    if (whitList && config.inputXssFilter) {
      this.addInputRule(function (root) {

        root.traversal(function (node) {
          if (node.type !== 'element') {
            return false;
          }
          filter(node);
        });
      });
    }
    // 添加output过滤规则
    //
    if (whitList && config.outputXssFilter) {
      this.addOutputRule(function (root) {

        root.traversal(function (node) {
          if (node.type !== 'element') {
            return false;
          }
          filter(node);
        });
      });
    }

  };


  // ui/ui.js
  var baidu = baidu || {};
  baidu.editor = baidu.editor || {};
  AX.ui = baidu.editor.ui = {};

  // ui/uiutils.js
  (function () {
    var browser = baidu.editor.browser,
      domUtils = baidu.editor.dom.domUtils;

    var magic = '$EDITORUI';
    var root = window[magic] = {};
    var uidMagic = 'ID' + magic;
    var uidCount = 0;

    var uiUtils = baidu.editor.ui.uiUtils = {
      uid: function (obj) {
        return obj ? obj[uidMagic] || (obj[uidMagic] = ++uidCount) : ++uidCount;
      },
      hook: function (fn, callback) {
        var dg;
        if (fn && fn._callbacks) {
          dg = fn;
        } else {
          dg = function () {
            var q;
            if (fn) {
              q = fn.apply(this, arguments);
            }
            var callbacks = dg._callbacks;
            var k = callbacks.length;
            while (k--) {
              var r = callbacks[k].apply(this, arguments);
              if (q === undefined) {
                q = r;
              }
            }
            return q;
          };
          dg._callbacks = [];
        }
        dg._callbacks.push(callback);
        return dg;
      },
      createElementByHtml: function (html) {
        var el = document.createElement('div');
        el.innerHTML = html;
        el = el.firstChild;
        el.parentNode.removeChild(el);
        return el;
      },
      getViewportElement: function () {
        return browser.ie && browser.quirks ?
          document.body : document.documentElement;
      },
      getClientRect: function (element) {
        var bcr;
        //trace  IE6下在控制编辑器显隐时可能会报错，catch一下
        try {
          bcr = element.getBoundingClientRect();
        } catch (e) {
          bcr = { left: 0, top: 0, height: 0, width: 0 }
        }
        var rect = {
          left: Math.round(bcr.left),
          top: Math.round(bcr.top),
          height: Math.round(bcr.bottom - bcr.top),
          width: Math.round(bcr.right - bcr.left)
        };
        if (element.querySelectorAll(".edui-menuitem ").length > 0) {
          var menuitem = element.querySelectorAll(".edui-menuitem ");
          var it = "";
          for(var i = 0; i < menuitem.length; i++) {
            if(it.length < menuitem[i].textContent.length){
              it = menuitem[i].textContent
            }
          }
          rect.width = (it.length * 12 + 50) > 190?(it.length * 12 + 50): 190;
        }
        var doc;
        while ((doc = element.ownerDocument) !== document &&
          (element = domUtils.getWindow(doc).frameElement)) {
          bcr = element.getBoundingClientRect();
          rect.left += bcr.left;
          rect.top += bcr.top;
        }
        rect.bottom = rect.top + rect.height;
        rect.right = rect.left + rect.width;
        return rect;
      },
      getViewportRect: function (condition) {
        var viewportEl = uiUtils.getViewportElement();
        var width, height;
        if (condition) {
          var head = axTools.getByClass("top-wrapper", viewportEl)[0] || 0;
          var sideBar = axTools.getByClass("float-left right", viewportEl)[0] || 0; // axTools.getByClass("tool-right", viewportEl)[0] || axTools.getByClass("bdr4", viewportEl)[0] ||
          width = ((window.innerWidth - sideBar.offsetWidth - 20) || (viewportEl.clientWidth - sideBar.offsetWidth - 20)) || window.innerWidth;
          height = ((window.innerHeight - head.offsetHeight - 10) || (viewportEl.clientHeight - head.offsetHeight - 10)) || window.innerHeight;
          return {
            left: 0,
            top: head.offsetHeight + 10,
            height: height,
            width: width,
            bottom: height,
            right: width
          };
        } else {
          width = ((window.innerWidth) || (viewportEl.clientWidth)) | 0;
          height = ((window.innerHeight) || (viewportEl.clientHeight)) | 0;
          return {
            left: 0,
            top: 0,
            height: height,
            width: width,
            bottom: height,
            right: width
          };
        }
      },
      setViewportOffset: function (element, offset) {
        var rect;
        var fixedLayer = uiUtils.getFixedLayer();
        if (element.parentNode === fixedLayer) {
          element.style.left = offset.left + 'px';
          element.style.top = offset.top + 'px';
        } else {
          domUtils.setViewportOffset(element, offset);
        }
      },
      getEventOffset: function (evt) {
        var el = evt.target || evt.srcElement;
        var rect = uiUtils.getClientRect(el);
        var offset = uiUtils.getViewportOffsetByEvent(evt);
        return {
          left: offset.left - rect.left,
          top: offset.top - rect.top
        };
      },
      getViewportOffsetByEvent: function (evt) {
        var el = evt.target || evt.srcElement;
        var frameEl = domUtils.getWindow(el).frameElement;
        var scaleValue = evt.view.document.getElementById("paperScaleHidden") && evt.view.document.getElementById("paperScaleHidden").value;
        var offset = {
          left: evt.clientX * (scaleValue || 1),
          top: evt.clientY * (scaleValue || 1),
          isScale: true
        };
        if (frameEl && el.ownerDocument !== document) {
          var rect = uiUtils.getClientRect(frameEl);
          offset.left += rect.left;
          offset.top += rect.top;
        }
        return offset;
      },
      setGlobal: function (id, obj) {
        window[magic][id] = obj;
        return magic + '["' + id + '"]';
      },
      unsetGlobal: function (id) {
        delete window[magic][id];
      },
      copyAttributes: function (tgt, src) {
        var attributes = src.attributes;
        var k = attributes.length;
        while (k--) {
          var attrNode = attributes[k];
          if (attrNode.nodeName != 'style' && attrNode.nodeName != 'class' && (!browser.ie || attrNode.specified)) {
            tgt.setAttribute(attrNode.nodeName, attrNode.nodeValue);
          }
        }
        if (src.className) {
          domUtils.addClass(tgt, src.className);
        }
        if (src.style.cssText) {
          tgt.style.cssText += ';' + src.style.cssText;
        }
      },
      removeStyle: function (el, styleName) {
        if (el.style.removeProperty) {
          el.style.removeProperty(styleName);
        } else if (el.style.removeAttribute) {
          el.style.removeAttribute(styleName);
        } else {
          throw '';
        }
      },
      contains: function (elA, elB) {
        return elA && elB && (elA === elB ? false :
          elA.contains ? elA.contains(elB) :
            elA.compareDocumentPosition(elB) & 16
        );
      },
      startDrag: function (evt, callbacks, doc) {
        var doc = doc || document;
        var startX = evt.clientX;
        var startY = evt.clientY;

        function handleMouseMove(evt) {
          var x = evt.clientX - startX;
          var y = evt.clientY - startY;
          callbacks.ondragmove(x, y, evt);
          if (evt.stopPropagation) {
            evt.stopPropagation();
          } else {
            evt.cancelBubble = true;
          }
        }

        if (doc.addEventListener) {
          function handleMouseUp(evt) {
            doc.removeEventListener('mousemove', handleMouseMove, true);
            doc.removeEventListener('mouseup', handleMouseUp, true);
            window.removeEventListener('mouseup', handleMouseUp, true);
            callbacks.ondragstop();
          }

          doc.addEventListener('mousemove', handleMouseMove, true);
          doc.addEventListener('mouseup', handleMouseUp, true);
          window.addEventListener('mouseup', handleMouseUp, true);

          evt.preventDefault();
        } else {
          var elm = evt.srcElement;
          elm.setCapture();

          function releaseCaptrue() {
            elm.releaseCapture();
            elm.detachEvent('onmousemove', handleMouseMove);
            elm.detachEvent('onmouseup', releaseCaptrue);
            elm.detachEvent('onlosecaptrue', releaseCaptrue);
            callbacks.ondragstop();
          }

          elm.attachEvent('onmousemove', handleMouseMove);
          elm.attachEvent('onmouseup', releaseCaptrue);
          elm.attachEvent('onlosecaptrue', releaseCaptrue);
          evt.returnValue = false;
        }
        callbacks.ondragstart();
      },
      getFixedLayer: function () {
        var layer = document.getElementById('edui_fixedlayer');
        if (layer == null) {
          layer = document.createElement('div');
          layer.id = 'edui_fixedlayer';
          document.body.appendChild(layer);
          if (browser.ie && browser.version <= 8) {
            layer.style.position = 'absolute';
            bindFixedLayer();
            setTimeout(updateFixedOffset);
          } else {
            layer.style.position = 'fixed';
          }
          layer.style.left = '0';
          layer.style.top = '0';
          layer.style.width = '0';
          layer.style.height = '0';
        }
        return layer;
      },
      makeUnselectable: function (element) {
        if (browser.opera || browser.ie && browser.version < 9) {
          element.unselectable = 'on';
          if (element.hasChildNodes()) {
            for (var i = 0; i < element.childNodes.length; i++) {
              if (element.childNodes[i].nodeType == 1) {
                uiUtils.makeUnselectable(element.childNodes[i]);
              }
            }
          }
        } else {
          if (element.style.MozUserSelect !== undefined) {
            element.style.MozUserSelect = 'none';
          } else if (element.style.WebkitUserSelect !== undefined) {
            element.style.WebkitUserSelect = 'none';
          } else if (element.style.KhtmlUserSelect !== undefined) {
            element.style.KhtmlUserSelect = 'none';
          }
        }
      }
    };

    function updateFixedOffset() {
      var layer = document.getElementById('edui_fixedlayer');
      uiUtils.setViewportOffset(layer, {
        left: 0,
        top: 0
      });
      //        layer.style.display = 'none';
      //        layer.style.display = 'block';

      //#trace: 1354
      //        setTimeout(updateFixedOffset);
    }

    function bindFixedLayer(adjOffset) {
      domUtils.on(window, 'scroll', updateFixedOffset);
      domUtils.on(window, 'resize', baidu.editor.utils.defer(updateFixedOffset, 0, true));
    }
  })();


  // ui/uibase.js
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      EventBase = baidu.editor.EventBase,
      UIBase = baidu.editor.ui.UIBase = function () {
      };

    UIBase.prototype = {
      className: '',
      uiName: '',
      initOptions: function (options) {
        var me = this;
        for (var k in options) {
          me[k] = options[k];
        }
        this.id = this.id || 'edui' + uiUtils.uid();
      },
      initUIBase: function () {
        this._globalKey = utils.unhtml(uiUtils.setGlobal(this.id, this));
      },
      render: function (holder) {
        var html = this.renderHtml();
        var el = uiUtils.createElementByHtml(html);

        //by xuheng 给每个node添加class
        var list = domUtils.getElementsByTagName(el, "*");
        var theme = "edui-" + (this.theme || this.editor.options.theme);
        var layer = document.getElementById('edui_fixedlayer');
        for (var i = 0, node; node = list[i++];) {
          domUtils.addClass(node, theme);
        }
        domUtils.addClass(el, theme);
        if (layer) {
          layer.className = "";
          domUtils.addClass(layer, theme);
        }

        var seatEl = this.getDom();
        if (seatEl != null) {
          seatEl.parentNode.replaceChild(el, seatEl);
          uiUtils.copyAttributes(el, seatEl);
        } else {
          if (typeof holder == 'string') {
            holder = document.getElementById(holder);
          }
          holder = holder || uiUtils.getFixedLayer();
          domUtils.addClass(holder, theme);
          holder.appendChild(el);
        }
        this.postRender();
      },
      getDom: function (name) {
        if (!name) {
          return document.getElementById(this.id);
        }
        return document.getElementById(this.id + '_' + name);

      },
      postRender: function () {
        this.fireEvent('postrender');
      },
      getHtmlTpl: function () {
        return '';
      },
      formatHtml: function (tpl) {
        var prefix = 'edui-' + this.uiName;
        return tpl
          .replace(/##/g, this.id)
          .replace(/%%-/g, this.uiName ? prefix + '-' : '')
          .replace(/%%/g, (this.uiName ? prefix : '') + ' ' + this.className)
          .replace(/\$\$/g, this._globalKey);
      },
      renderHtml: function () {
        return this.formatHtml(this.getHtmlTpl());
      },
      dispose: function () {
        var box = this.getDom();
        if (box) {
          baidu.editor.dom.domUtils.remove(box);
        }
        uiUtils.unsetGlobal(this.id);
      }
    };
    utils.inherits(UIBase, EventBase);
  })();


  // ui/separator.js
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase,
      Separator = baidu.editor.ui.Separator = function (options) {
        this.initOptions(options);
        this.initSeparator();
      };
    Separator.prototype = {
      uiName: 'separator',
      initSeparator: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        return '<div id="##" class="edui-box %%"></div>';
      }
    };
    utils.inherits(Separator, UIBase);

  })();


  // ui/mask.js
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      domUtils = baidu.editor.dom.domUtils,
      UIBase = baidu.editor.ui.UIBase,
      uiUtils = baidu.editor.ui.uiUtils;

    var Mask = baidu.editor.ui.Mask = function (options) {
      this.initOptions(options);
      this.initUIBase();
    };
    Mask.prototype = {
      getHtmlTpl: function () {
        return '<div id="##" class="edui-mask %%" onclick="return $$._onClick(event, this);" onmousedown="return $$._onMouseDown(event, this);"></div>';
      },
      postRender: function () {
        var me = this;
        domUtils.on(window, 'resize', function () {
          setTimeout(function () {
            if (!me.isHidden()) {
              me._fill();
            }
          });
        });
      },
      show: function (zIndex) {
        this._fill();
        this.getDom().style.display = '';
        this.getDom().style.zIndex = zIndex;
      },
      hide: function () {
        this.getDom().style.display = 'none';
        this.getDom().style.zIndex = '';
      },
      isHidden: function () {
        return this.getDom().style.display == 'none';
      },
      _onMouseDown: function () {
        return false;
      },
      _onClick: function (e, target) {
        this.fireEvent('click', e, target);
      },
      _fill: function () {
        var el = this.getDom();
        var vpRect = uiUtils.getViewportRect();
        el.style.width = vpRect.width + 'px';
        el.style.height = vpRect.height + 'px';
      }
    };
    utils.inherits(Mask, UIBase);
  })();


  // ui/popup.js
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      domUtils = baidu.editor.dom.domUtils,
      UIBase = baidu.editor.ui.UIBase,
      Popup = baidu.editor.ui.Popup = function (options) {
        this.initOptions(options);
        this.initPopup();
      };

    var allPopups = [];
    var prevPopupId = '';

    function closeAllPopup(evt, el) {
      for (var i = 0; i < allPopups.length; i++) {
        var pop = allPopups[i];
        if (!pop.isHidden()) {
          if (pop.queryAutoHide(el) !== false) {
            if (evt && /scroll/ig.test(evt.type) && pop.className == "edui-wordpastepop") {
              return;
            }
            pop.hide();
          }
        }
      }

      if (allPopups.length) {
        pop.editor.fireEvent("afterhidepop");
      }
    }

    function closeAllPopupNew(el) {
      for (var i = 0; i < allPopups.length; i++) {
        var pop = allPopups[i];
        if (!pop.isHidden()) {
          console.log(pop.queryAutoHide(el));
          if (pop.className == "edui-wordpastepop") {
            return;
          }
          pop.hide();
        }
      }

      if (allPopups.length) {
        pop.editor.fireEvent("afterhidepop");
      }
    }

    Popup.postHide = closeAllPopup;

    var ANCHOR_CLASSES = ['edui-anchor-topleft', 'edui-anchor-topright',
      'edui-anchor-bottomleft', 'edui-anchor-bottomright'];
    Popup.prototype = {
      SHADOW_RADIUS: 5,
      content: null,
      _hidden: false,
      autoRender: true,
      canSideLeft: true,
      canSideUp: true,
      initPopup: function () {
        this.initUIBase();
        allPopups.push(this);
      },
      getHtmlTpl: function () {
        return '<div id="##" class="edui-popup %%" onmousedown="return false;">' +
          ' <div id="##_body" class="edui-popup-body">' +
          ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: transparent;" frameborder="0" width="100%" height="100%" src="about:blank"></iframe>' +
          ' <div class="edui-shadow"></div>' +
          ' <div id="##_content" class="edui-popup-content">' +
          this.getContentHtmlTpl() +
          '  </div>' +
          ' </div>' +
          '</div>';
      },
      getContentHtmlTpl: function () {
        if (this.content) {
          if (typeof this.content == 'string') {
            return this.content;
          }
          return this.content.renderHtml();
        }
        return ''


      },
      _UIBase_postRender: UIBase.prototype.postRender,
      postRender: function () {


        if (this.content instanceof UIBase) {
          this.content.postRender();
        }

        //捕获鼠标滚轮
        if (this.captureWheel && !this.captured) {

          this.captured = true;

          var winHeight = (document.documentElement.clientHeight || document.body.clientHeight) - 80,
            _height = this.getDom().offsetHeight,
            _top = uiUtils.getClientRect(this.combox.getDom()).top,
            content = this.getDom('content'),
            ifr = this.getDom('body').getElementsByTagName('iframe'),
            me = this;

          ifr.length && (ifr = ifr[0]);

          while (_top + _height > winHeight) {
            _height -= 30;
          }
          content.style.height = _height + 'px';
          //同步更改iframe高度
          ifr && (ifr.style.height = _height + 'px');

          //阻止在combox上的鼠标滚轮事件, 防止用户的正常操作被误解
          if (window.XMLHttpRequest) {

            domUtils.on(content, 'onmousewheel' in document.body ? 'mousewheel' : 'DOMMouseScroll', function (e) {

              if (e.preventDefault) {
                e.preventDefault();
              } else {
                e.returnValue = false;
              }

              if (e.wheelDelta) {

                content.scrollTop -= e.wheelDelta / 120 * 60;

              } else {

                content.scrollTop -= e.detail / -3 * 60;

              }

            });

          } else {

            //ie6
            domUtils.on(this.getDom(), 'mousewheel', function (e) {

              e.returnValue = false;

              me.getDom('content').scrollTop -= e.wheelDelta / 120 * 60;

            });

          }

        }
        this.fireEvent('postRenderAfter');
        this.hide(true);
        this._UIBase_postRender();
      },
      _doAutoRender: function () {
        if (!this.getDom() && this.autoRender) {
          this.render();
        }
      },
      mesureSize: function () {
        var box = this.getDom('content');
        return uiUtils.getClientRect(box);
      },
      fitSize: function () {
        if (this.captureWheel && this.sized) {
          return this.__size;
        }
        this.sized = true;
        var popBodyEl = this.getDom('body');
        popBodyEl.style.width = '';
        popBodyEl.style.height = '';
        var size = this.mesureSize();
        if (this.captureWheel) {
          popBodyEl.style.width = -(-20 - size.width) + 'px';
          var height = parseInt(this.getDom('content').style.height, 10);
          !window.isNaN(height) && (size.height = height);
        } else {
          popBodyEl.style.width = size.width + 'px';
        }
        popBodyEl.style.height = size.height + 'px';
        size.width = size.width + 13;
        popBodyEl.style.width = size.width + 'px';
        this.__size = size;
        this.captureWheel && (this.getDom('content').style.overflow = 'auto');
        return size;
      },
      showAnchor: function (element, hoz) {
        this.showAnchorRect(uiUtils.getClientRect(element), hoz);
      },
      showAnchorRect: function (rect, hoz, adj) {
        var popEl = this.getDom();
        // closeAllPopupNew(popEl);
        this._doAutoRender();
        var vpRect = uiUtils.getViewportRect();
        popEl.style.visibility = 'hidden';
        this._show();
        var popSize = this.fitSize();
        var parentSize = domUtils.getWindow(this.editor.document).frameElement.getBoundingClientRect();;
        // for(var i = 0; i<allPopups.length; i++) {
        //   if (allPopups[i].id == popEl.id && i % 2 == 0) {
        //     this.canSideUp = true;
        //     break;
        //   }else{
        //     this.canSideUp = false;
        //   }
        // }
        // if (prevPopupId != popEl.id) {
        //   prevPopupId = popEl.id;
        //   this.canSideUp = !this.canSideUp;
        // }
        var sideLeft, sideUp, left, top;
        var scaleValue = this.editor.document.getElementById("paperScaleHidden") && this.editor.document.getElementById("paperScaleHidden").value;
        if(rect.isScale) scaleValue = 1;
        if (hoz) {
          rect.left = (rect.left - parentSize.left) + parentSize.left;
          rect.right = (rect.right - parentSize.left) + parentSize.left;
          rect.top = (rect.top - parentSize.top) + parentSize.top;
          rect.bottom = (rect.bottom - parentSize.top) + parentSize.top;
          sideLeft = this.canSideLeft && (rect.right + popSize.width > vpRect.right && rect.left > popSize.width);
          sideUp = this.canSideUp && (rect.top + popSize.height > vpRect.bottom && rect.bottom > popSize.height);
          left = sideLeft ? rect.left - popSize.width : rect.right;
          top = sideUp ? rect.bottom - popSize.height : rect.top;
        } else {
          rect.left = (rect.left - parentSize.left) * (scaleValue || 1) + parentSize.left;
          rect.right = (rect.right - parentSize.left) * (scaleValue || 1) + parentSize.left;
          rect.top = (rect.top - parentSize.top) * (scaleValue || 1) + parentSize.top;
          rect.bottom = (rect.bottom - parentSize.top) * (scaleValue || 1) + parentSize.top;
          sideLeft = this.canSideLeft && (rect.right + popSize.width > vpRect.right && rect.left > popSize.width);
          sideUp = this.canSideUp && (rect.top + popSize.height > vpRect.bottom && rect.bottom > popSize.height);
          left = sideLeft ? rect.right - popSize.width : rect.left;
          top = sideUp ? rect.top - popSize.height : rect.bottom;
          // top = this.canSideUp ? rect.top - popSize.height : rect.bottom; 操作框上下位置
        }
        uiUtils.setViewportOffset(popEl, {
          left: left,
          top: top
        });
        domUtils.removeClasses(popEl, ANCHOR_CLASSES);
        popEl.className += ' ' + ANCHOR_CLASSES[(sideUp ? 1 : 0) * 2 + (sideLeft ? 1 : 0)];
        if (this.editor) {
          popEl.style.zIndex = this.editor.container.style.zIndex * 1 + 10;
          baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex = popEl.style.zIndex - 1;
        }
        this.getDom().style.visibility = 'visible';

      },
      showAt: function (offset) {
        var left = offset.left;
        var top = offset.top;
        var rect = {
          left: left,
          top: top,
          right: left,
          bottom: top,
          height: 0,
          width: 0,
          isScale: offset.isScale
        };
        this.showAnchorRect(rect, false, true);
      },
      _show: function () {
        if (this._hidden) {
          var box = this.getDom();
          box.style.display = '';
          this._hidden = false;
          //                if (box.setActive) {
          //                    box.setActive();
          //                }
          this.fireEvent('show');
        }
      },
      isHidden: function () {
        return this._hidden;
      },
      show: function () {
        this._doAutoRender();
        this._show();
      },
      hide: function (notNofity) {
        if (!this._hidden && this.getDom()) {
          this.getDom().style.display = 'none';
          this._hidden = true;
          if (!notNofity) {
            this.fireEvent('hide');
          }
        }
      },
      queryAutoHide: function (el) {
        return !el || !uiUtils.contains(this.getDom(), el);
      }
    };
    utils.inherits(Popup, UIBase);

    domUtils.on(document, 'mousedown', function (evt) {
      var el = evt.target || evt.srcElement;
      closeAllPopup(evt, el);
    });
    domUtils.on(window, 'scroll', function (evt, el) {
      closeAllPopup(evt, el);
    });

  })();


  // ui/colorpicker.js
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase,
      ColorPicker = baidu.editor.ui.ColorPicker = function (options) {
        this.initOptions(options);
        this.noColorText = this.noColorText || this.editor.getLang("clearColor");
        this.initUIBase();
      };

    ColorPicker.prototype = {
      getHtmlTpl: function () {
        return genColorPicker(this.noColorText, this.editor);
      },
      _onTableClick: function (evt) {
        var tgt = evt.target || evt.srcElement;
        var color = tgt.getAttribute('data-color');
        if (color) {
          this.fireEvent('pickcolor', color);
        }
      },
      _onTableOver: function (evt) {
        var tgt = evt.target || evt.srcElement;
        var color = tgt.getAttribute('data-color');
        if (color) {
          this.getDom('preview').style.backgroundColor = color;
        }
      },
      _onTableOut: function () {
        this.getDom('preview').style.backgroundColor = '';
      },
      _onPickNoColor: function () {
        this.fireEvent('picknocolor');
      }
    };
    utils.inherits(ColorPicker, UIBase);

    var COLORS = (
      'ffffff,000000,eeece1,1f497d,4f81bd,c0504d,9bbb59,8064a2,4bacc6,f79646,' +
      'f2f2f2,7f7f7f,ddd9c3,c6d9f0,dbe5f1,f2dcdb,ebf1dd,e5e0ec,dbeef3,fdeada,' +
      'd8d8d8,595959,c4bd97,8db3e2,b8cce4,e5b9b7,d7e3bc,ccc1d9,b7dde8,fbd5b5,' +
      'bfbfbf,3f3f3f,938953,548dd4,95b3d7,d99694,c3d69b,b2a2c7,92cddc,fac08f,' +
      'a5a5a5,262626,494429,17365d,366092,953734,76923c,5f497a,31859b,e36c09,' +
      '7f7f7f,0c0c0c,1d1b10,0f243e,244061,632423,4f6128,3f3151,205867,974806,' +
      'c00000,ff0000,ffc000,ffff00,92d050,00b050,00b0f0,0070c0,002060,7030a0,').split(',');

    function genColorPicker(noColorText, editor) {
      var html = '<div id="##" class="edui-colorpicker %%">' +
        '<div class="edui-colorpicker-topbar edui-clearfix">' +
        '<div unselectable="on" id="##_preview" class="edui-colorpicker-preview"></div>' +
        '<div unselectable="on" class="edui-colorpicker-nocolor" onclick="$$._onPickNoColor(event, this);">' + noColorText + '</div>' +
        '</div>' +
        '<table  class="edui-box" style="border-collapse: collapse;" onmouseover="$$._onTableOver(event, this);" onmouseout="$$._onTableOut(event, this);" onclick="return $$._onTableClick(event, this);" cellspacing="0" cellpadding="0">' +
        '<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#39C;padding-top: 2px"><td colspan="10">' + editor.getLang("themeColor") + '</td> </tr>' +
        '<tr class="edui-colorpicker-tablefirstrow" >';
      for (var i = 0; i < COLORS.length; i++) {
        if (i && i % 10 === 0) {
          html += '</tr>' + (i == 60 ? '<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#39C;"><td colspan="10">' + editor.getLang("standardColor") + '</td></tr>' : '') + '<tr' + (i == 60 ? ' class="edui-colorpicker-tablefirstrow"' : '') + '>';
        }
        html += i < 70 ? '<td style="padding: 0 2px;"><a hidefocus title="' + COLORS[i] + '" onclick="return false;" href="javascript:" unselectable="on" class="edui-box edui-colorpicker-colorcell"' +
          ' data-color="#' + COLORS[i] + '"' +
          ' style="background-color:#' + COLORS[i] + ';border:solid #ccc;' +
          (i < 10 || i >= 60 ? 'border-width:1px;' :
            i >= 10 && i < 20 ? 'border-width:1px 1px 0 1px;' :

              'border-width:0 1px 0 1px;') +
          '"' +
          '></a></td>' : '';
      }
      html += '</tr></table></div>';
      return html;
    }
  })();


  // ui/tablepicker.js
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      UIBase = baidu.editor.ui.UIBase;

    var TablePicker = baidu.editor.ui.TablePicker = function (options) {
      this.initOptions(options);
      this.initTablePicker();
    };
    TablePicker.prototype = {
      defaultNumRows: 10,
      defaultNumCols: 10,
      maxNumRows: 20,
      maxNumCols: 20,
      numRows: 10,
      numCols: 10,
      lengthOfCellSide: 22,
      initTablePicker: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        var me = this;
        return '<div id="##" class="edui-tablepicker %%">' +
          '<div class="edui-tablepicker-body">' +
          '<div class="edui-infoarea">' +
          '<span id="##_label" class="edui-label"></span>' +
          '</div>' +
          '<div class="edui-pickarea"' +
          ' onmousemove="$$._onMouseMove(event, this);"' +
          ' onmouseover="$$._onMouseOver(event, this);"' +
          ' onmouseout="$$._onMouseOut(event, this);"' +
          ' onclick="$$._onClick(event, this);"' +
          '>' +
          '<div id="##_overlay" class="edui-overlay"></div>' +
          '</div>' +
          '</div>' +
          '</div>';
      },
      _UIBase_render: UIBase.prototype.render,
      render: function (holder) {
        this._UIBase_render(holder);
        this.getDom('label').innerHTML = '0' + this.editor.getLang("t_row") + ' x 0' + this.editor.getLang("t_col");
      },
      _track: function (numCols, numRows) {
        var style = this.getDom('overlay').style;
        var sideLen = this.lengthOfCellSide;
        style.width = numCols * sideLen + 'px';
        style.height = numRows * sideLen + 'px';
        var label = this.getDom('label');
        label.innerHTML = numCols + this.editor.getLang("t_col") + ' x ' + numRows + this.editor.getLang("t_row");
        this.numCols = numCols;
        this.numRows = numRows;
      },
      _onMouseOver: function (evt, el) {
        var rel = evt.relatedTarget || evt.fromElement;
        if (!uiUtils.contains(el, rel) && el !== rel) {
          this.getDom('label').innerHTML = '0' + this.editor.getLang("t_col") + ' x 0' + this.editor.getLang("t_row");
          this.getDom('overlay').style.visibility = '';
        }
      },
      _onMouseOut: function (evt, el) {
        var rel = evt.relatedTarget || evt.toElement;
        if (!uiUtils.contains(el, rel) && el !== rel) {
          this.getDom('label').innerHTML = '0' + this.editor.getLang("t_col") + ' x 0' + this.editor.getLang("t_row");
          this.getDom('overlay').style.visibility = 'hidden';
        }
      },
      _onMouseMove: function (evt, el) {
        var style = this.getDom('overlay').style;
        var offset = uiUtils.getEventOffset(evt);
        var sideLen = this.lengthOfCellSide;
        var numCols = Math.ceil(offset.left / sideLen);
        var numRows = Math.ceil(offset.top / sideLen);
        this._track(numCols, numRows);
      },
      _onClick: function () {
        this.fireEvent('picktable', this.numCols, this.numRows);
      }
    };
    utils.inherits(TablePicker, UIBase);
  })();


  // ui/stateful.js
  (function () {
    var browser = baidu.editor.browser,
      domUtils = baidu.editor.dom.domUtils,
      uiUtils = baidu.editor.ui.uiUtils;

    var TPL_STATEFUL = 'onmousedown="$$.Stateful_onMouseDown(event, this);"' +
      ' onmouseup="$$.Stateful_onMouseUp(event, this);"' +
      (browser.ie ?
        ' onmouseenter="$$.Stateful_onMouseEnter(event, this);"' +
        ' onmouseleave="$$.Stateful_onMouseLeave(event, this);"'
        :
        ' onmouseover="$$.Stateful_onMouseOver(event, this);"' +
        ' onmouseout="$$.Stateful_onMouseOut(event, this);"');

    baidu.editor.ui.Stateful = {
      alwalysHoverable: false,
      target: null,//目标元素和this指向dom不一样
      Stateful_init: function () {
        this._Stateful_dGetHtmlTpl = this.getHtmlTpl;
        this.getHtmlTpl = this.Stateful_getHtmlTpl;
      },
      Stateful_getHtmlTpl: function () {
        var tpl = this._Stateful_dGetHtmlTpl();
        // 使用function避免$转义
        return tpl.replace(/stateful/g, function () {
          return TPL_STATEFUL;
        });
      },
      Stateful_onMouseEnter: function (evt, el) {
        this.target = el;
        if (!this.isDisabled() || this.alwalysHoverable) {
          this.addState('hover');
          this.fireEvent('over');
        }
      },
      Stateful_onMouseLeave: function (evt, el) {
        if (!this.isDisabled() || this.alwalysHoverable) {
          this.removeState('hover');
          this.removeState('active');
          this.fireEvent('out');
        }
      },
      Stateful_onMouseOver: function (evt, el) {
        var rel = evt.relatedTarget;
        if (!uiUtils.contains(el, rel) && el !== rel) {
          this.Stateful_onMouseEnter(evt, el);
        }
      },
      Stateful_onMouseOut: function (evt, el) {
        var rel = evt.relatedTarget;
        if (!uiUtils.contains(el, rel) && el !== rel) {
          this.Stateful_onMouseLeave(evt, el);
        }
      },
      Stateful_onMouseDown: function (evt, el) {
        if (!this.isDisabled()) {
          this.addState('active');
        }
      },
      Stateful_onMouseUp: function (evt, el) {
        if (!this.isDisabled()) {
          this.removeState('active');
        }
      },
      Stateful_postRender: function () {
        if (this.disabled && !this.hasState('disabled')) {
          this.addState('disabled');
        }
      },
      hasState: function (state) {
        return domUtils.hasClass(this.getStateDom(), 'edui-state-' + state);
      },
      addState: function (state) {
        if (!this.hasState(state)) {
          this.getStateDom().className += ' edui-state-' + state;
        }
      },
      removeState: function (state) {
        if (this.hasState(state)) {
          domUtils.removeClasses(this.getStateDom(), ['edui-state-' + state]);
        }
      },
      getStateDom: function () {
        return this.getDom('state');
      },
      isChecked: function () {
        return this.hasState('checked');
      },
      setChecked: function (checked) {
        if (!this.isDisabled() && checked) {
          this.addState('checked');
        } else {
          this.removeState('checked');
        }
      },
      isDisabled: function () {
        return this.hasState('disabled');
      },
      setDisabled: function (disabled) {
        if (disabled) {
          this.removeState('hover');
          this.removeState('checked');
          this.removeState('active');
          this.addState('disabled');
        } else {
          this.removeState('disabled');
        }
      }
    };
  })();


  // ui/button.js
  ///import core
  ///import uicore
  ///import ui/stateful.js
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase,
      Stateful = baidu.editor.ui.Stateful,
      Button = baidu.editor.ui.Button = function (options) {
        if (options.name) {
          var btnName = options.name;
          var cssRules = options.cssRules;
          if (!options.className) {
            options.className = 'edui-for-' + btnName;
          }
          options.cssRules = '.edui-default  .edui-for-' + btnName + ' .edui-icon {' + cssRules + '}'
        }
        this.initOptions(options);
        this.initButton();
      };
    Button.prototype = {
      uiName: 'button',
      label: '',
      title: '',
      showIcon: true,
      showText: true,
      cssRules: '',
      initButton: function () {
        this.initUIBase();
        this.Stateful_init();
        if (this.cssRules) {
          utils.cssRule('edui-customize-' + this.name + '-style', this.cssRules);
        }
      },
      getHtmlTpl: function () {
        return (this.groupStart ? '<div class="menu-group' + (this.isSplit ? ' split-block' : '') + '">' : '') + '<div id="##" class="edui-box %%">' +
          '<div id="##_state" stateful>' +
          '<div class="%%-wrap' + (this.hasBorder ? ' menu-border' : '') + '"><div id="##_body" unselectable="on" ' +
          ' class="%%-body" ' + (this.title && this.iconOnly ? 'onmouseover="$$.createTitle(\'' + this.title + '\',this)"' : "") + ' onmousedown="return $$._onMouseDown(event, this);" onclick="return $$._onClick(event, this);">' +
          (this.showIcon ? '<div class="edui-box edui-icon"></div>' : '') +
          (this.showText && !this.iconOnly ? '<div class="edui-box edui-label">' + this.label + '</div>' : '') +
          '</div>' +
          '</div>' +
          '</div></div>' + (this.groupEnd ? '</div>' : '');
      },
      postRender: function () {
        this.Stateful_postRender();
        this.setDisabled(this.disabled)
      },
      createTitle: function (array, obj) {
        var targetObj = obj;
        if (array == '' || obj == null) {
          return null;
        }
        var offsetTop = obj.offsetTop;
        var offsetLeft = obj.offsetLeft;
        var offsetWidth = obj.offsetWidth;
        var offsetHeight = obj.offsetHeight;
        while (obj = obj.offsetParent) {
          offsetTop += obj.offsetTop;
          offsetLeft += obj.offsetLeft;
        }
        var pos = { absoluteTop: offsetTop, absoluteLeft: offsetLeft, offsetWidth: offsetWidth, offsetHeight: offsetHeight };

        var temp = document.getElementById('hover_tip_toolTip');
        if (!temp) {
          temp = document.createElement('div');
          temp.setAttribute('id', 'hover_tip_toolTip');
          temp.setAttribute('style', 'font-size: 12px;z-index: 9999;border: 1px solid #ccc;background:#fff;padding:3px;position:absolute;');
          document.body.appendChild(temp);
        }
        temp.style.left = pos.absoluteLeft + pos.offsetWidth + 'px';
        temp.style.top = pos.absoluteTop + 16 + 'px';
        temp.innerHTML = array;
        temp.style.display = 'block';
        targetObj.onmouseout = function () {
          document.getElementById('hover_tip_toolTip').style.display = 'none';
        }
      },
      _onMouseDown: function (e) {
        var target = e.target || e.srcElement,
          tagName = target && target.tagName && target.tagName.toLowerCase();
        if (tagName == 'input' || tagName == 'object' || tagName == 'object') {
          return false;
        }
      },
      _onClick: function () {
        if (!this.isDisabled()) {
          this.fireEvent('click');
        }
      },
      setTitle: function (text) {
        var label = this.getDom('label');
        label.innerHTML = text;
      }
    };
    utils.inherits(Button, UIBase);
    utils.extend(Button.prototype, Stateful);

  })();


  // ui/splitbutton.js
  ///import core
  ///import uicore
  ///import ui/stateful.js
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      domUtils = baidu.editor.dom.domUtils,
      UIBase = baidu.editor.ui.UIBase,
      Stateful = baidu.editor.ui.Stateful,
      SplitButton = baidu.editor.ui.SplitButton = function (options) {
        this.initOptions(options);
        this.initSplitButton();
      };
    SplitButton.prototype = {
      popup: null,
      uiName: 'splitbutton',
      title: '',
      label: '',
      showText: false,
      initSplitButton: function () {
        this.initUIBase();
        this.Stateful_init();
        var me = this;
        if (this.popup != null) {
          var popup = this.popup;
          this.popup = null;
          this.setPopup(popup);
        }
      },
      _UIBase_postRender: UIBase.prototype.postRender,
      postRender: function () {
        this.Stateful_postRender();
        this._UIBase_postRender();
      },
      setPopup: function (popup) {
        if (this.popup === popup) {
          return;
        }
        if (this.popup != null) {
          this.popup.dispose();
        }
        popup.addListener('show', utils.bind(this._onPopupShow, this));
        popup.addListener('hide', utils.bind(this._onPopupHide, this));
        popup.addListener('postrender', utils.bind(function () {
          popup.getDom('body').appendChild(
            uiUtils.createElementByHtml('<div id="' +
              this.popup.id + '_bordereraser" class="edui-bordereraser edui-background" style="width:' +
              (uiUtils.getClientRect(this.getDom()).width + 20) + 'px"></div>')
          );
          popup.getDom().className += ' ' + this.className;
        }, this));
        this.popup = popup;
      },
      _onPopupShow: function () {
        this.addState('opened');
      },
      _onPopupHide: function () {
        this.removeState('opened');
      },
      getHtmlTpl: function () {
        return (this.groupStart ? '<div class="menu-group' + (this.isSplit ? ' split-block' : '') + '">' : '') + '<div id="##" class="edui-box %%">' +
          '<div ' + (this.title ? 'title="' + this.title + '"' : '') + ' id="##_state" stateful><div class="%%-body">' +
          '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick(event, this);">' +
          '<div class="edui-box edui-icon"></div>' +
          ((this.showText && !this.iconOnly) ? '<div class="edui-box edui-label">' + this.label + '</div>' : '') +
          '</div>' +
          '<div class="edui-box edui-splitborder"></div>' +
          '<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
          '</div></div></div>' + (this.groupEnd ? '</div>' : '');
      },
      showPopup: function () {
        // 当popup往上弹出的时候，做特殊处理
        var rect = uiUtils.getClientRect(this.getDom());
        rect.top -= this.popup.SHADOW_RADIUS;
        rect.height += this.popup.SHADOW_RADIUS;
        this.popup.showAnchorRect(rect);
      },
      _onArrowClick: function (event, el) {
        if (!this.isDisabled()) {
          this.showPopup();
        }
      },
      _onButtonClick: function () {
        if (!this.isDisabled()) {
          this.fireEvent('buttonclick');
        }
      }
    };
    utils.inherits(SplitButton, UIBase);
    utils.extend(SplitButton.prototype, Stateful, true);

  })();


  // ui/colorbutton.js
  ///import core
  ///import uicore
  ///import ui/colorpicker.js
  ///import ui/popup.js
  ///import ui/splitbutton.js
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      ColorPicker = baidu.editor.ui.ColorPicker,
      Popup = baidu.editor.ui.Popup,
      SplitButton = baidu.editor.ui.SplitButton,
      ColorButton = baidu.editor.ui.ColorButton = function (options) {
        this.initOptions(options);
        this.initColorButton();
      };
    ColorButton.prototype = {
      initColorButton: function () {
        var me = this;
        this.popup = new Popup({
          content: new ColorPicker({
            noColorText: me.editor.getLang("clearColor"),
            editor: me.editor,
            onpickcolor: function (t, color) {
              me._onPickColor(color);
            },
            onpicknocolor: function (t, color) {
              me._onPickNoColor(color);
            }
          }),
          editor: me.editor
        });
        this.initSplitButton();
      },
      _SplitButton_postRender: SplitButton.prototype.postRender,
      postRender: function () {
        this._SplitButton_postRender();
        this.getDom('button_body').appendChild(
          uiUtils.createElementByHtml('<div id="' + this.id + '_colorlump" class="edui-colorlump"></div>')
        );
        this.getDom().className += ' edui-colorbutton';
      },
      setColor: function (color) {
        this.getDom('colorlump').style.backgroundColor = color;
        this.color = color;
      },
      _onPickColor: function (color) {
        if (this.fireEvent('pickcolor', color) !== false) {
          this.setColor(color);
          this.popup.hide();
        }
      },
      _onPickNoColor: function (color) {
        if (this.fireEvent('picknocolor') !== false) {
          this.popup.hide();
        }
      }
    };
    utils.inherits(ColorButton, SplitButton);

  })();


  // ui/tablebutton.js
  ///import core
  ///import uicore
  ///import ui/popup.js
  ///import ui/tablepicker.js
  ///import ui/splitbutton.js
  (function () {
    var utils = baidu.editor.utils,
      Popup = baidu.editor.ui.Popup,
      TablePicker = baidu.editor.ui.TablePicker,
      SplitButton = baidu.editor.ui.SplitButton,
      TableButton = baidu.editor.ui.TableButton = function (options) {
        this.initOptions(options);
        this.initTableButton();
      };
    TableButton.prototype = {
      initTableButton: function () {
        var me = this;
        this.popup = new Popup({
          content: new TablePicker({
            editor: me.editor,
            onpicktable: function (t, numCols, numRows) {
              me._onPickTable(numCols, numRows);
            }
          }),
          'editor': me.editor
        });
        this.initSplitButton();
      },
      _onPickTable: function (numCols, numRows) {
        if (this.fireEvent('picktable', numCols, numRows) !== false) {
          this.popup.hide();
        }
      }
    };
    utils.inherits(TableButton, SplitButton);

  })();


  // ui/autotypesetpicker.js
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase;

    var AutoTypeSetPicker = baidu.editor.ui.AutoTypeSetPicker = function (options) {
      this.initOptions(options);
      this.initAutoTypeSetPicker();
    };
    AutoTypeSetPicker.prototype = {
      initAutoTypeSetPicker: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        var me = this.editor,
          opt = me.options.autotypeset,
          lang = me.getLang("autoTypeSet");

        var textAlignInputName = 'textAlignValue' + me.uid,
          imageBlockInputName = 'imageBlockLineValue' + me.uid,
          symbolConverInputName = 'symbolConverValue' + me.uid;

        return '<div id="##" class="edui-autotypesetpicker %%">' +
          '<div class="edui-autotypesetpicker-body">' +
          '<table >' +
          '<tr><td nowrap><input type="checkbox" name="mergeEmptyline" ' + (opt["mergeEmptyline"] ? "checked" : "") + '>' + lang.mergeLine + '</td><td colspan="2"><input type="checkbox" name="removeEmptyline" ' + (opt["removeEmptyline"] ? "checked" : "") + '>' + lang.delLine + '</td></tr>' +
          '<tr><td nowrap><input type="checkbox" name="removeClass" ' + (opt["removeClass"] ? "checked" : "") + '>' + lang.removeFormat + '</td><td colspan="2"><input type="checkbox" name="indent" ' + (opt["indent"] ? "checked" : "") + '>' + lang.indent + '</td></tr>' +
          '<tr>' +
          '<td nowrap><input type="checkbox" name="textAlign" ' + (opt["textAlign"] ? "checked" : "") + '>' + lang.alignment + '</td>' +
          '<td colspan="2" id="' + textAlignInputName + '">' +
          '<input type="radio" name="' + textAlignInputName + '" value="left" ' + (opt["textAlign"] && opt["textAlign"] == "left" ? "checked" : "") + '>' + me.getLang("justifyleft") +
          '<input type="radio" name="' + textAlignInputName + '" value="center" ' + (opt["textAlign"] && opt["textAlign"] == "center" ? "checked" : "") + '>' + me.getLang("justifycenter") +
          '<input type="radio" name="' + textAlignInputName + '" value="right" ' + (opt["textAlign"] && opt["textAlign"] == "right" ? "checked" : "") + '>' + me.getLang("justifyright") +
          '</td>' +
          '</tr>' +
          '<tr>' +
          '<td nowrap><input type="checkbox" name="imageBlockLine" ' + (opt["imageBlockLine"] ? "checked" : "") + '>' + lang.imageFloat + '</td>' +
          '<td nowrap id="' + imageBlockInputName + '">' +
          '<input type="radio" name="' + imageBlockInputName + '" value="none" ' + (opt["imageBlockLine"] && opt["imageBlockLine"] == "none" ? "checked" : "") + '>' + me.getLang("default") +
          '<input type="radio" name="' + imageBlockInputName + '" value="left" ' + (opt["imageBlockLine"] && opt["imageBlockLine"] == "left" ? "checked" : "") + '>' + me.getLang("justifyleft") +
          '<input type="radio" name="' + imageBlockInputName + '" value="center" ' + (opt["imageBlockLine"] && opt["imageBlockLine"] == "center" ? "checked" : "") + '>' + me.getLang("justifycenter") +
          '<input type="radio" name="' + imageBlockInputName + '" value="right" ' + (opt["imageBlockLine"] && opt["imageBlockLine"] == "right" ? "checked" : "") + '>' + me.getLang("justifyright") +
          '</td>' +
          '</tr>' +
          '<tr><td nowrap><input type="checkbox" name="clearFontSize" ' + (opt["clearFontSize"] ? "checked" : "") + '>' + lang.removeFontsize + '</td><td colspan="2"><input type="checkbox" name="clearFontFamily" ' + (opt["clearFontFamily"] ? "checked" : "") + '>' + lang.removeFontFamily + '</td></tr>' +
          '<tr><td nowrap colspan="3"><input type="checkbox" name="removeEmptyNode" ' + (opt["removeEmptyNode"] ? "checked" : "") + '>' + lang.removeHtml + '</td></tr>' +
          '<tr><td nowrap colspan="3"><input type="checkbox" name="pasteFilter" ' + (opt["pasteFilter"] ? "checked" : "") + '>' + lang.pasteFilter + '</td></tr>' +
          '<tr>' +
          '<td nowrap><input type="checkbox" name="symbolConver" ' + (opt["bdc2sb"] || opt["tobdc"] ? "checked" : "") + '>' + lang.symbol + '</td>' +
          '<td id="' + symbolConverInputName + '">' +
          '<input type="radio" name="bdc" value="bdc2sb" ' + (opt["bdc2sb"] ? "checked" : "") + '>' + lang.bdc2sb +
          '<input type="radio" name="bdc" value="tobdc" ' + (opt["tobdc"] ? "checked" : "") + '>' + lang.tobdc + '' +
          '</td>' +
          '<td nowrap align="right"><button >' + lang.run + '</button></td>' +
          '</tr>' +
          '</table>' +
          '</div>' +
          '</div>';


      },
      _UIBase_render: UIBase.prototype.render
    };
    utils.inherits(AutoTypeSetPicker, UIBase);
  })();


  // ui/autotypesetbutton.js
  ///import core
  ///import uicore
  ///import ui/popup.js
  ///import ui/autotypesetpicker.js
  ///import ui/splitbutton.js
  (function () {
    var utils = baidu.editor.utils,
      Popup = baidu.editor.ui.Popup,
      AutoTypeSetPicker = baidu.editor.ui.AutoTypeSetPicker,
      SplitButton = baidu.editor.ui.SplitButton,
      AutoTypeSetButton = baidu.editor.ui.AutoTypeSetButton = function (options) {
        this.initOptions(options);
        this.initAutoTypeSetButton();
      };

    function getPara(me) {

      var opt = {},
        cont = me.getDom(),
        editorId = me.editor.uid,
        inputType = null,
        attrName = null,
        ipts = domUtils.getElementsByTagName(cont, "input");
      for (var i = ipts.length - 1, ipt; ipt = ipts[i--];) {
        inputType = ipt.getAttribute("type");
        if (inputType == "checkbox") {
          attrName = ipt.getAttribute("name");
          opt[attrName] && delete opt[attrName];
          if (ipt.checked) {
            var attrValue = document.getElementById(attrName + "Value" + editorId);
            if (attrValue) {
              if (/input/ig.test(attrValue.tagName)) {
                opt[attrName] = attrValue.value;
              } else {
                var iptChilds = attrValue.getElementsByTagName("input");
                for (var j = iptChilds.length - 1, iptchild; iptchild = iptChilds[j--];) {
                  if (iptchild.checked) {
                    opt[attrName] = iptchild.value;
                    break;
                  }
                }
              }
            } else {
              opt[attrName] = true;
            }
          } else {
            opt[attrName] = false;
          }
        } else {
          opt[ipt.getAttribute("value")] = ipt.checked;
        }

      }

      var selects = domUtils.getElementsByTagName(cont, "select");
      for (var i = 0, si; si = selects[i++];) {
        var attr = si.getAttribute('name');
        opt[attr] = opt[attr] ? si.value : '';
      }

      utils.extend(me.editor.options.autotypeset, opt);

      me.editor.setPreferences('autotypeset', opt);
    }

    AutoTypeSetButton.prototype = {
      initAutoTypeSetButton: function () {

        var me = this;
        this.popup = new Popup({
          //传入配置参数
          content: new AutoTypeSetPicker({ editor: me.editor }),
          'editor': me.editor,
          hide: function () {
            if (!this._hidden && this.getDom()) {
              getPara(this);
              this.getDom().style.display = 'none';
              this._hidden = true;
              this.fireEvent('hide');
            }
          }
        });
        var flag = 0;
        this.popup.addListener('postRenderAfter', function () {
          var popupUI = this;
          if (flag) {
            return;
          }
          var cont = this.getDom(),
            btn = cont.getElementsByTagName('button')[0];

          btn.onclick = function () {
            getPara(popupUI);
            me.editor.execCommand('autotypeset');
            popupUI.hide()
          };

          domUtils.on(cont, 'click', function (e) {
            var target = e.target || e.srcElement,
              editorId = me.editor.uid;
            if (target && target.tagName == 'INPUT') {

              // 点击图片浮动的checkbox,去除对应的radio
              if (target.name == 'imageBlockLine' || target.name == 'textAlign' || target.name == 'symbolConver') {
                var checked = target.checked,
                  radioTd = document.getElementById(target.name + 'Value' + editorId),
                  radios = radioTd.getElementsByTagName('input'),
                  defalutSelect = {
                    'imageBlockLine': 'none',
                    'textAlign': 'left',
                    'symbolConver': 'tobdc'
                  };

                for (var i = 0; i < radios.length; i++) {
                  if (checked) {
                    if (radios[i].value == defalutSelect[target.name]) {
                      radios[i].checked = 'checked';
                    }
                  } else {
                    radios[i].checked = false;
                  }
                }
              }
              // 点击radio,选中对应的checkbox
              if (target.name == 'imageBlockLineValue' + editorId || target.name == 'textAlignValue' + editorId || target.name == 'bdc') {
                var checkboxs = target.parentNode.previousSibling.getElementsByTagName('input');
                checkboxs && (checkboxs[0].checked = true);
              }

              getPara(popupUI);
            }
          });

          flag = 1;
        });
        this.initSplitButton();
      }
    };
    utils.inherits(AutoTypeSetButton, SplitButton);

  })();


  // ui/cellalignpicker.js
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      Popup = baidu.editor.ui.Popup,
      Stateful = baidu.editor.ui.Stateful,
      UIBase = baidu.editor.ui.UIBase;

    /**
     * 该参数将新增一个参数： selected， 参数类型为一个Object， 形如{ 'align': 'center', 'valign': 'top' }， 表示单元格的初始
     * 对齐状态为： 竖直居上，水平居中; 其中 align的取值为：'center', 'left', 'right'; valign的取值为: 'top', 'middle', 'bottom'
     * @update 2013/4/2 hancong03@baidu.com
     */
    var CellAlignPicker = baidu.editor.ui.CellAlignPicker = function (options) {
      this.initOptions(options);
      this.initSelected();
      this.initCellAlignPicker();
    };
    CellAlignPicker.prototype = {
      //初始化选中状态， 该方法将根据传递进来的参数获取到应该选中的对齐方式图标的索引
      initSelected: function () {

        var status = {

          valign: {
            top: 0,
            middle: 1,
            bottom: 2
          },
          align: {
            left: 0,
            center: 1,
            right: 2
          },
          count: 3

        },
          result = -1;

        if (this.selected) {
          this.selectedIndex = status.valign[this.selected.valign] * status.count + status.align[this.selected.align];
        }

      },
      initCellAlignPicker: function () {
        this.initUIBase();
        this.Stateful_init();
      },
      getHtmlTpl: function () {

        var alignType = ['left', 'center', 'right'],
          COUNT = 9,
          tempClassName = null,
          tempIndex = -1,
          tmpl = [];


        for (var i = 0; i < COUNT; i++) {

          tempClassName = this.selectedIndex === i ? ' class="edui-cellalign-selected" ' : '';
          tempIndex = i % 3;

          tempIndex === 0 && tmpl.push('<tr>');

          tmpl.push('<td index="' + i + '" ' + tempClassName + ' stateful><div class="edui-icon edui-' + alignType[tempIndex] + '"></div></td>');

          tempIndex === 2 && tmpl.push('</tr>');

        }

        return '<div id="##" class="edui-cellalignpicker %%">' +
          '<div class="edui-cellalignpicker-body">' +
          '<table onclick="$$._onClick(event);">' +
          tmpl.join('') +
          '</table>' +
          '</div>' +
          '</div>';
      },
      getStateDom: function () {
        return this.target;
      },
      _onClick: function (evt) {
        var target = evt.target || evt.srcElement;
        if (/icon/.test(target.className)) {
          this.items[target.parentNode.getAttribute("index")].onclick();
          Popup.postHide(evt);
        }
      },
      _UIBase_render: UIBase.prototype.render
    };
    utils.inherits(CellAlignPicker, UIBase);
    utils.extend(CellAlignPicker.prototype, Stateful, true);
  })();


  // ui/pastepicker.js
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      Stateful = baidu.editor.ui.Stateful,
      uiUtils = baidu.editor.ui.uiUtils,
      UIBase = baidu.editor.ui.UIBase;

    var PastePicker = baidu.editor.ui.PastePicker = function (options) {
      this.initOptions(options);
      this.initPastePicker();
    };
    PastePicker.prototype = {
      initPastePicker: function () {
        this.initUIBase();
        this.Stateful_init();
      },
      getHtmlTpl: function () {
        return '<div class="edui-pasteicon" onclick="$$._onClick(this)"></div>' +
          '<div class="edui-pastecontainer">' +
          '<div class="edui-title">' + this.editor.getLang("pasteOpt") + '</div>' +
          '<div class="edui-button">' +
          '<div title="' + this.editor.getLang("pasteSourceFormat") + '" onclick="$$.format(false)" stateful>' +
          '<div class="edui-richtxticon"></div></div>' +
          '<div title="' + this.editor.getLang("tagFormat") + '" onclick="$$.format(2)" stateful>' +
          '<div class="edui-tagicon"></div></div>' +
          '<div title="' + this.editor.getLang("pasteTextFormat") + '" onclick="$$.format(true)" stateful>' +
          '<div class="edui-plaintxticon"></div></div>' +
          '</div>' +
          '</div>' +
          '</div>'
      },
      getStateDom: function () {
        return this.target;
      },
      format: function (param) {
        this.editor.ui._isTransfer = true;
        this.editor.fireEvent('pasteTransfer', param);
      },
      _onClick: function (cur) {
        var node = domUtils.getNextDomNode(cur),
          screenHt = uiUtils.getViewportRect().height,
          subPop = uiUtils.getClientRect(node);

        if (subPop.top + subPop.height > screenHt) {
          node.style.top = -subPop.height - cur.offsetHeight + "px";
        } else {
          node.style.top = "";
        }

        if (/hidden/ig.test(domUtils.getComputedStyle(node, "visibility"))) {
          node.style.visibility = "visible";
          domUtils.addClass(cur, "edui-state-opened");
        } else {
          node.style.visibility = "hidden";
          domUtils.removeClasses(cur, "edui-state-opened")
        }
      },
      _UIBase_render: UIBase.prototype.render
    };
    utils.inherits(PastePicker, UIBase);
    utils.extend(PastePicker.prototype, Stateful, true);
  })();


  // ui/toolbar.js
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      UIBase = baidu.editor.ui.UIBase,
      Toolbar = baidu.editor.ui.Toolbar = function (options) {
        this.initOptions(options);
        this.initToolbar();
      };
    Toolbar.prototype = {
      items: null,
      initToolbar: function () {
        this.items = this.items || [];
        this.initUIBase();
      },
      add: function (item, index) {
        if (index === undefined) {
          this.items.push(item);
        } else {
          this.items.splice(index, 0, item)
        }

      },
      getHtmlTpl: function () {
        var buff = [];
        for (var i = 0; i < this.items.length; i++) {
          buff[i] = this.items[i].renderHtml();
        }
        return '<div id="##" class="' + (this.items.length > 0 ? this.items[0].tabId : '') + ' edui-toolbar %%" onselectstart="return false;" onmousedown="return $$._onMouseDown(event, this);">' +
          buff.join('') +
          '</div>'
      },
      postRender: function () {
        var box = this.getDom();
        for (var i = 0; i < this.items.length; i++) {
          this.items[i].postRender();
        }
        uiUtils.makeUnselectable(box);
      },
      _onMouseDown: function (e) {
        var target = e.target || e.srcElement,
          tagName = target && target.tagName && target.tagName.toLowerCase();
        if (tagName == 'input' || tagName == 'object' || tagName == 'object') {
          return false;
        }
      }
    };
    utils.inherits(Toolbar, UIBase);

  })();


  // ui/menu.js
  ///import core
  ///import uicore
  ///import ui\popup.js
  ///import ui\stateful.js
  (function () {
    var utils = baidu.editor.utils,
      domUtils = baidu.editor.dom.domUtils,
      uiUtils = baidu.editor.ui.uiUtils,
      UIBase = baidu.editor.ui.UIBase,
      Popup = baidu.editor.ui.Popup,
      Stateful = baidu.editor.ui.Stateful,
      CellAlignPicker = baidu.editor.ui.CellAlignPicker,

      Menu = baidu.editor.ui.Menu = function (options) {
        this.initOptions(options);
        this.initMenu();
      };

    var menuSeparator = {
      renderHtml: function () {
        return '<div class="edui-menuitem edui-menuseparator"><div class="edui-menuseparator-inner"></div></div>';
      },
      postRender: function () {
      },
      queryAutoHide: function () {
        return true;
      }
    };
    Menu.prototype = {
      items: null,
      uiName: 'menu',
      initMenu: function () {
        this.items = this.items || [];
        this.initPopup();
        this.initItems();
      },
      initItems: function () {
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          if (item == '-') {
            this.items[i] = this.getSeparator();
          } else if (!(item instanceof MenuItem)) {
            item.editor = this.editor;
            item.theme = this.editor.options.theme;
            this.items[i] = this.createItem(item);
          }
        }
      },
      getSeparator: function () {
        return menuSeparator;
      },
      createItem: function (item) {
        //新增一个参数menu, 该参数存储了menuItem所对应的menu引用
        item.menu = this;
        return new MenuItem(item);
      },
      _Popup_getContentHtmlTpl: Popup.prototype.getContentHtmlTpl,
      getContentHtmlTpl: function () {
        if (this.items.length == 0) {
          return this._Popup_getContentHtmlTpl();
        }
        var buff = [];
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          buff[i] = item.renderHtml();
        }
        return '<div class="%%-body">' + buff.join('') + '</div>';
      },
      _Popup_postRender: Popup.prototype.postRender,
      postRender: function () {
        var me = this;
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          item.ownerMenu = this;
          item.postRender();
        }
        domUtils.on(this.getDom(), 'mouseover', function (evt) {
          evt = evt || event;
          var rel = evt.relatedTarget || evt.fromElement;
          var el = me.getDom();
          if (!uiUtils.contains(el, rel) && el !== rel) {
            me.fireEvent('over');
          }
        });
        this._Popup_postRender();
      },
      queryAutoHide: function (el) {
        if (el) {
          if (uiUtils.contains(this.getDom(), el)) {
            return false;
          }
          for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            if (item.queryAutoHide(el) === false) {
              return false;
            }
          }
        }
      },
      clearItems: function () {
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          clearTimeout(item._showingTimer);
          clearTimeout(item._closingTimer);
          if (item.subMenu) {
            item.subMenu.destroy();
          }
        }
        this.items = [];
      },
      destroy: function () {
        if (this.getDom()) {
          domUtils.remove(this.getDom());
        }
        this.clearItems();
      },
      dispose: function () {
        this.destroy();
      }
    };
    utils.inherits(Menu, Popup);

    /**
     * @update 2013/04/03 hancong03 新增一个参数menu, 该参数存储了menuItem所对应的menu引用
     * @type {Function}
     */
    var MenuItem = baidu.editor.ui.MenuItem = function (options) {
      this.initOptions(options);
      this.initUIBase();
      this.Stateful_init();
      if (this.subMenu && !(this.subMenu instanceof Menu)) {
        if (options.className && options.className.indexOf("aligntd") != -1) {
          var me = this;

          //获取单元格对齐初始状态
          this.subMenu.selected = this.editor.queryCommandValue('cellalignment');

          this.subMenu = new Popup({
            content: new CellAlignPicker(this.subMenu),
            parentMenu: me,
            editor: me.editor,
            destroy: function () {
              if (this.getDom()) {
                domUtils.remove(this.getDom());
              }
            }
          });
          this.subMenu.addListener("postRenderAfter", function () {
            domUtils.on(this.getDom(), "mouseover", function () {
              me.addState('opened');
            });
          });
        } else {
          this.subMenu = new Menu(this.subMenu);
        }
      }
    };
    MenuItem.prototype = {
      label: '',
      subMenu: null,
      ownerMenu: null,
      uiName: 'menuitem',
      alwalysHoverable: true,
      getHtmlTpl: function () {
        return '<div id="##" class="%%" stateful onclick="$$._onClick(event, this);">' +
          '<div class="%%-body">' +
          this.renderLabelHtml() +
          '</div>' +
          '</div>';
      },
      postRender: function () {
        var me = this;
        this.addListener('over', function () {
          me.ownerMenu.fireEvent('submenuover', me);
          if (me.subMenu) {
            me.delayShowSubMenu();
          }
        });
        if (this.subMenu) {
          this.getDom().className += ' edui-hassubmenu';
          this.subMenu.render();
          this.addListener('out', function () {
            me.delayHideSubMenu();
          });
          this.subMenu.addListener('over', function () {
            clearTimeout(me._closingTimer);
            me._closingTimer = null;
            me.addState('opened');
          });
          this.ownerMenu.addListener('hide', function () {
            me.hideSubMenu();
          });
          this.ownerMenu.addListener('submenuover', function (t, subMenu) {
            if (subMenu !== me) {
              me.delayHideSubMenu();
            }
          });
          this.subMenu._bakQueryAutoHide = this.subMenu.queryAutoHide;
          this.subMenu.queryAutoHide = function (el) {
            if (el && uiUtils.contains(me.getDom(), el)) {
              return false;
            }
            return this._bakQueryAutoHide(el);
          };
        }
        this.getDom().style.tabIndex = '-1';
        uiUtils.makeUnselectable(this.getDom());
        this.Stateful_postRender();
      },
      delayShowSubMenu: function () {
        var me = this;
        if (!me.isDisabled()) {
          me.addState('opened');
          clearTimeout(me._showingTimer);
          clearTimeout(me._closingTimer);
          me._closingTimer = null;
          me._showingTimer = setTimeout(function () {
            me.showSubMenu();
          }, 250);
        }
      },
      delayHideSubMenu: function () {
        var me = this;
        if (!me.isDisabled()) {
          me.removeState('opened');
          clearTimeout(me._showingTimer);
          if (!me._closingTimer) {
            me._closingTimer = setTimeout(function () {
              if (!me.hasState('opened')) {
                me.hideSubMenu();
              }
              me._closingTimer = null;
            }, 400);
          }
        }
      },
      renderLabelHtml: function () {
        return '<div class="edui-arrow"></div>' +
          '<div class="edui-box edui-icon"></div>' +
          '<div class="edui-box edui-label %%-label">' + (this.label || '') + '</div>';
      },
      getStateDom: function () {
        return this.getDom();
      },
      queryAutoHide: function (el) {
        if (this.subMenu && this.hasState('opened')) {
          return this.subMenu.queryAutoHide(el);
        }
      },
      _onClick: function (event, this_) {
        if (this.hasState('disabled')) {
          return;
        }
        if (this.fireEvent('click', event, this_) !== false) {
          if (this.subMenu) {
            this.showSubMenu();
          } else {
            Popup.postHide(event);
          }
        }
      },
      showSubMenu: function () {
        var rect = uiUtils.getClientRect(this.getDom());
        rect.right -= 5;
        rect.left += 2;
        rect.width -= 7;
        rect.top -= 4;
        rect.bottom += 4;
        rect.height += 8;
        this.subMenu.showAnchorRect(rect, true, true);
      },
      hideSubMenu: function () {
        this.subMenu.hide();
      }
    };
    utils.inherits(MenuItem, UIBase);
    utils.extend(MenuItem.prototype, Stateful, true);
  })();


  // ui/combox.js
  ///import core
  ///import uicore
  ///import ui/menu.js
  ///import ui/splitbutton.js
  (function () {
    // todo: menu和item提成通用list
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      Menu = baidu.editor.ui.Menu,
      SplitButton = baidu.editor.ui.SplitButton,
      Combox = baidu.editor.ui.Combox = function (options) {
        this.initOptions(options);
        this.initCombox();
      };
    Combox.prototype = {
      uiName: 'combox',
      onbuttonclick: function () {
        this.showPopup();
      },
      initCombox: function () {
        var me = this;
        this.items = this.items || [];
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          item.uiName = 'listitem';
          item.index = i;
          item.onclick = function () {
            me.selectByIndex(this.index);
          };
        }
        this.popup = new Menu({
          items: this.items,
          uiName: 'list',
          editor: this.editor,
          captureWheel: true,
          combox: this
        });

        this.initSplitButton();
      },
      _SplitButton_postRender: SplitButton.prototype.postRender,
      postRender: function () {
        this._SplitButton_postRender();
        this.setLabel(this.label || '');
        this.setValue(this.initValue || '');
      },
      showPopup: function () {
        var rect = uiUtils.getClientRect(this.getDom());
        rect.top += 1;
        rect.bottom -= 1;
        rect.height -= 2;
        rect.isScale = true;
        this.popup.showAnchorRect(rect);
      },
      getValue: function () {
        return this.value;
      },
      setValue: function (value) {
        var index = this.indexByValue(value);
        if (index != -1) {
          this.selectedIndex = index;
          this.setLabel(this.items[index].label);
          this.value = this.items[index].value;
        } else {
          this.selectedIndex = -1;
          this.setLabel(this.getLabelForUnknowValue(value));
          this.value = value;
        }
      },
      setLabel: function (label) {
        this.getDom('button_body').innerHTML = label;
        this.label = label;
      },
      getLabelForUnknowValue: function (value) {
        return value;
      },
      indexByValue: function (value) {
        for (var i = 0; i < this.items.length; i++) {
          if (value == this.items[i].value) {
            return i;
          }
        }
        return -1;
      },
      getItem: function (index) {
        return this.items[index];
      },
      selectByIndex: function (index) {
        if (index < this.items.length && this.fireEvent('select', index) !== false) {
          this.selectedIndex = index;
          this.value = this.items[index].value;
          this.setLabel(this.items[index].label);
        }
      }
    };
    utils.inherits(Combox, SplitButton);
  })();


  // ui/dialog.js
  ///import core
  ///import uicore
  ///import ui/mask.js
  ///import ui/button.js
  (function () {
    var utils = baidu.editor.utils,
      domUtils = baidu.editor.dom.domUtils,
      uiUtils = baidu.editor.ui.uiUtils,
      Mask = baidu.editor.ui.Mask,
      UIBase = baidu.editor.ui.UIBase,
      Button = baidu.editor.ui.Button,
      Dialog = baidu.editor.ui.Dialog = function (options) {
        if (options.name) {
          var name = options.name;
          var cssRules = options.cssRules;
          if (!options.className) {
            options.className = 'edui-for-' + name;
          }
          if (cssRules) {
            options.cssRules = '.edui-default .edui-for-' + name + ' .edui-dialog-content  {' + cssRules + '}'
          }
        }
        this.initOptions(utils.extend({
          autoReset: true,
          draggable: true,
          onok: function () {
          },
          oncancel: function () {
          },
          onclose: function (t, ok) {
            return ok ? this.onok() : this.oncancel();
          },
          //是否控制dialog中的scroll事件， 默认为不阻止
          holdScroll: false
        }, options));
        this.initDialog();
      };
    var modalMask;
    var dragMask;
    var activeDialog;
    Dialog.prototype = {
      draggable: false,
      uiName: 'dialog',
      initDialog: function () {
        var me = this,
          theme = this.editor.options.theme;
        if (this.cssRules) {
          utils.cssRule('edui-customize-' + this.name + '-style', this.cssRules);
        }
        this.initUIBase();
        this.modalMask = modalMask || (modalMask = new Mask({
          className: 'edui-dialog-modalmask',
          theme: theme,
          onclick: function () {
            activeDialog && activeDialog.close(false);
          }
        }));
        this.dragMask = dragMask || (dragMask = new Mask({
          className: 'edui-dialog-dragmask',
          theme: theme
        }));
        this.closeButton = new Button({
          className: 'edui-dialog-closebutton',
          title: me.closeDialog,
          theme: theme,
          onclick: function () {
            me.close(false);
          }
        });

        this.fullscreen && this.initResizeEvent();

        if (this.buttons) {
          for (var i = 0; i < this.buttons.length; i++) {
            if (!(this.buttons[i] instanceof Button)) {
              this.buttons[i] = new Button(utils.extend(this.buttons[i], {
                editor: this.editor
              }, true));
            }
          }
        }
      },
      initResizeEvent: function () {

        var me = this;

        domUtils.on(window, "resize", function () {

          if (me._hidden || me._hidden === undefined) {
            return;
          }

          if (me.__resizeTimer) {
            window.clearTimeout(me.__resizeTimer);
          }

          me.__resizeTimer = window.setTimeout(function () {

            me.__resizeTimer = null;

            var dialogWrapNode = me.getDom(),
              contentNode = me.getDom('content'),
              wrapRect = AX.ui.uiUtils.getClientRect(dialogWrapNode),
              contentRect = AX.ui.uiUtils.getClientRect(contentNode),
              vpRect = uiUtils.getViewportRect();

            contentNode.style.width = vpRect.width - wrapRect.width + contentRect.width + "px";

            contentNode.style.height = vpRect.height - wrapRect.height + contentRect.height + "px";

            dialogWrapNode.style.width = vpRect.width + "px";
            dialogWrapNode.style.height = vpRect.height + "px";

            me.fireEvent("resize");

          }, 100);

        });

      },
      fitSize: function () {
        var popBodyEl = this.getDom('body');
        //            if (!(baidu.editor.browser.ie && baidu.editor.browser.version == 7)) {
        //                uiUtils.removeStyle(popBodyEl, 'width');
        //                uiUtils.removeStyle(popBodyEl, 'height');
        //            }
        var size = this.mesureSize();
        popBodyEl.style.width = size.width + 'px';
        popBodyEl.style.height = size.height + 'px';
        return size;
      },
      safeSetOffset: function (offset) {
        var me = this;
        var el = me.getDom();
        var vpRect = uiUtils.getViewportRect();
        var rect = uiUtils.getClientRect(el);
        var left = offset.left;
        if (left + rect.width > vpRect.right) {
          left = vpRect.right - rect.width;
        }
        var top = offset.top;
        if (top + rect.height > vpRect.bottom) {
          top = vpRect.bottom - rect.height;
        }
        el.style.left = Math.max(left, 0) + 'px';
        el.style.top = Math.max(top, 0) + 'px';
      },
      showAtCenter: function () {

        var vpRect = uiUtils.getViewportRect();

        if (!this.fullscreen) {
          this.getDom().style.display = '';
          var popSize = this.fitSize();
          var titleHeight = this.getDom('titlebar').offsetHeight | 0;
          var left = vpRect.width / 2 - popSize.width / 2;
          var top = vpRect.height / 2 - (popSize.height - titleHeight) / 2 - titleHeight;
          var popEl = this.getDom();
          this.safeSetOffset({
            left: Math.max(left | 0, 0),
            top: Math.max(top | 0, 0)
          });
          if (!domUtils.hasClass(popEl, 'edui-state-centered')) {
            popEl.className += ' edui-state-centered';
          }
        } else {
          var dialogWrapNode = this.getDom(),
            contentNode = this.getDom('content');

          dialogWrapNode.style.display = "block";

          var wrapRect = AX.ui.uiUtils.getClientRect(dialogWrapNode),
            contentRect = AX.ui.uiUtils.getClientRect(contentNode);
          dialogWrapNode.style.left = "-100000px";

          contentNode.style.width = vpRect.width - wrapRect.width + contentRect.width + "px";
          contentNode.style.height = vpRect.height - wrapRect.height + contentRect.height + "px";

          dialogWrapNode.style.width = vpRect.width + "px";
          dialogWrapNode.style.height = vpRect.height + "px";
          dialogWrapNode.style.left = 0;

          //保存环境的overflow值
          this._originalContext = {
            html: {
              overflowX: document.documentElement.style.overflowX,
              overflowY: document.documentElement.style.overflowY
            },
            body: {
              overflowX: document.body.style.overflowX,
              overflowY: document.body.style.overflowY
            }
          };

          document.documentElement.style.overflowX = 'hidden';
          document.documentElement.style.overflowY = 'hidden';
          document.body.style.overflowX = 'hidden';
          document.body.style.overflowY = 'hidden';

        }

        this._show();
      },
      getContentHtml: function () {
        var contentHtml = '';
        if (typeof this.content == 'string') {
          contentHtml = this.content;
        } else if (this.iframeUrl) {
          contentHtml = '<span id="' + this.id + '_contmask" class="dialogcontmask"></span><iframe id="' + this.id +
            '_iframe" class="%%-iframe" height="100%" width="100%" frameborder="0" src="' + this.iframeUrl + '"></iframe>';
        }
        return contentHtml;
      },
      getHtmlTpl: function () {
        var footHtml = '';

        if (this.buttons) {
          var buff = [];
          for (var i = 0; i < this.buttons.length; i++) {
            buff[i] = this.buttons[i].renderHtml();
          }
          footHtml = '<div class="%%-foot">' +
            '<div id="##_buttons" class="%%-buttons">' + buff.join('') + '</div>' +
            '</div>';
        }

        return '<div id="##" class="%%"><div ' + (!this.fullscreen ? 'class="%%"' : 'class="%%-wrap edui-dialog-fullscreen-flag"') + '><div id="##_body" class="%%-body">' +
          '<div class="%%-shadow"></div>' +
          '<div id="##_titlebar" class="%%-titlebar">' +
          '<div class="%%-draghandle" onmousedown="$$._onTitlebarMouseDown(event, this);">' +
          '<span class="%%-caption">' + (this.title || '') + '</span>' +
          '</div>' +
          this.closeButton.renderHtml() +
          '</div>' +
          '<div id="##_content" class="%%-content">' + (this.autoReset ? '' : this.getContentHtml()) + '</div>' +
          footHtml +
          '</div></div></div>';
      },
      postRender: function () {
        // todo: 保持居中/记住上次关闭位置选项
        if (!this.modalMask.getDom()) {
          this.modalMask.render();
          this.modalMask.hide();
        }
        if (!this.dragMask.getDom()) {
          this.dragMask.render();
          this.dragMask.hide();
        }
        var me = this;
        this.addListener('show', function () {
          me.modalMask.show(this.getDom().style.zIndex - 2);
        });
        this.addListener('hide', function () {
          me.modalMask.hide();
        });
        if (this.buttons) {
          for (var i = 0; i < this.buttons.length; i++) {
            this.buttons[i].postRender();
          }
        }
        domUtils.on(window, 'resize', function () {
          setTimeout(function () {
            if (!me.isHidden()) {
              me.safeSetOffset(uiUtils.getClientRect(me.getDom()));
            }
          });
        });

        //hold住scroll事件，防止dialog的滚动影响页面
        //            if( this.holdScroll ) {
        //
        //                if( !me.iframeUrl ) {
        //                    domUtils.on( document.getElementById( me.id + "_iframe"), !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
        //                        domUtils.preventDefault(e);
        //                    } );
        //                } else {
        //                    me.addListener('dialogafterreset', function(){
        //                        window.setTimeout(function(){
        //                            var iframeWindow = document.getElementById( me.id + "_iframe").contentWindow;
        //
        //                            if( browser.ie ) {
        //
        //                                var timer = window.setInterval(function(){
        //
        //                                    if( iframeWindow.document && iframeWindow.document.body ) {
        //                                        window.clearInterval( timer );
        //                                        timer = null;
        //                                        domUtils.on( iframeWindow.document.body, !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
        //                                            domUtils.preventDefault(e);
        //                                        } );
        //                                    }
        //
        //                                }, 100);
        //
        //                            } else {
        //                                domUtils.on( iframeWindow, !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
        //                                    domUtils.preventDefault(e);
        //                                } );
        //                            }
        //
        //                        }, 1);
        //                    });
        //                }
        //
        //            }
        this._hide();
      },
      mesureSize: function () {
        var body = this.getDom('body');
        var width = uiUtils.getClientRect(this.getDom('content')).width;
        var dialogBodyStyle = body.style;
        dialogBodyStyle.width = width;
        return uiUtils.getClientRect(body);
      },
      _onTitlebarMouseDown: function (evt, el) {
        if (this.draggable) {
          var rect;
          var vpRect = uiUtils.getViewportRect();
          var me = this;
          uiUtils.startDrag(evt, {
            ondragstart: function () {
              rect = uiUtils.getClientRect(me.getDom());
              me.getDom('contmask').style.visibility = 'visible';
              me.dragMask.show(me.getDom().style.zIndex - 1);
            },
            ondragmove: function (x, y) {
              var left = rect.left + x;
              var top = rect.top + y;
              me.safeSetOffset({
                left: left,
                top: top
              });
            },
            ondragstop: function () {
              me.getDom('contmask').style.visibility = 'hidden';
              domUtils.removeClasses(me.getDom(), ['edui-state-centered']);
              me.dragMask.hide();
            }
          });
        }
      },
      reset: function () {
        this.getDom('content').innerHTML = this.getContentHtml();
        this.fireEvent('dialogafterreset');
      },
      _show: function () {
        if (this._hidden) {
          this.getDom().style.display = '';

          //要高过编辑器的zindxe
          this.editor.container.style.zIndex && (this.getDom().style.zIndex = this.editor.container.style.zIndex * 1 + 10);
          this._hidden = false;
          this.fireEvent('show');
          baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex = this.getDom().style.zIndex - 4;
        }
      },
      isHidden: function () {
        return this._hidden;
      },
      _hide: function () {
        if (!this._hidden) {
          var wrapNode = this.getDom();
          wrapNode.style.display = 'none';
          wrapNode.style.zIndex = '';
          wrapNode.style.width = '';
          wrapNode.style.height = '';
          this._hidden = true;
          this.fireEvent('hide');
        }
      },
      open: function () {
        if (this.autoReset) {
          //有可能还没有渲染
          try {
            this.reset();
          } catch (e) {
            this.render();
            this.open()
          }
        }
        this.showAtCenter();
        if (this.iframeUrl) {
          try {
            this.getDom('iframe').focus();
          } catch (ex) {
          }
        }
        activeDialog = this;
      },
      _onCloseButtonClick: function (evt, el) {
        this.close(false);
      },
      close: function (ok) {
        if (this.fireEvent('close', ok) !== false) {
          //还原环境
          if (this.fullscreen) {

            document.documentElement.style.overflowX = this._originalContext.html.overflowX;
            document.documentElement.style.overflowY = this._originalContext.html.overflowY;
            document.body.style.overflowX = this._originalContext.body.overflowX;
            document.body.style.overflowY = this._originalContext.body.overflowY;
            delete this._originalContext;

          }
          this._hide();

          //销毁content
          var content = this.getDom('content');
          var iframe = this.getDom('iframe');
          if (content && iframe) {
            var doc = iframe.contentDocument || iframe.contentWindow.document;
            doc && (doc.body.innerHTML = '');
            domUtils.remove(content);
          }
        }
      }
    };
    utils.inherits(Dialog, UIBase);
  })();


  // ui/menubutton.js
  ///import core
  ///import uicore
  ///import ui/menu.js
  ///import ui/splitbutton.js
  (function () {
    var utils = baidu.editor.utils,
      Menu = baidu.editor.ui.Menu,
      SplitButton = baidu.editor.ui.SplitButton,
      MenuButton = baidu.editor.ui.MenuButton = function (options) {
        this.initOptions(options);
        this.initMenuButton();
      };
    MenuButton.prototype = {
      initMenuButton: function () {
        var me = this;
        this.uiName = "menubutton";
        this.popup = new Menu({
          items: me.items,
          className: me.className,
          editor: me.editor
        });
        this.popup.addListener('show', function () {
          var list = this;
          var seled = false;
          for (var i = 0; i < list.items.length; i++) {
            list.items[i].removeState('checked');
            if (list.items[i].value == me._value) {
              list.items[i].addState('checked');
              this.value = me._value;
              seled = true;
            }
          }
          // 如果没有选中的选项，就尝试自定义的选项
          if (!seled) {
            for (var i = 0; i < list.items.length; i++) {
              list.items[i].removeState('checked');
              if (list.items[i].value == 'custom') {
                list.items[i].addState('checked');
                this.value = me._value;
              }
            }
          }
        });
        this.initSplitButton();
      },
      setValue: function (value) {
        this._value = value;
      }

    };
    utils.inherits(MenuButton, SplitButton);
  })();

  // ui/multiMenu.js
  ///import core
  ///import uicore
  ///commands 表情
  (function () {
    var utils = baidu.editor.utils,
      Popup = baidu.editor.ui.Popup,
      SplitButton = baidu.editor.ui.SplitButton,
      MultiMenuPop = baidu.editor.ui.MultiMenuPop = function (options) {
        this.initOptions(options);
        this.initMultiMenu();
      };

    MultiMenuPop.prototype = {
      initMultiMenu: function () {
        var me = this;
        this.popup = new Popup({
          content: '',
          editor: me.editor,
          iframe_rendered: false,
          onshow: function () {
            if (!this.iframe_rendered) {
              this.iframe_rendered = true;
              this.getDom('content').innerHTML = '<iframe id="' + me.id + '_iframe" src="' + me.iframeUrl + '" frameborder="0"></iframe>';
              me.editor.container.style.zIndex && (this.getDom().style.zIndex = me.editor.container.style.zIndex * 1 + 1);
            }
          }
          // canSideUp:false,
          // canSideLeft:false
        });
        this.onbuttonclick = function () {
          this.showPopup();
        };
        this.initSplitButton();
      }

    };

    utils.inherits(MultiMenuPop, SplitButton);
  })();


  // ui/shortcutmenu.js
  (function () {
    var UI = baidu.editor.ui,
      UIBase = UI.UIBase,
      uiUtils = UI.uiUtils,
      utils = baidu.editor.utils,
      domUtils = baidu.editor.dom.domUtils;

    var allMenus = [],//存储所有快捷菜单
      timeID,
      isSubMenuShow = false;//是否有子pop显示

    var ShortCutMenu = UI.ShortCutMenu = function (options) {
      this.initOptions(options);
      this.initShortCutMenu();
    };

    ShortCutMenu.postHide = hideAllMenu;

    ShortCutMenu.prototype = {
      isHidden: true,
      SPACE: 5,
      initShortCutMenu: function () {
        this.items = this.items || [];
        this.initUIBase();
        this.initItems();
        this.initEvent();
        allMenus.push(this);
      },
      initEvent: function () {
        var me = this,
          doc = me.editor.document;

        domUtils.on(doc, "mousemove", function (e) {
          if (me.isHidden === false) {
            //有pop显示就不隐藏快捷菜单
            if (me.getSubMenuMark() || me.eventType == "contextmenu") {
              return;
            }


            var flag = true,
              el = me.getDom(),
              wt = el.offsetWidth,
              ht = el.offsetHeight,
              distanceX = wt / 2 + me.SPACE,//距离中心X标准
              distanceY = ht / 2,//距离中心Y标准
              x = Math.abs(e.screenX - me.left),//离中心距离横坐标
              y = Math.abs(e.screenY - me.top);//离中心距离纵坐标

            clearTimeout(timeID);
            timeID = setTimeout(function () {
              if (y > 0 && y < distanceY) {
                me.setOpacity(el, "1");
              } else if (y > distanceY && y < distanceY + 70) {
                me.setOpacity(el, "0.5");
                flag = false;
              } else if (y > distanceY + 70 && y < distanceY + 140) {
                me.hide();
              }

              if (flag && x > 0 && x < distanceX) {
                me.setOpacity(el, "1")
              } else if (x > distanceX && x < distanceX + 70) {
                me.setOpacity(el, "0.5")
              } else if (x > distanceX + 70 && x < distanceX + 140) {
                me.hide();
              }
            });
          }
        });

        //ie\ff下 mouseout不准
        if (browser.chrome) {
          domUtils.on(doc, "mouseout", function (e) {
            var relatedTgt = e.relatedTarget || e.toElement;

            if (relatedTgt == null || relatedTgt.tagName == "HTML") {
              me.hide();
            }
          });
        }

        me.editor.addListener("afterhidepop", function () {
          if (!me.isHidden) {
            isSubMenuShow = true;
          }
        });

      },
      initItems: function () {
        if (utils.isArray(this.items)) {
          for (var i = 0, len = this.items.length; i < len; i++) {
            var item = this.items[i].toLowerCase();

            if (UI[item]) {
              this.items[i] = new UI[item](this.editor);
              this.items[i].className += " edui-shortcutsubmenu ";
            }
          }
        }
      },
      setOpacity: function (el, value) {
        if (browser.ie && browser.version < 9) {
          el.style.filter = "alpha(opacity = " + parseFloat(value) * 100 + ");"
        } else {
          el.style.opacity = value;
        }
      },
      getSubMenuMark: function () {
        isSubMenuShow = false;
        var layerEle = uiUtils.getFixedLayer();
        var list = domUtils.getElementsByTagName(layerEle, "div", function (node) {
          return domUtils.hasClass(node, "edui-shortcutsubmenu edui-popup")
        });

        for (var i = 0, node; node = list[i++];) {
          if (node.style.display != "none") {
            isSubMenuShow = true;
          }
        }
        return isSubMenuShow;
      },
      show: function (e, hasContextmenu) {
        var me = this,
          offset = {},
          el = this.getDom(),
          fixedlayer = uiUtils.getFixedLayer();

        function setPos(offset) {
          if (offset.left < 0) {
            offset.left = 0;
          }
          if (offset.top < 0) {
            offset.top = 0;
          }
          el.style.cssText = "position:absolute;left:" + offset.left + "px;top:" + offset.top + "px;";
        }

        function setPosByCxtMenu(menu) {
          if (!menu.tagName) {
            menu = menu.getDom();
          }
          offset.left = parseInt(menu.style.left);
          offset.top = parseInt(menu.style.top);
          offset.top -= el.offsetHeight + 15;
          setPos(offset);
        }


        me.eventType = e.type;
        el.style.cssText = "display:block;left:-9999px";

        if (e.type == "contextmenu" && hasContextmenu) {
          var menu = domUtils.getElementsByTagName(fixedlayer, "div", "edui-contextmenu")[0];
          if (menu) {
            setPosByCxtMenu(menu)
          } else {
            me.editor.addListener("aftershowcontextmenu", function (type, menu) {
              setPosByCxtMenu(menu);
            });
          }
        } else {
          offset = uiUtils.getViewportOffsetByEvent(e);
          offset.top -= el.offsetHeight + me.SPACE;
          offset.left += me.SPACE + 20;
          setPos(offset);
          me.setOpacity(el, 0.2);
        }


        me.isHidden = false;
        me.left = e.screenX + el.offsetWidth / 2 - me.SPACE;
        me.top = e.screenY - el.offsetHeight / 2 - me.SPACE;

        if (me.editor) {
          el.style.zIndex = me.editor.container.style.zIndex * 1 + 10;
          fixedlayer.style.zIndex = el.style.zIndex - 1;
        }
      },
      hide: function () {
        if (this.getDom()) {
          this.getDom().style.display = "none";
        }
        this.isHidden = true;
      },
      postRender: function () {
        if (utils.isArray(this.items)) {
          for (var i = 0, item; item = this.items[i++];) {
            item.postRender();
          }
        }
      },
      getHtmlTpl: function () {
        var buff;
        if (utils.isArray(this.items)) {
          buff = [];
          for (var i = 0; i < this.items.length; i++) {
            buff[i] = this.items[i].renderHtml();
          }
          buff = buff.join("");
        } else {
          buff = this.items;
        }

        return '<div id="##" class="%% edui-toolbar" data-src="shortcutmenu" onmousedown="return false;" onselectstart="return false;" >' +
          buff +
          '</div>';
      }
    };

    utils.inherits(ShortCutMenu, UIBase);

    function hideAllMenu(e) {
      var tgt = e.target || e.srcElement,
        cur = domUtils.findParent(tgt, function (node) {
          return domUtils.hasClass(node, "edui-shortcutmenu") || domUtils.hasClass(node, "edui-popup");
        }, true);

      if (!cur) {
        for (var i = 0, menu; menu = allMenus[i++];) {
          menu.hide()
        }
      }
    }

    domUtils.on(document, 'mousedown', function (e) {
      hideAllMenu(e);
    });

    domUtils.on(window, 'scroll', function (e) {
      hideAllMenu(e);
    });

  })();


  // ui/breakline.js
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase,
      Breakline = baidu.editor.ui.Breakline = function (options) {
        this.initOptions(options);
        this.initSeparator();
      };
    Breakline.prototype = {
      uiName: 'Breakline',
      initSeparator: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        return '<br/>';
      }
    };
    utils.inherits(Breakline, UIBase);

  })();


  (function () {
    var a = baidu.editor.utils,
      b = baidu.editor.dom.domUtils,
      c = baidu.editor.ui.UIBase,
      d = baidu.editor.ui.uiUtils,
      e = baidu.editor.ui.JumpMask = function (a) {
        this.initOptions(a), this.initUIBase()
      };
    e.prototype = {
      getJumpFixedLayer: function () {
        var a = document.getElementById('ueditor_0').contentWindow.document,
          b = a.getElementById("#edui_jumplayer");
        if (null == b) {
          b = a.createElement("div"), b.id = "edui_jumplayer", a.body.insertBefore(b, a.body.firstChild), browser.ie && browser.version <= 8 && (bindFixedLayer(), setTimeout(updateFixedOffset));
          var c = a.createElement("script");
          c.setAttribute("type", "text/javascript");
          var d = a.getElementsByTagName("head");
          d.length ? d[0].appendChild(c) : a.documentElement.appendChild(c), c.defer = !0, c.text = "function setHight(evt){var h = evt.clientY + document.body.scrollTop;document.getElementById('edui_jumplayer').firstChild.style.height=h+'px';}"
        }
        b.setAttribute('class', 'ax-editor-continue-print-mask');
        b.setAttribute('contenteditable', 'false');
        return b
      },
      render: function () {
        for (var a, c = this.renderHtml(), e = d.createElementByHtml(c), f = document.getElementById('ueditor_0').contentWindow.document, g = b.getElementsByTagName(e, "*"), h = "edui-" + (this.theme || this.editor.options.theme), i = f.getElementById("#edui_jumplayer"), j = 0; a = g[j++];) { b.addClass(a, h); }
        b.addClass(e, h), i && (i.className = "", b.addClass(i, h));
        var k = this.getDom();
        if (null != k) {
          // k.parentNode.replaceChild(e, k), d.copyAttributes(e, k);
        } else {
          var l = this.getJumpFixedLayer();
          b.addClass(l, h), l.appendChild(e)
        }
        this.postRender()
      },
      getHtmlTpl: function () {
        return '<div id="##" style="position: absolute;background-color: white;opacity: 1;padding:' + padding + ";z-index: 11000;left: 0px;top: 0px;width: " + width + ';" class="edui-mask %%" onclick="setHight"></div>'
      },
      postRender: function () {
        var a = this;
        b.on(window, "resize", function () {
          setTimeout(function () {
            a.isHidden() || a._fill()
          })
        })
      },
      show: function (a) {
        this._fill(), this.getDom().style.display = "", this.getDom().style.zIndex = a
      },
      getDom: function () {
        var a = document.getElementById('ueditor_0').contentWindow.document;
        return a.getElementById("edui_jumplayer")
      },
      hide: function () {
        this.getDom().style.display = "none", this.getDom().style.zIndex = ""
      },
      isHidden: function () {
        return "none" == this.getDom().style.display
      },
      setHight: function (a) {
        this.getDom().firstChild.style.height = a
      },
      setTop: function (a) {
        this.getDom().firstChild.style.height = a
      },
      _onMouseDown: function () {
        return !1
      },
      _onClick: function (a, b) {
        this.fireEvent("click", a, b)
      },
      _fill: function () {
        this.getDom()
      }
    }, a.inherits(e, c)
  })();


  // ui/message.js
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      domUtils = baidu.editor.dom.domUtils,
      UIBase = baidu.editor.ui.UIBase,
      Message = baidu.editor.ui.Message = function (options) {
        this.initOptions(options);
        this.initMessage();
      };

    Message.prototype = {
      initMessage: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        return '<div id="##" class="edui-message %%">' +
          ' <div id="##_closer" class="edui-message-closer">×</div>' +
          ' <div id="##_body" class="edui-message-body edui-message-type-info">' +
          ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: transparent;" frameborder="0" width="100%" height="100%" src="about:blank"></iframe>' +
          ' <div class="edui-shadow"></div>' +
          ' <div id="##_content" class="edui-message-content">' +
          '  </div>' +
          ' </div>' +
          '</div>';
      },
      reset: function (opt) {
        var me = this;
        if (!opt.keepshow) {
          clearTimeout(this.timer);
          me.timer = setTimeout(function () {
            me.hide();
          }, opt.timeout || 4000);
        }

        opt.content !== undefined && me.setContent(opt.content);
        opt.type !== undefined && me.setType(opt.type);

        me.show();
      },
      postRender: function () {
        var me = this,
          closer = this.getDom('closer');
        closer && domUtils.on(closer, 'click', function () {
          me.hide();
        });
      },
      setContent: function (content) {
        try {
          this.getDom('content').innerHTML = content;
        } catch (e) { }
      },
      setType: function (type) {
        type = type || 'info';
        var body = this.getDom('body');
        body.className = body.className.replace(/edui-message-type-[\w-]+/, 'edui-message-type-' + type);
      },
      getContent: function () {
        return this.getDom('content').innerHTML;
      },
      getType: function () {
        var arr = this.getDom('body').match(/edui-message-type-([\w-]+)/);
        return arr ? arr[1] : '';
      },
      show: function () {
        try {
          this.getDom().style.display = 'block';
        } catch (e) { }
      },
      hide: function () {
        var dom = this.getDom();
        if (dom) {
          dom.style.display = 'none';
          dom.parentNode && dom.parentNode.removeChild(dom);
        }
      }
    };

    utils.inherits(Message, UIBase);

  })();

  // adapter/editorui.js
  //ui跟编辑器的适配層
  //那个按钮弹出是dialog，是下拉筐等都是在这个js中配置
  //自己写的ui也要在这里配置，放到baidu.editor.ui下边，当编辑器实例化的时候会根据ueditor.config中的toolbars找到相应的进行实例化
  (function () {
    var utils = baidu.editor.utils;
    var editorui = baidu.editor.ui;
    var _Dialog = editorui.Dialog;
    editorui.buttons = {};

    editorui.Dialog = function (options) {
      var dialog = new _Dialog(options);
      dialog.addListener('hide', function () {

        if (dialog.editor) {
          var editor = dialog.editor;
          try {
            if (browser.gecko) {
              var y = editor.window.scrollY,
                x = editor.window.scrollX;
              editor.body.focus();
              editor.window.scrollTo(x, y);
            } else {
              editor.focus();
            }


          } catch (ex) {
          }
        }
      });
      return dialog;
    };

    var iframeUrlMap = {
      'anchor': '~/dialogs/anchor/anchor.html',
      'insertimage': '~/dialogs/image/image.html',
      'link': '~/dialogs/link/link.html',
      'spechars': '~/dialogs/spechars/spechars.html',
      'searchreplace': '~/dialogs/searchreplace/searchreplace.html',
      'map': '~/dialogs/map/map.html',
      'gmap': '~/dialogs/gmap/gmap.html',
      'insertvideo': '~/dialogs/video/video.html',
      'help': '~/dialogs/help/help.html',
      'preview': '~/dialogs/preview/preview.html',
      'emotion': '~/dialogs/emotion/emotion.html',
      'wordimage': '~/dialogs/wordimage/wordimage.html',
      'attachment': '~/dialogs/attachment/attachment.html',
      'insertframe': '~/dialogs/insertframe/insertframe.html',
      'edittip': '~/dialogs/table/edittip.html',
      'edittable': '~/dialogs/table/edittable.html',
      'edittd': '~/dialogs/table/edittd.html',
      'webapp': '~/dialogs/webapp/webapp.html',
      'snapscreen': '~/dialogs/snapscreen/snapscreen.html',
      'scrawl': '~/dialogs/scrawl/scrawl.html',
      'music': '~/dialogs/music/music.html',
      'template': '~/dialogs/template/template.html',
      'background': '~/dialogs/background/background.html',
      'charts': '~/dialogs/charts/charts.html'
    };
    //为工具栏添加按钮，以下都是统一的按钮触发命令，所以写在一起
    var btnCmds = ['undo', 'redo', /* 'formatmatch', */ 'recortar', 'colar', 'copiar', 'downsize', 'upsize', 'vectorgraph',
      'copy', 'cut', 'paste', 'sizeplus', 'sizeminus', 'tagelement', 'numberelement', 'macro', 'paragraphele', 'parasetter', 'combine', 'diagnose', 'prescription', 'signature',
      'barcode', 'qrcode', 'text', 'select', 'selectmulti', 'datedomain', 'haveornot', 'chapter', 'area', 'radio', 'checkbox', 'formula', 'medical',
      'inserttable', 'mark', 'design', 'edit', 'pure', 'dirty', 'secret', 'note',
      'pagemargin', 'paperdirect', 'papersize', 'pageheader', 'pagefooter', 'startmark', 'gridline', 'pages', 'continueprint', 'preview', 'numcount',
      'save', 'submit', 'recall', 'savetempl', 'structure', 'open', 'pdf', 'word', 'xml', 'html',
      'tb-hide', 'tb-solid', 'tb-dotted', 'tablelowerframeline', 'tableupperframeline', 'tableleftframeline', 'tablerightframeline', 'tablenoborder', 'tableallborder', 'tableinternaltransver', 'tableinternalverticalline', 'tableinsideborder', 'tablelateralframeline', 'tableallframelines',
      'bold', 'italic', 'underline', 'fontborder', 'touppercase', 'tolowercase',
      'subscript', 'superscript', 'source', 'indent', 'outdent',
      'pasteplain', 'pagebreak', 'structureTree', 'synchronize', 'refreshmacros', 'refreshdiagnose', 'refreshprescription_out', 'refreshprescription_in',
      'refreshhistory', 'highbloodfollowup', 'selectall', 'print', 'printpreview', 'horizontal', /* 'removeformat', */ 'time', 'date', 'unlink',
      'insertparagraphbeforetable', 'insertrow', 'insertcol', 'mergeright', 'mergedown', 'deleterow',
      'deletecol', 'splittorows', 'splittocols', 'splittocells', 'mergecells', 'deletetable', 'drafts', 'savexml', 'openxml', 'common1', 'exophthalmos', 'savepdf', 'paperscale', 'watermark', 'svgedit', 'hidemarktag', 'editlock', 'medicalformula'];
    for (var i = 0, ci; ci = btnCmds[i++];) {
      ci = ci.toLowerCase();
      editorui[ci] = function (cmd) {
        return function (editor) {
          var ui = null;
          if (cmd == 'pagemargin' || cmd == 'papersize' || cmd == 'paperscale') {
            var val = editor.options[cmd] || editor.options[cmd].length == 0 || [{}], items = [];
            if (!val.length) {
              return;
            }
            for (var k = 0; k < val.length; k++) {
              items.push({
                label: val[k].label,
                value: val[k].value,
                theme: editor.options.theme,
                onclick: function () {
                  editor.execCommand(cmd, this.value);
                }
              })
            }
            ui = new editorui.MenuButton({
              editor: editor,
              className: 'edui-for-' + cmd,
              title: editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
              items: items,
              showText: true,
              onbuttonclick: function () {
                var value = editor.queryCommandValue(cmd) || this.value;
                editor.execCommand(cmd, value);
              }
            });

            editor.addListener('selectionchange', function () {
              var state = editor.queryCommandState(cmd);
              if (state == -1) {
                ui.setDisabled(true);
              } else {
                ui.setDisabled(false);
                var value = editor.queryCommandValue(cmd);
                value && ui.setValue((value + '').replace(/cm/, ''));
                ui.setChecked(state)
              }
            });
          } else {
            ui = new editorui.Button({
              className: 'edui-for-' + cmd,
              title: editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
              label: editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
              onclick: function () {
                editor.execCommand(cmd);
              },
              theme: editor.options.theme,
              showText: true
            });

            editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
              var state = editor.queryCommandState(cmd);
              if (state == -1) {
                ui.setDisabled(true);
                ui.setChecked(false);
              } else {
                if (!uiReady) {
                  ui.setDisabled(false);
                  ui.setChecked(state);
                }
              }
            });
          }
          editorui.buttons[cmd] = ui;
          return ui;
        };
      }(ci);
    }

    //清除文档
    editorui.cleardoc = function (editor) {
      var ui = new editorui.Button({
        className: 'edui-for-cleardoc',
        title: editor.options.labelMap.cleardoc || editor.getLang("labelMap.cleardoc") || '',
        theme: editor.options.theme,
        onclick: function () {
          // var self = this;
          // me.window.confirmMsg(editor.getLang("confirmClear"), function() {
          //   editor.execCommand('cleardoc');
          // });
          if (confirm(editor.getLang("confirmClear"))) {
            editor.execCommand('cleardoc');
          }
        }
      });
      editorui.buttons["cleardoc"] = ui;
      editor.addListener('selectionchange', function () {
        ui.setDisabled(editor.queryCommandState('cleardoc') == -1);
      });
      return ui;
    };

    //排版，图片排版，文字方向
    var typeset = {
      'justify': ['left', 'right', 'center', 'justify'],
      'imagefloat': ['none', 'left', 'center', 'right'],
      'directionality': ['ltr', 'rtl']
    };

    for (var p in typeset) {

      (function (cmd, val) {
        for (var i = 0, ci; ci = val[i++];) {
          (function (cmd2) {
            editorui[cmd.replace('float', '') + cmd2] = function (editor) {
              var ui = new editorui.Button({
                className: 'edui-for-' + cmd.replace('float', '') + cmd2,
                title: editor.options.labelMap[cmd.replace('float', '') + cmd2] || editor.getLang("labelMap." + cmd.replace('float', '') + cmd2) || '',
                theme: editor.options.theme,
                onclick: function () {
                  editor.execCommand(cmd, cmd2);
                }
              });
              editorui.buttons[cmd] = ui;
              editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
                ui.setDisabled(editor.queryCommandState(cmd) == -1);
                ui.setChecked(editor.queryCommandValue(cmd) == cmd2 && !uiReady);
              });
              return ui;
            };
          })(ci)
        }
      })(p, typeset[p])
    }

    //字体颜色和背景颜色
    for (var i = 0, ci; ci = ['backcolor', 'forecolor'][i++];) {
      editorui[ci] = function (cmd) {
        return function (editor) {
          var ui = new editorui.ColorButton({
            className: 'edui-for-' + cmd,
            color: 'default',
            title: editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
            editor: editor,
            onpickcolor: function (t, color) {
              editor.execCommand(cmd, color);
            },
            onpicknocolor: function () {
              editor.execCommand(cmd, 'default');
              this.setColor('transparent');
              this.color = 'default';
            },
            onbuttonclick: function () {
              editor.execCommand(cmd, this.color);
            }
          });
          editorui.buttons[cmd] = ui;
          editor.addListener('selectionchange', function () {
            ui.setDisabled(editor.queryCommandState(cmd) == -1);
          });
          return ui;
        };
      }(ci);
    }


    var dialogBtns = {
      noOk: ['searchreplace', 'help', 'spechars', 'webapp', 'preview'],
      ok: ['attachment', 'anchor', 'link', 'insertimage', 'map', 'gmap', 'insertframe', 'wordimage',
        'insertvideo', 'insertframe', 'edittip', 'edittable', 'edittd', 'scrawl', 'template', 'music', 'background', 'charts']
    };

    for (var p in dialogBtns) {
      (function (type, vals) {
        for (var i = 0, ci; ci = vals[i++];) {
          if (ci.toLowerCase() == 'preview') {
            continue;
          }
          //todo opera下存在问题
          if (browser.opera && ci === "searchreplace") {
            continue;
          }
          (function (cmd) {
            editorui[cmd] = function (editor, iframeUrl, title) {
              iframeUrl = iframeUrl || (editor.options.iframeUrlMap || {})[cmd] || iframeUrlMap[cmd];
              title = editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '';

              var dialog;
              //没有iframeUrl不创建dialog
              if (iframeUrl) {
                dialog = new editorui.Dialog(utils.extend({
                  iframeUrl: editor.ui.mapUrl(iframeUrl),
                  editor: editor,
                  className: 'edui-for-' + cmd,
                  title: title,
                  holdScroll: cmd === 'insertimage',
                  fullscreen: /charts|preview/.test(cmd),
                  closeDialog: editor.getLang("closeDialog")
                }, type == 'ok' ? {
                  buttons: [
                    {
                      className: 'edui-okbutton',
                      label: editor.getLang("ok"),
                      editor: editor,
                      onclick: function () {
                        dialog.close(true);
                      }
                    },
                    {
                      className: 'edui-cancelbutton',
                      label: editor.getLang("cancel"),
                      editor: editor,
                      onclick: function () {
                        dialog.close(false);
                      }
                    }
                  ]
                } : {}));

                editor.ui._dialogs[cmd + "Dialog"] = dialog;
              }

              var ui = new editorui.Button({
                className: 'edui-for-' + cmd,
                title: title,
                label: title,
                onclick: function () {
                  if (dialog) {
                    switch (cmd) {
                      case "wordimage":
                        var images = editor.execCommand("wordimage");
                        if (images && images.length) {
                          dialog.render();
                          dialog.open();
                        }
                        break;
                      case "scrawl":
                        if (editor.queryCommandState("scrawl") != -1) {
                          dialog.render();
                          dialog.open();
                        }

                        break;
                      default:
                        dialog.render();
                        dialog.open();
                    }
                  }
                },
                theme: editor.options.theme,
                disabled: cmd == 'scrawl' && editor.queryCommandState("scrawl") == -1 || cmd == 'charts'
              });
              editorui.buttons[cmd] = ui;
              editor.addListener('selectionchange', function () {
                //只存在于右键菜单而无工具栏按钮的ui不需要检测状态
                var unNeedCheckState = { 'edittable': 1 };
                if (cmd in unNeedCheckState) {
                  return;
                }

                var state = editor.queryCommandState(cmd);
                if (ui.getDom()) {
                  ui.setDisabled(state == -1);
                  ui.setChecked(state);
                }

              });

              return ui;
            };
          })(ci.toLowerCase())
        }
      })(p, dialogBtns[p]);
    }

    editorui.snapscreen = function (editor, iframeUrl, title) {
      title = editor.options.labelMap['snapscreen'] || editor.getLang("labelMap.snapscreen") || '';
      var ui = new editorui.Button({
        className: 'edui-for-snapscreen',
        title: title,
        onclick: function () {
          editor.execCommand("snapscreen");
        },
        theme: editor.options.theme

      });
      editorui.buttons['snapscreen'] = ui;
      iframeUrl = iframeUrl || (editor.options.iframeUrlMap || {})["snapscreen"] || iframeUrlMap["snapscreen"];
      if (iframeUrl) {
        var dialog = new editorui.Dialog({
          iframeUrl: editor.ui.mapUrl(iframeUrl),
          editor: editor,
          className: 'edui-for-snapscreen',
          title: title,
          buttons: [
            {
              className: 'edui-okbutton',
              label: editor.getLang("ok"),
              editor: editor,
              onclick: function () {
                dialog.close(true);
              }
            },
            {
              className: 'edui-cancelbutton',
              label: editor.getLang("cancel"),
              editor: editor,
              onclick: function () {
                dialog.close(false);
              }
            }
          ]

        });
        dialog.render();
        editor.ui._dialogs["snapscreenDialog"] = dialog;
      }
      editor.addListener('selectionchange', function () {
        ui.setDisabled(editor.queryCommandState('snapscreen') == -1);
      });
      return ui;
    };

    editorui.fontfamily = function (editor, list, title) {

      list = editor.options['fontfamily'] || [];
      title = editor.options.labelMap['fontfamily'] || editor.getLang("labelMap.fontfamily") || '';
      if (!list.length) {
        return;
      }
      for (var i = 0, ci, items = []; ci = list[i]; i++) {
        var langLabel = editor.getLang('fontfamily')[ci.name] || "";
        (function (key, val) {
          items.push({
            label: key,
            value: val,
            theme: editor.options.theme,
            renderLabelHtml: function () {
              return '<div class="edui-label %%-label" style="font-family:' +
                utils.unhtml(this.value) + '">' + (this.label || '') + '</div>';
            }
          });
        })(ci.label || langLabel, ci.val)
      }
      var ui = new editorui.Combox({
        editor: editor,
        items: items,
        onselect: function (t, index) {
          editor.execCommand('FontFamily', this.items[index].value);
        },
        onbuttonclick: function () {
          this.showPopup();
        },
        title: title,
        initValue: title,
        className: 'edui-for-fontfamily',
        indexByValue: function (value) {
          if (value) {
            for (var i = 0, ci; ci = this.items[i]; i++) {
              if (ci.value.indexOf(value) != -1) {
                return i;
              }
            }
          }

          return -1;
        }
      });
      editorui.buttons['fontfamily'] = ui;
      editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
        if (!uiReady) {
          var state = editor.queryCommandState('FontFamily');
          if (state == -1) {
            ui.setDisabled(true);
          } else {
            ui.setDisabled(false);
            var value = editor.queryCommandValue('FontFamily');
            //trace:1871 ie下从源码模式切换回来时，字体会带单引号，而且会有逗号
            value && (value = value.replace(/['"]/g, '').split(',')[0]);
            ui.setValue(value);
          }
        }

      });
      return ui;
    };

    editorui.fontsize = function (editor, list, title) {
      title = editor.options.labelMap['fontsize'] || editor.getLang("labelMap.fontsize") || '';
      list = list || editor.options['fontsize'] || [];
      if (!list.length) {
        return;
      }
      var items = [];
      for (var i = 0; i < list.length; i++) {
        var size = list[i] + 'px';
        items.push({
          label: size,
          value: size,
          theme: editor.options.theme,
          renderLabelHtml: function () {
            return '<div class="edui-label %%-label" style="line-height:1;font-size:' +
              this.value + '">' + (this.label || '') + '</div>';
          }
        });
      }
      var ui = new editorui.Combox({
        editor: editor,
        items: items,
        title: title,
        initValue: title,
        onselect: function (t, index) {
          editor.execCommand('FontSize', this.items[index].value);
        },
        onbuttonclick: function () {
          this.showPopup();
        },
        className: 'edui-for-fontsize'
      });
      editorui.buttons['fontsize'] = ui;
      editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
        if (!uiReady) {
          var state = editor.queryCommandState('FontSize');
          if (state == -1) {
            ui.setDisabled(true);
          } else {
            ui.setDisabled(false);
            var currVal = editor.queryCommandValue('FontSize');
            ui.setValue(currVal);
          }
        }

      });
      return ui;
    };

    editorui.paragraph = function (editor, list, title) {
      title = editor.options.labelMap['paragraph'] || editor.getLang("labelMap.paragraph") || '';
      list = editor.options['paragraph'] || [];
      if (utils.isEmptyObject(list)) {
        return;
      }
      var items = [];
      for (var i in list) {
        items.push({
          value: i,
          label: list[i] || editor.getLang("paragraph")[i],
          theme: editor.options.theme,
          renderLabelHtml: function () {
            return '<div class="edui-label %%-label"><span class="edui-for-' + this.value + '">' + (this.label || '') + '</span></div>';
          }
        })
      }
      var ui = new editorui.Combox({
        editor: editor,
        items: items,
        title: title,
        initValue: title,
        className: 'edui-for-paragraph',
        onselect: function (t, index) {
          editor.execCommand('Paragraph', this.items[index].value);
        },
        onbuttonclick: function () {
          this.showPopup();
        }
      });
      editorui.buttons['paragraph'] = ui;
      editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
        if (!uiReady) {
          var state = editor.queryCommandState('Paragraph');
          if (state == -1) {
            ui.setDisabled(true);
          } else {
            ui.setDisabled(false);
            var value = editor.queryCommandValue('Paragraph');
            var index = ui.indexByValue(value);
            if (index != -1) {
              ui.setValue(value);
            } else {
              ui.setValue(ui.initValue);
            }
          }
        }

      });
      return ui;
    };


    //自定义标题
    editorui.customstyle = function (editor) {
      var list = editor.options['customstyle'] || [],
        title = editor.options.labelMap['customstyle'] || editor.getLang("labelMap.customstyle") || '';
      if (!list.length) {
        return;
      }
      var langCs = editor.getLang('customstyle');
      for (var i = 0, items = [], t; t = list[i++];) {
        (function (t) {
          var ck = {};
          ck.label = t.label ? t.label : langCs[t.name];
          ck.style = t.style;
          ck.className = t.className;
          ck.tag = t.tag;
          items.push({
            label: ck.label,
            value: ck,
            theme: editor.options.theme,
            renderLabelHtml: function () {
              return '<div class="edui-label %%-label">' + '<' + ck.tag + ' ' + (ck.className ? ' class="' + ck.className + '"' : "")
                + (ck.style ? ' style="' + ck.style + '"' : "") + '>' + ck.label + "<\/" + ck.tag + ">"
                + '</div>';
            }
          });
        })(t);
      }

      var ui = new editorui.Combox({
        editor: editor,
        items: items,
        title: title,
        initValue: title,
        className: 'edui-for-customstyle',
        onselect: function (t, index) {
          editor.execCommand('customstyle', this.items[index].value);
        },
        onbuttonclick: function () {
          this.showPopup();
        },
        indexByValue: function (value) {
          for (var i = 0, ti; ti = this.items[i++];) {
            if (ti.label == value) {
              return i - 1
            }
          }
          return -1;
        }
      });
      editorui.buttons['customstyle'] = ui;
      editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
        if (!uiReady) {
          var state = editor.queryCommandState('customstyle');
          if (state == -1) {
            ui.setDisabled(true);
          } else {
            ui.setDisabled(false);
            var value = editor.queryCommandValue('customstyle');
            var index = ui.indexByValue(value);
            if (index != -1) {
              ui.setValue(value);
            } else {
              ui.setValue(ui.initValue);
            }
          }
        }

      });
      return ui;
    };
    editorui.inserttable = function (editor, iframeUrl, title) {
      title = editor.options.labelMap['inserttable'] || editor.getLang("labelMap.inserttable") || '';
      var ui = new editorui.TableButton({
        editor: editor,
        title: title,
        label: editor.options.labelMap['inserttable'] || editor.getLang("labelMap.inserttable") || '',
        showText: true,
        className: 'edui-for-inserttable',
        onpicktable: function (t, numCols, numRows) {
          editor.execCommand('InsertTable', { numRows: numRows, numCols: numCols, border: 1 });
        },
        onbuttonclick: function () {
          this.showPopup();
        }
      });
      editorui.buttons['inserttable'] = ui;
      editor.addListener('selectionchange', function () {
        ui.setDisabled(editor.queryCommandState('inserttable') == -1);
      });
      return ui;
    };

    editorui.lineheight = function (editor) {
      var val = editor.options.lineheight || [];
      if (!val.length) {
        return;
      }
      for (var i = 0, ci, items = []; ci = val[i++];) {
        items.push({
          //todo:写死了
          label: ci,
          value: ci,
          theme: editor.options.theme,
          onclick: function () {
            editor.execCommand("lineheight", this.value);
          }
        })
      }
      var ui = new editorui.MenuButton({
        editor: editor,
        className: 'edui-for-lineheight',
        title: editor.options.labelMap['lineheight'] || editor.getLang("labelMap.lineheight") || '',
        items: items,
        onbuttonclick: function () {
          var value = editor.queryCommandValue('LineHeight') || this.value;
          editor.execCommand("LineHeight", value);
        }
      });
      editorui.buttons['lineheight'] = ui;
      editor.addListener('selectionchange', function () {
        var state = editor.queryCommandState('LineHeight');
        if (state == -1) {
          ui.setDisabled(true);
        } else {
          ui.setDisabled(false);
          var value = editor.queryCommandValue('LineHeight');
          value && ui.setValue((value + '').replace(/cm/, ''));
          ui.setChecked(state)
        }
      });
      return ui;
    };

    var rowspacings = ['top', 'bottom'];
    for (var r = 0, ri; ri = rowspacings[r++];) {
      (function (cmd) {
        editorui['rowspacing' + cmd] = function (editor) {
          var val = editor.options['rowspacing' + cmd] || [];
          if (!val.length) {
            return null;
          }
          for (var i = 0, ci, items = []; ci = val[i++];) {
            items.push({
              label: ci,
              value: ci,
              theme: editor.options.theme,
              onclick: function () {
                editor.execCommand("rowspacing", this.value, cmd);
              }
            })
          }
          var ui = new editorui.MenuButton({
            editor: editor,
            className: 'edui-for-rowspacing' + cmd,
            title: editor.options.labelMap['rowspacing' + cmd] || editor.getLang("labelMap.rowspacing" + cmd) || '',
            items: items,
            onbuttonclick: function () {
              var value = editor.queryCommandValue('rowspacing', cmd) || this.value;
              editor.execCommand("rowspacing", value, cmd);
            }
          });
          editorui.buttons[cmd] = ui;
          editor.addListener('selectionchange', function () {
            var state = editor.queryCommandState('rowspacing', cmd);
            if (state == -1) {
              ui.setDisabled(true);
            } else {
              ui.setDisabled(false);
              var value = editor.queryCommandValue('rowspacing', cmd);
              value && ui.setValue((value + '').replace(/%/, ''));
              ui.setChecked(state)
            }
          });
          return ui;
        }
      })(ri)
    }

    //有序，无序列表
    var lists = ['insertorderedlist', 'insertunorderedlist'];
    for (var l = 0, cl; cl = lists[l++];) {
      (function (cmd) {
        editorui[cmd] = function (editor) {
          var vals = editor.options[cmd],
            _onMenuClick = function () {
              editor.execCommand(cmd, this.value);
            }, items = [];
          for (var i in vals) {
            items.push({
              label: vals[i] || editor.getLang()[cmd][i] || "",
              value: i,
              theme: editor.options.theme,
              onclick: _onMenuClick
            })
          }
          var ui = new editorui.MenuButton({
            editor: editor,
            className: 'edui-for-' + cmd,
            title: editor.getLang("labelMap." + cmd) || '',
            'items': items,
            onbuttonclick: function () {
              var value = editor.queryCommandValue(cmd) || this.value;
              editor.execCommand(cmd, value);
            }
          });
          editorui.buttons[cmd] = ui;
          editor.addListener('selectionchange', function () {
            var state = editor.queryCommandState(cmd);
            if (state == -1) {
              ui.setDisabled(true);
            } else {
              ui.setDisabled(false);
              var value = editor.queryCommandValue(cmd);
              ui.setValue(value);
              ui.setChecked(state)
            }
          });
          return ui;
        };
      })(cl)
    }

    editorui.fullscreen = function (editor, title) {
      title = editor.options.labelMap['fullscreen'] || editor.getLang("labelMap.fullscreen") || '';
      var ui = new editorui.Button({
        className: 'edui-for-fullscreen',
        title: title,
        theme: editor.options.theme,
        onclick: function () {
          if (editor.ui) {
            editor.ui.setFullScreen(!editor.ui.isFullScreen());
          }
          this.setChecked(editor.ui.isFullScreen());
        }
      });
      editorui.buttons['fullscreen'] = ui;
      editor.addListener('selectionchange', function () {
        var state = editor.queryCommandState('fullscreen');
        ui.setDisabled(state == -1);
        ui.setChecked(editor.ui.isFullScreen());
      });
      return ui;
    };

    // 表情
    // editorui["emotion"] = function (editor, iframeUrl) {
    //   var cmd = "emotion";
    //   var ui = new editorui.MultiMenuPop({
    //     title: editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd + "") || '',
    //     editor: editor,
    //     className: 'edui-for-' + cmd,
    //     iframeUrl: editor.ui.mapUrl(iframeUrl || (editor.options.iframeUrlMap || {})[cmd] || iframeUrlMap[cmd])
    //   });
    //   editorui.buttons[cmd] = ui;

    //   editor.addListener('selectionchange', function () {
    //     ui.setDisabled(editor.queryCommandState(cmd) == -1)
    //   });
    //   return ui;
    // };

    // editorui.autotypeset = function (editor) {
    //   var ui = new editorui.AutoTypeSetButton({
    //     editor: editor,
    //     title: editor.options.labelMap['autotypeset'] || editor.getLang("labelMap.autotypeset") || '',
    //     className: 'edui-for-autotypeset',
    //     onbuttonclick: function () {
    //       editor.execCommand('autotypeset')
    //     }
    //   });
    //   editorui.buttons['autotypeset'] = ui;
    //   editor.addListener('selectionchange', function () {
    //     ui.setDisabled(editor.queryCommandState('autotypeset') == -1);
    //   });
    //   return ui;
    // };

    /* 简单上传插件 */
    editorui["simpleupload"] = function (editor) {
      var name = 'simpleupload',
        ui = new editorui.Button({
          className: 'edui-for-' + name,
          title: editor.options.labelMap[name] || editor.getLang("labelMap." + name) || '',
          label: editor.options.labelMap[name] || editor.getLang("labelMap." + name) || '',
          onclick: function () {
          },
          theme: editor.options.theme,
          showText: true
        });
      editorui.buttons[name] = ui;
      editor.addListener('ready', function () {
        var b = ui.getDom('body'),
          iconSpan = b.children[0];
        editor.fireEvent('simpleuploadbtnready', iconSpan);
      });
      editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
        var state = editor.queryCommandState(name);
        if (state == -1) {
          ui.setDisabled(true);
          ui.setChecked(false);
        } else {
          if (!uiReady) {
            ui.setDisabled(false);
            ui.setChecked(state);
          }
        }
      });
      return ui;
    };

  })();


  // adapter/editor.js
  ///import core
  ///commands 全屏
  ///commandsName FullScreen
  ///commandsTitle  全屏
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      UIBase = baidu.editor.ui.UIBase,
      domUtils = baidu.editor.dom.domUtils;
    var nodeStack = [];

    function EditorUI(options) {
      this.initOptions(options);
      this.initEditorUI();
    }

    EditorUI.prototype = {
      uiName: 'editor',
      initEditorUI: function () {
        this.editor.ui = this;
        this._dialogs = {};
        this.initUIBase();
        this._initToolbars();
        var editor = this.editor,
          me = this;

        editor.addListener('ready', function () {
          //提供getDialog方法
          editor.getDialog = function (name) {
            return editor.ui._dialogs[name + "Dialog"];
          };
          domUtils.on(editor.window, 'scroll', function (evt) {
            baidu.editor.ui.Popup.postHide(evt);
          });
          //提供编辑器实时宽高(全屏时宽高不变化)
          editor.ui._actualFrameWidth = editor.options.initialFrameWidth;

          AX.browser.ie && AX.browser.version === 6 && editor.container.ownerDocument.execCommand("BackgroundImageCache", false, true);

          //display bottom-bar label based on config
          if (editor.options.elementPathEnabled) {
            editor.ui.getDom('elementpath').innerHTML = '<div class="edui-editor-breadcrumb">' + editor.getLang("elementPathTip") + ':</div>';
          }
          if (editor.options.wordCount) {
            function countFn() {
              setCount(editor, me);
              domUtils.un(editor.document, "click", arguments.callee);
            }

            domUtils.on(editor.document, "click", countFn);
            editor.ui.getDom('wordcount').innerHTML = editor.getLang("wordCountTip");
          }
          editor.ui._scale();
          if (editor.options.scaleEnabled) {
            if (editor.autoHeightEnabled) {
              editor.disableAutoHeight();
            }
            me.enableScale();
          } else {
            me.disableScale();
          }
          if (!editor.options.elementPathEnabled && !editor.options.wordCount && !editor.options.scaleEnabled) {
            editor.ui.getDom('elementpath').style.display = "none";
            editor.ui.getDom('wordcount').style.display = "none";
            editor.ui.getDom('scale').style.display = "none";
          }

          if (!editor.selection.isFocus()) {
            return;
          }
          editor.fireEvent('selectionchange', false, true);

        });

        editor.addListener('mousedown', function (t, evt) {
          var el = evt.target || evt.srcElement;
          baidu.editor.ui.Popup.postHide(evt, el);
          baidu.editor.ui.ShortCutMenu.postHide(evt);

        });
        editor.addListener("delcells", function () {
          if (AX.ui['edittip']) {
            new AX.ui['edittip'](editor);
          }
          editor.getDialog('edittip').open();
        });

        var pastePop, isPaste = false, timer;
        // editor.addListener("afterpaste", function () {
        //   if (editor.queryCommandState('pasteplain')) {
        //     return;
        //   }
        //   if (baidu.editor.ui.PastePicker) {
        //     pastePop = new baidu.editor.ui.Popup({
        //       content: new baidu.editor.ui.PastePicker({ editor: editor }),
        //       editor: editor,
        //       className: 'edui-wordpastepop'
        //     });
        //     pastePop.render();
        //   }
        //   isPaste = true;
        // });

        editor.addListener("afterinserthtml", function () {
          clearTimeout(timer);
          timer = setTimeout(function () {
            if (pastePop && (isPaste || editor.ui._isTransfer)) {
              if (pastePop.isHidden()) {
                var span = domUtils.createElement(editor.document, 'span', {
                  'style': "line-height:0px;",
                  'innerHTML': '\ufeff'
                }),
                  range = editor.selection.getRange();
                range.insertNode(span);
                console.log(range)
                var tmp = getDomNode(span, 'firstChild', 'previousSibling');
                tmp && pastePop.showAnchor(tmp.nodeType == 3 ? tmp.parentNode : tmp);
                domUtils.remove(span);
              } else {
                pastePop.show();
              }
              delete editor.ui._isTransfer;
              isPaste = false;
            }
          }, 200)
        });
        editor.addListener('contextmenu', function (t, evt) {
          baidu.editor.ui.Popup.postHide(evt);
        });
        editor.addListener('keydown', function (t, evt) {
          if (pastePop) {
            pastePop.dispose(evt);
          }
          var keyCode = evt.keyCode || evt.which;
          if (evt.altKey && keyCode == 90) {
            AX.ui.buttons['fullscreen'].onclick();
          }
        });
        editor.addListener('wordcount', function (type) {
          setCount(this, me);
        });

        function setCount(editor, ui) {
          editor.setOpt({
            wordCount: true,
            maximumWords: 10000,
            wordCountMsg: editor.options.wordCountMsg || editor.getLang("wordCountMsg"),
            wordOverFlowMsg: editor.options.wordOverFlowMsg || editor.getLang("wordOverFlowMsg")
          });
          var opt = editor.options,
            max = opt.maximumWords,
            msg = opt.wordCountMsg,
            errMsg = opt.wordOverFlowMsg,
            countDom = ui.getDom('wordcount');
          if (!opt.wordCount) {
            return;
          }
          var count = editor.getContentLength(true);
          if (count > max) {
            countDom.innerHTML = errMsg;
            editor.fireEvent("wordcountoverflow");
          } else {
            countDom.innerHTML = msg.replace("{#leave}", max - count).replace("{#count}", count);
          }
        }

        editor.addListener('selectionchange', function () {
          if (editor.options.elementPathEnabled) {
            me[(editor.queryCommandState('elementpath') == -1 ? 'dis' : 'en') + 'ableElementPath']()
          }
          if (editor.options.scaleEnabled) {
            me[(editor.queryCommandState('scale') == -1 ? 'dis' : 'en') + 'ableScale']();

          }
        });
        var popup = new baidu.editor.ui.Popup({
          editor: editor,
          content: '',
          className: 'edui-bubble',
          _onEditButtonClick: function () {
            this.hide();
            editor.ui._dialogs.linkDialog.open();
          },
          _onImgEditButtonClick: function (name) {
            this.hide();
            editor.ui._dialogs[name] && editor.ui._dialogs[name].open();

          },
          _onImgSetFloat: function (value) {
            this.hide();
            editor.execCommand("imagefloat", value);

          },
          _setIframeAlign: function (value) {
            var frame = popup.anchorEl;
            var newFrame = frame.cloneNode(true);
            switch (value) {
              case -2:
                newFrame.setAttribute("align", "");
                break;
              case -1:
                newFrame.setAttribute("align", "left");
                break;
              case 1:
                newFrame.setAttribute("align", "right");
                break;
            }
            frame.parentNode.insertBefore(newFrame, frame);
            domUtils.remove(frame);
            popup.anchorEl = newFrame;
            popup.showAnchor(popup.anchorEl);
          },
          _updateIframe: function () {
            var frame = editor._iframe = popup.anchorEl;
            if (domUtils.hasClass(frame, 'ueditor_baidumap')) {
              editor.selection.getRange().selectNode(frame).select();
              editor.ui._dialogs.mapDialog.open();
              popup.hide();
            } else {
              editor.ui._dialogs.insertframeDialog.open();
              popup.hide();
            }
          },
          _saveLib: function () { // 存入图片库
            console.log(this);
            if (typeof editor.options.saveImgLib == "function") {
              var reg = /[^\/]+(?!.*\/)/;
              var src = this.anchorEl.getAttribute('src');
              var alt = this.anchorEl.getAttribute('src').match(reg);
              editor.options.saveImgLib({
                src: src,
                id: alt[0]
              });
            } else {
              alert(me.getLang("ax.nosaveImgLib"));
            }
          },
          _delete: function () {
            var self = this;
            self.editor.window.confirmMsg(self.editor.getLang('ax.delCtrlTip'), function (rsl) {
              if (!rsl) {
                return;
              }
              var targetDom = self.anchorEl;//获取根节点元素，并删除
              if (targetDom.getAttribute('axplugins') === null && targetDom.tagName != "IMG") {
                targetDom = targetDom.parentNode;
              }
              baidu.editor.dom.domUtils.remove(targetDom, false);
            });
            this.hide();
          },
          _onRemoveButtonClick: function (cmdName) {
            editor.execCommand(cmdName);
            this.hide();
          },
          queryAutoHide: function (el) {
            if (el && el.ownerDocument == editor.document) {
              if (el.tagName.toLowerCase() == 'img' || domUtils.findParentByTagName(el, 'a', true)) {
                return el !== popup.anchorEl;
              }
            }
            return baidu.editor.ui.Popup.prototype.queryAutoHide.call(this, el);
          }
        });
        popup.render();
        if (editor.options.imagePopup) {
          editor.addListener('mouseover', function (t, evt) {
            evt = evt || window.event;
            var el = evt.target || evt.srcElement;
            if (editor.ui._dialogs.insertframeDialog && /iframe/ig.test(el.tagName)) {
              var html = popup.formatHtml(
                '<nobr>' + editor.getLang("property") + ': <span onclick=$$._setIframeAlign(-2) class="edui-clickable">' + editor.getLang("default") + '</span>&nbsp;&nbsp;<span onclick=$$._setIframeAlign(-1) class="edui-clickable">' + editor.getLang("justifyleft") + '</span>&nbsp;&nbsp;<span onclick=$$._setIframeAlign(1) class="edui-clickable">' + editor.getLang("justifyright") + '</span>&nbsp;&nbsp;' +
                ' <span onclick="$$._updateIframe( this);" class="edui-clickable">' + editor.getLang("modify") + '</span></nobr>');
              if (html) {
                popup.getDom('content').innerHTML = html;
                popup.anchorEl = el;
                popup.showAnchor(popup.anchorEl);
              } else {
                popup.hide();
              }
            }
          });
          editor.addListener('selectionchange', function (t, causeByUi) {
            if (!causeByUi) {
              return;
            }
            var html = '', str = "",
              img = editor.selection.getRange().getClosedNode(),
              dialogs = editor.ui._dialogs;
            if (img && img.tagName == 'IMG') {
              var dialogName = 'insertimageDialog';
              //自定义的医学表达式图片单独处理
              if (img.className.indexOf('medical-expression') != -1) {
                return;
              }
              if (img.className.indexOf("edui-faked-video") != -1 || img.className.indexOf("edui-upload-video") != -1) {
                dialogName = "insertvideoDialog"
              }
              if (img.className.indexOf("edui-faked-webapp") != -1) {
                dialogName = "webappDialog"
              }
              if (img.src.indexOf("http://api.map.baidu.com") != -1) {
                dialogName = "mapDialog"
              }
              if (img.className.indexOf("edui-faked-music") != -1) {
                dialogName = "musicDialog"
              }
              if (img.src.indexOf("http://maps.google.com/maps/api/staticmap") != -1) {
                dialogName = "gmapDialog"
              }
              if (img.getAttribute("anchorname")) {
                dialogName = "anchorDialog";
                html = popup.formatHtml(
                  '<nobr>' + editor.getLang("property") + ': <span onclick=$$._onImgEditButtonClick("anchorDialog") class="edui-clickable">' + editor.getLang("modify") + '</span>&nbsp;&nbsp;' +
                  '<span onclick=$$._onRemoveButtonClick(\'anchor\') class="edui-clickable">' + editor.getLang("delete") + '</span></nobr>');
              }
              if (img.getAttribute("word_img")) {
                //todo 放到dialog去做查询
                editor.word_img = [img.getAttribute("word_img")];
                dialogName = "wordimageDialog"
              }
              if (domUtils.hasClass(img, 'loadingclass') || domUtils.hasClass(img, 'loaderrorclass')) {
                dialogName = "";
              }
              if (!dialogs[dialogName]) {
                return;
              }
              str = '<nobr>' + editor.getLang("property") + ': ' +
                '<span onclick=$$._onImgSetFloat("none") class="edui-clickable">' + editor.getLang("default") + '</span>&nbsp;&nbsp;' +
                '<span onclick=$$._onImgSetFloat("left") class="edui-clickable">' + editor.getLang("justifyleft") + '</span>&nbsp;&nbsp;' +
                '<span onclick=$$._onImgSetFloat("right") class="edui-clickable">' + editor.getLang("justifyright") + '</span>&nbsp;&nbsp;' +
                '<span onclick=$$._onImgSetFloat("center") class="edui-clickable">' + editor.getLang("justifycenter") + '</span>&nbsp;&nbsp;' +
                '<span onclick="$$._onImgEditButtonClick(\'' + dialogName + '\');" class="edui-clickable">' + editor.getLang("modify") + '</span>&nbsp;&nbsp;' +
                '<span onclick="$$._saveLib( this);" class="edui-clickable">' + editor.getLang("savelib") + '</span>&nbsp;&nbsp;' +
                '<span onclick="$$._delete( this);" class="edui-clickable">' + editor.getLang("delete") + '</span></nobr>';

              !html && (html = popup.formatHtml(str))

            }
            if (editor.ui._dialogs.linkDialog) {
              var link = editor.queryCommandValue('link');
              var url;
              if (link && (url = link.getAttribute('_href') || link.getAttribute('href', 2))) {
                var txt = url;
                if (url.length > 30) {
                  txt = url.substring(0, 20) + "...";
                }
                if (html) {
                  html += '<div style="height:5px;"></div>'
                }
                html += popup.formatHtml(
                  '<nobr>' + editor.getLang("anthorMsg") + ': <a target="' + link.getAttribute("target") + '" href="' + url + '" title="' + url + '" >' + txt + '</a>' +
                  ' <span class="edui-clickable" onclick="$$._onEditButtonClick();">' + editor.getLang("modify") + '</span>' +
                  ' <span class="edui-clickable" onclick="$$._onRemoveButtonClick(\'unlink\');"> ' + editor.getLang("clear") + '</span></nobr>');
                popup.showAnchor(link);
              }
            }

            if (html) {
              popup.getDom('content').innerHTML = html;
              popup.anchorEl = img || link;
              popup.showAnchor(popup.anchorEl);
            } else {
              popup.hide();
            }
          });
        }

      },
      _initToolbars: function () {
        var editor = this.editor,
          toolbars = this.tabToolbars || [],
          activeTabNum = this.activeTabNum - 1 < 0 ? 0 : this.activeTabNum - 1,
          toolbarUis = [], tabToolbarStr = '<ul class="ax-toolbar-tab" id="ax-toolbar-tab">';
        console.log(toolbars);
        for (var i = 0; i < toolbars.length; i++) {
          var widgets = toolbars[i].widgets, tabId = editor.key + '-' + toolbars[i].id;
          tabToolbarStr += '<li class="' + (i == activeTabNum ? 'active' : '') + '" tabId="' + tabId + '">' + (editor.getLang('menugroup.' + toolbars[i].id) || toolbars[i].name) + '</li>';
          var toolbarUi = new baidu.editor.ui.Toolbar({ theme: editor.options.theme });
          for (var j = 0; j < widgets.length; j++) {
            var menus = widgets[j];
            for (var k = 0; k < menus.length; k++) {
              var toolbarItemObj = menus[k], toolbarItem = toolbarItemObj.id, toolbarItemUi = null;
              if (typeof toolbarItem == 'string') {
                toolbarItem = toolbarItem.toLowerCase();
                if (toolbarItem == '|') {
                  toolbarItem = 'Separator';
                }
                if (toolbarItem == 'breakline') {
                  toolbarItem = 'Breakline';
                }
                if (baidu.editor.ui[toolbarItem]) {
                  toolbarItemUi = new baidu.editor.ui[toolbarItem](editor);
                }
              } else {
                toolbarItemUi = toolbarItem;
              }
              if (toolbarItemUi && toolbarItemUi.id) {
                if (k == 0) {
                  if (j != widgets.length - 1) {
                    toolbarItemUi.isSplit = true;
                  }
                  toolbarItemUi.groupStart = true;
                }
                if (k == menus.length - 1) {
                  toolbarItemUi.groupEnd = tabId != true;
                  ;
                }
                toolbarItemUi.tabId = tabId;
                toolbarItemUi.hasBorder = toolbarItemObj.hasBorder;
                toolbarItemUi.iconOnly = toolbarItemObj.iconOnly && !toolbarItemObj.hasBorder;
                toolbarItemUi.title = editor.getLang('labelMap.' + toolbarItem) || toolbarItemObj.name || toolbarItemUi.title;
                toolbarItemUi.label = editor.getLang('labelMap.' + toolbarItem) || toolbarItemObj.name || toolbarItemUi.label;
                toolbarUi.add(toolbarItemUi);
              }
            }
          }
          toolbarUis[i] = toolbarUi;
        }
        tabToolbarStr += '</ul>';

        editor.ready(function () {
          var editorDom = document.getElementById(editor.key),
            toolbarDom = domUtils.getByClass('edui-editor-toolbarbox', editorDom)[0];
          if (domUtils.getByClass('ax-toolbar-tab', editorDom).length == 0) {
            toolbarDom.innerHTML = tabToolbarStr + toolbarDom.innerHTML;
            //添加菜单点击事件
            var tabs = domUtils.getByClass('ax-toolbar-tab', editorDom)[0].children;
            var tabContent = domUtils.getByClass('edui-editor-toolbarboxinner', editorDom)[0];
            if (tabContent) {
              var tabContents = tabContent.children;
              for (var i = 0; i < tabs.length; i++) {
                tabs[i].index = i;
                domUtils.bindEvent(tabs[i], 'click', function () {
                  for (var j = 0; j < tabs.length; j++) {
                    domUtils.removeClasses(tabs[j], 'active');
                    domUtils.showHide(tabContents[j], false);
                  }
                  domUtils.addClass(tabs[this.index], 'active');
                  domUtils.showHide(tabContents[this.index], true);
                });
              }
              tabContents[activeTabNum].setAttribute('olddisplay', 'block');
              domUtils.showHide(tabContents[activeTabNum], true);
            }

            //只有一行按钮时，可以通过showTabBar隐藏tab标签
            if (!!!this.options.showTabBar) {
              domUtils.getByClass('ax-toolbar-tab', editorDom)[0].style.display = 'none';
            }
          }
        })

        //接受外部定制的UI

        utils.each(AX._customizeUI, function (obj, key) {
          var itemUI, index;
          if (obj.id && obj.id != editor.key) {
            return false;
          }
          itemUI = obj.execFn.call(editor, editor, key);
          if (itemUI) {
            index = obj.index;
            if (index === undefined) {
              index = toolbarUi.items.length;
            }
            toolbarUi.add(itemUI, index)
          }
        });

        this.toolbars = toolbarUis;
      },
      getHtmlTpl: function () {
        return '<div id="##" class="%%">' +
          '<div id="##_toolbarbox" class="%%-toolbarbox">' +
          (this.toolbars.length ?
            '<div id="##_toolbarboxouter" class="%%-toolbarboxouter"><div class="%%-toolbarboxinner">' +
            this.renderToolbarBoxHtml() +
            '</div></div>' : '') +
          '<div id="##_toolbarmsg" class="%%-toolbarmsg" style="display:none;">' +
          '<div id = "##_upload_dialog" class="%%-toolbarmsg-upload" onclick="$$.showWordImageDialog();">' + this.editor.getLang("clickToUpload") + '</div>' +
          '<div class="%%-toolbarmsg-close" onclick="$$.hideToolbarMsg();">x</div>' +
          '<div id="##_toolbarmsg_label" class="%%-toolbarmsg-label"></div>' +
          '<div style="height:0;overflow:hidden;clear:both;"></div>' +
          '</div>' +
          '<div id="##_message_holder" class="%%-messageholder"></div>' +
          '</div>' +
          '<div id="##_iframeholder" class="%%-iframeholder">' +
          '</div>' +
          //modify wdcount by matao
          '<div id="##_bottombar" class="%%-bottomContainer"><table><tr>' +
          '<td id="##_elementpath" class="%%-bottombar"></td>' +
          '<td id="##_wordcount" class="%%-wordcount"></td>' +
          '<td id="##_scale" class="%%-scale"><div class="%%-icon"></div></td>' +
          '</tr></table></div>' +
          '<div id="##_scalelayer"></div>' +
          '</div>';
      },
      showWordImageDialog: function () {
        this._dialogs['wordimageDialog'].open();
      },
      renderToolbarBoxHtml: function () {
        var buff = [];
        for (var i = 0; i < this.toolbars.length; i++) {
          buff.push(this.toolbars[i].renderHtml());
        }
        return buff.join('');
      },
      setFullScreen: function (fullscreen) {

        var editor = this.editor,
          container = editor.container.parentNode.parentNode;
        if (this._fullscreen != fullscreen) {
          this._fullscreen = fullscreen;
          this.editor.fireEvent('beforefullscreenchange', fullscreen);
          if (baidu.editor.browser.gecko) {
            var bk = editor.selection.getRange().createBookmark();
          }
          if (fullscreen) {
            while (container.tagName != "BODY") {
              var position = baidu.editor.dom.domUtils.getComputedStyle(container, "position");
              nodeStack.push(position);
              container.style.position = "static";
              container = container.parentNode;
            }
            this._bakHtmlOverflow = document.documentElement.style.overflow;
            this._bakBodyOverflow = document.body.style.overflow;
            this._bakAutoHeight = this.editor.autoHeightEnabled;
            this._bakScrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);

            this._bakEditorContaninerWidth = editor.iframe.parentNode.offsetWidth;
            if (this._bakAutoHeight) {
              //当全屏时不能执行自动长高
              editor.autoHeightEnabled = false;
              this.editor.disableAutoHeight();
            }

            document.documentElement.style.overflow = 'hidden';
            //修复，滚动条不收起的问题

            window.scrollTo(0, window.scrollY);
            this._bakCssText = this.getDom().style.cssText;
            this._bakCssText1 = this.getDom('iframeholder').style.cssText;
            editor.iframe.parentNode.style.width = '';
            this._updateFullScreen();
          } else {
            while (container.tagName != "BODY") {
              container.style.position = nodeStack.shift();
              container = container.parentNode;
            }
            this.getDom().style.cssText = this._bakCssText;
            this.getDom('iframeholder').style.cssText = this._bakCssText1;
            if (this._bakAutoHeight) {
              editor.autoHeightEnabled = true;
              this.editor.enableAutoHeight();
            }

            document.documentElement.style.overflow = this._bakHtmlOverflow;
            document.body.style.overflow = this._bakBodyOverflow;
            editor.iframe.parentNode.style.width = this._bakEditorContaninerWidth + 'px';
            window.scrollTo(0, this._bakScrollTop);
          }
          if (browser.gecko && editor.body.contentEditable === 'true') {
            var input = document.createElement('input');
            document.body.appendChild(input);
            editor.body.contentEditable = false;
            setTimeout(function () {
              input.focus();
              setTimeout(function () {
                editor.body.contentEditable = true;
                editor.fireEvent('fullscreenchanged', fullscreen);
                editor.selection.getRange().moveToBookmark(bk).select(true);
                baidu.editor.dom.domUtils.remove(input);
                fullscreen && window.scroll(0, 0);
              }, 0)
            }, 0)
          }

          if (editor.body.contentEditable === 'true') {
            this.editor.fireEvent('fullscreenchanged', fullscreen);
            this.triggerLayout();
          }

        }
      },
      _updateFullScreen: function () {
        if (this._fullscreen) {
          var vpRect = uiUtils.getViewportRect(true);
          this.getDom().style.cssText = 'border:0;position:absolute;left:' + vpRect.left + 'px;top:' + (vpRect.top || this.editor.options.topOffset || 0) + 'px;width:' + vpRect.width + 'px;height:' + vpRect.height + 'px;z-index:' + (this.getDom().style.zIndex * 1 + 100);
          uiUtils.setViewportOffset(this.getDom(), { left: (vpRect.left || 0) + 'px', top: vpRect.top || this.editor.options.topOffset || 0 });
          this.editor.setHeight(vpRect.height - document.getElementById('ax-toolbar-tab').offsetHeight - this.getDom('toolbarboxouter').offsetHeight - this.getDom('bottombar').offsetHeight - (this.editor.options.topOffset || 0), true);
          //不手动调一下，会导致全屏失效
          if (browser.gecko) {
            try {
              window.onresize();
            } catch (e) {

            }

          }
        }
      },
      _updateElementPath: function () {
        var bottom = this.getDom('elementpath'), list;
        if (this.elementPathEnabled && (list = this.editor.queryCommandValue('elementpath'))) {

          var buff = [];
          for (var i = 0, ci; ci = list[i]; i++) {
            buff[i] = this.formatHtml('<span unselectable="on" onclick="$$.editor.execCommand(&quot;elementpath&quot;, &quot;' + i + '&quot;);">' + ci + '</span>');
          }
          bottom.innerHTML = '<div class="edui-editor-breadcrumb" onmousedown="return false;">' + this.editor.getLang("elementPathTip") + ': ' + buff.join(' &gt; ') + '</div>';

        } else {
          bottom.style.display = 'none'
        }
      },
      disableElementPath: function () {
        var bottom = this.getDom('elementpath');
        bottom.innerHTML = '';
        bottom.style.display = 'none';
        this.elementPathEnabled = false;

      },
      enableElementPath: function () {
        var bottom = this.getDom('elementpath');
        bottom.style.display = '';
        this.elementPathEnabled = true;
        this._updateElementPath();
      },
      _scale: function () {
        var doc = document,
          editor = this.editor,
          editorHolder = editor.container,
          editorDocument = editor.document,
          toolbarBox = this.getDom("toolbarbox"),
          bottombar = this.getDom("bottombar"),
          scale = this.getDom("scale"),
          scalelayer = this.getDom("scalelayer");

        var isMouseMove = false,
          position = null,
          minEditorHeight = 0,
          minEditorWidth = editor.options.minFrameWidth,
          pageX = 0,
          pageY = 0,
          scaleWidth = 0,
          scaleHeight = 0;

        function down() {
          position = domUtils.getXY(editorHolder);

          if (!minEditorHeight) {
            minEditorHeight = editor.options.minFrameHeight + toolbarBox.offsetHeight + bottombar.offsetHeight;
          }

          scalelayer.style.cssText = "position:absolute;left:0;display:;top:0;background-color:#41ABFF;opacity:0.4;filter: Alpha(opacity=40);width:" + editorHolder.offsetWidth + "px;height:"
            + editorHolder.offsetHeight + "px;z-index:" + (editor.options.zIndex + 1);

          domUtils.on(doc, "mousemove", move);
          domUtils.on(editorDocument, "mouseup", up);
          domUtils.on(doc, "mouseup", up);
        }

        var me = this;
        //by xuheng 全屏时关掉缩放
        this.editor.addListener('fullscreenchanged', function (e, fullScreen) {
          if (fullScreen) {
            me.disableScale();

          } else {
            if (me.editor.options.scaleEnabled) {
              me.enableScale();
              var tmpNode = me.editor.document.createElement('span');
              me.editor.body.appendChild(tmpNode);
              me.editor.body.style.height = Math.max(domUtils.getXY(tmpNode).y, me.editor.iframe.offsetHeight - 20) + 'px';
              domUtils.remove(tmpNode)
            }
          }
        });

        function move(event) {
          clearSelection();
          var e = event || window.event;
          pageX = e.pageX || doc.documentElement.scrollLeft + e.clientX;
          pageY = e.pageY || doc.documentElement.scrollTop + e.clientY;
          scaleWidth = pageX - position.x;
          scaleHeight = pageY - position.y;

          if (scaleWidth >= minEditorWidth) {
            isMouseMove = true;
            scalelayer.style.width = scaleWidth + 'px';
          }
          if (scaleHeight >= minEditorHeight) {
            isMouseMove = true;
            scalelayer.style.height = scaleHeight + "px";
          }
        }

        function up() {
          if (isMouseMove) {
            isMouseMove = false;
            editor.ui._actualFrameWidth = scalelayer.offsetWidth - 2;
            editorHolder.style.width = editor.ui._actualFrameWidth + 'px';

            editor.setHeight(scalelayer.offsetHeight - bottombar.offsetHeight - toolbarBox.offsetHeight - 2, true);
          }
          if (scalelayer) {
            scalelayer.style.display = "none";
          }
          clearSelection();
          domUtils.un(doc, "mousemove", move);
          domUtils.un(editorDocument, "mouseup", up);
          domUtils.un(doc, "mouseup", up);
        }

        function clearSelection() {
          if (browser.ie) {
            doc.selection.clear();
          } else {
            window.getSelection().removeAllRanges();
          }
        }

        this.enableScale = function () {
          //trace:2868
          if (editor.queryCommandState("source") == 1) {
            return;
          }
          scale.style.display = "";
          this.scaleEnabled = true;
          domUtils.on(scale, "mousedown", down);
        };
        this.disableScale = function () {
          scale.style.display = "none";
          this.scaleEnabled = false;
          domUtils.un(scale, "mousedown", down);
        };
      },
      isFullScreen: function () {
        return this._fullscreen;
      },
      postRender: function () {
        UIBase.prototype.postRender.call(this);
        for (var i = 0; i < this.toolbars.length; i++) {
          this.toolbars[i].postRender();
        }
        var me = this;
        var timerId,
          domUtils = baidu.editor.dom.domUtils,
          updateFullScreenTime = function () {
            clearTimeout(timerId);
            timerId = setTimeout(function () {
              me._updateFullScreen();
            });
          };
        domUtils.on(window, 'resize', updateFullScreenTime);

        me.addListener('destroy', function () {
          domUtils.un(window, 'resize', updateFullScreenTime);
          clearTimeout(timerId);
        })
      },
      showToolbarMsg: function (msg, flag) {
        this.getDom('toolbarmsg_label').innerHTML = msg;
        this.getDom('toolbarmsg').style.display = '';
        //
        if (!flag) {
          var w = this.getDom('upload_dialog');
          w.style.display = 'none';
        }
      },
      hideToolbarMsg: function () {
        this.getDom('toolbarmsg').style.display = 'none';
      },
      mapUrl: function (url) {
        return url ? url.replace('~/', this.editor.options.AXEDITOR_HOME_URL || '') : ''
      },
      triggerLayout: function () {
        var dom = this.getDom();
        if (dom.style.zoom == '1') {
          dom.style.zoom = '100%';
        } else {
          dom.style.zoom = '1';
        }
      }
    };
    utils.inherits(EditorUI, baidu.editor.ui.UIBase);


    var instances = {};


    AX.ui.Editor = function (options) {
      var editor = new AX.Editor(options);
      editor.options.editor = editor;
      utils.loadFile(document, {
        href: editor.options.themePath + editor.options.theme + "/css/axeditor.css",
        tag: "link",
        type: "text/css",
        rel: "stylesheet"
      });

      var oldRender = editor.render;
      editor.render = function (holder) {
        if (holder.constructor === String) {
          editor.key = holder;
          instances[holder] = editor;
        }
        utils.domReady(function () {
          editor.langIsReady ? renderUI() : editor.addListener("langReady", renderUI);

          function renderUI() {
            editor.setOpt({
              labelMap: editor.options.labelMap || editor.getLang('labelMap')
            });
            new EditorUI(editor.options);
            if (holder) {
              if (holder.constructor === String) {
                holder = document.getElementById(holder);
              }
              holder && holder.getAttribute('name') && (editor.options.textarea = holder.getAttribute('name'));
              if (holder && /script|textarea|div/ig.test(holder.tagName)) {
                var newDiv = document.createElement('div');
                holder.parentNode.insertBefore(newDiv, holder);
                var cont = holder.value || holder.innerHTML;
                editor.options.initialContent = /^[\t\r\n ]*$/.test(cont) ? editor.options.initialContent :
                  cont.replace(/>[\n\r\t]+([ ]{4})+/g, '>')
                    .replace(/[\n\r\t]+([ ]{4})+</g, '<')
                    .replace(/>[\n\r\t]+</g, '><');
                holder.className && (newDiv.className = holder.className);
                holder.style.cssText && (newDiv.style.cssText = holder.style.cssText);
                if (/textarea/i.test(holder.tagName)) {
                  editor.textarea = holder;
                  editor.textarea.style.display = 'none';


                } else {
                  holder.parentNode.removeChild(holder);


                }
                if (holder.id) {
                  newDiv.id = holder.id;
                  domUtils.removeAttributes(holder, 'id');
                }
                holder = newDiv;
                holder.innerHTML = '';
              }

            }
            domUtils.addClass(holder, "edui-" + editor.options.theme);
            editor.ui.render(holder);
            var opt = editor.options;
            //给实例添加一个编辑器的容器引用
            editor.container = editor.ui.getDom();
            var parents = domUtils.findParents(holder, true);
            var displays = [];
            for (var i = 0, ci; ci = parents[i]; i++) {
              displays[i] = ci.style.display;
              ci.style.display = 'block'
            }
            if (!holder) {
              return;
              // holder=this.document.getElementById(editor.key);
            }
            if (opt.initialFrameWidth) {
              opt.minFrameWidth = opt.initialFrameWidth;
            } else {
              opt.minFrameWidth = opt.initialFrameWidth = '100%';//holder.offsetWidth;
              var styleWidth = holder.style.width;
              if (/%$/.test(styleWidth)) {
                opt.initialFrameWidth = styleWidth;
              }
            }
            if (opt.initialFrameHeight) {
              opt.minFrameHeight = opt.initialFrameHeight;
            } else {
              opt.initialFrameHeight = opt.minFrameHeight = holder.offsetHeight;
            }
            for (var i = 0, ci; ci = parents[i]; i++) {
              ci.style.display = displays[i]
            }
            //编辑器最外容器设置了高度，会导致，编辑器不占位
            //todo 先去掉，没有找到原因
            if (holder.style.height) {
              holder.style.height = ''
            }
            editor.container.style.width = opt.initialFrameWidth + (/%$/.test(opt.initialFrameWidth) ? '' : 'px');
            editor.container.style.zIndex = opt.zIndex;
            oldRender.call(editor, editor.ui.getDom('iframeholder'), opt);
            editor.fireEvent("afteruiready");
          }
        })
      };
      return editor;
    };


    /**
     * @file
     * @name AX
     * @short AX
     * @desc UEditor的顶部命名空间
     */
    /**
     * @name getEditor
     * @since 1.2.4+
     * @grammar AX.getEditor(id,[opt])  =>  Editor实例
     * @desc 提供一个全局的方法得到编辑器实例
     *
     * * ''id''  放置编辑器的容器id, 如果容器下的编辑器已经存在，就直接返回
     * * ''opt'' 编辑器的可选参数
     * @example
     *  AX.getEditor('containerId',{onready:function(){//创建一个编辑器实例
     *      this.setContent('hello')
     *  }});
     *  AX.getEditor('containerId'); //返回刚创建的实例
     *
     */
    AX.getEditor = function (id, opt) {
      var editor = instances[id];
      if (!editor) {
        editor = instances[id] = new AX.ui.Editor(opt);
        editor.render(id, opt);
      }
      return editor;
    };


    AX.delEditor = function (id) {
      var editor;
      if (editor = instances[id]) {
        editor.key && editor.destroy();
        delete instances[id]
      }
    };

    AX.registerUI = function (uiName, fn, index, editorId) {
      utils.each(uiName.split(/\s+/), function (name) {
        AX._customizeUI[name] = {
          id: editorId,
          execFn: fn,
          index: index
        };
      })

    }

  })();

  // adapter/message.js
  AX.registerUI('message', function (editor) {

    var editorui = baidu.editor.ui;
    var Message = editorui.Message;
    var holder;
    var _messageItems = [];
    var me = editor;

    me.addListener('ready', function () {
      holder = document.getElementById(me.ui.id + '_message_holder');
      updateHolderPos();
      setTimeout(function () {
        updateHolderPos();
      }, 500);
    });

    me.addListener('showmessage', function (type, opt) {
      opt = utils.isString(opt) ? {
        'content': opt
      } : opt;
      var message = new Message({
        'timeout': opt.timeout,
        'type': opt.type,
        'content': opt.content,
        'keepshow': opt.keepshow,
        'editor': me
      }),
        mid = opt.id || 'msg_' + (+new Date()).toString(36);
      message.render(holder);
      _messageItems[mid] = message;
      message.reset(opt);
      updateHolderPos();
      return mid;
    });

    me.addListener('updatemessage', function (type, id, opt) {
      opt = utils.isString(opt) ? {
        'content': opt
      } : opt;
      var message = _messageItems[id];
      message.render(holder);
      message && message.reset(opt);
    });

    me.addListener('hidemessage', function (type, id) {
      var message = _messageItems[id];
      message && message.hide();
    });

    function updateHolderPos() {
      var toolbarbox = me.ui.getDom('toolbarbox');
      if (!holder) {
        return;
      }
      if (toolbarbox) {
        holder.style.top = toolbarbox.offsetHeight + 3 + 'px';
      }
      holder.style.zIndex = Math.max(me.options.zIndex, me.iframe.style.zIndex) + 1;
    }

  });


  // adapter/autosave.js
  AX.registerUI('autosave', function (editor) {
    var timer = null, uid = null;
    editor.on('afterautosave', function () {
      clearTimeout(timer);

      timer = setTimeout(function () {
        if (uid) {
          editor.trigger('hidemessage', uid);
        }
        uid = editor.trigger('showmessage', {
          content: editor.getLang('autosave.success'),
          timeout: 2000
        });

      }, 2000)
    })

  });


})();

/* eslint-disable */
var errTipNum = 0;

//日期格式化
Date.prototype.format = function (fmt) {
  var o = {
    "M+": this.getMonth() + 1, //月份
    "d+": this.getDate(), //日
    "h+": this.getHours(), //小时
    "m+": this.getMinutes(), //分
    "s+": this.getSeconds(), //秒
    "q+": Math.floor((this.getMonth() + 3) / 3), //季度
    S: this.getMilliseconds() //毫秒
  };
  if (/(y+)/.test(fmt))
    fmt = fmt.replace(
      RegExp.$1,
      (this.getFullYear() + "").substr(4 - RegExp.$1.length)
    );
  for (var k in o)
    if (new RegExp("(" + k + ")").test(fmt))
      fmt = fmt.replace(
        RegExp.$1,
        RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length)
      );
  return fmt;
};

/***************************** 工具方法 *****************************/
window.axTools = {
  /**
   * uuid 的获取
   * @returns {string}
   */
  uuidv4: function () {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
      var r = (Math.random() * 16) | 0,
        v = c == "x" ? r : (r & 0x3) | 0x8;
      return v.toString(16);
    });
  },
  /**
   * 没有指定元素key添加，有指定元素key删除
   * @param {Array} {  key:''}
   * @param {Object}   {  key:'',value:''} 需要判断的Object
   * @param {Array}  元素绑定的 allData
   * @return {Object} keyList valueList
   */
  getKeyValueListHandle: function (keyArr, Object, allData) {
    var valueList = [];
    var index = keyArr.indexOf(Object.key);
    if (index > -1) {
      keyArr.splice(index, 1);
    } else {
      keyArr.push(Object.key);
    }

    AX.utils.each(allData, function (item, index) {
      if (keyArr.indexOf(item.key) > -1) {
        valueList.push(item.value);
      }
    });
    return {
      keyList: keyArr,
      valueList: valueList
    };
  },

  /**
   * @Description: 数字下拉框中插入 select
   * @param {Array} data { text:''}
   * @param {wrapNode} wrapNode 外层节点
   */
  numIptSelect: function (data, wrapNode) {
    var dropHtml;
    var html;
    var selectText = data[0].text;
    if (data.length !== 0) {
      dropHtml = '<ul class="drop">';
      for (var i = 0; i < data.length; i++) {
        dropHtml +=
          '<li value="' + data[i].text + '">' + data[i].text + "</li>";
      }
      dropHtml += "</ul>";
    } else {
      return;
    }

    AX.utils.each(data, function (value, item) {
      if (value.isSelect) {
        selectText = value.text;
      }
    });
    html =
      '<div class="numInpSelectWrap" id="numInpSelectWrap">\n' +
      '<div class="select">' +
      selectText +
      "</div>\n" +
      dropHtml +
      "</div>";
    var newnode = document.createElement("div");
    newnode.innerHTML = html;
    wrapNode.innerHTML = "";
    wrapNode.appendChild(newnode);
    setTimeout(function (e) {
      var numInpSelectWrap = document.getElementById("numInpSelectWrap");
      var selectTar = numInpSelectWrap.getElementsByTagName("div")[0];
      var ulDrop = numInpSelectWrap.getElementsByTagName("ul")[0];
      var liList = ulDrop.getElementsByTagName("li");
      selectTar.onclick = function () {
        if (ulDrop.style.display === "none" || ulDrop.style.display === "") {
          ulDrop.style.display = "block";
        } else if (ulDrop.style.display === "block") {
          ulDrop.style.display = "none";
        }
        cancelBubble(e);
      };

      document.onclick = function (e) {
        var evt = e ? e : window.event;
        var numInpSelectWrap = AX.dom.domUtils.findParent(
          evt.target,
          function (node) {
            return node.tagName === "DIV" && node.id === "numInpSelectWrap";
          },
          true
        );
        if (numInpSelectWrap === null) {
          ulDrop.style.display = "none";
        }
        cancelBubble(evt);
      };

      for (var i = 0; i < liList.length; i++) {
        (function (i) {
          liList[i].onclick = function (e) {
            selectTar.innerText = liList[i].getAttribute("value");
            ulDrop.style.display = "none";
            cancelBubble(e);
          };
        })(i);
      }
    }, 10);

    function cancelBubble(e) {
      window.event ? (window.event.cancelBubble = true) : e.stopPropagation();
    }
  },
  /**
   * @Description:
   * @param {String} wrapNode 元素外围节点
   * @param {String} input 节点
   * @param {String} options 设置选项
   */
  numberIptHandler: function (wrapNode, numbIptNode, options) {
    var currentValue = options.currentValue;
    var precision = options.precision; //数字精度
    var max = options.max || Infinity;
    var min = options.min || -Infinity;
    var iptstep = options.iptstep || 1;

    setValue(numbIptNode, currentValue);
    numbIptNode.onkeydown = function (e) {
      var targetVal = Number(e.target.value);
      if (isNaN(targetVal)) {
        return;
      }
      if (e.keyCode === 38) {
        changeStep("up", e.target);
      } else if (e.keyCode === 40) {
        changeStep("down", e.target);
      }
    };

    numbIptNode.onkeyup = function (e) {
      //数字验证
      var startVal = e.target.value.trim();
      // 修复输入0 时的问题
      if (startVal.lastIndexOf(".0") > -1) {
        return;
      }
      if (startVal.match(/^\-?\.?$|\.$/)) {
        //.和负号-
        return;
      } else {
        var val = Number(startVal);
        if (!!isNaN(val)) {
          // if (!isNaN(val)) {
          //   setValue(event.target, val);
          // } else {
          if (!isNaN(parseInt(startVal))) {
            //如果startVal 是 1c 的形式 取1 ，如果是c的形式 变成空
            event.target.value = parseInt(startVal);
          } else {
            event.target.value = "";
          }
        }
      }
    };

    numbIptNode.onblur = function () { };

    var handlerList = getElementsByClassName(wrapNode, "input-number-handler");
    for (var i = 0; i < handlerList.length; i++) {
      (function (i) {
        handlerList[i].onclick = function (e) {
          var node = e.target;
          var type = node.getAttribute("type");
          if (type === "up") {
            changeStep("up", numbIptNode);
          } else if (type === "down") {
            changeStep("down", numbIptNode);
          }
          e.stopPropagation();
        };
      })(i);
    }

    function setValue(node, val) {
      if (val && !isNaN(precision) && precision) {
        val = Number(Number(val).toFixed(precision));
      }
      if (val !== null) {
        if (max && val > max) {
          val = max;
        } else if (min && val < min) {
          val = min;
        }
      }
      node.value = isNaN(val)?"":val;
    }

    function changeStep(type, node) {
      var targetVal = Number(node.value);
      var step = Number(iptstep),
        val = Number(node.value);
      if (!isNaN(targetVal)) {
        if (type === "up") {
          if (addNum(targetVal, step) <= max) {
            val = targetVal;
          } else {
            return false;
          }
        } else if (type === "down") {
          if (addNum(targetVal, -step) >= min) {
            val = targetVal;
          } else {
            return false;
          }
        }
      }
      if (type === "up") {
        val = addNum(val, step);
      } else if (type === "down") {
        val = addNum(val, -step);
      }
      setValue(node, val);
    }

    function addNum(num1, num2) {
      var sq1, sq2, m;
      try {
        sq1 = num1.toString().split(".")[1].length;
      } catch (e) {
        sq1 = 0;
      }
      try {
        sq2 = num2.toString().split(".")[1].length;
      } catch (e) {
        sq2 = 0;
      }
      m = Math.pow(10, Math.max(sq1, sq2));
      return (Math.round(num1 * m) + Math.round(num2 * m)) / m;
    }

    function getElementsByClassName(node, classname) {
      var a = [];
      var re = new RegExp("(^| )" + classname + "( |$)");
      var els = node.getElementsByTagName("*");
      for (var i = 0, j = els.length; i < j; i++) {
        if (re.test(els[i].className)) {
          a.push(els[i]);
        }
      }
      return a;
    }
  },
  /**
   * 判断dom对象是否包含指定class样式
   * @param {DOM} elem dom对象
   * @param {String} cls 样式名称
   * @returns {Boolean} true包含，false不包含
   */
  hasClass: function (elem, cls) {
    if (!elem) return false; //元素为空则终止
    cls = cls || "";
    if (cls.replace(/\s/g, "").length == 0) return false; //当cls没有参数时，返回false
    return new RegExp(" " + cls + " ").test(" " + elem.className + " ");
  },
  /**
   * 为dom对象添加指定class样式
   * @param {DOM} elem dom对象
   * @param {String} cls 样式名称
   */
  addClass: function (elem, cls) {
    if (!elem) return false; //元素为空则终止
    if (!this.hasClass(elem, cls)) {
      elem.className = elem.className == "" ? cls : elem.className + " " + cls;
    }
  },
  /**
   * 移除dom对象指定的class样式
   * @param {DOM} elem dom对象
   * @param {String} cls 样式名称
   */
  removeClass: function (elem, cls) {
    if (this.hasClass(elem, cls)) {
      var newClass = " " + elem.className.replace(/[\t\r\n]/g, "") + " ";
      while (newClass.indexOf(" " + cls + " ") >= 0) {
        newClass = newClass.replace(" " + cls + " ", " ");
      }
      elem.className = newClass.replace(/^\s+|\s+$/g, "");
    }
  },
  /**
   * 记录或对比前去除段落获取焦点添加的样式，否则会影响对比的精准度
   * @param {Array} cls 要清理的样式数组
   * @param {Editor} me 编辑器实例
   */
  filterExtraCls: function (cls, me) {
    for (var i = 0; i < cls.length; i++) {
      var objs = axTools.getByClass(cls[i], me.document);
      for (var j = 0; j < objs.length; j++) {
        this.removeClass(objs[j], cls[i]);
      }
    }
    var con = me.getContent();
    if (con.indexOf("\u200B") != -1) {
      me.setContent(me.getContent().replace(/\u200B/g, ""));
    }
  },
  /**
   * 设置元素行内式属性值
   * @param node  添加樣式的节点
   * @param styleName 添加样式的name
   * @param styleValue  添加样式的值
   */
  setStyleByAttr: function (node, styleName, styleValue) {
    var styleStr = (node.getAttribute("style") || "").trim(";");
    var styleList = styleStr.split(";") || [];
    var arr = [];
    var a = false;

    for (var i = 0; i < styleList.length; i++) {
      if (styleList[i].split(":")[0].trim() === styleName) {
        styleList[i] = styleName + ":" + styleValue;
        arr.push(styleList[i]);
        a = true;
      } else {
        arr.push(styleList[i]);
      }
    }
    if (!a && styleValue) {
      arr.push(styleName + ":" + styleValue);
    }
    node.setAttribute("style", arr.join(";"));
  },
  /**
   * 设置级联控件显示隐藏
   * @param {String} ctrlText 级联控件内容即触发其他控件联动的控件内容
   * @param {String} ctrlId 级联id即触发其他控件联动的控件id
   * @param {Editor} me 编辑器实例
   */
  setCascade: function (ctrlText, ctrlId, me) {
    // if (me.options.editorModel != "design") {
    var cascadeDoms = axTools.getByTagAttr(
      "span",
      "cascadeId",
      ctrlId,
      me.document
    );
    if (cascadeDoms.length > 0) {
      cascadeDoms.forEach(function (item, index) {
        // 根据判断操作符判断级联控件显示隐藏
        var itemJson = JSON.parse(item.getAttribute("attrs"));
        if (!!!itemJson) return;
        var condition = itemJson.showCondition,
          operator = itemJson.operator;
        switch (operator) {
          case "=":
            ctrlText == condition
              ? axTools.showHide(item, true)
              : axTools.showHide(item);
            break;
          case "!=":
            ctrlText != condition
              ? axTools.showHide(item, true)
              : axTools.showHide(item);
            break;
          case ">":
            ctrlText > condition
              ? axTools.showHide(item, true)
              : axTools.showHide(item);
            break;
          case ">=":
            ctrlText >= condition
              ? axTools.showHide(item, true)
              : axTools.showHide(item);
            break;
          case "<":
            ctrlText < condition
              ? axTools.showHide(item, true)
              : axTools.showHide(item);
            break;
          case "<=":
            ctrlText <= condition
              ? axTools.showHide(item, true)
              : axTools.showHide(item);
            break;
          case "in":
            ctrlText.indexOf(condition) > -1
              ? axTools.showHide(item, true)
              : axTools.showHide(item);
            break;
          case "null":
            ctrlText == null || ctrlText == ""
              ? axTools.showHide(item, true)
              : axTools.showHide(item);
            break;
          case "notNull":
            ctrlText != null && ctrlText != ""
              ? axTools.showHide(item, true)
              : axTools.showHide(item);
            break;
        }
      });
    }
    // }
  },
  /**
   * 去除 next 参数 生成数组格式
   * @param {Object} list 传入的用户设置 带有 next 参数
   */
  restoreTemplate: function (list, res) {
    res = res || [];
    res.push({
      cascadeId: list.cascadeId,
      cascadeIdText: list.cascadeIdText,
      condition: list.condition,
      group: list.group,
      hideConditionList: list.hideConditionList,
      operator: list.operator,
      operatorText: list.operatorText,
      showConditionList: list.showConditionList,
      showConditionText: list.showConditionText
    });
    if (JSON.stringify(list.next) == "{}") return res;
    res = axTools.restoreTemplate(list.next, res);
    return res;
  },
  createTree: function (list) {
    /**
     * startIndex 左括号位置下标
     * endIndex 右括号位置下标
     * newArr 需要替换的数组片段
     */
    var startIndex,
      endIndex,
      newArr = [];
    for (var i = 0; i < list.length; i++) {
      var item = list[i];
      if (item.newGroup != undefined) continue;
      if (item.group[0] == " " && item.group[1] == " ") {
      }
      if (item.group[1] == ")") {
        endIndex = i;
        break;
      }
      if (item.group[0] == "(") {
        startIndex = i;
      }
    }
    if (startIndex == undefined && endIndex == undefined) return list;
    newArr = list.slice(startIndex, endIndex + 1);
    var obj = {
      newGroup: newArr
    };
    list.splice(startIndex, endIndex - startIndex + 1, obj);
    return axTools.createTree(list);
  },
  /**
   * 递归遍历结构树
   * @param {*} data 数据
   * @param {*} me dom节点
   * @param {*} res 最终结果
   * @param {*} condition 树节点间条件 （&&、||）
   */
  recursionTree: function (data, me, res, condition) {
    res = res || "";
    // condition = condition || "and";
    for (var i = 0; i < data.length; i++) {
      condition = i === 0 ? 'and' : data[i - 1].condition || 'and'
      if (data[i].newGroup && data[i].newGroup.length) {
        if (condition == "and") {
          res =
            res && axTools.recursionTree(data[i].newGroup, me, res, condition);
        } else {
          res =
            res || axTools.recursionTree(data[i].newGroup, me, res, condition);
        }
      } else {
        var cascadeDoms = axTools.getByTagAttr(
          "span",
          "id",
          data[i].cascadeId,
          me.document
        );
        var currentValue = cascadeDoms[0].getAttribute("selectval");
        if (currentValue == null) {
          for (var h = 0; h < cascadeDoms[0].children.length; h++) {
            if (
              cascadeDoms[0].children[h].className.indexOf("ctrl-value") > -1
            ) {
              currentValue = cascadeDoms[0].children[h].innerText.trim();
              break;
            }
          }
        }

        if (condition == "and") {
          if (res === "" || res) {
            res = (res === "" || res) && axTools.conditionFound(currentValue, data[i]);
          }
        } else {
          if (res === "") {
            res = axTools.conditionFound(currentValue, data[i]);
          } else {
            res = res || axTools.conditionFound(currentValue, data[i]);
          }
        }
      }
    }
    return res;
  },
  /**
   * 判断条件是否成立
   * @param {String} selectVal 当前控件值
   * @param {Object} args 控件涉及的校验规则
   */
  conditionFound: function (selectVal, args) {
    var combicascondition, // 条件成立的值
      combicasoper, // 条件
      isOk; // 条件是否成立
    combicascondition = args.showConditionText;
    combicasoper = args.operator;
    selectVal = parseFloat(selectVal) || selectVal
    combicascondition = parseFloat(combicascondition) || combicascondition
    switch (combicasoper) {
      case "=":
        isOk = selectVal ==  combicascondition ? true : false;
        break;
      case "!=":
        isOk = selectVal !=  combicascondition ? true : false;
        break;
      case ">":
        isOk = selectVal >  combicascondition ? true : false;
        break;
      case ">=":
        isOk = selectVal >=  combicascondition ? true : false;
        break;
      case "<":
        isOk = selectVal <  combicascondition ? true : false;
        break;
      case "<=":
        isOk = selectVal <=  combicascondition ? true : false;
        break;
      case "in":
        isOk = selectVal.indexOf(combicascondition) > -1 ? true : false;
        break;
      case "null":
        isOk = selectVal == null || selectVal == "" ? true : false;
        break;
      case "notNull":
        isOk = selectVal != null && selectVal != "" ? true : false;
        break;
    }
    return isOk;
  },
  /**
   * 设置级联控件显示隐藏, 多个显示隐藏
   * @param {String} ctrlText 级联控件内容即触发其他控件联动的控件内容
   * @param {String} pctrl 控件父级节点
   * @param {Editor} me 编辑器实例
   */
  setCascadeMore: function (ctrlText, pctrl, me, thePluginsNodeCombine) {
    // if (me.options.editorModel != "design") {
    var combineshow = [], // 显示的控件
      combinehide = []; // 隐藏的控件
    var rules,
      rulesArr = []; // 组合元素设置规则
    if (pctrl.getAttribute("rules") == null) return;
    rules = JSON.parse(pctrl.getAttribute("rules"));
    for (var i = 0; i < rules.length; i++) {
      var show, hide;
      if (JSON.stringify(rules[i]).indexOf(pctrl.getAttribute("id")) == -1) {
        continue;
      }
      show = rules[i].showConditionList.split(","); // 保存当前条件成立需要显示的控件id
      hide = rules[i].hideConditionList.split(","); // 需要隐藏的控件id
      var condition = rules[0].condition;
      var item = axTools.restoreTemplate(rules[i]);
      if (item.length == 1) {
        var cascadeDoms = axTools.getByTagAttr(
          "span",
          "id",
          item[0].cascadeId,
          thePluginsNodeCombine
        );
        if (cascadeDoms.length == 0) {
          thePluginsNodeCombine = AX.dom.domUtils.findParent(
            thePluginsNodeCombine,
            function (dom) {
              return dom.getAttribute("axplugins") == "combine";
            },
            false
          );
          cascadeDoms = axTools.getByTagAttr(
            "span",
            "id",
            item[0].cascadeId,
            thePluginsNodeCombine
          );
          if (cascadeDoms.length == 0) {
            continue;
          }
        }
        var currentValue = cascadeDoms[0].getAttribute("selectval");
        if (currentValue == null) {
          for (var h = 0; h < cascadeDoms[0].children.length; h++) {
            if (
              cascadeDoms[0].children[h].className.indexOf("ctrl-value") > -1
            ) {
              currentValue = cascadeDoms[0].children[h].innerText.trim();
              break;
            }
          }
        }
        if (axTools.conditionFound(currentValue, item[0])) {
          combineshow = combineshow.concat(show);
          combinehide = combinehide.concat(hide);
          // break; // 满足任一条件跳出循环
        } else {
          combineshow = combineshow.concat(show).concat(hide);
        }
      } else {
        if (
          axTools.recursionTree(axTools.createTree(item), me, "", condition)
        ) {
          combineshow = combineshow.concat(show);
          combinehide = combinehide.concat(hide);
          // break; // 满足任一条件跳出循环
        } else {
          combineshow = combineshow.concat(show).concat(hide);
        }
      }
    }
    for (var a = 0; a < combineshow.length; a++) {
      var cascadeDoms = axTools.getByTagAttr(
        "span",
        "id",
        combineshow[a],
        thePluginsNodeCombine
      );
      cascadeDoms.forEach(function (item, index) {
        axTools.showHide(item, true);
      });
    }
    for (var b = 0; b < combinehide.length; b++) {
      var cascadeDoms = axTools.getByTagAttr(
        "span",
        "id",
        combinehide[b],
        thePluginsNodeCombine
      );
      cascadeDoms.forEach(function (item, index) {
        axTools.showHide(item);
      });
    }

    // }
  },
  /**
   * 显示隐藏
   * @param {DOM} dom 操作对象
   * @param {String} flag true显示，false隐藏
   */
  showHide: function (dom, flag) {
    if (!dom) {
      return;
    }
    if (flag) {
      axTools.removeClass(dom, "cascadeStyle");
      dom.style.display = dom.getAttribute("olddisplay");
    } else {
      dom.setAttribute(
        "olddisplay",
        dom.getAttribute("olddisplay")
          ? dom.getAttribute("olddisplay")
          : "inline"
      );
      axTools.addClass(dom, "cascadeStyle");
      dom.style.display = "none";

      $(dom).find('[title*="收缩压"].ctrl-value').text('')
      $(dom).find('[title*="舒张压"].ctrl-value').text('')
      $(dom).find('[title*="心率"].ctrl-value').text('')
    }
  },
  /**
   * 通过标签属性查找dom
   * @param {String} tag  标签
   * @param {String} attr 属性
   * @param {String} val  属性值
   * @param {String} domRange 查找范围
   * @return {Array} list dom集合
   */
  getByTagAttr: function (tag, attr, val, domRange) {
    domRange = domRange || document;
    // var tags = domRange.getElementsByTagName(tag);
    var tags = domRange.getElementsByTagName ? domRange.getElementsByTagName(tag) : [];
    var list = [];
    for (var i = 0; i < tags.length; i++) {
      if (tags[i] && tags[i].getAttribute(attr) == val) {
        list.push(tags[i]);
      }
    }
    return list;
  },
  /**
   * 通过标签属性查找dom
   * @param {String} tag  标签
   * @param {String} attr 属性
   * @param {String} domRange 查找范围
   * @return {Array} list dom集合
   */
  getByAttrProp: function (tag, attr, domRange) {
    domRange = domRange || document;
    var tags = domRange.getElementsByTagName(tag);
    var list = [];
    for (var i = 0; i < tags.length; i++) {
      if (tags[i] && tags[i].getAttribute(attr) != null) {
        list.push(tags[i]);
      }
    }
    return list;
  },
  /**
   * 通过class样式查找对象
   * @param {String} className  class样式
   * @param {String} domRange 查找范围
   * @return {Array} list dom集合
   */
  getByClass: function (className, domRange) {
    domRange = domRange || document;
    var tags = domRange.getElementsByTagName("*");
    var list = [];
    for (var k in tags) {
      var tag = tags[k];
      if (this.hasClass(tag, className)) {
        list.push(tag);
      }
    }
    return list;
  },
  /**
   * 验证规则
   * @return {Array} rules 规则集合
   */
  validate: (function () {
    var rules = {
      email: function (content) {
        var reg = /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/;
        return reg.test(content);
      },
      integer: function (content, num) {
        var reg = /^[-+]?\d+(\.\d+)?$/;
        return reg.test(content);
      },
      decimal: function (content) {
        var reg = /^[-\+]?\d+(\.\d+)?$/;
        return reg.test(content);
      },
      cert: function (content) {
        var b = 0;
        if (!/^\d{17}(\d|x)$/i.test(content)) return !1;
        (content = content.replace(/x$/i, "a")),
          (sBirthday =
            content.substr(6, 4) +
            "-" +
            Number(content.substr(10, 2)) +
            "-" +
            Number(content.substr(12, 2)));
        var c = new Date(sBirthday.replace(/-/g, "/"));
        if (
          sBirthday !=
          c.getFullYear() + "-" + (c.getMonth() + 1) + "-" + c.getDate()
        )
          return !1;
        for (var d = 17; d >= 0; d--)
          b += (Math.pow(2, d) % 11) * parseInt(content.charAt(17 - d), 11);
        return b % 11 == 1;
      },
      phone: function (content) {
        var reg = /^[1][3,4,5,7,8][0-9]{9}$/;
        return reg.test(content);
      }
    };
    return rules;
  })(),
  /**
   *
   * @param {Editor} me 编辑器实例
   * @param {Boolean} flag 是否可编辑，true--可编辑，false--不可编辑
   */
  setBodyEditAttr: function (me, flag) {
    var content = me.document.getElementsByClassName("ax-page-content");
    var headers = me.document.getElementsByClassName("ax-page-header");
    var footers = me.document.getElementsByClassName("ax-page-footer");
    for (var i = 0; i < content.length; i++) {
      content[i].setAttribute("contenteditable", flag);
      headers[i].setAttribute("contenteditable", flag);
      // footers[i].setAttribute("contenteditable", flag);
    }
  },
  /**
   * 设置日期元素 只读
   * @param {Editor} me 编辑器实例
   */
  setDateOnly: function (me) {
    var dateEles = axTools.getByTagAttr(
      "span",
      "axPlugins",
      "datedomain",
      me.document
    );
    for (var i = 0; i < dateEles.length; i++) {
      var item = dateEles[i].children[0] && dateEles[i].children[0].outerHTML;
      var attrs = JSON.parse(dateEles[i].getAttribute("attrs"));
      if (!!attrs.readonly) {
        dateEles[i].innerHTML = item;
      }
    }
  },
  /**
   * 修正数字格式
   * @param {Editor} me 编辑器实例
   * @param {DOM} ctrl 当前控件对象
   */
  modifyNumStyle: function (me, ctrl) {
    //数字元素进行小数位补齐
    var numberEles = axTools.getByTagAttr(
      "span",
      "axPlugins",
      "numberelement",
      me.document
    );
    for (var i = 0; i < numberEles.length; i++) {
      if (numberEles[i] == ctrl) {
        continue;
      }
      var ctrlObj = axTools.getByClass("ctrl-value", numberEles[i])[0],
        content = ctrlObj.innerText
          .replace(/(^\s*)|(\s*$)/g, "")
          .replace(/\u200B/g, ""),
        currAttrs = JSON.parse(numberEles[i].getAttribute("attrs")),
        dotNum = currAttrs.numAccuracy;
      if (
        currAttrs.eleUnitContr == "on"
      ) {
        if (this.getByTagAttr("span", "id", "numVal", numberEles[i])[0]) {
          content = this.getByTagAttr("span", "id", "numVal", numberEles[i])[0]
            .innerText.replace(/(^\s*)|(\s*$)/g, "")
            .replace(/\u200B/g, "");
        }
      }
      //根据小数位数，自动补全
      if (!!dotNum && content != "" && !isNaN(parseInt(content))) {
        var valArr = content.split("."),
          needReVal = false;
        if (dotNum == 0) {
          needReVal = true;
          content = valArr[0];
        } else if (valArr.length == 1) {
          needReVal = true;
          content = this.addZreo(valArr[0] + ".", dotNum);
        } else if (valArr.length > 1) {
          if (valArr[0] == "") {
            valArr[0] = "0";
            if (valArr[1].length == dotNum) {
              needReVal = true;
              content = valArr[0] + "." + valArr[1];
            }
          }
          if (valArr[1].length < dotNum) {
            needReVal = true;
            content =
              valArr[0] +
              "." +
              this.addZreo(valArr[1], dotNum - valArr[1].length);
          } else if (valArr[1].length > dotNum) {
            needReVal = true;
            content = valArr[0] + "." + valArr[1].substring(0, dotNum);
          }
        }
        var numAttrs = currAttrs;
        if (numAttrs.eleUnitContr == "on") {
          if (
            numAttrs.elemUnit.indexOf("年") > -1 ||
            numAttrs.elemUnit.indexOf("时") > -1
          ) {
            var numValDom = axTools.getByClass("ctrl-value", numberEles[i])[0];
            for (var j = 0; j < numValDom.children.length; j++) {
              var numChild = numValDom.children[j];
              if (numChild.id == "numVal") {
                numChild.innerText = content;
              }
            }
            // numValDom.innerText = content
          } else {
            for (var j = 0; j < numberEles[i].children; j++) {
              if (numberEles[i].children[j].id == "numVal") {
                numberEles[i].children[j].innerText = content;
              }
            }
          }
        } else if (needReVal) {
          if(me.options.editorModel === "mark") return;
          ctrlObj.innerHTML = content;
        }
      }
    }
  },
  /**
   * 补全小数
   * @param {Number} num 需要补0的数据
   * @param {Number} num 需要补多少0
   * @returns {String} 补全后的数量
   */
  addZreo: function (str, num) {
    for (var i = 0; i < num; i++) {
      str += "" + "0";
    }
    return str;
  },
  /**
   * 校验不为空的组件是否都已填入值
   * @param {Ediotr} me 编辑器实例
   * @returns {Boolean} 是否校验通过，true：通过，false：未通过
   */
  validRequiredCtrls: function (me) {
    var requiredCtrls = this.getByTagAttr(
      "*",
      "isRequired",
      "true",
      me.document
    ),
      validFlag = true;
    for (var i = 0; i < requiredCtrls.length; i++) {
      if (
        requiredCtrls[i].getAttribute("axplugins") == "signature" &&
        requiredCtrls[i].children[0].getAttribute("itemsignture") != "normal"
      ) {
        continue;
      }
      if (!this.validRequired(me, requiredCtrls[i])) {
        validFlag = false;
      }
    }

    return validFlag;
  },
  /**
   * 校验单个控件必填属性
   * @param {Ediotr} me 编辑器实例
   * @param {DOM} ctrl
   * @returns {Boolean} 是否校验通过，true：通过，false：未通过
   */
  validRequired: function (me, ctrl) {
    var type = ctrl.getAttribute("axPlugins");
    if (
      !type ||
      !!!ctrl.getAttribute("isRequired") ||
      ctrl.getAttribute("isRequired") == false ||
      ctrl.getAttribute("isRequired") == "false" ||
      ctrl.style.display == "none"
    ) {
      return true;
    }
    var valCtrl = axTools.getByClass("ctrl-value", ctrl),
      content = valCtrl[0].innerText
        .replace(/(^\s*)|(\s*$)/g, "")
        .replace(/\u200B/g, "");
    //段落元素单独处理
    if (type == "paragraphele") {
      var contentCtrls = axTools.getByClass("paragraphContent", ctrl);
      if (contentCtrls.length > 0) {
        for (var j = 0; j < contentCtrls.length; j++) {
          content += contentCtrls[j].innerText.replace(/(^\s*)|(\s*$)/g, "");
          // .replace(/\u200B/g, "");
        }
      }
    }
    var isRadioCheckbox = true;
    if (type == "radio" || type == "checkbox") { // 校验单选多选元素
      if (ctrl.getAttribute("selectval") == 'null' || ctrl.getAttribute("selectval") == '') isRadioCheckbox = false;
    }
    if (type == "text" || type == "numberelement") {
      content = this.getCtrlText(valCtrl[0]);
    }
    if (
      (valCtrl.length > 0 && content == "" && me.options.editorModel === "edit") || !isRadioCheckbox
    ) {
      valCtrl = valCtrl[0];
      axTools.addClass(ctrl, "error");
      ctrl.setAttribute("title", me.getLang("ax.required"));
      valCtrl.setAttribute("title", me.getLang("ax.required"));
      return false;
    } else {
      axTools.removeClass(ctrl, "error");
    }

    return true;
  },
  /**
   * 获取控件内非留痕文本
   * @param {Array} ctrl 控件
   * @returns {String} 过滤留痕元素后的文本内容
   */
  getCtrlText: function (ctrl) {
    var text = "",
      pchilds = ctrl.childNodes;
    for (var j = 0; j < pchilds.length; j++) {
      var child = pchilds[j];
      if (child.childNodes.length > 0) {
        if (
          !axTools.hasClass(child, "editor-mark-del-text") &&
          !axTools.hasClass(child, "sensitiveWords")
        ) {
          text += this.getCtrlText(child);
        }
      } else {
        text += child.nodeValue || child.innerText || "";
      }
    }
    return text;
  },
  /**
   * 保密正则
   * @return {Array} rules 规则集合
   */
  secretRules: (function () {
    var rules = {
      phone: function (content) {
        var reg = /(\d{3})\d{4}(\d{4})/;
        return content.replace(reg, "$1****$2");
      },
      idcard: function (content) {
        var reg = /^(.{6})(?:\d+)(.{4})$/;
        return content.replace(reg, "$1****$2");
      }
    };
    return rules;
  })(),
  /**
   * 加密控件内容
   * @param {Array} secretCtrls 加密控件
   */
  secretVal: function (secretCtrls) {
    for (var i = 0; i < secretCtrls.length; i++) {
      var val = secretCtrls[i].innerText; // .replace(/\u200B/g,''),//获取text，并删除空白字符&#8203;
      str = this.getSecretVal(val);
      secretCtrls[i].setAttribute("unsecretVal", val);
      secretCtrls[i].innerHTML = str;
    }
  },
  /**
   * 获取加密后的数据
   * @param {String} val 被加密数据
   * @returns {String} 加密后的数据
   */
  getSecretVal: function (val) {
    var str = "";
    if (this.validate.phone(val)) {
      str = axTools.secretRules.phone(val);
    } else if (this.validate.cert(val)) {
      str = axTools.secretRules.idcard(val);
    } else {
      for (var j = 0; j < val.length; j++) {
        str += "*";
      }
    }
    return str;
  },
  /**
   * dom绑定事件
   * @param {String} dom  需要绑定事件的dom
   * @param {String} type 事件类型
   * @param {Function} func 事件方法
   */
  bindEvent: function (dom, type, func) {
    if (dom.attachEvent) {
      dom.attachEvent("on" + type, func);
    } else {
      dom.addEventListener(type, func);
    }
  },
  /**
   * 触发dom事件
   * @param {DOM} el 事件节点
   * @param {String} type 事件类型
   */
  dispatch: function (el, type) {
    try {
      if (el.dispatchEvent) {
        var evt = document.createEvent("Event");
        evt.initEvent(type, true, true);
        el.dispatchEvent(evt);
      } else if (el.fireEvent) {
        el.fireEvent("on" + type);
      }
    } catch (e) { }
  },
  /**
   * 为select设置选中值
   * @param {String} obj  select对象
   * @param {String} val 选中值
   */
  setSelectVal: function (obj, val) {
    for (var i = 0; i < obj.options.length; i++) {
      if (obj.options[i].value == val) {
        obj.options[i].selected = true;
        break;
      }
    }
  },
  /**
   * 为option value有多个逗号隔开的select设置选中值
   * 如：<option value="a,b,c">aaa</optin>
   * @param {String} obj  select对象
   * @param {String} val 选中值
   */
  setSelectVals: function (obj, val) {
    for (var i = 0; i < obj.options.length; i++) {
      if (obj.options[i].value.split(",").indexOf(val) > -1) {
        obj.options[i].selected = true;
        break;
      }
    }
  },
  /**
   * 获取当前时间
   * @param {String} formatStr 日期格式
   */
  getCurrDate: function (formatStr) {
    if (!formatStr) {
      formatStr = "yyyy-MM-dd hh:mm:ss";
    }
    var date = new Date();
    return date.format(formatStr);
  },
  /**
   * 为小于10的数字添加0
   * @param {Number} num 数字
   * @returns {Number} num 处理后的数字
   */
  addZero: function (num) {
    if (num < 10) {
      num = "0" + num;
    }
    return num;
  },
  /**
   * 设置留痕模式下控件的状态
   * @param {Boolean} state true--显示留痕，false--不显示留痕
   * @param {DOM} domRange 控件查找范围
   */
  setMarkState: function (state, domRange) {
    //设置控件留痕样式
    var ctrls = axTools.getByClass("ctrl-bg", domRange),
      ctrlVals = axTools.getByClass("ctrl-value", domRange),
      marks = axTools.getByClass("editor-mark-text", domRange);
    var marksMedicals = axTools.getByClass("mark-free-medical", domRange);
    var marksOlds = axTools.getByClass("mark-old-medical", domRange);
    for (var i = 0; i < ctrls.length; i++) {
      if (state) {
        axTools.addClass(ctrls[i], "on");
        axTools.addClass(ctrlVals[i], "on");
        axTools.addClass(marks[i], "on");
      } else {
        axTools.removeClass(ctrls[i], "on");
        axTools.removeClass(ctrlVals[i], "on");
        axTools.removeClass(marks[i], "on");
      }
    }
    for (var i = 0; i < marksMedicals.length; i++) {
      if (state) {
        axTools.removeClass(marksMedicals[i], "hide-mark");
      } else {
        axTools.addClass(marksMedicals[i], "hide-mark");
      }
    }
    for (var i = 0; i < marksOlds.length; i++) {
      if (!state) {
        axTools.removeClass(marksOlds[i], "hide-mark");
      } else {
        axTools.addClass(marksOlds[i], "hide-mark");
      }
    }
    //设置段落留痕样式
    var pmarks = axTools.getByClass("editor-free-text", domRange);
    for (var i = 0; i < pmarks.length; i++) {
      if (state) {
        axTools.removeClass(pmarks[i], "hide-mark");
      } else {
        axTools.addClass(pmarks[i], "hide-mark");
      }
    }
  },
  /**
   * 根据状态设置是否可编辑
   * @param {*} params
   */
  setStateLock: function (me, params) {
    var state = params == false ? false : true;
    if (me.body.children[0] && me.body.children[0].getAttribute("isLock") == "false") {
      if (
        me.options.editorModel == "edit" ||
        me.options.editorModel == "mark" ||
        me.options.editorModel == "pure"
      ) {
        axTools.setLockable(false, me, me.options.editorModel);
        axTools.setBodyEditAttr(me, false);
      } else {
        axTools.setLockable(true, me, me.options.editorModel);
        axTools.setBodyEditAttr(me, true);
      }
    } else {
      axTools.setLockable(state, me, me.options.editorModel);
      axTools.setBodyEditAttr(me, state);
    }
  },
  /**
   * 锁定文书内容，只可编辑控件可编辑区域
   * @param {Boolean} state true--可编辑，false--不可编辑
   * @param {DOM} dom 控件查找范围
   */
  setLockable: function (state, me, model) {
    var ctrlVals = axTools.getByClass("ctrl-value", me.document);
    var body = me.document.body;
    body.setAttribute("contenteditable", state);
    if (!state) axTools.setBodyEditAttr(me, false);
    for (var j = 0; j < ctrlVals.length; j++) {
      var ctrl = AX.dom.domUtils.findParent(
        ctrlVals[j],
        function (dom) {
          return axTools.hasClass(dom, "ctrl-bg");
        },
        true
      );
      if (ctrl.getAttribute("axPlugins") == "datedomain") {
        continue;
      }
      var attrs = JSON.parse(ctrl.getAttribute("attrs"));
      if (model == "pure" ||
        model == "dirty" ||
        model == "secret" ||
        model == "preview") {
        ctrlVals[j].setAttribute("contenteditable", false);
      } else {
        if (
          attrs.isEdit == "on" ||
          (!attrs.readonly && attrs.readonly != undefined) && ctrl.getAttribute("axPlugins") !== "radio" && ctrl.getAttribute("axPlugins") !== "checkbox"
          && ctrl.getAttribute("axPlugins") !== "haveornot" && ctrl.getAttribute("axPlugins") !== "select" && ctrl.getAttribute("axPlugins") !== "selectmulti"
        ) {
          ctrlVals[j].setAttribute("contenteditable", true);
        } else {
          ctrlVals[j].setAttribute("contenteditable", false);
        }
        if (ctrl.getAttribute("axplugins") == 'haveornot') { // 有无元素禁止编辑
          ctrlVals[j].setAttribute("contenteditable", false);
        }
      }


      // 处理无标题段落
      // if (ctrl.getAttribute("axPlugins") != "paragraphele") {
      //   var paragraph = AX.dom.domUtils.findParent(
      //     ctrl,
      //     function (dom) {
      //       return axTools.hasClass(dom, "paragraphele");
      //     },
      //     true
      //   );
      // } else {
      //   paragraph = ctrl;
      // }
    }
    var paragraphs = axTools.getByClass("paragraphele", me.document);
    for(var s = 0; s < paragraphs.length; s++) {
      var paragraph = paragraphs[s];
      if (paragraph && paragraph.getAttribute("axPlugins") == "paragraphele") {
        attrs = JSON.parse(paragraph.getAttribute("attrs"));
        var pageContent = axTools.getByClass("paragraphContent", paragraph);
        for (var i = 0; i < pageContent.length; i++) {
          // if (!state && (model == "mark" || model == "edit")) {
          //   pageContent[i].setAttribute("contenteditable", false);
          // } else {
            if (model == "pure" ||
              model == "dirty" ||
              model == "secret" ||
              model == "preview") {
              pageContent[i].setAttribute("contenteditable", false);
            } else {
              if (!!attrs.isLock && (model == "mark" || model == "edit")) {
                pageContent[i].setAttribute("contenteditable", false);
              } else {
                pageContent[i].setAttribute("contenteditable", true);
              }
            }
          // }
        }
      }
    }

    var pTags = $("p[contenteditable]", body);
    for(var s = 0; s < pTags.length; s++) {
      pTags[s].setAttribute("contenteditable", state);
    }
  },
  /**
   * 设置控件是否可编辑
   * @param {Boolean} state true--可编辑，false--不可编辑
   * @param {DOM} domRange 控件查找范围
   * @param {Stirng} currModel 当前视图模式
   */
  setEditable: function (state, domRange, currModel) {
    var notes = this.getByClass("ax-editor-note", domRange),
      ctrls = [], //this.getByClass("ctrl-bg", domRange),
      ctrlVals = this.getByClass("ctrl-value", domRange);
    for (var j = 0; j < ctrlVals.length; j++) {
      var ctrl = AX.dom.domUtils.findParent(
        ctrlVals[j],
        function (dom) {
          return axTools.hasClass(dom, "ctrl-bg");
        },
        true
      );
      if (ctrl) {
        ctrls.push(ctrl);
      }
    }
    //为批注增加浏览视图下的样式，方便样式设置
    if (currModel == "pure" || currModel == "secret") {
      for (var i = 0; i < notes.length; i++) {
        notes[i].setAttribute("contenteditable", false);
        this.hasClass(notes[i], "view-model") ||
          this.addClass(notes[i], "view-model");
      }
    } else {
      for (var i = 0; i < notes.length; i++) {
        if (currModel != "dirty") {
          notes[i].setAttribute("contenteditable", true);
        }
        this.removeClass(notes[i], "view-model");
      }
    }
    for (var k = 0; k < ctrls.length; k++) {
      //配置段落内容是否可编辑，段落标题只有设计模式下可编辑
      var paragraphContents = [],
        isParagraph = ctrls[k].getAttribute("axPlugins") == "paragraphele";
      if (isParagraph) {
        paragraphContents = this.getByClass("paragraphContent", ctrls[k]);
        for (var p = 0; p < paragraphContents.length; p++) {
          if (
            domRange.body.children[1] &&
            domRange.body.children[1].getAttribute("isLock") == "false"
          ) {
            if (currModel == "edit" || currModel == "mark") {
              paragraphContents[p].setAttribute("contenteditable", false);
            } else {
              paragraphContents[p].setAttribute("contenteditable", state);
            }
          } else if (JSON.parse(ctrls[k].getAttribute("attrs")).isLock) {
            paragraphContents[p].setAttribute("contenteditable", false);
          } else {
            paragraphContents[p].setAttribute("contenteditable", state);
          }
        }
        if (currModel != "design") {
          var attrs = JSON.parse(ctrls[k].getAttribute("attrs"));
          if (attrs.singleTitle) {
            this.getByClass("ctrl-value", ctrls[k])[0].setAttribute(
              "contenteditable",
              false
            );
          }
        }
        //段落可能没有ctrl-value，或内容区包含多个ctrl-value，此处只处理标题，处理之后继续下一个控件
        continue;
      }

      if (state) {
        axTools.removeClass(ctrls[k], "view-model");
        //在可编辑状态下，是否能够编辑还需要根据控件的readonly是否只读属性判断
        var attrs = JSON.parse(ctrls[k].getAttribute("attrs"));
        // ctrls[k].setAttribute('contenteditable',(!!attrs.readonly && (currModel=='mark' || currModel=='edit')?false:true));
        ctrlVals[k] &&
          ctrlVals[k].setAttribute(
            "contenteditable",
            !!attrs.readonly && (currModel == "mark" || currModel == "edit")
              ? false
              : true
          );
      } else {
        this.hasClass(ctrls[k], "view-model") ||
          this.addClass(ctrls[k], "view-model");
          this.hasClass(ctrls[k], "stain-clear") ||
          this.addClass(ctrls[k], "stain-clear");
        // ctrls[k] && ctrls[k].setAttribute('contenteditable',false);
        ctrlVals[k] && ctrlVals[k].setAttribute("contenteditable", false);
      }
      // var signCtrls = this.getByClass("signature", domRange);
      // for(var j = 0; j < signCtrls.length; j++ ){
      //   var attrs = JSON.parse(signCtrls[j].getAttribute("attrs"));
      //   var signCtrlVals = this.getByClass("ctrl-value", signCtrls[j]);
      //   for(var m = 0; m < signCtrlVals.length; m++) {
      //     signCtrlVals[m].setAttribute("contenteditable", false)
      //   }
      // }
      //单复选框、弹窗数字控件、诊断元素、处方元素不可编辑
      var ctrlType = ctrls[k].getAttribute("axPlugins");
      if (
        (currModel != "design" &&
          (ctrlType == "prescription" || ctrlType == "diagnose")) ||
        ctrlType == "radio" ||
        ctrlType == "checkbox" ||
        ctrlType ==
        "macro" /*  || (!!attrs.isPopuInput && ctrlType=='numberelement') */
      ) {
        ctrls[k].setAttribute("contenteditable", false);
        ctrlVals[k] && ctrlVals[k].setAttribute("contenteditable", false);
        if (ctrlType == "radio" || ctrlType == "checkbox") {
          var boxs = this.getByTagAttr("input", "type", ctrlType, domRange);
          for (var m = 0; m < boxs.length; m++) {
            if (state || currModel == "design") {
              boxs[m].removeAttribute("disabled");
            } else {
              boxs[m].setAttribute("disabled", true);
            }
          }
        }
      }
    }
  },
  focusDom: function (me, dom) {
    var rangeRight = me.document.createRange();
    rangeRight.setStart(dom, 0);
    rangeRight.collapse(false);
    var selRight = me.window.getSelection();
    selRight.removeAllRanges();
    selRight.addRange(rangeRight);
  },
  focusDomByIndex: function (me, dom, index) {
    var rangeRight = me.document.createRange();
    rangeRight.setStart(dom, index);
    rangeRight.collapse(false);
    var selRight = me.window.getSelection();
    selRight.removeAllRanges();
    selRight.addRange(rangeRight);
  },
  focusDomEnd: function (me, dom) {
    var lastIdx = dom.nodeType == 3 ? dom.data.length : dom.childNodes.length;
    if (lastIdx < 0) {
      lastIdx = 0;
    }
    var rangeRight = me.document.createRange();
    rangeRight.setStart(dom, lastIdx);
    rangeRight.collapse(false);
    var selRight = me.window.getSelection();
    selRight.removeAllRanges();
    selRight.addRange(rangeRight);
  },
  /**
   * 设置控件显示隐藏
   * @param {Boolean} state true--显示，false--隐藏
   * @param {DOM} domRange 控件查找范围
   * @param {String} currModel 当前设计模式
   */
  setCtrlShow: function (state, domRange, currModel) {
    var ctrls = axTools.getByClass("ctrl-bg", domRange);
    for (var i = 0; i < ctrls.length; i++) {
      var attrs = JSON.parse(ctrls[i].getAttribute("attrs"));
      // 非设计模式下通过级联设置的隐藏不会自动显示
      if (state && !axTools.hasClass(ctrls[i], "cascadeStyle")) {
        var pluginName = ctrls[i].getAttribute("axplugins");
        if (pluginName === "diagnose" || pluginName === "prescription") {
          continue;
        }

        //段落元素 需要display block属性
        if (pluginName === "paragraphele") {
          ctrls[i].style.display = "block";
        }else if(pluginName === "combine"){
          ctrls[i].style.display = "inline-block";
        } else {
          // ctrls[i].style.display = 'inline-block';
          //为了解决 元素内容大于剩余宽度 元素整体会自动折行显示 所以 inline-block 更改成 inline，如有问题，可讨论。 yang
          ctrls[i].style.display = "inline";
        }
      } else if (!!attrs.isHide) {
        ctrls[i].style.display = "none";
      }
    }
  },
  /**
   * 创建留痕包裹标签
   * @param {Ediotr} me 编辑器实例
   */
  createMarkWrap: function (me, keyCode) {
    this.clearEmptyMarkLabel(me);
    var rang = me.selection.getRange();
    if (keyCode == 37) {
      //暂时屏蔽左键
      return rang;
    }
    var editNode = AX.dom.domUtils.findParent(
      rang.startContainer.parentNode,
      function (dom) {
        return (
          dom.tagName === "SPAN" && axTools.hasClass(dom, "editor-new-add-text")
        );
      },
      true
    );
    //用户输入的直接加span 并设置光标
    if (
      (!editNode && rang.collapsed) ||
      this.hasClass(rang.startContainer, "ctrl-value")
    ) {
      tmpNode = me.execCommand("marktag", rang);
      rang.insertNode(tmpNode).setStart(tmpNode, 0);
      rang.collapse(true);
      rang.select();
    }
    rang.startContainer.prevStart = rang.startOffset;

    return rang;
  },
  /**
   * 清除留痕空包裹标签
   * @param {Ediotr} me 编辑器实例
   */
  clearEmptyMarkLabel: function (me) {
    //清空多余的修改内容空标签包裹，最多只多余一个
    var emptyWraps = axTools.getByClass("editor-new-add-text", me.document);
    for (var i = 0; i < emptyWraps.length; i++) {
      if (emptyWraps[i].innerText.replace(/\u200B/g, "") == "") {
        emptyWraps[i].parentNode.removeChild(emptyWraps[i]);
      }
    }
    //清空多余的修改记录空标签包裹，最多只多余一个
    var emptyReocrdWraps = axTools.getByClass(
      "editor-mark-modify-text",
      me.document
    );
    for (var i = 0; i < emptyReocrdWraps.length; i++) {
      if (emptyReocrdWraps[i].innerText.replace(/\u200B/g, "") == "") {
        emptyReocrdWraps[i].parentNode.removeChild(emptyReocrdWraps[i]);
      }
    }
  },
  /**
   * 将null或undefined字符串转化为''
   * @param {String} str 要转化的字符串
   * @returns str 转化后的字符串
   */
  nullToBlank: function (str) {
    if (str == null || str == "undefined") {
      str = "";
    }
    return str;
  },
  /**
   * 创建xml对象
   * @param {String} result xml字符串
   * @returns {XML} xml对象
   */
  createXMLObj: function (result) {
    if (document.implementation.createDocument) {
      var parser = new DOMParser();
      xmlDoc = parser.parseFromString(result, "text/xml");
    } else if (window.ActiveXObject) {
      xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
      xmlDoc.async = false;
      xmlDoc.loadXML(result);
    }
    return xmlDoc;
  },
  /**
   * 获取节点属性
   * @param {Node} node xml节点
   * @param {Array} filters 过滤属性数组
   * @returns {String} nodeAttrStr html节点属性字符串
   */
  getNodeAttrs: function (node, filters) {
    if (axTools.nullToBlank(node) == "") {
      return;
    }
    if (!filters) {
      filters = ["type"];
    }
    var nodeAttrStr = "",
      len = node.attributes.length;
    for (var k = 0; k < len; k++) {
      var attr = node.attributes[k];
      if (filters.indexOf(attr.localName) != -1) {
        continue;
      }
      if (attr.localName == "attrs") {
        nodeAttrStr += " " + attr.localName + "='" + attr.value + "'";
      } else {
        nodeAttrStr += " " + attr.localName + '="' + attr.value + '"';
      }
    }
    return nodeAttrStr;
  },
  /**
   * 兼容IE8 阻止默认事件
   * @param e  Event 对象
   * @returns {boolean}
   */
  stopDefault: function (e) {
    var e = e || window.event;
    if (e && e.preventDefault) {
      e.preventDefault();
    } else {
      e.returnValue = false;
    }
    return false;
  },
  /**
   * 兼容IE8 阻止事件冒泡
   * @param e Event 对象
   */
  stopPropagation: function (e) {
    var e = e || window.event;
    if (e && e.stopPropagation) {
      e.stopPropagation();
    } else {
      e.cancelBubble = true;
    }
  },
  /**
   * 通用控件弹窗对象
   * @param {Object} parmas 弹窗配置参数
   *                  me editor编辑器实例
   *                  type 控件类型
   *                  hideBtns 隐藏弹窗底部工具按钮
   *                  cssRules 弹窗样式
   *                  isEdit 是否是编辑时弹出的
   *                  dialogUrl 弹窗url
   */
  commandDialog: function (params) {
    var me = params.me,
      type = params.type,
      hideBtns = params.hideBtns,
      cssRules = params.cssRules,
      isEdit = params.isEdit,
      dialogUrl = params.dialogUrl,
      range = me.selection.getRange(),
      parentEle =
        range.startContainer.parentElement || range.startContainer.parentNode;

    // 选区 块级父元素如果是body 则可以嵌套  yang start
    var domUtils = AX.dom.domUtils;
    var blockNode = domUtils.findParent(
      range.startContainer,
      function (node) {
        return domUtils.isBlockElm(node);
      },
      true
    );
    var axplNode = domUtils.findParent(
      range.startContainer,
      function (node) {
        return (
          node && node.tagName === "SPAN" && node.getAttribute("axplugins")
        );
      },
      true
    );
    var paragraphNode = domUtils.findParent(
      range.startContainer,
      function (node) {
        return (
          node &&
          ((node.tagName === "SPAN" && node.getAttribute("axplugins")) ||
            (node.tagName === "DIV" && node.getAttribute("axplugins")))
        );
      },
      true
    );
    var tableNode = domUtils.findParent(
      range.startContainer,
      function (node) {
        return node && node.tagName === "TABLE";
      },
      true
    );
    var isTable = tableNode && tableNode.tagName === "TABLE";
    var isParaEle =
      paragraphNode &&
      paragraphNode.getAttribute("axplugins") === "paragraphele";
    var isCombiele =
      axplNode && axplNode.getAttribute("axplugins") === "combine"; //组合元素
    var noWarpValid =
      blockNode &&
      blockNode.tagName != "BODY" &&
      !isParaEle &&
      !isCombiele &&
      !isTable; //段落元素，组合元素可以嵌套

    // 选区 块级父元素如果是body 则可以嵌套  yang end

    //判断条件 ： 1.选区的父元素不是body  2.不是段落元素 3.不是组合元素
    if (
      type != "pagemargin" &&
      type != "parasetter" &&
      !isEdit &&
      parentEle.tagName != "BODY" &&
      parentEle.className != "" &&
      parentEle.className != "MsoNormal" &&
      parentEle.className != "ax-page-wrapper" &&
      parentEle.className != "ax-page-content" &&
      !this.hasClass(parentEle, "ax-page-header") &&
      noWarpValid
    ) {
      alert(me.getLang("ax.noWarp"));
      return;
    }
    var dialog = new AX.ui.Dialog({
      iframeUrl: me.options.AXEDITOR_HOME_URL + dialogUrl,
      name: type,
      editor: me,
      title: me.getLang("ax." + type),
      cssRules: cssRules,
      buttons: hideBtns
        ? ""
        : [
          {
            className: "edui-okbutton",
            label: me.getLang("ax.confirm"),
            onclick: function () {
              dialog.close(true);
            }
          },
          {
            className: "edui-cancelbutton",
            label: me.getLang("ax.cancel"),
            onclick: function () {
              dialog.close(false);
            }
          }
        ]
    });
    dialog.render();
    dialog.open();
  },
  /**
   * 通用鼠标移入编辑窗
   * @param {String} thePlugins 控件类型
   * @param {Editor} me 编辑器
   * @param {Popup} popup 弹窗
   * @param {Event} evt 事件对象
   */
  commonEditTip: function (thePlugins, me, popup, evt) {
    try {
      evt = evt || window.event;
      var el = evt.target || evt.srcElement,
        parentNode = el.parentNode,
        model = me.options.editorModel;
      if (
        !parentNode ||
        (model != "design" &&
          model != "edit" &&
          model != "preview" &&
          !(model == "mark" && thePlugins == "marktag"))
      )
        return; //父节点为空过滤掉
      if ("BODY" != el.tagName && "HTML" !== el.tagName) {
        //body及html过滤掉
        var thePluginsNode = AX.dom.domUtils.findParent(
          el,
          function (dom) {
            return (
              dom.getAttribute("axplugins") == thePlugins &&
              dom.getAttribute("attrs")
            );
          },
          true
        );
        if (thePluginsNode) {
          var popOpts = "";
          if (model == "design") {
            popOpts =
              "<nobr>" +
              me.getLang("ax." + thePlugins) +
              ': <span onclick=$$._edittext() class="edui-clickable">' +
              me.getLang("edit") +
              '</span>&nbsp;&nbsp;<span onclick=$$._delete() class="edui-clickable">' +
              me.getLang("delete") +
              '</span>&nbsp;&nbsp;<span onclick=$$._saveEle() class="edui-clickable">' +
              me.getLang("ax.inStore") +
              "</span></nobr>";
            if (thePlugins == "diagnose" || thePlugins == "prescription") {
              popOpts =
                "<nobr>" +
                me.getLang("ax." + thePlugins) +
                ': <span onclick=$$._delete() class="edui-clickable">' +
                me.getLang("delete") +
                "</span></nobr>";
            }
            if (thePlugins == "paragraphele") {
              popOpts =
                "<nobr>" +
                me.getLang("ax." + thePlugins) +
                ': <span onclick=$$._edittext() class="edui-clickable">' +
                me.getLang("edit") +
                '</span>&nbsp;&nbsp;<span onclick=$$._delete() class="edui-clickable">' +
                me.getLang("delete") +
                '</span>&nbsp;&nbsp;<span onclick=$$._saveParse() class="edui-clickable">' +
                me.getLang("ax.saveAsPhrase") +
                "</span></nobr>";
            }
            if (thePlugins == "combine") {
              popOpts =
                "<nobr>" +
                me.getLang("ax." + thePlugins) +
                ': <span onclick=$$._edittext() class="edui-clickable">' +
                me.getLang("edit") +
                '</span>&nbsp;&nbsp;<span onclick=$$._cassetter() class="edui-clickable">' +
                me.getLang("ax.cascadesetter") +
                '</span>&nbsp;&nbsp;<span onclick=$$._delete() class="edui-clickable">' +
                me.getLang("delete") +
                '</span>&nbsp;&nbsp;<span onclick=$$._saveEle() class="edui-clickable">' +
                me.getLang("ax.inStore") +
                "</span></nobr>";
            }

            axTools.setPopupContent(
              popup,
              thePluginsNode,
              "<nobr>" + popOpts + "</nobr>"
            );
          } else if (model == "edit") {
            if (thePlugins == "checkres") {
              popOpts =
                "<nobr>" +
                '<span onclick=$$._delete() class="edui-clickable">' +
                me.getLang("delete") +
                "</span></nobr>";
              axTools.setPopupContent(
                popup,
                thePluginsNode,
                "<nobr>" + popOpts + "</nobr>"
              );
            }
            if (thePlugins == "paragraphele") {
              popOpts =
                "<nobr>" +
                me.getLang("ax." + thePlugins) +
                ': <span onclick=$$._saveParse() class="edui-clickable">' +
                me.getLang("ax.saveAsPhrase") +
                "</span></nobr>";
              axTools.setPopupContent(
                popup,
                thePluginsNode,
                "<nobr>" + popOpts + "</nobr>"
              );
            }
          }
          if (thePlugins == "svgImg") {
            popOpts =
              "<nobr>" +
              me.getLang("ax." + thePlugins) +
              ': <span onclick=$$._delete() class="edui-clickable">' +
              me.getLang("ax.delete") +
              "</span></nobr>";
            axTools.setPopupContent(
              popup,
              thePluginsNode,
              "<nobr>" + popOpts + "</nobr>"
            );
          }
        } else if (
          model == "mark" &&
          thePlugins == "marktag" &&
          axTools.hasClass(el, "editor-free-text")
        ) {
          popOpts =
            "<nobr>" +
            me.getLang("ax." + thePlugins) +
            ': <span onclick=$$._delete() class="edui-clickable">' +
            me.getLang("ax.delete") +
            "</span></nobr>";
          axTools.setPopupContent(
            popup,
            el,
            "<nobr>" + popOpts + "</nobr>",
            "marktag"
          );
        } else {
          popup.hide();
        }
      } else {
        popup.hide();
      }
    } catch (e) {
      console.log(e);
    }
  },
  /**
   * 构建控件鼠标移入提示窗
   * @param {Object} parmas 提示窗配置参数
   *                  me editor编辑器实例
   *                  type 控件类型
   *                  editFunc 编辑函数
   *                  delFunc 删除函数
   *                  saveEle 存库函数
   *                  savePhrase 存为片语函数
   */
  makePopup: function (params) {
    var me = params.me,
      type = params.type,
      editFunc = params.editFunc,
      delFunc = params.delFunc,
      saveEle = params.saveEle,
      savePhrase = params.savePhrase;
    var popup = new baidu.editor.ui.Popup({
      editor: me,
      content: "",
      className: "edui-bubble",
      _edittext: function () {
        if (typeof editFunc == "function") {
          editFunc(this);
        } else {
          baidu.editor.plugins[type].editdom = popup.anchorEl;
          me.execCommand(type, true);
          this.hide();
        }
      },
      _delete: function () {
        if (typeof delFunc == "function") {
          delFunc(this);
        } else {
          var self = this;
          me.window.confirmMsg(me.getLang("ax.delCtrlTip"), function (rsl) {
            if (!rsl) {
              return;
            }
            if (self.anchorEl.getAttribute("axplugins") == "paragraphele") {
              if (self.anchorEl.getAttribute("ax-split-sign")) {
                var delDom = axTools.getByTagAttr(
                  "div",
                  "ax-split-sign",
                  self.anchorEl.getAttribute("ax-split-sign"),
                  me.document
                );
                for (var i = 0; i < delDom.length; i++) {
                  baidu.editor.dom.domUtils.remove(delDom[i], false);
                }
              } else {
                baidu.editor.dom.domUtils.remove(self.anchorEl, false);
              }
            } else {
              baidu.editor.dom.domUtils.remove(self.anchorEl, false);
            }
          })
          // if (window.confirm(me.getLang("ax.delCtrlTip"))) {
          //   if (this.anchorEl.getAttribute("axplugins") == "paragraphele") {
          //     if (this.anchorEl.getAttribute("ax-split-sign")) {
          //       var delDom = axTools.getByTagAttr(
          //         "div",
          //         "ax-split-sign",
          //         this.anchorEl.getAttribute("ax-split-sign"),
          //         me.document
          //       );
          //       for (var i = 0; i < delDom.length; i++) {
          //         baidu.editor.dom.domUtils.remove(delDom[i], false);
          //       }
          //     } else {
          //       baidu.editor.dom.domUtils.remove(this.anchorEl, false);
          //     }
          //   } else {
          //     baidu.editor.dom.domUtils.remove(this.anchorEl, false);
          //   }
          // }
          this.hide();
        }
      },
      _saveEle: function () {
        if (typeof saveEle == "function") {
          saveEle(this);
        } else {
          if (typeof me.options.saveEleMethod == "function") {
            if (this.anchorEl.getAttribute("isQuote") == "false") {
              this.hide();
              alert(me.getLang("ax.noSaveEle"));
              return; // 以引入的元素禁止再次存库
            }
            var json = JSON.parse(this.anchorEl.getAttribute("attrs"));
            json.pluginType = this.anchorEl.getAttribute("axPlugins");
            me.options.saveEleMethod(json);
          } else {
            alert(me.getLang("ax.noGetSaveEleMethod"));
          }
          this.hide();
        }
      },
      _saveParse: function () {
        if (typeof savePhrase == "function") {
          savePhrase(this);
        } else {
          if (typeof me.options.savePhraseMethod == "function") {
            var json = JSON.parse(this.anchorEl.getAttribute("attrs"));
            json.pluginType = this.anchorEl.getAttribute("axPlugins");
            me.options.savePhraseMethod(json);
          } else {
            alert(me.getLang("ax.noSavePhraseMethod"));
          }
          this.hide();
        }
      }
    });

    return popup;
  },
  /**
   *
   * @param {编辑器实例} me
   * @param {传入的菜单信息} eles
   * @param {dom对象} doms
   */
  makeContextMenu: function (me, eles, doms) {
    var menus = [];
    var model = me.options.editorModel;
    var lang = me.getLang("contextMenu")
    for (var i = 0; i < doms.length; i++) {
      var type = doms[i].getAttribute("axplugins");
      var params = eles[type];
      if (!params) continue;
      var editFunc = params.editFunc;
      var delFunc = params.delFunc;
      var saveEle = params.saveEle;
      var savePhrase = params.savePhrase;
      var cassetterFun = params._cassetter;
      var menu = {
        group: params.group,
        icon: 'null',
        subMenu: []
      }
      // 编辑
      var _editFunc = function (index, cb) {
        var self = doms[index];
        type = doms[index].getAttribute("axplugins");
        if (!cb) {
          baidu.editor.plugins[type].editdom = self;
          me.execCommand(type, true);
        } else {
          cb(self);
        }
      }
      // 删除
      var _delFunc = function (index, cb) {
        var self = doms[index];
        type = doms[index].getAttribute("axplugins");
        if (!cb) {
          me.window.confirmMsg(me.getLang("ax.delCtrlTip"), function (rsl) {
            if (!rsl) {
              return;
            }
            if (self.getAttribute("axplugins") == "paragraphele") {
              if (self.getAttribute("ax-split-sign")) {
                var delDom = axTools.getByTagAttr(
                  "div",
                  "ax-split-sign",
                  self.getAttribute("ax-split-sign"),
                  me.document
                );
                for (var m = 0; m < delDom.length; m++) {
                  baidu.editor.dom.domUtils.remove(delDom[m], false);
                }
              } else {
                baidu.editor.dom.domUtils.remove(self, false);
              }
            } else {
              baidu.editor.dom.domUtils.remove(self, false);
            }
          })
        } else {
          cb(self)
        }
      }
      // 存库
      var _saveEle = function (index, cb) {
        var self = doms[index];
        type = doms[index].getAttribute("axplugins");
        if (!cb) {
          if (typeof me.options.saveEleMethod == "function") {
            if (self.getAttribute("isQuote") == "false") {
              alert(me.getLang("ax.noSaveEle"));
              return; // 以引入的元素禁止再次存库
            }
            var json = JSON.parse(self.getAttribute("attrs"));
            json.pluginType = self.getAttribute("axPlugins");
            me.options.saveEleMethod(json);
          } else {
            alert(me.getLang("ax.noGetSaveEleMethod"));
          }
        } else {
          cb(self);
        }
      }
      // 存为片语
      var _savePhrase = function (index, cb) {
        var self = doms[index];
        type = doms[index].getAttribute("axplugins");
        if (!cb) {
          if (typeof me.options.savePhraseMethod == "function") {
            var json = JSON.parse(self.getAttribute("attrs"));
            json.pluginType = self.getAttribute("axPlugins");
            try{
              var selecter = me.window.getSelection().toString();
            }catch(err){
            }
            me.options.savePhraseMethod(json, (selecter?selecter:""));
          } else {
            alert(me.getLang("ax.noSavePhraseMethod"));
          }
        } else {
          cb(self);
        }
      }
      // 级联设置
      var _cassetter = function (index, cb) {
        var self = doms[index];
        type = doms[index].getAttribute("axplugins");
        if (!cb) {
        } else {
          cb(self);
        }
      }
      // 编辑
      var edit = {
        label: lang.edit,
        icon: 'null',
        index: i,
        cmdName: '',
        cb: editFunc,
        exec: _editFunc
      }
      // 删除
      var del = {
        label: lang.delete,
        icon: 'null',
        index: i,
        cmdName: '',
        cb: delFunc,
        exec: _delFunc
      }
      // 存库
      var saveele = {
        label: lang.saveele,
        icon: 'null',
        index: i,
        cmdName: '',
        cb: saveEle,
        exec: _saveEle
      }
      // 存为片语
      var savephr = {
        label: lang.savephrase,
        icon: 'null',
        index: i,
        cmdName: '',
        cb: savePhrase,
        exec: _savePhrase
      }
      // 级联设置
      var cassetter = {
        label: lang.cassetter,
        icon: 'null',
        index: i,
        cmdName: '',
        cb: cassetterFun,
        exec: _cassetter
      }
      // 根据不同元素显示不同菜单，校验
      if (i == 0) {
        if (model === "design") {
          if (type === "diagnose" || type === "prescription") {
            menus.push(del);
          } else if (type === "paragraphele") {
            menus.push(edit);
            menus.push(del);
            menus.push(savephr);
          } else if (type === "combine") {
            menus.push(edit);
            menus.push(cassetter);
            menus.push(del);
            menus.push(saveele);
          } else {
            menus.push(edit);
            menus.push(del);
            menus.push(saveele);
          }
        } else if (model === "edit") {
          if (type === "paragraphele") {
            menus.push(savephr);
          } else {
            continue;
          }
        } else if (model == "mark" && type == "marktag" && axTools.hasClass(doms[i], "editor-free-text")) {
          menus.push(del);
        } else if (type === "svgImg") {
          menus.push(del);
        } else {
          continue;
        }
      } else {
        if (model === "design") {
          if (type === "diagnose" || type === "prescription") {
            menu.subMenu.push(del);
          } else if (type === "paragraphele") {
            menu.subMenu.push(edit);
            menu.subMenu.push(del);
            menu.subMenu.push(savephr);
          } else if (type === "combine") {
            menu.subMenu.push(edit);
            menu.subMenu.push(cassetter);
            menu.subMenu.push(del);
            menu.subMenu.push(saveele);
          } else {
            menu.subMenu.push(edit);
            menu.subMenu.push(del);
            menu.subMenu.push(saveele);
          }
        } else if (model === "edit") {
          if (type === "paragraphele") {
            menu.subMenu.push(savephr);
          } else {
            continue;
          }
        } else if (model == "mark" && type == "marktag" && axTools.hasClass(doms[i], "editor-free-text")) {
          menu.subMenu.push(del);
        } else if (type === "svgImg") {
          menu.subMenu.push(del);
        } else {
          continue;
        }
        menus.push(menu);
      }
      // var popup = new baidu.editor.ui.Popup({
      //   editor: me,
      //   content: "",
      //   className: "edui-bubble",
      //   _edittext: function () {
      //     if (typeof editFunc == "function") {
      //       editFunc(this);
      //     } else {
      //       baidu.editor.plugins[type].editdom = popup.anchorEl;
      //       me.execCommand(type, true);
      //       this.hide();
      //     }
      //   },
      //   _delete: function () {
      //     if (typeof delFunc == "function") {
      //       delFunc(this);
      //     } else {
      //       var self = this;
      //       me.window.confirmMsg(me.getLang("ax.delCtrlTip"), function (rsl) {
      //         if (!rsl) {
      //           return;
      //         }
      //         if (self.anchorEl.getAttribute("axplugins") == "paragraphele") {
      //           if (self.anchorEl.getAttribute("ax-split-sign")) {
      //             var delDom = axTools.getByTagAttr(
      //               "div",
      //               "ax-split-sign",
      //               self.anchorEl.getAttribute("ax-split-sign"),
      //               me.document
      //             );
      //             for (var i = 0; i < delDom.length; i++) {
      //               baidu.editor.dom.domUtils.remove(delDom[i], false);
      //             }
      //           } else {
      //             baidu.editor.dom.domUtils.remove(self.anchorEl, false);
      //           }
      //         } else {
      //           baidu.editor.dom.domUtils.remove(self.anchorEl, false);
      //         }
      //       })
      //       // if (window.confirm(me.getLang("ax.delCtrlTip"))) {
      //       //   if (this.anchorEl.getAttribute("axplugins") == "paragraphele") {
      //       //     if (this.anchorEl.getAttribute("ax-split-sign")) {
      //       //       var delDom = axTools.getByTagAttr(
      //       //         "div",
      //       //         "ax-split-sign",
      //       //         this.anchorEl.getAttribute("ax-split-sign"),
      //       //         me.document
      //       //       );
      //       //       for (var i = 0; i < delDom.length; i++) {
      //       //         baidu.editor.dom.domUtils.remove(delDom[i], false);
      //       //       }
      //       //     } else {
      //       //       baidu.editor.dom.domUtils.remove(this.anchorEl, false);
      //       //     }
      //       //   } else {
      //       //     baidu.editor.dom.domUtils.remove(this.anchorEl, false);
      //       //   }
      //       // }
      //       this.hide();
      //     }
      //   },
      //   _saveEle: function () {
      //     if (typeof saveEle == "function") {
      //       saveEle(this);
      //     } else {
      //       if (typeof me.options.saveEleMethod == "function") {
      //         if (this.anchorEl.getAttribute("isQuote") == "false") {
      //           this.hide();
      //           alert(me.getLang("ax.noSaveEle"));
      //           return; // 以引入的元素禁止再次存库
      //         }
      //         var json = JSON.parse(this.anchorEl.getAttribute("attrs"));
      //         json.pluginType = this.anchorEl.getAttribute("axPlugins");
      //         me.options.saveEleMethod(json);
      //       } else {
      //         alert(me.getLang("ax.noGetSaveEleMethod"));
      //       }
      //       this.hide();
      //     }
      //   },
      //   _saveParse: function () {
      //     if (typeof savePhrase == "function") {
      //       savePhrase(this);
      //     } else {
      //       if (typeof me.options.savePhraseMethod == "function") {
      //         var json = JSON.parse(this.anchorEl.getAttribute("attrs"));
      //         json.pluginType = this.anchorEl.getAttribute("axPlugins");
      //         me.options.savePhraseMethod(json);
      //       } else {
      //         alert(me.getLang("ax.noSavePhraseMethod"));
      //       }
      //       this.hide();
      //     }
      //   }
      // });
    }

    return menus;
    // return popup;
  },
  /**
   * 设置提示窗内容
   * @param {baidu.editor.ui.Popup} popup 提示窗
   * @param {Node} el 控件
   * @param {String} content 提示内容
   */
  setPopupContent: function (popup, el, content, type) {
    var attrs = type != "marktag" && el.getAttribute("attrs");
    if (!attrs && type != "marktag") {
      //控件内容区和控件区都可触发
      el = el.parentNode;
      if (!el.getAttribute("attrs")) {
        return;
      }
    }
    var html = popup.formatHtml(content);
    if (html) {
      popup.getDom("content").innerHTML = html;
      popup.anchorEl = el;
      popup.showAnchor(popup.anchorEl);
    } else {
      popup.hide();
    }
  },
  /**
   * 表达式图片鼠标移入事件
   * @param {Event} evt event对象
   * @param {String} type 表达式类型
   * @param {baidu.editor.ui.Popup} popup 提示窗
   */
  expressionHover: function (evt, type, popup, me) {
    evt = evt || window.event;
    var target = evt.target;
    var el = evt.target || evt.srcElement;
    var axPlugins = el.getAttribute("axplugins");
    // 留痕信息弹框
    if (me.options.editorModel == "mark" && target.className.indexOf("mark-free-medical") > -1) {
      var left = (me.body.clientWidth - target.offsetLeft) < 320 ? 320 : target.offsetLeft;
      var top = target.offsetTop + 30 + target.offsetHeight;
      var history = JSON.parse(target.getAttribute("history")) || [];
      var axplugin = target.getAttribute("axplugins");
      var span = "";
      span += '<span class="mark-medical-tip" style="position: absolute;top: ' + top + 'px;left: ' + left + 'px;width: 480px;padding: 5px 10px;background: #fffcd2;border: 1px solid #ccc;box-shadow: 0 0 3px #eee;/* font-weight: bold; */">'
      for (var i = 0; i < history.length; i++) {
        if (!history[i]) continue;
        span += history[i].user
        for (var j in history[i]) {
          if (!history[i][j].type || history[i][j].type === "none") continue;
          // 牙位图数据格式不一致，单独处理
          if (axplugin === "permanentteeth" || axplugin === "babyteeth" || axplugin === "mixteeth" || axplugin === "mixteeth2") {
            var ymValue = JSON.parse(target.getAttribute("ymValue"));
            var yamian = "";
            for (var m = 0; m < history[i][j].val.yamian.length; m++) {
              yamian += ymValue[history[i][j].val.yamian[m]];
            }
            span += (history[i][j].type == "del" ? ",删除" : ",增加") + ' "<span>' + history[i][j].teethIndex + '<sup>' + yamian + '</sup></span>" 字符'
          } else {
            span += (history[i][j].type == "del" ? ",删除" : ",增加") + ' "' + history[i][j].val + '" 字符'
          }

        }
        span += '  时间：' + history[i].time + "<br>"
      }
      span += '</span>';
      var tips = axTools.getByClass("mark-medical-tip", me.document);
      for (var i = 0; i < tips.length; i++) {
        var tip = tips[i];
        tip.parentElement.parentElement.removeChild(tip.parentElement);
      }
      var div = document.createElement("div");
      div.innerHTML = span;
      history.length > 0 && target.offsetParent.appendChild(div.children[0]);
    } else {
      var tips = axTools.getByClass("mark-medical-tip", me.document);
      for (var i = 0; i < tips.length; i++) {
        var tip = tips[i];
        tip.parentElement.parentElement.removeChild(tip.parentElement);
      }
    }
    if (/img/gi.test(el.tagName) && axPlugins == type) {
      // this.setPopupContent(
      //   popup,
      //   el,
      //   "<nobr>" +
      //   (me.options.labelMap[type] ||
      //     me.getLang("ax." + type) ||
      //     "医学表达式") +
      //   ': <span onclick=$$._edittext() class="edui-clickable">' +
      //   me.getLang("edit") +
      //   '</span>&nbsp;&nbsp;<span onclick=$$._delete() class="edui-clickable">' +
      //   me.getLang("delete") +
      //   "</span></nobr>"
      // );
    }
  },
  /**
   * 测试环境或留痕模式下，初始化时记录原始值，作为留痕对比值
   * @param {Editor} me 编辑器实例
   */
  recordInitMarkVal: function (me) {
    if (!!!me.options.product || me.options.editorModel == "mark") {
      var ctrls = axTools.getByClass("ctrl-bg", me.document);
      var records = []; // 已经记录过的元素id集合，避免分页造成的记录失败问题
      for (var i = 0; i < ctrls.length; i++) {
        //理论上不应该出现该问题，但放止误操作删除了，引起阻塞性bug，此处增加过滤拦截
        var ctrlVals = axTools.getByClass("ctrl-value", ctrls[i])[0];
        if (!ctrlVals) {
          continue;
        }
        var oldVal = ctrlVals.innerHTML.replace(/\u200B/g, ""),
          type = ctrls[i].getAttribute("axplugins");
        // 由于分页导致可能会出现两个相同元素，此处只操作相同元素中的第一个元素，并且拼接其他内容
        var id = ctrls[i].getAttribute("id");
        var _arrMatch = axTools.getByTagAttr("span", "id", id, me.document);
        if(_arrMatch.length > 1 && records.indexOf(id) == -1 && type !== 'macro') {
          records.push(id);
          for(var l = 0; l < _arrMatch.length; l++) {
            ctrlVals = axTools.getByClass("ctrl-value", _arrMatch[l])[0];
            oldVal += ctrlVals.innerHTML.replace(/\u200B/g, "")
          }
        }
        if (type == 'signature' || type == 'paragraphele') {
          continue;
        }
        if (type == "radio" || type == "checkbox") {
          var inputs = ctrlVals.getElementsByTagName("input"),
            selectedVals = [];
          for (var j = 0; j < inputs.length; j++) {
            if (inputs[j].checked) {
              selectedVals.push(inputs[j].getAttribute("valueStr"));
            }
          }
          oldVal = selectedVals.join(",");
        }
        // if(type == 'numberelement') {
        //   var ctrlClone = $(ctrlVals).clone()[0];
        //   $(ctrlClone).find(".editor-mark-del-text").remove();
        //   oldVal = ctrlClone.innerText;
        // }
        oldVal = oldVal.replace(/\u200B/g, "");
        ctrls[i].setAttribute("oldVal", oldVal);
      }
    }
  },
  /**
   * 校验体征信息
   * 可在配置文件中配置需要过滤的关键字
   * @param {Editor} me 编辑器实例
   * @param {Boolean} hideConfirmTip 是否隐藏confirm提示，自动隐藏
   */
  validateSign: function (me, hideConfirmTip) {
    var sexCtrl = this.getByTagAttr("span", "macroCode", "M0002", me.document),
      content = me.getContent();
    if (sexCtrl.length == 0) {
      return true;
    }
    var maleFlag =
      sexCtrl[0].innerText.indexOf(me.getLang("ax.male")) > -1 ||
      sexCtrl[0].innerText == 1,
      keywords = maleFlag
        ? me.options.femaleSensitiveWords
        : me.options.maleSensitiveWords,
      unkeywords = maleFlag
        ? me.options.maleSensitiveWords
        : me.options.femaleSensitiveWords,
      includeSensitiveWord = [];

    //获取病历包含的敏感字数组
    for (var i = 0; i < keywords.length; i++) {
      var key = keywords[i];
      //已隐藏的关键字不在放入过滤关键字中
      if (
        content.indexOf(key) != -1 &&
        content.indexOf('<span class="sensitiveWords">' + key + "</span>") == -1
      ) {
        includeSensitiveWord.push(key);
      }
    }

    var meNums = 0,
      mensesExpArr = axTools.getByClass("menses", me.document);
    if (maleFlag) {
      for (var i = 0; i < mensesExpArr.length; i++) {
        meNums++;
      }
    }

    //想还原敏感词可以直接取消sensitiveWords样式，细致点可以将标签一起去掉
    if (includeSensitiveWord.length > 0) {
      if (
        hideConfirmTip ||
        confirm(
          "包含" +
          includeSensitiveWord.length +
          "个体征敏感词:【" +
          includeSensitiveWord.join("、") +
          "】" +
          (maleFlag && meNums > 0 ? "及" + meNums + "个月经表达式" : "") +
          "，是否自动隐藏？"
        )
      ) {
        for (var i = 0; i < keywords.length; i++) {
          var key = keywords[i];
          var regExp = new RegExp(key + "(?!([^<]*>)|([^<]*</a>))", "g"); //正则表达式方法，完全匹配对应的关键字，且声明全局
          content = content.replace(
            regExp,
            '<span class="sensitiveWords">' + key + "</span>"
          );
        }

        me.setContent(content);

        if (maleFlag && meNums > 0) {
          mensesExpArr = axTools.getByClass("menses", me.document);
          for (var i = 0; i < mensesExpArr.length; i++) {
            mensesExpArr[i].style.display = "none";
          }
        }

        var swBlocks = this.getByClass("sensitiveWords", me.document);
        for (var i = 0; i < swBlocks.length; i++) {
          var axPluginsNode = AX.dom.domUtils.findParent(
            swBlocks[i],
            function (dom) {
              return (
                dom.getAttribute("axplugins") != null &&
                dom.getAttribute("attrs")
              );
            },
            true
          );

          if (axPluginsNode) {
            //段落元素标题若含有敏感词，则将段落隐藏
            if (axPluginsNode.getAttribute("axPlugins") == "paragraphele") {
              var ctrlVal = axPluginsNode.childNodes[0];
              if (this.getByClass("sensitiveWords", ctrlVal).length > 0) {
                this.addClass(axPluginsNode, "sensitiveWords");
              }
            }
          }
        }
      } else {
        return false;
      }
    }

    //还原非敏感词，如性别为男时，过滤女性敏感词，刷新后为女时，需将女性敏感词还原，将男性敏感词过滤，反之同理
    content = me.getContent(); //获取最新的内容
    for (var i = 0; i < unkeywords.length; i++) {
      var key = unkeywords[i];
      var regExp = new RegExp(
        '<span class="sensitiveWords">' + unkeywords[i] + "</span>",
        "g"
      ); //正则表达式方法，完全匹配对应的关键字，且声明全局
      content = content.replace(regExp, unkeywords[i]);
    }

    me.setContent(content);

    //恢复月经表达式
    if (!maleFlag && mensesExpArr.length > 0) {
      mensesExpArr = axTools.getByClass("menses", me.document);
      for (var i = 0; i < mensesExpArr.length; i++) {
        mensesExpArr[i].style.display = "inline";
      }
    }

    return true;
  },
  /**
   * 获取审签签名的用户id、审签级别
   * @param {Editor} me 编辑器实例
   */
  getSignatureInfo: function (me) {
    var signatures = this.getByClass("signature", me.document);
    var lvlArr = [];
    for (var i = 0; i < signatures.length; i++) {
      var attrs = JSON.parse(signatures[i].getAttribute("attrs"));
      for (
        var j = 0;
        j < this.getByClass("ctrl-value", signatures[i]).length;
        j++
      ) {
        var ctrl = this.getByClass("ctrl-value", signatures[i])[j];
        var isNewSig = ctrl.getAttribute("isNewSign");
        var itemSignture = ctrl.getAttribute("itemSignture");
        if (isNewSig) {
          switch (itemSignture) {
            case "oneLevel":
              lvlArr.push("01");
              break;
            case "twoLevel":
              lvlArr.push("02");
              break;
            case "threeLevel":
              lvlArr.push("03");
              break;
          }
        }
      }
    }
    return lvlArr;
  },
  /**
   * 保存、提交、另存等于后台交互操作前执行校验检查
   * @param {Editor} me 编辑器实例
   * @param {Boolean} strict 是否严格校验，true--严格（阻止保存），false--只提示（不阻止处保存）
   * @returns {Boolean} 校验是否通过，true--通过，false--不通过
   */
  beforeSaveCheck: function (me, strict) {
    if (me.options.editorModel == "design") {
      return true;
    }
    //校正数字元素格式，补齐或切割小数位
    // this.modifyNumStyle(me, null);

    // 保存前先确保不可为空的签名都已签名
    var signatures = this.getByClass("signature", me.document);
    for (var i = 0; i < signatures.length; i++) {
      var attrs = JSON.parse(signatures[i].getAttribute("attrs"));
      for (
        var j = 0;
        j < this.getByClass("ctrl-value", signatures[i]).length;
        j++
      ) {
        var ctrl = this.getByClass("ctrl-value", signatures[i])[j];
        if (!!attrs.isCurrDoctor) {
          if (me.options.signatureType == "text") {
            ctrl.innerHTML = me.options.userInfo.name;
          } else if (me.options.signatureType == "img") {
            ctrl.innerHTML =
              '<img src="' +
              me.options.signatureUrl +
              me.options.userInfo.name +
              '" alt="签名">';
          }
        }
        // var signatureVal = ctrl.innerHTML.replace(/u200B/g, "");
        // if (!!!attrs.isEmpty && signatureVal == "") {
        //   if (!strict) {
        //     if (confirm(me.getLang("ax.confirmSignatureTip"))) {
        //       this.selectRange(me);
        //       return false;
        //     } else {
        //       return true;
        //     }
        //   } else {
        //     alert(me.getLang("ax.signatureTip"));
        //     this.selectRange(me);
        //     return false;
        //   }
        // }

        // 签名后去掉为空校验样式
        if (ctrl.innerHTML.replace(/u200B/g, "") != "") {
          this.removeClass(ctrl.parentNode, "error");
        }
      }
    }

    //校验必填元素是否均已填写
    var readyFlag = this.validRequiredCtrls(me);
    if (!readyFlag) {
      if (!strict) {
        // if (confirm(me.getLang("ax.confirmRequiredTip"))) {
        //   this.selectRange(me);
        //   return false;
        // } else {
        //   return true;
        // }
        alert(me.getLang("ax.confirmRequiredTip"));
        this.selectRange(me);
        return false;
      } else {
        alert(me.getLang("ax.requiredTip"));
        this.selectRange(me);
        return false;
      }
    }
    // 校验 文书元素是否有不符合条件填写，直接验证 error Class
    if (this.getByClass("error", me.document).length > 0) {
      const errDom = this.getByClass("error", me.document);
      for(var z = 0; z < errDom.length; z++) {
        if (errDom[z].style.display !== 'none') {
          alert(me.getLang("ax.hasError"));
          return false;
        }
      }
    }

    //体征过滤敏感词
    // if (!this.validateSign(me)) {
    //   return false;
    // }

    return true;
  },
  /**
   * 选中第一个错误项
   * @param {Editor} me 编辑器实例
   * @returns {Null} 无
   */
  selectRange: function (me) {
    var errorNode = axTools.getByClass("error", me.document)[0];
    var errorNodeCtrl = axTools.getByClass("ctrl-value", errorNode)[0];
    if (errorNodeCtrl.childNodes.length == 0) {
      errorNodeCtrl.innerHTML = "&#8203;"
    }
    var range = me.selection.getRange().selectNode(errorNodeCtrl.childNodes[0]);
    range.select();
  },
  /**
   * @Description: 有placeholder的 span ，清除 鼠标占位符 "\u200B"
   * @param {DOM} el 事件的target节点
   * @param {String} domRange
   * @date 2019/6/24
   */
  placeholderAssistHandler: function (el, domRange) {
    var axpNode = null,
      domUtils = AX.dom.domUtils,
      browser = AX.browser,
      domRange = domRange || document,
      tags = domRange.getElementsByTagName("span"),
      assistNode = domUtils.findParent(
        el,
        function (dom) {
          return (
            dom.tagName === "SPAN" &&
            dom.getAttribute("axplugins") != null &&
            dom.getAttribute("attrs")
          );
        },
        true
      );
    for (var i = 0; i < tags.length; i++) {
      var tag = tags[i];

      if (tag && tag.getAttribute("placeholder") != null) {
        axpNode = domUtils.findParent(
          tag,
          function (dom) {
            return (
              dom.tagName === "SPAN" &&
              dom.getAttribute("axplugins") != null &&
              dom.getAttribute("attrs")
            );
          },
          true
        );
        //事件的target axp节点 与 tag axp节点 不一致
        if (
          assistNode != axpNode ||
          (assistNode === null && axpNode === null)
        ) {
          var child = tag.childNodes;
          // 节点 只有一个文本节点 并内容是 "\u200B"
          if (
            child.length === 1 &&
            child[0].nodeType === 3 &&
            child[0][browser.ie ? "innerText" : "textContent"] === "\u200B"
          ) {
            child[0][browser.ie ? "innerText" : "textContent"] = "";
          }
        }
      }
    }
  },
  /**
   * 乘法
   * @param {Number} arg1 乘数1
   * @param {Number} arg2 乘数2
   * @returns {Number} 结果
   */
  accMul: function (arg1, arg2) {
    var m = 0,
      s1 = arg1.toString(),
      s2 = arg2.toString();
    try {
      m += s1.split(".")[1].length;
    } catch (e) { }
    try {
      m += s2.split(".")[1].length;
    } catch (e) { }
    return (
      (Number(s1.replace(".", "")) * Number(s2.replace(".", ""))) /
      Math.pow(10, m)
    );
  },
  /**
   * 获取分辨率
   * @returns {Array} 分辨率信息
   */
  getDPI: function () {
    // var arrDPI = new Array;
    // var tmpNode = document.createElement("DIV");
    // tmpNode.style.cssText = "width:1cm;height:1cm;visibility:hidden;";
    // document.body.appendChild(tmpNode);
    // arrDPI[0] = tmpNode.offsetWidth;
    // arrDPI[1] = tmpNode.offsetHeight;
    // tmpNode.parentNode.removeChild(tmpNode);
    // return arrDPI;
    var a = new Array();
    if (window.screen.deviceXDPI)
      (a[0] = window.screen.deviceXDPI / window.devicePixelRatio),
        (a[1] = window.screen.deviceYDPI / window.devicePixelRatio);
    else {
      var b = document.createElement("DIV");
      (b.style.cssText =
        "width:1in;height:1in;position:absolute;left:0px;top:0px;z-index:99;visibility:hidden"),
        document.body.appendChild(b),
        (a[0] = parseInt(b.offsetWidth)),
        (a[1] = parseInt(b.offsetHeight)),
        b.parentNode.removeChild(b);
    }
    return a;
  },
  /**
   * cm转换为px
   * @param {Number} value
   * @returns {number} px值
   */
  cm2px: function (value) {
    // return parseInt(value/2.54*96);
    // console.log(value/2.54*120)
    return this.accMul(value, (this.getDPI()[0] / 2.54).toFixed(2));
  },

  /**
   * 获取dom样式属性
   * @param {DOM} dom
   */
  getDomStyle: function (dom) {
    if (!dom || !(dom.nodeType == 1 || dom.nodeType == 9)) {
      return {};
    }
    return dom.currentStyle
      ? dom.currentStyle
      : window.getComputedStyle(dom, null);
  },
  /**
   * 获取dom样式属性
   * @param {DOM} dom
   */
  getDomHeight: function (dom) {
    var domStyle = this.getDomStyle(dom);
    var height =
      domStyle.height == "auto"
        ? dom.offsetHeight
        : parseInt(domStyle.height),
      marginTop =
        domStyle.marginTop == "auto" ? 0 : parseInt(domStyle.marginTop),
      marginBottom =
        domStyle.marginBottom == "auto" ? 0 : parseInt(domStyle.marginBottom),
      paddingTop =
        domStyle.paddingTop == "auto" ? 0 : parseInt(domStyle.paddingTop),
      paddingBottom =
        domStyle.paddingBottom == "auto" ? 0 : parseInt(domStyle.paddingBottom),
      borderTopWidth =
        domStyle.borderTopWidth == "auto"
          ? 0
          : parseInt(domStyle.borderTopWidth),
      borderBottomWidth =
        domStyle.borderBottomWidth == "auto"
          ? 0
          : parseInt(domStyle.borderBottomWidth);

    return (
      height +
      marginTop +
      marginBottom +
      paddingTop +
      paddingBottom +
      borderTopWidth +
      borderBottomWidth
    );
  },
  /**
   * 获取数值类型的属性值
   * @param {String} val 属性值
   */
  getAttrNumVal: function (val) {
    return parseInt(val == "auto" || val == "" ? "0px" : val);
  },

  // 判断文件后缀是否为某个后缀名
  suffix: function (filename, str) {
    if (!filename || filename.indexOf(".") == -1) {
      return false;
    }
    var names = filename.split(".");
    return names[names.length - 1] == str;
  },

  /**
   * 获取 元素 UUID
   * {count}  需要uuid的数量
   * {me} 编辑器实例
   * {cb} 回调函数
   */
  getUUID: function (count, me, cb) {
    me.options.getUUID(count, function (res) {
      if (res.code == 1) {
        cb(res)
      }
    })
  },
  /**
   * @Description: 按格式要求插入当前时间
   * @param {String}
   * @date 2019/6/18
  */
  formatCurDate: function (time, newFormat) {
    var myDate = time == null ? new Date() : new Date(time);
    var year = myDate.getFullYear();
    var month = myDate.getMonth();
    var date = myDate.getDate();
    var hours = myDate.getHours();       // 获取当前小时数(0-23)
    var minutes = myDate.getMinutes();     // 获取当前分钟数(0-59)
    var seconds = myDate.getSeconds();
    newFormat = newFormat.match(new RegExp('yyyy|y|MM|M|dd|d|HH|H|mm|m|ss|s|.', 'g')) || [];
    console.log(window);
    digit = function (num, length, end) {
      var str = '';
      num = String(num);
      length = length || 2;
      for (var i = num.length; i < length; i++) {
        str += '0';
      }
      return num < Math.pow(10, length) ? str + (num | 0) : num;
    };
    //转义为规定格式
    window.$.each(newFormat, function (i, item) {
      if (/yyyy|y/.test(item)) { //年
        newFormat[i] = digit(year, item.length);
      } else if (/MM|M/.test(item)) { //月
        newFormat[i] = digit(month + 1, item.length);
      } else if (/dd|d/.test(item)) { //日
        newFormat[i] = digit(date, item.length);
      } else if (/HH|H/.test(item)) { //时
        newFormat[i] = digit(hours, item.length);
      } else if (/mm|m/.test(item)) { //分
        newFormat[i] = digit(minutes, item.length);
      } else if (/ss|s/.test(item)) { //秒
        newFormat[i] = digit(seconds, item.length);
      }
    });
    console.log(newFormat.join(''));
    return newFormat.join('');
  },
  // 获取节点 内纯文本，不包含子元素文本
  getTextByNode: function (node) {
    var text = "";
    for (var j = 0; j < node.childNodes.length; j++) {
      if (node.childNodes[j].nodeType == 3) {
        text += node.childNodes[j].data
      }
    }
    return text;
  },
  // 保存文书时 处理留痕信息
  addMarkDisable: function (me) {

    var marks = [];
    var marks1 = axTools.getByClass("editor-free-text", me.document); //editor-mark-del-text  mark-free-medical
    var marks2 = axTools.getByClass("editor-mark-text", me.document);
    var marks3 = axTools.getByClass("editor-mark-del-text", me.document);
    var marksMedicals = axTools.getByClass("mark-free-medical", me.document); // 表达式留痕标记
    marks = marks.concat(marks1, marks2, marks3)
    for (var i = 0; i < marks.length; i++) {
      var mark = marks[i];
      if (mark.className.indexOf("editor-mark-disable") > -1) {
        // continue;
      } else {
        this.addClass(mark, "editor-mark-disable");
      }
      if (mark.className.indexOf("markedCtrl") == -1) {
        this.addClass(mark, "markedCtrl");
      }
    }
    for (var i = 0; i < marksMedicals.length; i++) {
      var history = JSON.parse(marksMedicals[i].getAttribute("history")) || [];
      history.push(JSON.parse(marksMedicals[i].getAttribute("change")));
      marksMedicals[i].setAttribute("history", JSON.stringify(history));
      // 删除无用的留痕信息
      marksMedicals[i].removeAttribute("oldVal");
      marksMedicals[i].removeAttribute("change");
    }
  },
  // 在编辑模式下，元素值修改后 状态记录
  valueChange: function (parentNode) {
    return; // 元素值是否为默认值校验 暂时停用
    if (parentNode.nodeType != 3) {
      if (!axTools.hasClass(parentNode, "ctrl-value")) {
        var currCtrlNode = AX.dom.domUtils.findParent(
          parentNode,
          function (dom) {
            return (
              dom.tagName === "SPAN" &&
              dom.getAttribute("attrs")
            );
          },
          true
        );
      } else {
        var currCtrlNode = parentNode.parentElement;
      }
      if (currCtrlNode) {
        var currCtrlJson = JSON.parse(currCtrlNode.getAttribute("attrs"));
        var currCtrlType = currCtrlNode.getAttribute("axPlugins");
        if (currCtrlType === "radio" || currCtrlType === "checkbox" || currCtrlType === "select" || currCtrlType === "selectmulti") {
          var options = JSON.parse(currCtrlJson.options);
          var currValue = currCtrlNode.getAttribute("selectval");
          var defaultArr = [];
          for (var i = 0; i < options.length; i++) {
            if (!!options[i].isDefault) {
              defaultArr.push(options[i].key)
            }
          }
          if (defaultArr.join(",") == currValue) {
            axTools.addClass(currCtrlNode, "nochangeValue")
            axTools.removeClass(currCtrlNode, "changeValue")
          } else {
            axTools.addClass(currCtrlNode, "changeValue")
            axTools.removeClass(currCtrlNode, "nochangeValue")
          }
        } else {
          var currValue = currCtrlNode.children[0].innerText;
          var defaultArr = "";
          try {
            defaultArr = currCtrlJson.defaultVal || "";
          } catch (e) { }
          if (currCtrlType == "prescription") {
            currValue = currValue == "处方内容" ? "" : currValue;
          }
          if (currCtrlType == "diagnose") {
            currValue = currValue == currCtrlJson.diagnoseType ? "" : currValue;
          }
          if (currValue.replace(/\u200B/g,'') == defaultArr) {
            axTools.addClass(currCtrlNode, "nochangeValue")
            axTools.removeClass(currCtrlNode, "changeValue")
          } else {
            axTools.addClass(currCtrlNode, "changeValue")
            axTools.removeClass(currCtrlNode, "nochangeValue")
          }
        }
      }

    }
  },
  // 切换 非编辑模式时，清空所有元素值状态
  clearValueChange: function (me) {
    return;
    var changeValue = axTools.getByClass("changeValue", me.document);
    var nochangeValue = axTools.getByClass("nochangeValue", me.document);
    var targetArr = changeValue.concat(nochangeValue);
    for (var i = 0; i < targetArr.length; i++) {
      axTools.removeClass(targetArr[i], "changeValue");
      axTools.removeClass(targetArr[i], "nochangeValue");
    }
  },
  // 计算公式
  formulas: function (me){
    var formulas = axTools.getByClass("formulaSetting", me.document);
    var formulaOptions = me.options.formulaList; // 获取计算公式列表
    for(var i = 0; i < formulas.length; i++) {
      var type = formulas[i].getAttribute("formulatype");
      formulaOptions[type].callback(me, formulas[i]); // 调用相应的计算公式回调
    }
  },
  // 清除对应类型的元素值
  removeEleValue: function (dom, type){
    if(type === "diagnose") { // 清除诊断值
      var diagnoses = $(dom).find(".diagnose");
      for(var i = 0; i < diagnoses.length; i++) {
        var name = JSON.parse(diagnoses[i].getAttribute("attrs")).name;
        $(diagnoses[i]).find(".ctrl-value").html(name);
        // 查询是否包含同类型诊断
        var isSame = axTools.getByTagAttr("span", "diagnosetype", JSON.parse(diagnoses[i].getAttribute("attrs")).diagnoseCode, dom);
        if(isSame.length > 1) {
          for(var j = 1; j < isSame.length; j++) {
            $(isSame[j]).remove();
          }
        }
      }
    }else if(type === "prescription") { // 处方
      $(dom).find(".prescription .ctrl-value").html("处方内容");
      if($(dom).find(".prescription").length > 1) {
        $(dom).find(".prescription:gt(0)").remove();
      }
    }
    return dom;
  },
  /**
   * 将段落内容标签P修改为DIV
   * @param {传入的dom字符串} html
   */
  validContentFormat: function(html) {
    var dom = document.createElement("div");
    dom.innerHTML = html;
    var paragraphContent = $(dom).find(".paragraphContent");
    for(var i = 0; i < paragraphContent.length; i++) {
      var item = paragraphContent[i];
      // 遍历递归当前节点包含的段落
      if($(item).find(".paragraphContent").length > 0) {
        this.validContentFormat(item.innerHTML);
      }
      // 当不包含段落并且是P标签时，正则替换标签
      if(item.tagName === "P") {
        // 正则替换匹配到的第一个p标签
        item.outerHTML = item.outerHTML.replace("<p", "<div").replace(/(.*)p>$/, "$1div>");
      }
    }
    return dom.innerHTML;
  },
  /**
   * 合并传入节点内所有的分割段落，其他被分割元素暂不考虑
   * @param {传入节点字符串} dom
   */
  mergeParagraphContent: function(dom) {
    var paragraphs = $(dom).find(".paragraphele"); // 当前节点是否包含段落元素
    if(paragraphs.length == 0) paragraphs = [dom]; // 无嵌套段落时，将节点本身赋值
    for(var i = 0; i < paragraphs.length; i++) {
      var paragraphItem = paragraphs[i];
      for(var j = 0; j < paragraphItem.children.length; j++) {
        var item = paragraphItem.children[j];
        var next = paragraphItem.children[j + 1];
        // 判断当前元素是否是段落或者段落内容，都不是则替换为br换行
        if(item.className.indexOf("paragraphContent") > -1
         && next
         && next.className.indexOf("paragraphContent") > -1
         && item.className.indexOf("paragraphele") === -1
         && next.className.indexOf("paragraphele") === -1){
          item.innerHTML += ((item.lastChild.className && item.lastChild.className.indexOf("paragraphContent") == -1)
                     && (next.firstChild.className && next.firstChild.className.indexOf("paragraphContent") == -1))?"<br>":"" + next.innerHTML; // 清除div.paragrahContent, 替换为br
          paragraphItem.removeChild(next);
          j--;
        }
      }
    }
    return dom;
  },
  /**
   * 清空基本元素和签名元素内容
   * @param {需要清除基本元素和签名元素内容的节点} dom
   */
  clearBaseElem: function(dom) {
    var elems = axTools.getByTagAttr("span", "axplugins", "macro", dom); // 基本元素集合
    var signs = axTools.getByTagAttr("span", "axplugins", "signature", dom);  // 签名元素集合
    // 遍历清空元素内容
    for(var i = 0; i < elems.length; i++) {
      var elem = elems[i];
      $(elem).find(".ctrl-value").text("");
    }
    for(var i = 0; i < signs.length; i++) {
      var sign = signs[i];
      $(sign).find(".ctrl-value").text("");
    }
    return dom;
  },


  // 根据条件设置CheckBox是否可用
  setCheckboxDisabled: function (ctrlText, ctrlId, me) {
    var checkboxDoms = []
    var disabledDoms = axTools.getByTagAttr(
      "span",
      "disabledId",
      ctrlId,
      me.document
    );
    disabledDoms.forEach(function (item) {
      if ($(item).attr('axplugins') === 'checkbox') {
        checkboxDoms.push(item)
      }
    })
    checkboxDoms.forEach(function (item) {
      var itemJson = JSON.parse(item.getAttribute("attrs"));
      if (!!!itemJson) return;
      var condition = itemJson.disabledCondition,
        operator = itemJson.disabledOperator;
      var result = false
      ctrlText = parseFloat(ctrlText) ? parseFloat(ctrlText) : ctrlText
      switch (operator) {
        case "=":
          result = ctrlText == condition
          break;
        case "!=":
          result = ctrlText != condition
          break;
        case ">":
          result = ctrlText > condition
          break;
        case ">=":
          result = ctrlText >= condition
          break;
        case "<":
          result = ctrlText < condition
          break;
        case "<=":
          result = ctrlText <= condition
          break;
        case "in":
          result = ctrlText.indexOf(condition) > -1
          break;
        case "null":
          result = ctrlText == null || ctrlText == ""
          break;
        case "notNull":
          result = ctrlText != null && ctrlText != ""
          break;
      }
      var $checkbox = $(item).find('input[type="checkbox"]')
      var isChecked = result && itemJson.clearValue === 'no';
      $checkbox.prop('disabled', result).prop('checked', isChecked);
      !isChecked && $checkbox.removeAttr('checked');
    })
  },

  // 设置日期控件是否可用
  setDatePickerDisabled: function (ctrlText, ctrlId, me) {
    var datePickerDoms = []
    var disabledDoms = axTools.getByTagAttr(
      "span",
      "disabledId",
      ctrlId,
      me.document
    );
    disabledDoms.forEach(function (item) {
      if ($(item).attr('axplugins') === 'datedomain') {
        datePickerDoms.push(item)
      }
    })
    datePickerDoms.forEach(function (item) {
      var itemJson = JSON.parse(item.getAttribute("attrs"));
      if (!!!itemJson) return;
      var condition = itemJson.disabledCondition,
        operator = itemJson.disabledOperator;
      var result = false
      ctrlText = parseFloat(ctrlText) ? parseFloat(ctrlText) : ctrlText
      switch (operator) {
        case "=":
          result = ctrlText == condition
          break;
        case "!=":
          result = ctrlText != condition
          break;
        case ">":
          result = ctrlText > condition
          break;
        case ">=":
          result = ctrlText >= condition
          break;
        case "<":
          result = ctrlText < condition
          break;
        case "<=":
          result = ctrlText <= condition
          break;
        case "in":
          result = ctrlText.indexOf(condition) > -1
          break;
        case "null":
          result = ctrlText == null || ctrlText == ""
          break;
        case "notNull":
          result = ctrlText != null && ctrlText != ""
          break;
      }
      var cursorStyle = result ? 'none' : 'auto'
      $(item).attr('isDisabled', result.toString()).find('.ctrl-value').html('').css({'pointer-events': cursorStyle})
    })
  }
};

/* eslint-disable */

/**
 * 条形码
 * @command barcode
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'barcode');
 * ```
 */
AX.plugins['barcode'] = function () {
	var me = this,
		thePlugins = 'barcode';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:600px;height:370px;',
				dialogUrl: 'dialogs/extends/barCode.html'
			});
		}
	};
	var popup = axTools.makePopup({
		me: me,
		type: thePlugins
	});
	// popup.render();
	me.addListener('mouseover', function (t, evt) {
		evt = evt || window.event;
		var el = evt.target || evt.srcElement;
		var axPlugins = el.getAttribute('axplugins');
		if (/img/ig.test(el.tagName) && axPlugins == thePlugins) {
			axTools.setPopupContent(popup, el, '<nobr>' + me.getLang('ax.' + thePlugins) + ': <span onclick=$$._edittext() class="edui-clickable">' + this.getLang('edit') + '</span>&nbsp;&nbsp;<span onclick=$$._delete() class="edui-clickable">' + this.getLang('delete') + '</span></nobr>');
		}
	});
};
/* eslint-disable */

/**
 *  组合元素 配置
 */
AX.plugins['combine'] = function () {
    var me = this,thePlugins = 'combine',cascadeText = 'cascadesetter';
    me.commands[thePlugins] = {
        execCommand: function (type, isEdit) {
            var dialog=axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:700px;height:644px;',
				dialogUrl: 'dialogs/extends/combine.html'
            });
            me.ui._dialogs[thePlugins + "Dialog"] = dialog;
        }
    };
    // popup 启用，采用右键操作
    var popup = new baidu.editor.ui.Popup( {
        editor: this,
        content: '',
        className: 'edui-bubble',
        _edittext: function () {
            baidu.editor.plugins[thePlugins].editdom = popup.anchorEl;
            me.execCommand(thePlugins,true);
            this.hide();
        },
        _cassetter : function () {//组合元素 级联设置
            baidu.editor.plugins[thePlugins].editdom = popup.anchorEl;
            me.execCommand('cascadesetter',true);
            this.hide();
        },
        _delete: function(){
            var self = this;
            me.window.confirmMsg(me.getLang('ax.delCtrlTip'), function(rsl) {
                if (!rsl) {
                    return;
                }
                var targetDom = self.anchorEl;//获取根节点元素，并删除
                if(targetDom.getAttribute('axplugins') === null){
                    targetDom = targetDom.parentNode;
                }
                baidu.editor.dom.domUtils.remove(targetDom,false);
            });
            // if( window.confirm(me.getLang('ax.delCtrlTip')) ) {
            //     var targetDom = this.anchorEl;//获取根节点元素，并删除
            //     if(targetDom.getAttribute('axplugins') === null){
            //         targetDom = targetDom.parentNode;
            //     }
            //     baidu.editor.dom.domUtils.remove(targetDom,false);
            // }
            this.hide();
        },
        _saveEle: function(){
            if (typeof me.options.saveEleMethod == "function") {
                if (this.anchorEl.getAttribute('isQuote') == 'false'){
                    this.hide();
                    alert(me.getLang("ax.noSaveEle"));
                    return; // 以引入的元素禁止再次存库
                }
                var json = JSON.parse(this.anchorEl.getAttribute("attrs"));
                json.pluginType = this.anchorEl.getAttribute("axPlugins");
                json.content = this.anchorEl.children[0].innerHTML;
                me.options.saveEleMethod(json);
            } else {
                alert(me.getLang("ax.noGetSaveEleMethod"));
            }
            this.hide();
        }
    } );
    // popup.render();
    // me.addListener('mouseover', function (t, evt) {
        // axTools.commonEditTip(thePlugins,me,popup,evt);
    // });

    //在组合元素内部输入文本 需要增加span 标签 class="_textnode_" id=时间戳
    // keyUp 事件会漏字  keyDown 在中文输入法下 第一个字母录入不上 所以选择 mousedown 事件 用户在keyUp 之前会点击输入框
     me.addListener('keyup',function (t, evt) {
        try {
            evt = evt || window.event;
            var utils = AX.dom.domUtils;
            var el = evt.target || evt.srcElement,
                parentNode = el.parentNode,
                startNode,
                range = me.selection.getRange();
            if (!parentNode || me.options.editorModel != 'design') return; //父节点为空过滤掉  级联设置只在设计模式下使用
            // console.log(el);
            if ("BODY" != el.tagName && "HTML" !== el.tagName) { //body及html过滤掉
                startNode = range.startContainer;
                parentNode = startNode.parentNode;
                // console.log('startNode:',startNode);
                // 1.选区开始节点的 父节点 是 span
                // 2. 他的爷爷是 combine
                // 3.他的父亲是 ctrl-value
                // 4.选区是文本节点
                // console.log(startNode.nodeType);
                // console.log(parentNode.tagName);
                // console.log(utils.hasClass(parentNode,'ctrl-value'));
                // console.log(parentNode.parentNode.getAttribute('axplugins') === 'combine');
                // 1,  鼠标定位在了 ctrl-value 里面的 纯文本节点
                var isTextNode = startNode.nodeType === 3
                    && parentNode.tagName === 'SPAN'
                    && utils.hasClass(parentNode,'ctrl-value')
                    && parentNode.parentNode.getAttribute('axplugins') === 'combine';
                // 1,  鼠标定位在了 ctrl-value 的 元素节点
                var isCtrlValueNode = startNode.nodeType === 1
                    && startNode.tagName === 'SPAN'
                    && utils.hasClass(startNode,'ctrl-value')
                    && parentNode.getAttribute('axplugins') === 'combine';
                if (isTextNode || isCtrlValueNode) {
                    //用户输入的直接加span 并设置光标
                    if ( range.collapsed) {
                        // console.log("添加");
                        var tmpNode = range.document.createElement( 'span' );
                        tmpNode.setAttribute('id',+ new Date());// 设置id
                        // tmpNode.setAttribute('aaa',+ new Date());// 设置id
                        tmpNode.setAttribute('class','_textnode_');//设置class
                        range.insertNode( tmpNode ).setStart( tmpNode, 0 );
                        // range.insertNode( tmpNode );
                        range.collapse( true );
                        range.select();
                    }

                }
            }
        } catch (e) {
            console.log(e);
        }
    });
    //写入两个事件 keyup 和 mousedown 因为 用户keyup 事件在中文输入状态下 输入的第一个字符会消失  加入mousedown 事件 是在鼠标按下之后就会有span 包裹 从而修复了这个问题
    me.addListener('mousedown',function (t, evt) {
        try {
            evt = evt || window.event;
            var utils = AX.dom.domUtils;
            var el = evt.target || evt.srcElement,
                parentNode = el.parentNode,
                startNode,
                range = me.selection.getRange();
            if (!parentNode || me.options.editorModel != 'design') return; //父节点为空过滤掉  级联设置只在设计模式下使用
            // console.log(el);
            if ("BODY" != el.tagName && "HTML" !== el.tagName) { //body及html过滤掉
                startNode = range.startContainer;
                parentNode = startNode.parentNode;
                // console.log('startNode:',startNode);
                // 1.选区开始节点的 父节点 是 span
                // 2. 他的爷爷是 combine
                // 3.他的父亲是 ctrl-value
                // 4.选区是文本节点
                // console.log(startNode.nodeType);
                // console.log(parentNode.tagName);
                // console.log(utils.hasClass(parentNode,'ctrl-value'));
                // console.log(parentNode.parentNode.getAttribute('axplugins') === 'combine');
                // 1,  鼠标定位在了 ctrl-value 里面的 纯文本节点
                var isTextNode = startNode.nodeType === 3
                    && parentNode.tagName === 'SPAN'
                    && utils.hasClass(parentNode,'ctrl-value')
                    && parentNode.parentNode.getAttribute('axplugins') === 'combine';
                // 1,  鼠标定位在了 ctrl-value 的 元素节点
                var isCtrlValueNode = startNode.nodeType === 1
                    && startNode.tagName === 'SPAN'
                    && utils.hasClass(startNode,'ctrl-value')
                    && parentNode.getAttribute('axplugins') === 'combine';
                if (isTextNode || isCtrlValueNode) {
                    //用户输入的直接加span 并设置光标
                    if ( range.collapsed) {
                        // console.log("添加");
                        var tmpNode = range.document.createElement( 'span' );
                        tmpNode.setAttribute('id',+ new Date());// 设置id
                        // tmpNode.setAttribute('aaa',+ new Date());// 设置id
                        tmpNode.setAttribute('class','_textnode_');//设置class
                        range.insertNode( tmpNode ).setStart( tmpNode, 0 );
                        // range.insertNode( tmpNode );
                        range.collapse( true );
                        range.select();
                    }

                } else {
                    var axpNode = utils.findParent(el, function (dom) {
                        return dom.tagName === "SPAN" && dom.getAttribute('axplugins') === "combine" && dom.getAttribute('attrs');
                    }, true);
                    if (axpNode === null) {
                        // 为了使 placeholder 生效 消除 <span class="_textnode_">\u200B</span> 空白节点
                        // 删除 空白节点 用户无法在定位了
                        removeEmptyTextNode ();
                        // console.log("清除");
                    }
                }
            } else {
                removeEmptyTextNode ();
                // console.log("清除");
            }

            /**
             *  为了使 placeholder 生效 消除 <span class="_textnode_">\u200B</span> 空白节点
             */
            function removeEmptyTextNode (){
                var list = axTools.getByClass("_textnode_",me.document);
                for (var item, i = 0; item = list[i]; i++) {
                    if (item.innerHTML === "\u200B" || item.innerHTML === "") {
                        utils.remove(item,true);//保留子节点中的  \u200B 便于用户再次定位
                    }
                }
            }
        } catch (e) {
            console.log(e);
        }
    });
};

/**
 *  级联设置 配置
 * 级联设置弹框
 */
AX.plugins['cascadesetter'] = function () {
    var me = this,thePlugins = 'cascadesetter';
    me.commands[thePlugins] = {
        execCommand: function (type, isEdit) {
            axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:1000px;height:500px;',
				dialogUrl: 'dialogs/extends/cascadesetter.html'
			});
        }
    };
};

/**
 * @Description:  右键菜单 转换 标签元素功能
*/

AX.plugins["transe"] = function() {
    var me = this,thePlugins = 'transe';
    me.commands[thePlugins] = {
        execCommand : function(cmdName,value) {
            var theRange = this.selection.getRange();
            var theText = this.selection.getText();
            var id = + new Date(); // 时间戳
            var tagHtml = "";
            var tagAttrs;
            // 拼接字符串
            if ("tagelement" == value) {
                tagAttrs = "{&quot;id&quot;:&quot;" + id + "1561348658637&quot;,&quot;name&quot;:&quot;" + theText + "&quot;,&quot;tipText&quot;:&quot;" + theText + "&quot;,&quot;defaultVal&quot;:&quot;" + theText + "&quot;,&quot;readonly&quot;:&quot;on&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;borderType&quot;:&quot;border&quot;,&quot;borderStyle&quot;:&quot;0&quot;,&quot;stainholder&quot;:&quot;&quot;}"
                tagHtml = '<span id="' + id + '" title="' + theText + '" issecret="fasle" start-stain="" end-stain="" cascadeid="undefined" showcondition="undefined" contenteditable="true" class="ctrl-bg    stain0 stain-clear" axplugins="tagelement" style="display: inline-block;" attrs="' + tagAttrs + '">' +
                    '<span title="' + theText + '" secret-value="false" class="ctrl-value" placeholder="" contenteditable="true">' + theText + '</span>' +
                    '</span></span>';
                "#text" == theRange.startContainer.nodeName && me.execCommand("insertHtml", tagHtml);
            }
        }
    }
};

/**
 * 设置 多层级联 方法
 * @param me
 * @param sId
 * @param sText
 */
 function setCombineCascade(me,sId,sText){ // 暂未用到

     function getByTagAttr(tag, attr, val, domRange) {
         domRange = domRange || document;
         var tags = domRange.getElementsByTagName(tag);
         var list = [];
         for (var i = 0; i < tags.length; i++) {
             var nodeAttr = tags[i].getAttribute(attr);
             if (nodeAttr === null) continue;
             var attrArr = nodeAttr.split(",");

             if (tags[i] && attrArr.indexOf(val) > -1) {
                 list.push(tags[i]);
             }
         }
         return list;
     };

     var cascadeDoms = getByTagAttr('span','combicasId',sId,me.document),
         ctrlText= sText;
     var utils = AX.utils;
     // console.log(cascadeDoms);
     if(cascadeDoms.length > 0){
         utils.each(cascadeDoms, function (item,index){
             // 根据判断操作符判断级联控件显示隐藏
             var condition= item.getAttribute('combicascondition'),
                 conditionArr = condition.split(","),
                 operatorStr= item.getAttribute('combicasoper'),
                 operatorArr= operatorStr.split(",");
             var state = item.getAttribute('combicasstate');
             var stateArr = state.split(",");
             var ctrlTextIndex = conditionArr.indexOf(ctrlText);
             if (ctrlTextIndex < 0) {//用户没有设置 级联 全部显示
                 axTools.showHide(item,true);
                 return;
             }
             var operator = operatorArr[ctrlTextIndex];
             switch(operator){
                 case '=':
                     if (stateArr[ctrlTextIndex] === 'show') {
                         axTools.showHide(item,true);
                     } else if (stateArr[ctrlTextIndex] === 'hide'){
                         axTools.showHide(item,false);
                     }
                     break;
                 case '!=':
                     if (stateArr[ctrlTextIndex] === 'show') {
                         axTools.showHide(item,true);
                     } else if (stateArr[ctrlTextIndex] === 'hide'){
                         axTools.showHide(item,false);
                     }
                     break;
                 case '>':
                     if (stateArr[ctrlTextIndex] === 'show') {
                         axTools.showHide(item,true);
                     } else if (stateArr[ctrlTextIndex] === 'hide'){
                         axTools.showHide(item,false);
                     }
                     break;
                 case '>=':
                     if (stateArr[ctrlTextIndex] === 'show') {
                         axTools.showHide(item,true);
                     } else if (stateArr[ctrlTextIndex] === 'hide'){
                         axTools.showHide(item,false);
                     }
                     break;
                 case '<':
                     if (stateArr[ctrlTextIndex] === 'show') {
                         axTools.showHide(item,true);
                     } else if (stateArr[ctrlTextIndex] === 'hide'){
                         axTools.showHide(item,false);
                     }
                     break;
             }
         });
     }
 }
(function(window) {

  // 开辟续打虚拟空间
  function continuePrint(me, config, idx) {
    // 1. 复制body，插入当前编辑区底部
    // 2. 用上面的PageControler自动的初始化

    var copyElem = $(me.body).clone()[0];
    copyElem.innerHTML = "";
    copyElem.className += (copyElem.className + " ax-page-continue-print-wrapper");
    copyElem.style.zIndex = 1;
    // copyElem.style.opacity = 0;
    copyElem.style.left = "-10000px";
    me.body.parentElement.appendChild(copyElem);

    var controler = new PageControler({
      body: copyElem,
      selection: AX.pageControler.editor.selection
    }, AX.pageControler._size, AX.pageControler._margin);
    controler.setContentByList(config, idx, function() {
      me.execCommand("printpreview1", controler);
      setTimeout(function() {
        controler.release();
        copyElem.parentElement.removeChild(copyElem);
      }, 500);
    });
  }

  window._ax_continue_print = continuePrint;
})(window);


/**
 * 复制
 */
AX.plugins['copy'] = function () {
    var me = this,
        thePlugins = 'copy';
    me.commands[thePlugins] = {
        execCommand: function (type) {
            // alert("复制")
            setTimeout(function (){
                me.iframe.focus();
                me.document.execCommand("copy");
            }, 200)
        }
    };
}
/**
 * 剪切
 */
AX.plugins['cut'] = function () {
    var me = this,
        thePlugins = 'cut';
    me.commands[thePlugins] = {
        execCommand: function (type) {
            // alert("复制")
            setTimeout(function (){
                me.iframe.focus();
                me.document.execCommand("cut");
            }, 200)
        }
    };
}

// AX.plugins['paste'] = function () {
//     var me = this,
//         thePlugins = 'paste';
//     me.commands[thePlugins] = {
//         execCommand: function (type) {
//             // alert("复制")
//             me.iframe.focus();
//             setTimeout(function (){
//                 me.document.execCommand("paste");
//             }, 200)
//         }
//     };
// }
/* eslint-disable */

/**
 * 日期元素
 */
AX.plugins['datedomain'] = function () {
    var me = this, thePlugins = 'datedomain';
    me.commands[thePlugins] = {
        execCommand: function (type, isEdit) {
            axTools.commandDialog({
                me: me,
                type: thePlugins,
                isEdit: isEdit,
                cssRules: 'width:700px;height:560px;',
                dialogUrl: 'dialogs/extends/text.html?element=datedomain'
            });
        }
    };
    var popup = axTools.makePopup({
        me: me,
        type: thePlugins,
        delFunc: function (that) {
            me.window.confirmMsg(me.getLang('ax.delCtrlTip'), function (rsl) {
                if (!rsl) {
                    return;
                }
                var targetDom = that.anchorEl;//获取根节点元素，并删除
                if (targetDom.getAttribute('axplugins') === null) {
                    targetDom = targetDom.parentNode;
                }
                baidu.editor.dom.domUtils.remove(targetDom, false);
            });
            // if( window.confirm(me.getLang('ax.delCtrlTip')) ) {
            //     var targetDom = that.anchorEl;//获取根节点元素，并删除
            //     if(targetDom.getAttribute('axplugins') === null){
            //         targetDom = targetDom.parentNode;
            //     }
            //     baidu.editor.dom.domUtils.remove(targetDom,false);
            // }
            that.hide();
        }
    });
    // popup.render();
    // me.addListener('mouseover', function (t, evt) {
    //     try {
    //         evt = evt || window.event;
    //         var el = evt.target || evt.srcElement, parentNode = el.parentNode;
    //         if (!parentNode) return;//父节点为空过滤掉
    //         if ("BODY" != el.tagName && "HTML" !== el.tagName) {//body及html过滤掉
    //             var axPlugins = el.getAttribute('axplugins') || parentNode.getAttribute('axplugins');
    //             if (/span/ig.test(el.tagName) && axPlugins == thePlugins && (axTools.hasClass(el, 'ctrl-bg') || axTools.hasClass(parentNode, 'ctrl-bg') || axTools.hasClass(el, 'ctrl-value'))) {
    //                 // if ( /span/ig.test( el.tagName ) && axPlugins==thePlugins && ((el.getAttribute('class') && el.getAttribute('class').indexOf('ctrl-bg')>-1) || (parentNode.getAttribute('class') && parentNode.getAttribute('class').indexOf('ctrl-bg')>-1) || (el.getAttribute('class') && el.getAttribute('class').indexOf('ctrl-value')>-1))) {
    //                 var attrs = el.getAttribute('attrs') || parentNode.getAttribute('attrs');
    //                 if (!attrs) {
    //                     return;
    //                 }
    //                 attrs = JSON.parse(attrs);//将字符串转为json
    //                 if (me.options.editorModel == 'mark') {
    //                     if (el.getAttribute('class') != 'ctrl-value ctrl-modify on') {
    //                         return;
    //                     }
    //                     var markPop = new baidu.editor.ui.Popup({
    //                         editor: me,
    //                         content: "",
    //                         className: "edui-bubble"
    //                     });
    //                     markPop.render();
    //                     var markDesc = markPop.formatHtml("<nobr>" + me.getLang('ax.owning') + " " + me.options.userName + " " + me.getLang('ax.at') + (axTools.getCurrDate()) + me.getLang('ax.edit') + "</nobr>");
    //                     if (markDesc) {
    //                         markPop.getDom("content").innerHTML = markDesc;
    //                         markPop.anchorEl = el.getAttribute('axplugins') ? el : parentNode;
    //                         markPop.showAnchor(markPop.anchorEl);
    //                     } else {
    //                         markPop.hide();
    //                     }
    //                 } else if (me.options.editorModel == 'design') {
    //                     var html = popup.formatHtml(
    //                         '<nobr>' + me.getLang('ax.datedomain') + ': <span onclick=$$._edittext() class="edui-clickable">' + this.getLang('edit') + '</span>&nbsp;&nbsp;<span onclick=$$._delete() class="edui-clickable">' + this.getLang('delete') + '</span>&nbsp;&nbsp;<span onclick=$$._saveEle() class="edui-clickable">' + me.getLang('ax.inStore') + '</span></nobr>');
    //                     if (html) {
    //                         popup.getDom('content').innerHTML = html;
    //                         popup.anchorEl = el.getAttribute('axplugins') ? el : parentNode;
    //                         popup.showAnchor(popup.anchorEl);
    //                     } else {
    //                         popup.hide();
    //                     }
    //                 }
    //             } else {
    //                 popup.hide();
    //             }
    //         } else {
    //             popup.hide();
    //         }
    //     } catch (e) {
    //         console.log(e);
    //     }
    // });
    /**
     * @Description: 点击日期控件 弹出日期
     * @author yang
     * @date 2019/6/12
     */
    me.addListener("click", function (e, evt) {
        try {
            evt = evt || window.event;
            var el = evt.target || evt.srcElement;
            // if( && (target.getAttribute('axPlugins') === 'datedomain')){
            // console.log(me.options.editorModel);
            if (me.options.editorModel === "pure" || me.options.editorModel === "dirty" || me.options.editorModel === "secret" || me.options.editorModel === "preview") return;//清洁模式与非清洁模式 保密模式下不触发点击事件

            // }
            if (el.tagName === 'BODY' || el.tagName === 'HTML') return;//修复 dom.getAttribute is not function 的报错

            var thePluginsNode = AX.dom.domUtils.findParent(el, function (dom) {
                var axValidate = dom && dom.getAttribute('attrs') && dom.getAttribute('axplugins') == thePlugins && /span/ig.test(dom);
                return axValidate;
            }, true);
            if (thePluginsNode === null) return;
            var isDisabled = thePluginsNode.getAttribute("isDisabled") === 'true'
            var attrsObj = JSON.parse(thePluginsNode.getAttribute("attrs"));
            var dateFormat = attrsObj.dateFormat;
            var type = attrsObj.dateFormatType || 'datetime';
            if (me.options.editorModel === 'edit' && !!attrsObj.readonly || isDisabled) {
                // return; // 编辑模式下，校验只读属性
            } else {
                //元素iframe 内部彈窗 父框遮挡弹窗
                // console.log(dateFormat);
                // setTimeout(function () { // 修复时间控件 第二次加载无法弹出选择框的bug
                  console.log('el=======', $(el).attr('title'))
                    me.iframe.contentWindow.laydate.render({
                        elem: thePluginsNode.children[0],
                        type: type,
                        show: true,
                        scale: (me.document.getElementById("paperScaleHidden") && me.document.getElementById("paperScaleHidden").value) || 1,
                        isInitValue: false,
                        position: "fixed",
                        trigger: 'click',
                        format: dateFormat, // "yyyy-MM-dd HH:mm:ss", //
                        closeStop: el,
                        max: $(el).attr('title').indexOf('末次月经') > -1 ? 'nowTime' : '9999-12-31',
                        ready: function(date){
                            // var scaleValue = me.document.getElementById("paperScaleHidden") && me.document.getElementById("paperScaleHidden").value;
                            // laydates[0].style.transform = "scale(" + (2 - scaleValue)  + ") !important";
                            // laydates[0].style.transformOrigin = "0 0";
                        },
                        done: function(value, date, endDate){
                            var ctrlDom = $(me.document).find('[title="年龄"].ctrl-value').eq(0)
                            var age = parseInt(ctrlDom.text().split('岁')[0])
                            var currentTime = new Date().getTime()
                            var valueTime = new Date(value).getTime()
                            var timeGap = (currentTime - valueTime) / (1000 * 60 * 60 * 24)
                            if (age >= 19 && age <= 49 && timeGap > 36 && $(el).attr('title').indexOf('末次月经') > -1) {
                              alert('末次月经已经尝过36天，请注意HCG检查！')
                            }
                            console.log(value); //得到日期生成的值，如：2017-08-18
                            //留痕模式下记录修改内容
                            console.log(axTools.formatCurDate(value, dateFormat));
                            thePluginsNode.setAttribute("currVal", value);
                            var ctrlValue = axTools.getByClass("ctrl-value", thePluginsNode)[0];
                            // setTimeout(function (){
                            //     ctrlValue.innerHTML = value == ""? "": axTools.formatCurDate(value, dateFormat);
                            // }, 16)
                            if (me.options.editorModel == 'mark') {
                                var oldval = thePluginsNode.getAttribute('oldval');
                                if (oldval != value) { // 为方便留痕操作，提前赋值
                                    ctrlValue.innerHTML = value;
                                }
                            }
                            axTools.focusDomEnd(me, ctrlValue)
                            me.fireEvent("contentchange")
                            return false;
                        }
                    });
                // }, 500)
            }
            //设置日期内控件不可编辑
            var laydates = axTools.getByClass('layui-laydate', me.document);
            for (var i = 0; i < laydates.length; i++) {
                var tds = laydates[i].getElementsByTagName('td');
                for (var j = 0; j < tds.length; j++) {
                    tds[j].setAttribute('contenteditable', false);
                }
                var ths = laydates[i].getElementsByTagName('th');
                for (var j = 0; j < ths.length; j++) {
                    ths[j].setAttribute('contenteditable', false);
                }
                // var scaleValue = me.document.getElementById("paperScaleHidden") && me.document.getElementById("paperScaleHidden").value;
            }
            // setTimeout(function (){
            //     laydates[0].style.transform = "scale(" + (2 - scaleValue)  + ")";
            //     laydates[0].style.transformOrigin = "0 0";
            // }, 600)

            //留痕模式下记录修改内容
            // if (me.options.editorModel == 'mark') {
            //     me.execCommand('insertHtml', '');
            // }
        } catch (e) {
            console.log(e);
        }

    });


};



/**
 *  自动刷入服务器时间
 */
AX.plugins['setdate'] = function () {
    var me = this, thePlugins = 'setdate';
    me.commands[thePlugins] = {
        execCommand: function (type, time) {
            // 获取所有的时间元素
            var dateCtrl = axTools.getByTagAttr("span", "axplugins", "datedomain", me.document);
            for (var m = 0; m < dateCtrl.length; m++) {
                // 遍历验证需要自动刷入时间的元素
                var dateItem = dateCtrl[m];
                var dateJson = JSON.parse(dateItem.getAttribute('attrs'));
                var dateValue = (axTools.getByClass("ctrl-value", dateItem).length > 0)? axTools.getByClass("ctrl-value", dateItem)[0] : dateItem;
                if (dateJson.inserCurDate == 'on') {
                    dateValue.innerText = dateValue.innerText == "" ? axTools.formatCurDate(time, dateJson.dateFormat) : dateValue.innerText;
                }
                // axTools.focusDomEnd(me, dateValue)
                me.fireEvent("contentchange")
            }
        }
    };
};


// 设置新发疾病情况上次随访时间
AX.plugins['prevtime'] = function () {
    var me = this, thePlugins = 'prevtime';
    me.commands[thePlugins] = {
        execCommand: function (type, time, dateFormat, titleText, childTitleText) {
            dateFormat = dateFormat || 'yyyy-MM-dd';
            titleText = titleText || '新发疾病情况';
            childTitleText = childTitleText || '上次随访时间';
            // 获取新发疾病dom
            var ctrlDom = axTools.getByTagAttr("div", "title", titleText, me.document);
            var $dateCom = $(ctrlDom).find('span[title="' + childTitleText + '"].ctrl-value');
            $dateCom.text($dateCom.text() || axTools.formatCurDate(time, dateFormat))
        }
    };
};

AX.plugins['delete'] = function () {
    var me = this,
        thePlugins = 'delete';
    me.commands[thePlugins] = {
        execCommand: function (type, isEdit) {

        }
    };
    // 此方法是为了定位当前光标位置前的一个可编辑内容区域
    function setCur(dom, type) {
        // 段落单独处理
        if(type === "paragraphele") {
            if(!dom.previousSibling) { // 判断是否有上一个节点
                var wrap = null;
                while(!dom.previousSibling){ // 寻找当前焦点所属段落
                    wrap = AX.dom.domUtils.findParent(dom, function (dom) {
                        return dom.className.indexOf("paragraphele") > -1;
                    }, false);
                    if(!wrap) { // 此处是判断光标位置是否在当前页顶部，在顶部需要定位到上一页的最后一个段落
                        wrap = AX.dom.domUtils.findParent(dom, function (dom) {
                            return dom.className.indexOf("ax-page-wrapper") > -1;
                        }, false);
                        if(wrap.previousSibling){
                            dom = wrap.previousSibling.children[1].lastChild
                            break;
                        }else{
                            return;
                        }
                    }else{
                        dom = wrap;
                        if(dom.previousSibling) {
                            dom = dom.previousSibling
                            break;
                        }
                    }
                }
                if(axTools.hasClass(dom, "paragraphele")) {
                    var contents = axTools.getByClass("paragraphContent", dom);
                    dom = contents[contents.length - 1];
                    while(dom.childNodes.length > 0) { // 查找最后一个子元素
                        dom = dom.childNodes[dom.childNodes.length - 1];
                        while(dom && dom.nodeType == 8) { // 跳过comment
                            dom = dom.previousSibling;
                        }
                        if(dom.nodeType == 8){
                            dom = dom.parentElement;
                        }
                    }
                }
            }else{
                // 当前光标焦点所在段落有前一个节点时，向前一个节点定位
                dom = dom.previousSibling
                if(axTools.hasClass(dom, "ctrl-bg")) {
                    var contents = axTools.getByClass("paragraphContent", dom);
                    dom = contents[contents.length - 1];
                    while(dom.childNodes.length > 0) { // 查找最后一个子元素
                        dom = dom.childNodes[dom.childNodes.length - 1];
                        while(dom && dom.nodeType == 8) { // 跳过comment
                            dom = dom.previousSibling;
                        }
                        if(dom.nodeType == 8){
                            dom = dom.parentElement;
                        }
                    }
                }
            }
        }else{
            // 处理普通文本定位
            if(!dom.previousSibling) {
                dom = dom.parentElement;
            }else{
                dom = dom.previousSibling
            }
        }
        // 设置光标到指定dom节点
        axTools.focusDomEnd(me, dom);
    }
    me.addListener('keydown', function (t, evt) {
        var editModel = ["design", "edit"]; // 在这两种模式下才执行下面的删除逻辑，因为留痕模式有留痕标签包裹，所以不再执行此删除逻辑
        var keycode = evt.keyCode || evt.which;
        var currModel = me.options.editorModel;
        var rang = me.selection.getRange();
        var ctrlNode = null;
        // if(currModel == "edit" || currModel == "mark") {
        var rangeDom = new AX.dom.Range(me.document);
        if (editModel.indexOf(currModel) == -1) return;
        if (keycode == 46 || keycode == 8) {
            // axTools.stopDefault(evt);
            // axTools.stopPropagation(evt);
            if (keycode == 8) { // backspace
                var pos = rang.startOffset;
                var prevNode = AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
                    return dom.getAttribute("attrs");
                }, true);
                // var index = $(rang.startContainer.parentElement).hasClass('third-pat') ? $(rang.startContainer.parentElement).index() : -1
                // if(pos == 0 && (index === 0 || (rang.startContainer.className === 'my-third-history' && $('.my-third-history').text()))) {
                //   axTools.stopDefault(evt);
                //   axTools.stopPropagation(evt);
                //   return;
                // }
                if(currModel !== "design") { // 校验焦点是否在诊断或者处方内
                    var isDiaOrpre = AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
                        return dom.getAttribute("attrs") && dom.tagName === "SPAN" && (dom.getAttribute("axplugins") === "diagnose" || dom.getAttribute("axplugins") === "prescription");
                    }, true);
                    if(isDiaOrpre) {
                        axTools.stopDefault(evt);
                        axTools.stopPropagation(evt);
                        return;
                    }
                }
                // 判断光标前的内容，如果没有，则判断是否在段落内
                if(rang.startContainer.previousSibling && axTools.hasClass(rang.startContainer.previousSibling, "ctrl-bg") && (pos == 0 || (pos == 1 && rang.startContainer.textContent.replace(/\u200B/g, "") == ""))) {
                    ctrlNode = rang.startContainer.previousSibling;
                }else if (rang.startContainer.nodeType == 3 && (pos == 0 || pos == 1) && !prevNode) {
                    // 光标在文本节点开头且不在结构化元素内的处理
                    if (rang.startContainer.textContent.replace(/\u200B/g, "") == "") { // 当前节点为空时
                        prevNode = rang.startContainer.previousSibling;
                        if (axTools.hasClass(prevNode, "ctrl-bg")) {
                            ctrlNode = prevNode;
                        }
                    } else {
                        if (pos == 0) {
                            var prevNode = rang.startContainer.previousSibling;
                            if (axTools.hasClass(prevNode, "ctrl-bg")) {
                                ctrlNode = prevNode;
                            }
                        }
                    }

                } else if (rang.startContainer.tagName == 'DIV' && pos != 0) {
                    // 处理div标签内的操作，防止多删了段落内容
                    prevNode = rang.startContainer.childNodes[pos - 1];
                    if (axTools.hasClass(prevNode, "ctrl-bg")) {
                        ctrlNode = prevNode;
                    }else if(prevNode.tagName === 'STRONG' && prevNode.className.indexOf('ctrl-value') > -1) {
                        ctrlNode = rang.startContainer.parentElement;
                    }
                } else { // 空标签内删除
                    if(rang.startContainer.childNodes && rang.startContainer.childNodes[pos - 1] && axTools.hasClass(rang.startContainer.childNodes[pos - 1], "ctrl-bg")) {
                        ctrlNode = rang.startContainer.childNodes[pos - 1];
                    }else if(rang.startContainer.nodeType == 3 && rang.startContainer.textContent.replace(/\u200B/g,'') == ""){
                        if(rang.startContainer.previousElementSibling && axTools.hasClass(rang.startContainer.previousElementSibling, "ctrl-bg")) {
                            ctrlNode = rang.startContainer.previousElementSibling;
                        }
                    }
                    if(!ctrlNode){
                        // 以上条件都不满足时，向上寻找元素节点
                        prevNode = AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
                            return dom.getAttribute("attrs");
                        }, true);
                        if (axTools.hasClass(prevNode, "ctrl-bg")) {
                            ctrlNode = prevNode;
                        }
                    }
                }
                // 如果有符合条件的元素，根据元素属性操作
                if (ctrlNode) {
                    var json = JSON.parse(ctrlNode.getAttribute("attrs"));
                    var axPlugins = ctrlNode.getAttribute("axplugins");
                    var currVal = ""
                    if (axPlugins == "paragraphele") { // 段落处理
                        var content = axTools.getByClass("paragraphContent", ctrlNode);
                        if (content.length == 1 && (pos == 0 || pos == 1) && content[0].textContent.replace(/\u200B/g, "") == "" && ctrlNode.children.length == 1) {
                            // var divs = content[0].querySelectorAll("div");
                            if(rang.collapsed) { // 非选中的情况处理
                                if (json.isDel == "on" || (currModel != "edit" && currModel != "mark")) {
                                    axTools.stopDefault(evt);
                                    axTools.stopPropagation(evt);
                                    setCur(ctrlNode, "paragraphele");
                                    ctrlNode.parentElement.removeChild(ctrlNode);
                                    return;
                                } else {
                                    axTools.stopDefault(evt);
                                    axTools.stopPropagation(evt);
                                    setCur(ctrlNode, "paragraphele");
                                    return;
                                }
                            }
                        } else {
                            if (content.length > 1) { // 包含多个段落内容的处理，防止删除过多，需要只删除当前段落内容
                                var index = -1;
                                if(rang.startContainer.nodeType == 3 && (rang.startOffset == 0)){
                                    index = [].indexOf.call(rang.startContainer.parentElement.childNodes,rang.startContainer)
                                }
                                if ((rang.startContainer.tagName == "DIV" && (rang.startOffset == 0)) || index == 0) {
                                    if (rang.collapsed && (rang.startContainer.previousSibling || (index == 0 && rang.startContainer.parentElement.previousSibling))) {
                                        axTools.stopDefault(evt);
                                        axTools.stopPropagation(evt);
                                        var targetDom = index == 0?rang.startContainer.parentElement:rang.startContainer;
                                        if(targetDom.textContent.replace(/\u200B/g, "") == ""){
                                            targetDom.parentElement.removeChild(targetDom);
                                        }else{
                                            if(targetDom.previousSibling) {
                                                targetDom.previousSibling.innerHTML += "<span class='cursorText'>&#8203;</span>" + targetDom.innerHTML;
                                                var rangeLeft = document.createRange();
                                                var box = axTools.getByClass("cursorText", me.document)[0].previousSibling ? axTools.getByClass("cursorText", me.document)[0].previousSibling : axTools.getByClass("cursorText", me.document)[0].parentElement.previousSibling;
                                                rangeLeft.selectNodeContents(box);
                                                rangeLeft.collapse(false);
                                                var selLeft = me.window.getSelection();
                                                selLeft.removeAllRanges();
                                                selLeft.addRange(rangeLeft);
                                                var cursorText = axTools.getByClass("cursorText", me.document)[0];
                                                if(cursorText) cursorText.parentElement.removeChild(cursorText);
                                                targetDom.parentElement.removeChild(targetDom);
                                            }
                                        }
                                        // rangeDom.setEnd(prevLastNode, prevLastNode.textContent.length).setCursor(false, true);
                                    }else{
                                        if(rang.startContainer.textContent.replace(/\u200B/g,'') == ""){
                                            // setCur(rang.startContainer)
                                            rang.startContainer.parentElement.removeChild(rang.startContainer);
                                        }
                                        return;
                                    }
                                }
                            }
                        }
                        if(currModel !== "design" && rang.collapsed){ // 普通文本在非设计模式和非选中状态下的操作处理
                            // 段落标题非独占一行不可删
                            var curRange = rang.startContainer;
                            while(curRange.previousSibling === null && curRange.tagName !== 'BODY') {
                                curRange = curRange.parentElement;
                            }
                            if((rang.startOffset == 0 || rang.startContainer.textContent.replace(/\u200B/g, "") == "" || (rang.startOffset === 1&& rang.startContainer.nodeType === 1 && rang.startContainer.className.indexOf("paragraphContent") > -1 && rang.startContainer.children[0].tagName === 'STRONG'))
                            && curRange.previousSibling
                            && curRange.previousSibling.tagName == "STRONG"
                            && curRange.previousSibling.className.indexOf('ctrl-value') > -1) {
                                axTools.stopDefault(evt);
                                axTools.stopPropagation(evt);
                                var paragraphs = AX.dom.domUtils.findParent(rang.startContainer, function(dom){
                                    return dom.className.indexOf("paragraphele")>-1;
                                })
                                // 处理非独占一行时段落删除
                                if(paragraphs.children.length == 1 && paragraphs.children[0].childNodes[1].textContent.replace(/\s+/g,"") == "") {
                                    var attrs = JSON.parse(paragraphs.getAttribute("attrs"));
                                    if(attrs.isDel == "on") {
                                        // setCur(rang.startContainer)
                                        paragraphs.parentElement.removeChild(paragraphs);
                                    }
                                }
                                return;
                            }else if(rang.startContainer.childNodes.length === 1 && rang.startContainer.childNodes[0].tagName === 'STRONG') {
                                axTools.stopDefault(evt);
                                axTools.stopPropagation(evt);
                            }
                            // 在编辑模式下，非独占一行的段落标题不可删除
                            if((rang.startOffset == 0 || rang.startOffset == 1) && rang.startContainer.previousSibling && rang.startContainer.previousSibling.children.length>0 && rang.startContainer.previousSibling.children[0].tagName == "STRONG" && rang.startContainer.previousSibling.children[0] == "ctrl-value") {
                                axTools.stopDefault(evt);
                                axTools.stopPropagation(evt);
                                return;
                            }
                            if(rang.startContainer.parentElement && rang.startContainer.parentElement.tagName == "STRONG" && rang.startContainer.parentElement.className == "ctrl-value") {
                                axTools.stopDefault(evt);
                                axTools.stopPropagation(evt);
                                return;
                            }
                            if((rang.startOffset == 0 || rang.startOffset == 1) && rang.startContainer.parentElement.childNodes[0] == rang.startContainer && rang.startContainer.parentElement.previousSibling && rang.startContainer.parentElement.previousSibling.tagName == "STRONG" && rang.startContainer.parentElement.previousSibling.className == "ctrl-value") {
                                axTools.stopDefault(evt);
                                axTools.stopPropagation(evt);
                                return;
                            }
                            if(rang.startContainer.childNodes.length === 1 && rang.startContainer.childNodes[0].tagName === 'STRONG') {
                                axTools.stopDefault(evt);
                                axTools.stopPropagation(evt);
                                return;
                            }
                            if (rang.startContainer.className.indexOf('paragraphContent') > -1) {
                              axTools.stopDefault(evt);
                              axTools.stopPropagation(evt);
                              return;
                            }
                        }
                        if(currModel !== "design" && !rang.collapsed) { // 筛选选中一段文本包含不可删除元素
                            if(rang.startContainer.nodeType == 3 && rang.startContainer.nextSibling && rang.startContainer.nextSibling.nodeType == 1 && rang.startContainer.nextSibling.getAttribute("attrs") && rang.startContainer != rang.endContainer) {
                                var nextCtrlJson = JSON.parse(rang.startContainer.nextSibling.getAttribute("attrs"));
                                if(nextCtrlJson.isDel != "on"){
                                    axTools.stopDefault(evt);
                                    axTools.stopPropagation(evt);
                                    return
                                }
                            }
                            var child = axTools.getByTagAttr("strong", "class", "ctrl-value", rang.startContainer);
                            var ctrls = axTools.getByTagAttr("span", "class", "ctrl-bg", rang.startContainer);
                            if(child.length > 0) {
                                axTools.stopDefault(evt);
                                axTools.stopPropagation(evt);
                            }
                            for(var m = 0; m < ctrls.length; m++) {
                                var attrsJson = JSON.parse(ctrls[m].getAttribute("attrs"));
                                if(attrsJson.isDel && attrsJson.isDel != "on"){
                                    axTools.stopDefault(evt);
                                    axTools.stopPropagation(evt);
                                    return
                                }
                            }
                        }
                        // 删除空的文本节点
                        if(rang.startContainer.nodeType == 3 && rang.startContainer.textContent.replace(/\u200B/g,'') == ""){
                            // setCur(rang.startContainer)
                            axTools.stopDefault(evt);
                            axTools.stopPropagation(evt);
                            rang.startContainer.parentElement.removeChild(rang.startContainer);
                            if(rang.startContainer.previousSibling && rang.startContainer.previousSibling.tagName === "BR"){ // 空节点前有br标签时删除，避免换行问题
                                // axTools.focusDomEnd(me, dom);
                                rang.startContainer.previousSibling.parentElement.removeChild(rang.startContainer.previousSibling);
                            }
                        }
                        if(pos === 0) {
                            // 当其他条件不满足时，在节点开头位置是否有br
                            var currentDom = rang.startContainer;
                            while(currentDom == currentDom.parentElement.childNodes[0]){
                                currentDom = currentDom.parentElement;
                                if(currentDom.className.indexOf("ax-page-content") > -1) {
                                    setCur(rang.startContainer, "paragraphele");
                                    if(rang.startContainer.nodeType === 1 && rang.startContainer.childNodes[0] && rang.startContainer.childNodes[0].tagName === "BR") {
                                        rang.startContainer.childNodes[0].parentElement.removeChild(rang.startContainer.childNodes[0])
                                    }
                                    break;
                                }
                            }
                        }
                        return;
                    }
                    // 单选多选元素，获取的值不同
                    if (axPlugins == "radio" || axPlugins == "checkbox" || axPlugins == "haveornot" || axPlugins == 'select' || axPlugins == "selectmulti") {
                        currVal = ctrlNode.getAttribute("selectval");

                    } else {
                        currVal = ctrlNode.children[0].innerText;
                    }
                    // 在下拉选择类型的控件 删除键清空内容
                    if (axPlugins == 'haveornot' || axPlugins == 'select' || axPlugins == "selectmulti") {
                        if (currVal != "") {
                            axTools.stopDefault(evt);
                            axTools.stopPropagation(evt);
                            ctrlNode.setAttribute("selectval", "");
                            ctrlNode.setAttribute("selectvaltext", "")
                            ctrlNode.children[0].innerText = "";
                            me.fireEvent("contentchange");
                            return;
                        }
                    }
                    // 处理元素删除，根据元素设置操作
                    if (currVal.replace(/\u200B/g, "") == "" || json.readonly == "on" || axPlugins == "diagnose" || axPlugins == "checkbox" || axPlugins == "radio") {
                        if (json.isDel == "on" || (currModel != "edit" && currModel != "mark")) {
                            axTools.stopDefault(evt);
                            axTools.stopPropagation(evt);
                            setCur(ctrlNode);
                            ctrlNode.parentElement.removeChild(ctrlNode);
                        } else {
                            axTools.stopDefault(evt);
                            axTools.stopPropagation(evt);
                            // 不可删时跳过该元素
                            // rangeDom.setStart(prevNode.previousSibling, 0).setCursor(false, true);
                            var box = ctrlNode.previousSibling ? ctrlNode.previousSibling : ctrlNode.parentElement.previousSibling;
                            me.document.body.click(); // 使原有控件失去焦点
                            var rangeLeft = document.createRange();
                            rangeLeft.selectNodeContents(box);
                            rangeLeft.collapse(false);
                            var selLeft = me.window.getSelection();
                            selLeft.removeAllRanges();
                            selLeft.addRange(rangeLeft);
                            return;
                        }
                    } else {
                        var isPrev = AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
                            return dom.getAttribute("attrs") && dom.getAttribute("axPlugins") && dom.tagName != "DIV";
                        }, true);
                        if (!isPrev) {
                            var ctrlvalue = axTools.getByClass("ctrl-value", ctrlNode)[0];
                            // rangeDom.setEndAtLast(ctrlvalue);
                            var rangeLeft = document.createRange();
                            rangeLeft.selectNodeContents(ctrlvalue);
                            rangeLeft.collapse(false);
                            var selLeft = me.window.getSelection();
                            selLeft.removeAllRanges();
                            selLeft.addRange(rangeLeft);
                            return;
                        }
                    }
                } else {
                    // 普通文本处理
                    if(currModel !== "design" && rang.collapsed){
                        // 前面元素判断失败时，需要继续校验非独占一行段落标题
                        if((rang.startOffset == 0 || rang.startOffset == 1) && rang.startContainer.previousSibling && rang.startContainer.previousSibling.tagName == "STRONG" && rang.startContainer.previousSibling.className == "ctrl-value") {
                            axTools.stopDefault(evt);
                            axTools.stopPropagation(evt);
                            var paragraphs = AX.dom.domUtils.findParent(rang.startContainer, function(dom){
                                return dom.className.indexOf("paragraphele")>-1;
                            })
                            // 处理非独占一行时段落删除
                            if(paragraphs.children.length == 1 && paragraphs.children[0].childNodes[1].textContent.replace(/\s+/g,"") == "") {
                                var attrs = JSON.parse(paragraphs.getAttribute("attrs"));
                                if(attrs.isDel == "on") {
                                    // setCur(rang.startContainer)
                                    paragraphs.parentElement.removeChild(paragraphs);
                                }
                            }
                            return;
                        }
                        // 防止独占一行的段落标题被删除
                        if((rang.startOffset == 0 || rang.startOffset == 1) && rang.startContainer.previousSibling && rang.startContainer.previousSibling.children.length>0 && rang.startContainer.previousSibling.children[0].tagName == "STRONG" && rang.startContainer.previousSibling.children[0] == "ctrl-value") {
                            axTools.stopDefault(evt);
                            axTools.stopPropagation(evt);
                            return;
                        }
                        if(rang.startContainer.parentElement && rang.startContainer.parentElement.tagName == "STRONG" && rang.startContainer.parentElement.className == "ctrl-value") {
                            axTools.stopDefault(evt);
                            axTools.stopPropagation(evt);
                            return;
                        }
                        if(rang.startContainer.tagName === 'DIV' && rang.startContainer.className.indexOf("paragraphContent") > -1 && rang.startOffset != 0 && rang.startContainer.childNodes[rang.startOffset - 1].tagName == "STRONG" && rang.startContainer.childNodes[rang.startOffset - 1].className == "ctrl-value") {
                            axTools.stopDefault(evt);
                            axTools.stopPropagation(evt);
                            return;
                        }
                    }
                    // 处理光标第一位，删除后合并段落内容content[0].textContent.replace(/\u200B/g, "") == "")
                    if (rang.startContainer.tagName == "DIV" && (rang.startOffset == 0 || rang.startOffset == 1) && rang.startContainer.textContent.replace(/\u200B/g, "") == "") {
                        // if (rang.startContainer.previousSibling) {
                            axTools.stopDefault(evt);
                            axTools.stopPropagation(evt);
                            rang.startContainer.parentElement.removeChild(rang.startContainer);
                        // }
                        return
                    }
                    // li标签判断处理
                    var parentNode = AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
                        return dom.tagName === "LI";
                    }, true);
                    if (parentNode && parentNode.textContent.replace(/\u200B/g, "") == "") {
                        axTools.stopDefault(evt);
                        axTools.stopPropagation(evt);
                        parentNode.previousSibling && rangeDom.setEndAtLast(parentNode.previousSibling);
                        parentNode.parentElement.removeChild(parentNode);
                    }
                    // }
                }

                // br标签的删除逻辑
                if(pos == 0){
                    if(rang.startContainer.previousSibling && rang.startContainer.previousSibling.tagName == "BR"){
                        // setCur(rang.startContainer)
                        rang.startContainer.previousSibling.parentElement.removeChild(rang.startContainer.previousSibling);
                    }
                }else if(pos == 1){
                    if(rang.startContainer.previousSibling){
                        var text = rang.startContainer.textContent.split("")[0];
                        if(text.charCodeAt(0) === 8203){
                            if(rang.startContainer.previousSibling.tagName == "BR"){
                                // setCur(rang.startContainer)
                                rang.startContainer.previousSibling.parentElement.removeChild(rang.startContainer.previousSibling);
                            }
                        }
                    }
                }
                // 以上校验为匹配的时候，判断是否为第一个节点
                var currentDom = rang.startContainer;
                while(currentDom == currentDom.parentElement.childNodes[0]){
                    currentDom = currentDom.parentElement;
                    if(currentDom.className.indexOf("ax-page-content") > -1) {
                        setCur(rang.startContainer, "paragraphele");
                        break;
                    }
                }
                // if (keycode == 8) {
                    // 如果成功的触发页首的删除，那么这次删除操作只是光标的变换位置
                    // 从当前页转移到上页
                if (AX.pageControler.checkCursor(rang)) {
                    axTools.stopDefault(evt);
                    axTools.stopPropagation(evt);
                    return;
                }
                // }
            } else { // delete
                // 下面逻辑所用较少
                var pos = rang.startOffset;
                if (rang.startContainer.nodeType == 3) {
                    var isEnd = rang.startContainer.data.length == pos;
                    if (isEnd || rang.startContainer.textContent.replace(/\u200B/g, "") == "") {
                        var prevNode = AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
                            return dom.getAttribute("attrs") && dom.getAttribute("axplugins") != "paragraphele";
                        }, true);
                        try {
                            var nextNode = rang.startContainer.nextSibling;
                            if (!nextNode) {
                                nextNode = rang.startContainer.parentElement.nextSibling;
                            }

                        } catch (e) { }

                        if (prevNode) {
                            ctrlNode = prevNode;
                        } else if (nextNode) {
                            if (nextNode.tagName == "DIV") {
                                if (nextNode.childNodes.length > 0) {
                                    nextNode = nextNode.childNodes[0];
                                    nextNode = AX.dom.domUtils.findParent(nextNode, function (dom) {
                                        return dom.getAttribute("attrs")
                                    }, true)
                                }
                            }
                            if (axTools.hasClass(nextNode, "ctrl-bg")) {
                                ctrlNode = nextNode;
                            }
                        }
                    }
                } else {
                    if (rang.startContainer.tagName == "DIV") {
                        var nextNode = rang.startContainer.nextSibling;
                        if (nextNode.tagName == "DIV") {
                            if (nextNode.childNodes.length > 0) {
                                nextNode = nextNode.childNodes[0];
                            }
                        }
                        nextNode = AX.dom.domUtils.findParent(nextNode, function (dom) {
                            return dom.getAttribute("attrs")
                        }, true)
                        if (axTools.hasClass(nextNode, "ctrl-bg")) {
                            ctrlNode = nextNode;
                        }
                    }
                }
                var nextNodeCtrl = AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
                    return dom.getAttribute("attrs") && dom.getAttribute("axplugins") != "paragraphele";
                }, true);
                if (nextNodeCtrl) {
                    ctrlNode = nextNodeCtrl;
                }
                if (ctrlNode) {
                    var json = JSON.parse(ctrlNode.getAttribute("attrs"));
                    var axPlugins = ctrlNode.getAttribute("axplugins");
                    var currVal = ""
                    if (axPlugins == "radio" || axPlugins == "checkbox") {
                        currVal = ctrlNode.getAttribute("selectval");
                    } else {
                        currVal = ctrlNode.children[0].innerText;
                    }
                    if (currVal.replace(/\u200B/g, "") == "") {
                        if (json.isDel == "on" || (currModel != "edit" && currModel != "mark")) {
                            ctrlNode.parentElement.removeChild(ctrlNode);
                        } else {
                            rangeDom.setStart(ctrlNode.nextSibling, 0).setCursor(false, true);
                        }
                        axTools.stopDefault(evt);
                        axTools.stopPropagation(evt);
                    }
                } else {
                    if (rang.startContainer.nodeType == 3 && rang.startOffset == 0 && rang.startContainer.textContent.replace(/\u200B/g, "").length == 1) {
                        // 删除文本节点时校验，保留可编辑空间
                        axTools.stopDefault(evt);
                        axTools.stopPropagation(evt);
                        rang.startContainer.data = "\u200B";
                    }
                }
            }
        }
        // }
    });
};

/* eslint-disable */

/**
 * 诊断元素
 * @command diagnose
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'diagnose');
 * ```
 */
AX.plugins['diagnose'] = function () {
	var me = this,
		thePlugins = 'diagnose';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:700px;height:360px;',
				dialogUrl: 'dialogs/extends/diagnose.html'
			});

			// var id=axTools.uuidv4();
			// var str='<div class="ctrl-bg ctrl-field diagnose no-border" id="'+id+'" title="'+me.getLang('ax.diagnoseTitle')+'" style="display:block;" attrs="{&quot;id&quot;:&quot;'+id+'&quot;,&quot;name&quot;:&quot;'+me.getLang('ax.diagnoseTitle')+'&quot;}" axPlugins="'+thePlugins+'">'
			// 	   +'<div class="ctrl-value">'+me.getLang('ax.diagnoseContent')+'</div>'
			// 	   +'</div><span style="display:block;clear:both;height: 0;"></span>'
			// me.execCommand('inserthtml',str.replace(/\u200B/g,''));
		}
	};
	var popup = axTools.makePopup({
		me: me,
		type: thePlugins,
		editFunc: typeof me.options.diagnoseMethod == 'function' ? me.options.diagnoseMethod : function(){alert(me.getLang('ax.configDiagnoseMethod'));}
	});
	// popup.render();

	// me.addListener('mouseover', function (t, evt) {
	// 	axTools.commonEditTip(thePlugins,me,popup,evt);
	// });
};

/**
 * 诊断元素
 * @command showdiagnose
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'showdiagnose');
 * ```
 */
AX.plugins['showdiagnose'] = function () {
	var me = this,
		thePlugins = 'showdiagnose';
	me.commands[thePlugins] = {
		execCommand: function (type,str, diagnoseType) {
			var diagnoseCtrl,diagnoseCtrlVal;
			try{
				me.undoManger.disconnect(); // 刷新宏元素时，暂停撤回监听
			}catch(e){console.log(e)}
			// 处理留痕模式

			if(!diagnoseType) { // 判断是否出入诊断类型参数，未传则修改每个诊断类型的值
				if (axTools.getByClass('diagnose',me.document).length > 0) {
					diagnoseCtrl = axTools.getByClass('diagnose',me.document);
					for(var i = 0; i < diagnoseCtrl.length; i++) {
						diagnoseCtrlVal=axTools.getByClass('ctrl-value',diagnoseCtrl[i])[0];
						str = compareDiagnoseStr(str, diagnoseCtrl[i])
						diagnoseCtrlVal.innerHTML=str;
						// 暂时弃用
						axTools.valueChange(diagnoseCtrlVal)
					}
				}else{
					// alert(me.getLang('ax.noDiagnose'));
				}
			}else{
				// 根据诊断类型注入值
				var elems = axTools.getByTagAttr('span', "diagnosetype", diagnoseType,me.document);
				if(elems.length > 0){
					for (var i = 1;i < elems.length; i++) {
						elems[i].parentNode.removeChild(elems[i]);
						i--;
					}
					diagnoseCtrl=elems[0];
					diagnoseCtrlVal=axTools.getByClass('ctrl-value',diagnoseCtrl)[0];
					str = compareDiagnoseStr(str, diagnoseCtrl)
					diagnoseCtrlVal.innerHTML=str;
					axTools.valueChange(diagnoseCtrlVal)
				}else {
					// alert(me.getLang('ax.noDiagnose'));
				}
			}
			try{
				me.undoManger.reset();
				me.undoManger.reObserve(); // 宏元素更新后，重新监听撤回
			}catch(e){console.log(e)}
		},
		notNeedUndo: 1
	};
	/**
	 * 比较诊断变化，用做留痕使用
	 * @param {需要出入的dom字符串} str
	 * @param {目标元素} ctrl
	 */
	function compareDiagnoseStr(str, ctrl) {
		if(me.options.editorModel === "mark") {
			var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
			var name = me.options.userInfo.name;
			var oldVal = ctrl.getAttribute("oldval");
			var result = ""; // 最终返回结果
			// 获取删除项，保证为最原始的值
			var div = document.createElement('div');
			div.innerHTML = oldVal;
			if(axTools.getByClass('editor-mark-del-text', div).length > 0) {
				oldVal = axTools.getByClass('editor-mark-del-text', div)[0].innerHTML.replace(/\u200B/g, "");
			}
			oldVal = oldVal.replace(/&nbsp;/g, ' ');
			str = str.replace(/&nbsp;/g, ' ');
			if(oldVal === str) {
				return oldVal;
			}else if(oldVal === "" && oldVal !== null) {
				result = '<span class="editor-new-add-text editor-free-text show-block" user="' + name + '" time="' + time + '">' + str + '</span>';
			}else if(oldVal !== str && oldVal !== "" && oldVal !== null) {
				result = '<span class="editor-mark-del-text editor-free-text show-block" contenteditable="false" style="display: inline !important" user="' + name + '" time="' + time + '">' + oldVal + '</span><span class="editor-new-add-text editor-free-text">' + str + '</span>';
			}
			return result;
		}
		return str;
	}
};

/**
 * 刷新诊断元素
 * @command refreshdiagnose
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'refreshdiagnose');
 * ```
 */
AX.plugins['refreshdiagnose'] = function () {
	var me = this,
		thePlugins = 'refreshdiagnose';
	me.commands[thePlugins] = {
		execCommand: function () {
			if(axTools.getByClass('diagnose',me.document).length>0){
				// TODO 临时测试
				// var str = '<table class="diagnoseTable" cellspacing="0" cellpadding="0"><tr><td align="right" valign="top">门诊诊断</td><td>1.感冒病 </td></tr><tr><td align="right" valign="top"></td><td>2.大头瘟病 </td></tr><tr><td align="right" valign="top"></td><td>3.咳嗽病 </td></tr><tr><td align="right" valign="top"></td><td>4.霍乱</td></tr></table>'
				// me.execCommand('showdiagnose',str)
				typeof me.options.refreshDiagnoseMethod == 'function' ? me.options.refreshDiagnoseMethod() : alert(me.getLang('ax.configRefreshDiagnoseMethod'));
			}else{
				alert(me.getLang('ax.noDiagnose'));
			}
		}
	};
};


/**
 * 维护模板时 设置诊断信息
 * @command refreshdiagnose
 * @method execCommand
 */
AX.plugins['setdiagnoseinfo'] = function () {
	var me = this,
		thePlugins = 'setdiagnoseinfo';
	me.commands[thePlugins] = {
		execCommand: function (type, info, diagTy) {
			var setEndInfo = []
			for (var i = 0; i < info.length; i++) {
				if(setEndInfo.length > 0 && setEndInfo.indexOf(info[i].diagType) > -1) continue;
				var elem = axTools.getByTagAttr('span', "diagnosetype", info[i].diagType, me.document)[0];
				var arr = info.filter(function (item){
					return item.diagType === info[i].diagType
				})
				if(elem) {
					elem.setAttribute("diagInfo", JSON.stringify(arr));
					setEndInfo.push(info[i].diagType)
				}
			}
			if (info.length == 0 && diagTy) {
				var elem = axTools.getByTagAttr('span', "diagnosetype", diagTy, me.document)[0];
				if(elem) {
					elem.removeAttribute("diagInfo");
				}
			}
		},
		notNeedUndo: 1
	};
};

/**
 * 书写病历时 获取在模板维护时保存的诊断信息
 * @command refreshdiagnose
 * @method execCommand
 */
AX.plugins['getdiagnoseinfo'] = function () {
	var me = this,
		thePlugins = 'getdiagnoseinfo';
	me.commands[thePlugins] = {
		execCommand: function (type) {
			var infos = []
			var elems = axTools.getByClass('diagnose', me.document);
			for(var i = 0; i < elems.length; i++) {
				var info = elems[i].getAttribute("diagInfo");
				infos = info && infos.concat(JSON.parse(info));
			}
			return infos;
		},
		notNeedUndo: 1
	};
};
/* eslint-disable */

//字体 upsize
AX.plugins['sizeplus'] = function () {
    var me = this,thePlugins = 'sizeplus';
    me.commands[thePlugins] = {
        execCommand: function () {
            var t = parseFloat(me.queryCommandValue("fontsize"));
            me.execCommand("fontsize", ++t + "px");
        }
    };
};

//字体 downsize
AX.plugins['sizeminus'] = function () {
    var me = this,thePlugins = 'sizeminus';
    me.commands[thePlugins] = {
        execCommand: function () {
            var t = parseFloat(me.queryCommandValue("fontsize"));
            me.execCommand("fontsize", --t + "px");
        }
    };
};
/* eslint-disable */

/**
 * 保存模板
 * @command save
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'save');
 * ```
 */
AX.plugins["save"] = function() {
  var me = this,
    thePlugins = "save";
  me.commands[thePlugins] = {
    execCommand: function() {
      // 校验是否已配置暂存方法
      if (typeof this.options.saveMethod == "function") {
        // if (!axTools.beforeSaveCheck(me)) {
        //   return false;
        // }
        // 处理留痕信息
        axTools.addMarkDisable(me);
        // console.log(this.getContent())
        // this.execCommand("sensitive")
        // 敏感词校验 ， 提醒类型和禁用类型
        me.execCommand("sensitivewarning");
        me.execCommand("sensitive");
        // 调用配置的暂存方法
        this.options.saveMethod(this.getContent());
      } else {
        alert(me.getLang("ax.noSaveMethod"));
      }
    }
  };
};

/**
 * 保存XML
 * @command save
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'save');
 * ```
 */
AX.plugins["savexml1"] = function() {
  var me = this,
    thePlugins = "savexml1";
  me.commands[thePlugins] = {
    execCommand: function() {
      if (!axTools.beforeSaveCheck(me)) {
        return false;
      }
      var xmlStr =
        '<?xml version="1.0"?><ax_editor xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">';
      xmlStr += "<header><text>***医院</text></header>";
      xmlStr += "<elements>";

      function getChildren(dom) {
        var children = dom.children;
        var plainTextArr = [],
          domStr = dom.innerHTML,
          plainNum = 0;
        for (var i = 0; i < children.length; i++) {
          var str = children[i].outerHTML;
          domStr = domStr.replace(str, "||||");
        }
        if (
          domStr.replace(/||||/g, "") != "" &&
          dom.tagName.toLowerCase() != "body"
        ) {
          xmlStr +=
            '<element type="' +
            dom.tagName.toLowerCase() +
            '"' +
            axTools.getNodeAttrs(dom) +
            ">";
        }
        plainTextArr = domStr.split("||||");
        for (var i = 0; i < children.length; i++) {
          if (i < plainTextArr.length) {
            plainNum++;
            var plainText = plainTextArr[i]
              .replace(/\u200B/g, "")
              .replace(/&/g, "&amp;");
            if (!(plainText == "" || plainText.indexOf("</") > -1)) {
              xmlStr +=
                '<element type="plainText"><text>' +
                plainText +
                "</text></element>";
            }
          }
          var child = children[i],
            isCtrl = axTools.hasClass(child, "ctrl-bg"),
            ctrlType = child.getAttribute("axPlugins");
          if (
            (isCtrl || child.innerHTML.indexOf("</") == -1) &&
            ctrlType != "note"
          ) {
            xmlStr +=
              '<element type="' +
              child.tagName.toLowerCase() +
              '"' +
              axTools.getNodeAttrs(child) +
              ">";
            var textStr = (isCtrl ? child.innerText : child.innerHTML)
              .replace(/\u200B/g, "")
              .replace(/&/g, "&amp;");
            textStr = textStr == "<br>" ? "\r\n" : textStr;
            if (ctrlType == "radio" || ctrlType == "checkboxs") {
              textStr = "";
            }
            xmlStr += "<text>" + textStr + "</text>";
            xmlStr += "</element>";
          } else if (!isCtrl) {
            //控件内部html自动生成
            getChildren(child);
          }
        }
        if (plainNum < plainTextArr.length) {
          for (var j = plainNum; j < plainTextArr.length; j++) {
            plainTextArr[j] = plainTextArr[j]
              .replace(/\u200B/g, "")
              .replace(/&/g, "&amp;");
            if (
              !(plainTextArr[j] == "" || plainTextArr[j].indexOf("</") > -1)
            ) {
              xmlStr +=
                '<element type="plainText"><text>' +
                plainTextArr[j] +
                "</text></element>";
            }
          }
        }
        if (
          domStr.replace(/||||/g, "") != "" &&
          dom.tagName.toLowerCase() != "body"
        ) {
          xmlStr += "</element>";
        }
      }
      getChildren(me.document.body);

      xmlStr += "</elements>";
      // xmlStr += "<body_text>" + me.getPlainTxt() + "</body_text>";
      xmlStr += "<mark_info></mark_info><footer><text>入院记录</text></footer>";
      xmlStr +=
        "<print><top_margin>60</top_margin><right_margin>60</right_margin><bottom_margin>60</bottom_margin><left_margin>60</left_margin></print>";
      xmlStr +=
        "<info><hospital>***医院</hospital><editor_version>v1.0</editor_version><sys_version>v2.0.3</sys_version><file_name>axDemo_入院记录.xml</file_name><create_time>2014-07-14T11:24:34.140625+08:00</create_time><modify_time>2019-06-17T17:02:08.236306+08:00</modify_time><print_time>1980-01-01T00:00:00</print_time><operator>DCSoft.Writer Version:1.2014.1217.1</operator><page_nums>3</page_nums></info>";
      xmlStr +=
        "<editor_info><name>安想编辑器</name><version>v1.0</version><version>版权所有：平安联想智慧医疗</version></editor_info>";
      xmlStr += "</ax_editor>";
      var xmlDoc = axTools.createXMLObj(xmlStr);
      //   console.log(xmlDoc);
      console.log(xmlStr);
      //   alert("保存成功，请到控制台查看！");
    }
  };
};

// 页头：header
// 页脚：footer
// 段落：section
// 纯文本: text
// 元素： element
// 表格: table
// 图片: image

AX.plugins["savexml"] = function() {
  var me = this,
    thePlugins = "savexml";
  me.commands[thePlugins] = {
    execCommand: function() {
      function start() {
        var data = {
          tagName: "ax_editor",
          children: []
        };
        var pageSize = me.document.getElementById("paperSizeHidden");
        if (pageSize) {
          data.children.push({
            tagName: "meta",
            type: "pageSize",
            value: pageSize.getAttribute("value")
          });
        }
        var pageMargin = me.document.getElementById("pageMarginHidden");
        if (pageMargin) {
          data.children.push({
            tagName: "meta",
            type: "pageMargin",
            value: pageMargin.getAttribute("value")
          });
        }
        var tabIndex = me.document.getElementById("tabIndexBox");
        if (tabIndex) {
          data.children.push({
            tagName: "meta",
            type: "tabIndex",
            value: tabIndex.getAttribute("value")
          });
        }
        data.children = data.children.concat(
          extracts(me.document.body.children)
        );
        return toXml(data);
      }

      function extracts(doms) {
        var ret = [];
        for (var i = 0; i < doms.length; i++) {
          var dom = doms[i];
          var item = extract(dom);
          if (item) {
            ret.push(item);
          }
        }
        return ret;
      }

      // 提取table数据
      function extractTable(dom) {
        var ret = [];
        var trs = dom.getElementsByTagName("tr");
        for (var i = 0; i < trs.length; i++) {
          var data = {
            tagName: "element",
            type: "tableRow",
            children: []
          };
          var tr = trs[i];
          var tds = tr.getElementsByTagName("td");
          for (var j = 0; j < tds.length; j++) {
            var td = tds[j];
            data.children.push({
              tagName: "element",
              type: "tableCell",
              children: extractBlend(td)
            });
          }
          ret.push(data);
        }
        return ret;
      }

      // 列表
      function extractList(dom) {
        var ret = [];
        for (var i = 0; i < dom.children.length; i++) {
          var child = dom.children[i];
          var items = extracts(child.children);
          if (items) {
            ret.push({
              tagName: "element",
              type: "listItem",
              children: items
            });
          }
        }
        return ret;
      }

      // 处理文本与元素混合的情况
      function extractBlend(dom) {
        var ret = [];
        var domStr = dom.innerHTML;
        for (var i = 0; i < dom.children.length; i++) {
          var child = dom.children[i];
          var childPluginName = child.getAttribute("axplugins");
          var idx = domStr.indexOf(child.outerHTML);
          var rplStr = child.outerHTML;
          // 各别元素前面或者后面或者前后加了空格
          // 。。。伤的一笔
          if (
            childPluginName &&
            domStr.indexOf("&nbsp;" + rplStr + "&nbsp;") == idx - 6
          ) {
            rplStr = "&nbsp;" + rplStr + "&nbsp;";
          } else if (
            childPluginName &&
            domStr.indexOf("&nbsp;" + rplStr) == idx - 6
          ) {
            rplStr = "&nbsp;" + rplStr;
          } else if (
            childPluginName &&
            domStr.indexOf(rplStr + "&nbsp;") == idx
          ) {
            rplStr = rplStr + "&nbsp;";
          }
          domStr = domStr.replace(rplStr, "|--|--|");
        }
        var texts = domStr.split("|--|--|");
        for (var i = 0; i < texts.length; i++) {
          var t = texts[i];
          if (t && t.length) {
            ret.push({
              tagName: "text",
              value: t.replace(/&nbsp;/g, " ")
            });
          }
          if (dom.children[i]) {
            var item = extract(dom.children[i]);
            if (item) {
              ret.push(item);
            }
          }
        }
        return ret;
      }

      // 根据不同的节点，提取不同的属性字段
      function extractPluginAttr(dom, data) {
        var pluginName = dom.getAttribute("axplugins");
        if (!pluginName) {
          return;
        }

        // 医学表达式特殊处理
        // 医学表达式需要再把
        if (axTools.hasClass(dom, "medical-expression")) {
          var sizeWidth = dom.getAttribute("sizeWidth");
          var sizeHeight = dom.getAttribute("sizeHeight");
          if (sizeWidth && sizeHeight) {
            data.sizeWidth = sizeWidth;
            data.sizeHeight = sizeHeight;
          }
          data["medical"] = true;
        }

        // 把attrs上的属性都挂载到元素节点上
        var attrsStr = dom.getAttribute("attrs");
        if (attrsStr && attrsStr.length > 0) {
          if (data["medical"]) {
            data["attrs"] = attrsStr;
          } else {
            var attrs = JSON.parse(attrsStr);
            for (var key in attrs) {
              data[key] = attrs[key];
            }
          }
        }

        // 不同元素的值的提取方式不同
        var value;
        var simpleValueType = [
          "macro",
          "text",
          "tagelement",
          "datedomain",
          "numberelement",
          "signature"
        ];
        var selectValueType = ["haveornot", "select", "radio", "checkbox"];
        if (simpleValueType.indexOf(pluginName) != -1) {
          value = dom.children[0].innerText;
        } else if (selectValueType.indexOf(pluginName) != -1) {
          value = dom.getAttribute("selectval");
        }
        data.value = value;
      }

      function extract(dom) {
        var data = {
          tagName: "",
          children: []
        };
        var tagName = dom.tagName.toLowerCase();
        var pluginName = dom.getAttribute("axplugins");

        // 页眉、页脚作为一个完整的独立空间
        if (tagName == "header" || tagName == "footer") {
          data.tagName = tagName;
          data.children = extracts(dom.children);
          // 表格
        } else if (tagName == "table") {
          data.tagName = "element";
          data.type = tagName;
          data.children = [
            {
              tagName: "element",
              type: "tbody",
              children: extractTable(dom)
            }
          ];
          // 列表
        } else if (tagName == "ol" || tagName == "ul") {
          data.tagName = "element";
          data.type = tagName;
          data.children = extractList(dom);
        } else if (tagName == "p" || (tagName == "div" && pluginName != "paragraphele")) {
          if (dom.children.length == 0) {
            data.tagName = "text";
            data.nil = true;
            data.value = dom.innerText;
          } else {
            var items = extractBlend(dom);
            if (!items.length) {
              return;
            }
            data.tagName = "elements";
            data.children = items;
          }
        } else if (tagName == "br") {
          data.tagName = "element";
          data.type = "paragraphFlag";
        } else if (pluginName == "paragraphele") {
          // 段落
          data.tagName = "section";
          var json = JSON.parse(dom.getAttribute("attrs"))
          var items = extractBlend(json.singleTitle == "on"?dom.children[1]:dom.children[0]);
          if (!items.length) {
            return;
          }
          data.children = items;
          extractPluginAttr(dom, data);
          // 组合元素
        } else if (pluginName == "combine") {
          data.tagName = "element";
          data.type = tagName;
          data.children = [];
          extractPluginAttr(dom, data);
          // 其他元素，除了上面三种特殊元素外，其他结构化元素不能互相嵌入
        } else if (pluginName) {
          data.tagName = "element";
          data.type = pluginName;
          extractPluginAttr(dom, data);
          // 文本
        } else {
          var t = dom.innerText;
          if (t.length === 0) {
            return;
          }
          data.tagName = "text";
          data.value = t.replace(/&nbsp/g, " ");
        }
        return data;
      }

      function toXml(data) {
        var keys = Object.keys(data);
        var str = "<" + data.tagName;
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key == "tagName" || key == "children") {
            continue;
          }
          str += " " + key + "='" + data[key] + "'";
        }
        str += ">";
        if (data.children && data.children.length) {
          for (var i = 0; i < data.children.length; i++) {
            var child = data.children[i];
            str += toXml(child);
          }
        }
        str += "</" + data.tagName + ">";
        return str;
      }

      console.log(start());
    }
  };
};

function getAttrs(node) {
  var ret = {};
  var names = node.getAttributeNames();
  for (var i = 0; i < names.length; i++) {
    var name = names[i];
    ret[name] = node.getAttribute(name);
  }
  return ret;
}

// 解析xml文件
AX.plugins["openxml"] = function() {
  var me = this,
    thePlugins = "openxml";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      var fileInput = document.createElement("input");
      fileInput.setAttribute("type", "file");
      fileInput.onchange = function(e) {
        var targetObj = e.target;
        if (targetObj.files && targetObj.files.length) {
          var file = targetObj.files[0];
          if (axTools.suffix(file.name.toLowerCase(), "xml")) {
            var fr = new FileReader();
            fr.readAsText(file);
            fr.onload = function(e) {
              var result = e.target.result.toString(),
                xmlDoc = axTools.createXMLObj(result);

              function makeHtml(node) {
                return new Promise(function(resolve, reject) {
                  var name = node.nodeName;
                  // fix IE
                  if (name.indexOf("#") === 0) {
                    name = name.slice(1);
                  }
                  if (name == "element") {
                    var type = node.getAttribute("type");
                    var ismedical = node.getAttribute("medical");
                    var simpleValueType = [
                      "macro",
                      "text",
                      "tagelement",
                      "datedomain",
                      "numberelement",
                      "signature"
                    ];
                    var selectValueType = [
                      "haveornot",
                      "select",
                      "radio",
                      "checkbox"
                    ];
                    if (
                      simpleValueType.indexOf(type) != -1 ||
                      selectValueType.indexOf(type) != -1
                    ) {
                      var attrs = getAttrs(node);
                      if (type == "macro") {
                        resolve(AX.mh.macro(attrs, type));
                      } else {
                        // TODO value值的设置
                        resolve(AX.mh.base(attrs, type));
                      }
                    } else if (type == "tableRow" || type == "tableCell") {
                      resolve(
                        document.createElement(type == "tableRow" ? "tr" : "td")
                      );
                    } else if (type == "paragraphFlag") {
                      resolve(document.createElement("br"));
                    } else if (type == "listItem") {
                      resolve(document.createElement("li"));
                    } else {
                      if (ismedical) {
                        var attrs = JSON.parse(node.getAttribute("attrs"))
                          .attrs;
                        var sizeWidth = node.getAttribute("sizeWidth");
                        var sizeHeight = node.getAttribute("sizeHeight");
                        AX.mh
                          .medical(null, attrs, type, {
                            sizeWidth: sizeWidth,
                            sizeHeight: sizeHeight
                          })
                          .then(function(htmlStr) {
                            var parentNode = document.createElement("div");
                            parentNode.innerHTML = htmlStr;
                            resolve(parentNode.children[0]);
                          })
                          .catch(function(error) {
                            reject(error);
                          });
                      } else {
                        resolve(document.createElement(type));
                      }
                    }
                  } else if (name == "elements") {
                    resolve(document.createElement("p"));
                  } else if (name == "text") {
                    if (node.getAttribute("nil")) {
                      var htmlNode = document.createElement("p");
                      htmlNode.innerText = node.getAttribute("value");
                      resolve(htmlNode);
                    } else {
                      // TODO, 原版的HTML中这里是需要文本和节点拼接共存
                      var htmlNode = document.createElement("span");
                      htmlNode.innerText = node.getAttribute("value");
                      resolve(htmlNode);
                    }
                  } else if (name == "meta") {
                    var htmlNode = document.createElement("input");
                    htmlNode.setAttribute("id", node.getAttribute("type"));
                    htmlNode.setAttribute("type", "hidden");
                    htmlNode.setAttribute("value", node.getAttribute("value"));
                    resolve(htmlNode);
                  } else if (name == "header" || name == "footer") {
                    // TODO 没有完美还原
                    resolve(document.createElement(name));
                  } else if (name == "ax_editor") {
                    resolve(document.createElement("script"));
                  } else if (name == "section") {
                    var attrs = getAttrs(node);
                    var type = node.getAttribute("type");
                    resolve(AX.mh["paragraph"](attrs, "paragraphele"));
                  } else {
                  }
                });
              }

              function comeOn(node) {
                return new Promise(function(resolve, reject) {
                  makeHtml(node).then(function(elem) {
                    if (node.children) {
                      var items = [];
                      for (var i = 0; i < node.children.length; i++) {
                        var child = node.children[i];
                        items.push(comeOn(child));
                      }
                      Promise.all(items)
                        .then(function(childNodes) {
                          for (var i = 0; i < childNodes.length; i++) {
                            var childNode = childNodes[i];
                            var thePlugins = elem.getAttribute("axPlugins");
                            if (thePlugins == "paragraphele") {
                              // 段落借点的子内容需要插入paragraphContent节点中
                              elem.children[1].appendChild(childNode);
                            } else {
                              elem.appendChild(childNode);
                            }
                          }
                          resolve(elem);
                        })
                        .catch(function(error) {
                          console.log(error);
                        });
                    } else {
                      resolve(elem);
                    }
                  });
                });
              }

              comeOn(xmlDoc.children[0]).then(function(test) {
                console.log(test.outerHTML);
              });
            };
          } else {
            alert(me.getLang("ax.errorFileContent"));
          }
        }
      };
      fileInput.click();
    }
  };
};

/**
 * 另存为模板
 * @command savetempl
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'savetempl');
 * ```
 */
AX.plugins["savetempl"] = function() {
  var me = this,
    thePlugins = "savetempl";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      if (typeof this.options.saveTemplMethod == "function") {
        // if (!axTools.beforeSaveCheck(me)) {
        //   return false;
        // }
        this.options.saveTemplMethod(this.getContent());
      } else {
        alert(me.getLang("ax.noSaveAsMethod"));
      }
    }
  };
};
/**
 * 另存为模板 -- 获取内容，通过checkDirectCite控制是否清空
 */
AX.plugins["gettemplcontent"] = function() {
  var me = this,
    thePlugins = "gettemplcontent";
  me.commands[thePlugins] = {
    execCommand: function(type, str, newDept) {
      var content = str || this.getContent();
      var div = document.createElement("div");
      div.innerHTML = content;
      var ctrls = axTools.getByClass("ctrl-bg", div);
      if(newDept) {
        var oriHerder = $(div).find('.ax-page-header').html();
        var newHeader = oriHerder.replace(/(长岭社康中心|罗湖医院集团长岭社康中心|渔村社康中心|undefined)/g, newDept)
        $(div).find('.ax-page-header').html(newHeader)
      }

      for(var i = 0; i < ctrls.length; i++) {
        var ctrl = ctrls[i];
        var json = JSON.parse(ctrl.getAttribute("attrs"));
        var axplugins = ctrl.getAttribute("axplugins");
        if(json.checkDirectCite == "" || ctrl.getAttribute("axplugins") == "macro"){
          if(axplugins == "select" || axplugins == "selectmulti") {
            var ctrlvalue = axTools.getByClass("ctrl-value", ctrl)[0];
            ctrl.setAttribute("selectval", "");
            ctrl.setAttribute("selectvaltext", "");
            ctrlvalue.innerHTML = "";
          }else if(axplugins == "radio" || axplugins == "checkbox") {
            ctrl.setAttribute("selectval", "");
            ctrl.setAttribute("selectvaltext", "");
            var inputs = ctrl.getElementsByTagName("input");
            for(var j = 0; j < inputs.length; j++) {
              inputs[j].removeAttribute("checked");
            }
          }else if(axplugins == "paragraphele") {
            var contents = axTools.getByClass("paragraphContent", ctrl);
            for(var j = 0 ; j < contents.length; j++) {
              contents[j].innerHTML = ""
            }
          }else if(axplugins == "diagnose"){
            var contents = axTools.getByClass("ctrl-value", ctrl)[0];
            ctrl.removeAttribute("diaginfo");
            contents.innerHTML = json.name;
          }else if(axplugins == "prescription"){
            var contents = axTools.getByClass("ctrl-value", ctrl)[0];
            contents.innerHTML = "处方内容";
          }else{
            var contents = axTools.getByClass("ctrl-value", ctrl)[0];
            contents.innerHTML = "";
          }
        }
      }
      return div.innerHTML;
    },
    notNeedUndo: 1
  };
};

/**
 * 加载xml
 * @command saveas
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'saveas');
 * ```
 */
AX.plugins["saveas"] = function() {
  var me = this,
    thePlugins = "saveas";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      // alert('另存成功！');
    }
  };
};

/**
 * 加载xml
 * @command open
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'open');
 * ```
 */
AX.plugins["openxml1"] = function() {
  var me = this,
    thePlugins = "openxml1";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      var fileInput = document.createElement("input");
      fileInput.setAttribute("type", "file");
      fileInput.onchange = function(e) {
        var targetObj = e.target;
        if (targetObj.files && targetObj.files.length) {
          var file = targetObj.files[0];
          if (axTools.suffix(file.name.toLowerCase(), "xml")) {
            var fr = new FileReader();
            fr.readAsText(file);
            fr.onload = function(e) {
              var result = e.target.result.toString(),
                xmlDoc = axTools.createXMLObj(result);
              var eles = xmlDoc.getElementsByTagName("elements")[0],
                eleNodes = eles.childNodes,
                htmlStr = "";

              reverseToHtml(eleNodes);

              /**
               * 将xml节点转化为html节点
               * @param {Node} eleNodes  xml节点集合
               */
              function reverseToHtml(eleNodes) {
                for (var i = 0; i < eleNodes.length; i++) {
                  var ele = eleNodes[i];
                  if (ele.nodeType == 1) {
                    if (ele.tagName == "element") {
                      var htmlTag = ele.getAttribute("type").toLowerCase(),
                        styleStr =
                          ele.getElementsByTagName("style").length > 0
                            ? ele.getElementsByTagName("style")[0].innerHTML
                            : "";
                      (ctrlType = ele.getAttribute("axplugins")), (text = "");
                      for (var j = 0; j < ele.childNodes.length; j++) {
                        if (
                          ele.childNodes[j].tagName == "text" &&
                          ele.childNodes[j].nodeType == 1
                        ) {
                          text = ele.childNodes[j].innerHTML;
                          text =
                            axTools.nullToBlank(text) == ""
                              ? ""
                              : text.replace(/&amp;/g, "&");
                        }
                      }
                      if (!!ctrlType && ctrlType != "note") {
                        htmlStr += xmlToCtrl(ele, text, styleStr);
                      } else if (htmlTag == "plaintext") {
                        htmlStr += text;
                      } else {
                        htmlStr += "<" + htmlTag; //+((!!styleStr && styleStr!='null')?(' style="'+styleStr+'"'):'')
                        htmlStr += " " + axTools.getNodeAttrs(ele);
                        htmlStr += ">" + text;
                        if (ele.childNodes.length > 0) {
                          reverseToHtml(ele.childNodes);
                        }
                        if (htmlTag != "br") {
                          htmlStr += "</" + htmlTag + ">";
                        }
                      }
                    }
                  }
                }
              }

              /**
               * 将xml节点转换为控件html
               * @param {Node} ele xml节点
               * @param {String} text 节点文本
               * @param {String} styleStr 节点行内样式
               * @returns {String} ctrlStr 控件html
               */
              function xmlToCtrl(ele, text) {
                var ctrlStr = "",
                  type = ele.getAttribute("axplugins"),
                  attrs = JSON.parse(ele.getAttribute("attrs")),
                  tagAttrStr = axTools.getNodeAttrs(ele);
                ctrlStr = "<span" + tagAttrStr + ">";
                switch (type) {
                  case "text":
                  case "tagelement":
                  case "numberelement":
                  case "selectmulti":
                  case "select":
                    ctrlStr +=
                      '<span title="' +
                      attrs.tipText +
                      '" secret-value="' +
                      !!attrs.isSecret +
                      '" class="ctrl-value" contenteditable="true">' +
                      text +
                      "</span>";
                    break;
                  case "radio":
                  case "checkbox":
                    var options = JSON.parse(attrs.options),
                      selectedVal = ele.getAttribute("selectedVal")
                        ? ele.getAttribute("selectedVal").split(",")
                        : [];
                    ctrlStr +=
                      '<span title="' +
                      attrs.tipText +
                      '" secret-value="' +
                      !!attrs.isSecret +
                      '" class="ctrl-value" contenteditable="true">';
                    for (var i = 0; i < options.length; i++) {
                      ctrlStr +=
                        '<input name="checkField"' +
                        (selectedVal.indexOf(options[i].key) > -1
                          ? " checked"
                          : "") +
                        ' value="' +
                        options[i].key +
                        '" type="' +
                        type +
                        '">' +
                        options[i].value +
                        "&nbsp;";
                    }
                    ctrlStr += "</span>";
                  case "datedomain":
                    ctrlStr += text;
                    break;
                }
                ctrlStr += "</span>";
                return ctrlStr;
              }

              me.document.body.innerHTML = htmlStr;

              alert(me.getLang("ax.openSuccess"));
            };
          } else {
            alert(me.getLang("ax.errorFileContent"));
          }
        }
      };
      fileInput.click();
    }
  };
};

/**
 * 提交病历
 * @command submit
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'submit');
 * ```
 */
AX.plugins["submit"] = function() {
  var me = this,
    thePlugins = "submit";
  me.commands[thePlugins] = {
    execCommand: function() {
      if (typeof this.options.submitMethod == "function") {
        if (!axTools.beforeSaveCheck(me, true)) {
          return false;
        }
        // 清除 文书警告
        var warnings = axTools.getByClass("warning", me.document);
        for(var i = 0; i < warnings.length; i++) {
          axTools.removeClass(warnings[i], "warning");
        }
        // 敏感词校验
        me.execCommand("sensitivewarning");
        me.execCommand("sensitive");
        this.options.submitMethod();
      } else {
        alert(me.getLang("ax.noSubmitMethod"));
      }
    }
  };
};

/**
 * 撤回病历
 * @command recall
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'recall');
 * ```
 */
AX.plugins["recall"] = function() {
  var me = this,
    thePlugins = "recall";
  me.commands[thePlugins] = {
    execCommand: function() {
      if (typeof this.options.recallMethod == "function") {
        this.options.recallMethod();
      } else {
        alert(me.getLang("ax.noRecallMethod"));
      }
    },
    notNeedUndo: 1
  };
};

/**
 * 记录初始值
 * @command recordinitcontent
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'recordinitcontent');
 * ```
 */
AX.plugins["recordinitcontent"] = function() {
  var me = this,
    thePlugins = "recordinitcontent";
  me.commands[thePlugins] = {
    execCommand: function() {
      axTools.filterExtraCls(["paragraph-border", "focusCtrl", "focusBox"], me);
      me.initContent = me.getContent();
    }
  };
};

/**
 * 是否修改过
 * @command ismodified
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'ismodified');
 * ```
 */
AX.plugins["ismodified"] = function() {
  var me = this,
    thePlugins = "ismodified";
  me.commands[thePlugins] = {
    execCommand: function() {
      axTools.filterExtraCls(["paragraph-border", "focusCtrl", "focusBox"], me);
      var con = me.getContent();
      if (con.indexOf("\u200B") != -1) {
        con = con.replace(/\u200B/g, "");
      }
      con = con.replace(/false/g, "");
      con = con.replace(/true/g, "");
      me.initContent = me.initContent.replace(/false/g, "");
      me.initContent = me.initContent.replace(/true/g, "");
      // console.log(con)
      // var num = 0;
      // var str = '';
      // var str1 = '';
      // for(var i = 0; i < con.length; i++) {
      //   if(con[i] != me.initContent[i]){
      //     str += con[i];
      //     str1 += me.initContent[i];
      //     num++;
      //     if(num > 30) {
      //       console.log(str)
      //       console.log(str1)
      //       break;
      //     }
      //   }
      // }
      // console.log(con)
      // console.log(me.initContent)
      console.log(con != me.initContent);
      return con != me.initContent;
    }
  };
};

/**
 * 保存留痕记录
 * @command getmarkinfo
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'getmarkinfo');
 * ```
 */
AX.plugins["getmarkinfo"] = function() {
  var me = this,
    thePlugins = "getmarkinfo";
  me.commands[thePlugins] = {
    execCommand: function() {
      var markArr = [];
      if (me.options.editorModel == "mark") {
        var markedCtrls = axTools.getByClass("markedCtrl", me.document);
        for (var i = 0; i < markedCtrls.length; i++) {
          var markInfo = {
              id: markedCtrls[i].getAttribute("id"),
              html: markedCtrls[i].outerHTML,
              text: markedCtrls[i].innerText,
              plainText: me.getNodePlainTxt(markedCtrls[i]),
              user: markedCtrls[i].getAttribute("user"),
              time: markedCtrls[i].getAttribute("time")
            },
            optType = "", //1--增，2--删，3--增+删
            modifyFlag = false,
            delFlag = false,
            ctrlType = markedCtrls[i].getAttribute("axPlugins");
          if (ctrlType == "paragraphele") {
            if (
              axTools.getByClass("editor-new-add-text", markedCtrls[i]).length >
              0
            ) {
              optType = 1;
              modifyFlag = true;
            }
            if (
              axTools.getByClass("editor-mark-del-text", markedCtrls[i])
                .length > 0
            ) {
              optType = 2;
              delFlag = true;
            }
          } else {
            if (
              axTools.hasClass(
                markedCtrls[i].previousElementSibling,
                "editor-mark-modify-text"
              )
            ) {
              optType = 1;
              modifyFlag = true;
            }
            if (
              axTools.getByClass(
                "editor-mark-del-text",
                markedCtrls[i].previousElementSibling
              ).length > 0
            ) {
              optType = 2;
              delFlag = true;
            }
          }
          if (modifyFlag && delFlag) {
            optType = 3;
          }
          markInfo.optType = optType;
          markArr.push(markInfo);
        }
      }
      return markArr;
    }
  };
};

/**
 * 展示留痕标记
 * @command showmarkinfo
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'showmarkinfo');
 * ```
 */
AX.plugins["showmarkinfo"] = function() {
  var me = this,
    thePlugins = "showmarkinfo";
  me.commands[thePlugins] = {
    execCommand: function(type, params) {
      if (me.options.editorModel == "mark") {
        var markInfo = params.markInfo;
        for (var key in markInfo) {
          var targetCtrl = me.document.getElementById(key);
          if (targetCtrl) {
            var titleStr = "",
              markArr = markInfo[key];
            for (var i = 0; i < markArr.length; i++) {
              titleStr +=
                (i != 0 ? "\n" : "") +
                markArr[i].modifyUser +
                " " +
                markArr[i].updateTime +
                " " +
                markArr[i].optType;
            }
            targetCtrl.setAttribute("title", titleStr);
            var targetCtrlVal = axTools.getByClass("ctrl-value", targetCtrl);
            if (targetCtrlVal.length > 0) {
              targetCtrlVal = targetCtrlVal[0];
              targetCtrlVal.setAttribute("title", titleStr);
            }
          }
        }
      }
    }
  };
};

/**
 * 复位留痕标记
 * @command resetmarkflag
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'resetmarkflag');
 * ```
 */
AX.plugins["resetmarkflag"] = function() {
  var me = this,
    thePlugins = "resetmarkflag";
  me.commands[thePlugins] = {
    execCommand: function() {
      if (me.options.editorModel == "mark") {
        var ctrls = axTools.getByClass("ctrl-bg", me.document);
        for (var i = 0; i < ctrls.length; i++) {
          if (axTools.hasClass(ctrls[i], "markedCtrl")) {
            axTools.removeClass(ctrls[i], "markedCtrl");
          }
        }
      }
    }
  };
};

/**
 * 留痕模式下保存，需将title还原回原值，否则其他模式也能看到title
 * @command resetmarktitle
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'resetmarktitle');
 * ```
 */
AX.plugins["resetmarktitle"] = function() {
  var me = this,
    thePlugins = "resetmarktitle";
  me.commands[thePlugins] = {
    execCommand: function() {
      var ctrls = axTools.getByClass("ctrl-bg", me.document);
      for (var i = 0; i < ctrls.length; i++) {
        var attrs = JSON.parse(ctrls[i].getAttribute("attrs")),
          name = attrs.name;
        name = name == "" || name == undefined ? "" : name;
        ctrls[i].setAttribute("title", name);
        var ctrlVal = axTools.getByClass("ctrl-value", ctrls[i]);
        if (ctrlVal.length > 0) {
          ctrlVal = ctrlVal[0];
          ctrlVal.setAttribute("title", name);
        }
      }
    }
  };
};

/**
 * 保存pdf
 * @command savepdf
 */
AX.plugins["savepdf"] = function() {
  var me = this,
    thePlugins = "savepdf";
  me.commands[thePlugins] = {
    execCommand: function() {
      var htmlNode = document.getElementById("ueditor_0");
      var elem = htmlNode.contentDocument.getElementsByTagName("html")[0];
      var scale = 1 || me.queryCommandValue("paperscale");
      var copyContent = $(elem).clone(true);
      copyContent[0].style.transform = "scale(1)";
      var wrapper = document.createElement("div");
      wrapper.style.width = elem.offsetWidth + "px";
      wrapper.style.height = elem.scrollHeight / scale + "px";
      wrapper.className = "invisible-wrapper";
      wrapper.id = "invisibleWrapper";
      wrapper.appendChild(copyContent[0]);
      document.getElementsByTagName("body")[0].append(wrapper);
      var copyElem = document.getElementById("invisibleWrapper").children[0]
        .children[1];

      var papersize = me.queryCommandValue("papersize"),
        paperWidth = axTools.cm2px(papersize[0]) || 595.28,
        paperHeight = axTools.cm2px(papersize[1]) || 841.89;
      html2canvas(copyElem, {
        allowTaint: false,
        useCORS: true,
        width: copyElem.scrollWidth,
        height: copyElem.scrollHeight
      })
        .then(function(canvas) {
          wrapper.parentElement.removeChild(wrapper);
          var contentWidth = canvas.width;
          var contentHeight = canvas.height;

          //一页pdf显示html页面生成的canvas高度;
          var pageHeight = (contentWidth / paperWidth) * paperHeight;
          //未生成pdf的html页面高度
          var leftHeight = contentHeight;
          //pdf页面偏移
          var position = 0;
          //a4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高
          var imgWidth = paperWidth;
          var imgHeight = (paperWidth / contentWidth) * contentHeight;

          var pageData = canvas.toDataURL("image/jpeg", 1.0);

          var pdf = new jsPDF("", "pt", [paperWidth, paperHeight]);
          //有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(paperHeight)
          //当内容未超过pdf一页显示的范围，无需分页
          if (leftHeight < pageHeight) {
            pdf.addImage(pageData, "JPEG", 20, 0, imgWidth, imgHeight);
          } else {
            while (leftHeight > 0) {
              pdf.addImage(pageData, "JPEG", 20, position, imgWidth, imgHeight);
              leftHeight -= pageHeight;
              position -= paperHeight;
              //避免添加空白页
              if (leftHeight > 0) {
                pdf.addPage();
              }
            }
          }
          // 保存文件
          pdf.save("test.pdf");

          // 上传文件
          // var formData = new FormData();
          // formData.append("file", pdf.output("blob"));
          // alert(me.getLang("insertimage.uploadStart"));
          // $.ajax({
          //   url: me.options.fileUrl + "/ueditor/uploadFile",
          //   type: "post",
          //   data: formData,
          //   cache: false,
          //   contentType: false,
          //   processData: false,
          //   success: function(res) {
          //     if (me.options.savePdf) {
          //       me.options.savePdf(null, res);
          //     } else {
          //       if (res.data.code == 1) {
          //         alert(me.getLang("insertimage.updateSuccess"));
          //       } else {
          //         alert(me.getLang("insertimage.errorUploadRetry"));
          //       }
          //     }
          //   },
          //   error: function(error) {
          //     if (me.options.savePdf) {
          //       me.options.savePdf(error);
          //     } else {
          //       alert(me.getLang("insertimage.errorUploadRetry"));
          //     }
          //   }
          // });
        })
        .catch(function(error) {
          console.log(error);
        });
    }
  };
};

/**
 * 根据提供的属性值返回 元素内容
 * {@list} [
 *     {
 *      keys: "class",
 *      value: "ctrl-value"
 *      }
 * ]
 */

AX.plugins["getparagraphelecontent"] = function (){
  var me = this,
    thePlugins = "getparagraphelecontent";
  me.commands[thePlugins] = {
    execCommand: function (type, list, notNeedTitle) {
      var data = list || [];
      var contents = []; // 符合条件的dom
      var result = []; // 返回的结果
      var doc = $(me.document.body).clone()[0];
      if (data.length > 0) {
        for(var i = 0; i < data.length; i++) {
          var paragrapheles = axTools.getByTagAttr("div", data[i].keys, data[i].value, doc);
          contents = contents.concat(paragrapheles);
        }
      }else {
        contents = axTools.getByTagAttr("div", "axplugins", "paragraphele", doc)
      }
      for(var j = 0; j < contents.length; j++) {
        var json = JSON.parse(contents[j].getAttribute("attrs"));
        var axplugins = contents[j].getAttribute("axplugins");
        var obj = {};
        if(notNeedTitle) {
          var title = axTools.getByTagAttr("strong", "class", "ctrl-value", contents[j])[0];
          title && title.parentElement.removeChild(title);
        }
        obj = {
          name: json.name,
          content: $(contents[j]).text()
        }
        result.push(obj);
      }
      return result;
    }
  }
}

/**
 * 预览模板 获取所选内容
 */
AX.plugins["getselectcontent"] = function () {
  var me = this,
    thePlugins = "getselectcontent";
  me.commands[thePlugins] = {
    execCommand: function (type, data) {
      if (data) {
        var dom = axTools.getByTagAttr(
          "div",
          "paragraphtype",
          data,
          me.document
        );
        return dom;
      } else {
        console.log(me.window.getSelection())
        var rang = me.window.getSelection ? me.window.getSelection() : me.document.selection.createRange().text;
        console.log(rang)
        return rang.toString();
      }
    }
  };
};



var getCtrllValueByTitle = function ($wrapperDom, title, index) {
  index = index || 0;
  var $ctrl = $wrapperDom.find('span[title="' + title + '"].ctrl-value');
  return $ctrl.length ? $ctrl.eq(index).text() : '';
}

var getParagraphContentByType = function (me, type) {
  var $ctrl = $(me.document).find('[paragraphtype="' + type + '"]').clone();
  if (!$ctrl.length) {
    return ''
  }
  var $strongDom = $ctrl.find('strong.ctrl-value');
  $strongDom.remove();
  return $ctrl.find('.paragraphContent').html().replace(/<br>/g, '\n');
}

var setCtrllValueByTitle = function ($wrapperDom, title, value, index) {
  index = index || 0;
  var $ctrl = $wrapperDom.find('[title="' + title + '"].ctrl-value');
  $ctrl.eq(index).text(value)
}

var setParagraphContentByType = function (me, type, content) {
  var $ctrl = $(me.document).find('[paragraphtype="' + type + '"]');
  var $strongDom = $ctrl.find('strong.ctrl-value');
  var html = $strongDom.prop('outerHTML') ? $strongDom.prop('outerHTML') + content.replace(/\n/g, '<br>') : content.replace(/\n/g, '<br>');
  $ctrl.find('.paragraphContent').html(html)
}

// 获取高血压随访记录文书信息
AX.plugins['gethypertensionfollowupemrinfo'] = function () {
  var me = this,
    thePlugins = 'gethypertensionfollowupemrinfo';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      // 【新发疾病情况】
      var getNewlyIllnessCondition = function () {
        var $wrapperDom = $(me.document).find('[title="新发疾病情况"]');
        var list = [];
        var isHased = $(me.document).find('span[title="无"].ctrl-value input[type="radio"]').prop('checked');
        if (isHased) {
          list.push('0');
        };
        var map = {
          '1': {
            title: '住院治疗心绞痛',
            field: 'hospitalization_for_angina_date'
          },
          '2': {
            title:'新发脑卒中未分类',
            field: 'stroke_date',
          },
          '3': {
            title:'新发心肌梗死',
            field: 'mi_date',
          },
          '4': {
            title:'糖尿病',
            field: 'diabetes_date',
          },
          '5': {
            title:'住院治疗 心力衰竭',
            field: 'hospitalization_for_heart_failure_date',
          },
          '6': {
            title:'慢性肾脏疾病',
            field: 'crf_date',
          },
          '7': {
            title:'新发缺血性脑卒中',
            field: 'cerebral_arterial_thrombosis_date',
          },
          '8': {
            title:'外周血管病',
            field: 'peripheral_vascular_diseases_date',
          },
          '9': {
            title:'新发出血性脑卒中',
            field: 'hemorrhagic_apoplexy_date',
          }
        };
        var newlyIllnessField = {};
        for(var key in map) {
          var title = map[key].title;
          var field = map[key].field;
          var $ctrl = $(me.document).find('span.ctrl-value[title="' + title + '"]');
          var isChecked = $ctrl.find('input[type="checkbox"]').prop('checked');
          var $dateCtrl = $ctrl.parent('.ctrl-bg').next().find('.ctrl-value');
          newlyIllnessField[field] = '';
          if (isChecked) {
            list.push(key)
            newlyIllnessField[field] = $dateCtrl.text();
          }
        }
        newlyIllnessField.newly_illness_condition = list.join(',');
        newlyIllnessField.other_illness = getCtrllValueByTitle($wrapperDom, '其他疾病情况及发生日期');
        return newlyIllnessField
      }

      // 【个人史】
      var getPersonHistory = function () {
        var $wrapperDom = $(me.document).find('[title="个人史"]');
        var smokeMap = {
          '几乎每天或大多数天吸烟': 0,
          '偶尔吸烟': 1,
          '已戒烟': 2,
          '从不吸烟': 3,
        };
        var saltMap = {
          '轻': 0,
          '中': 1,
          '重': 2,
        }
        var recentSevenMap = {
          '是': 1,
          '否': 0
        }

        var smokeConditionText = $wrapperDom.find('[title="吸烟史"].ctrl-bg input[type="radio"]:checked').attr('valuestr');
        var recentSevenText = $wrapperDom.find('[title="是否"].ctrl-bg input[type="radio"]:checked').attr('valuestr');
        var saltIntakeText = $wrapperDom.find('[title="摄盐情况"].ctrl-bg input[type="radio"]:checked').attr('valuestr');

        var result = {
          // 吸烟情况
          smoke_condition: smokeMap.hasOwnProperty(smokeConditionText) ? smokeMap[smokeConditionText] : null,
          // 最近7天是否吸烟
          recent7_smoke_flag: recentSevenMap.hasOwnProperty(recentSevenText) ? recentSevenMap[recentSevenText] : null,
          // 个人史其它
          person_history_other: getCtrllValueByTitle($wrapperDom, '其他'),
          // 日饮酒量
          drink_qty: getCtrllValueByTitle($wrapperDom, '数量'),
          // 运动次数
          exercise_num: getCtrllValueByTitle($wrapperDom, '运动量'),
          // 运动时间
          exercise_time: getCtrllValueByTitle($wrapperDom, '时间'),
          // 摄盐情况
          salt_intake: saltMap.hasOwnProperty(saltIntakeText) ? saltMap[saltIntakeText] : null
        }
        return result
      }

      // 【体格检查】
      var getHealthInfo = function () {
        var $wrapperDom = $(me.document).find('[title="体格检查"]');
        var result = {
          // 体温
          temperature: getCtrllValueByTitle($wrapperDom, 'T'),
          // 脉搏
          pulse: getCtrllValueByTitle($wrapperDom, 'P'),
          // 呼吸
          breathe: getCtrllValueByTitle($wrapperDom, 'R') || getCtrllValueByTitle($wrapperDom, '正常值域范围是10~30') || getCtrllValueByTitle($wrapperDom, '必填项！'),
          // 身高
          height: getCtrllValueByTitle($wrapperDom, '身高') || getCtrllValueByTitle($wrapperDom, '身高(cm)'),
          // 体重
          weight: getCtrllValueByTitle($wrapperDom, '体重') || getCtrllValueByTitle($wrapperDom, '体重(kg）'),
          // BMI值
          bmi: getCtrllValueByTitle($wrapperDom, 'BMI'),
          // 腰围
          waistline: getCtrllValueByTitle($wrapperDom, '腰围'),
          // 第一次收缩压
          sbp_first: getCtrllValueByTitle($wrapperDom, '第一次收缩压'),
          // 第一次舒张压
          dbp_first: getCtrllValueByTitle($wrapperDom, '第一次舒张压'),
          // 第一次心率
          heart_rate: getCtrllValueByTitle($wrapperDom, '心率'),
          // 第二次收缩压
          sbp_second: getCtrllValueByTitle($wrapperDom, '第二次收缩压'),
          // 第二次舒张压
          doc_second: getCtrllValueByTitle($wrapperDom, '第二次舒张压'),
          // 第二次心率
          heart_rate_second: getCtrllValueByTitle($wrapperDom, '心率', 1)
        }
        return result;
      }

      // 【辅助检查】
      var getFuzhu = function () {
        var $wrapperDom = $(me.document).find('[title="辅助检查"]');
        var result = {
          // 空腹血糖
          glu: getCtrllValueByTitle($wrapperDom, '空腹血糖'),
          // 生化-肌酐
          creatinine: getCtrllValueByTitle($wrapperDom, '肌酐'),
          // 生化-血钾
          hyperkalemia: getCtrllValueByTitle($wrapperDom, '血钾')
        }
        return result
      }


      // 【诊断】
      var getZhenduan = function () {
        var $wrapperDom = $(me.document).find('[title="初步诊断"]');
        var $domTr = $wrapperDom.find('span.tr');
        var diagnoseArr = [];
        if ($domTr.length) {
          for(var i = 0; i < $domTr.length; i++) {
            if ($domTr.eq(i).text() !== '暂无诊断信息') {
              diagnoseArr.push($domTr.eq(i).text());
            }
          }
        }
        var result = {
          diagnose: diagnoseArr.join(','),
        }
        return result;
      }

      // 【处方】
      var getChufang = function () {
        var $wrapperDom = $(me.document).find('[title="处方"]');
        // var $pDoms = $wrapperDom.find('span.ctrl-value p');
        // var chuFangArr = [];
        // if ($pDoms.length) {
        //   for(var i = 0; i < $pDoms.length; i++) {
        //     var str = $pDoms.eq(i).text().replace(/^\d、/, '');
        //     chuFangArr.push(str);
        //   }
        // }
        // var prescription = $wrapperDom.find('span.ctrl-value').text()
        return {
          // prescription: chuFangArr.join(',')
          prescription: $wrapperDom.find('span.ctrl-value').text()
        }
      }

      // 【转诊】
      var getZhuanzhen = function () {
        var $wrapperDom = $(me.document).find('[title="转诊"]');
        var map = {
          '是': 1,
          '否': 0
        };
        var trans_org = '';
        var trans_org_remark = '';
        var flagText = $wrapperDom.find('input[type="radio"]:checked').attr('valuestr');
        if(flagText === '是') {
          var $checkboxDoms = $wrapperDom.find('input[type="checkbox"]:checked');
          trans_org = getCtrllValueByTitle($wrapperDom, '转诊医疗机构及科室类别：');
          for(var i = 0; i < $checkboxDoms.length; i++) {
            trans_org_remark += ';' + $checkboxDoms.eq(i).attr('valuestr')
          }
          trans_org_remark = trans_org_remark.substring(1);
        }
        return {
          referral_hospital_flag: map.hasOwnProperty(flagText) ? map[flagText] : null,
          trans_org_remark: trans_org_remark,
          trans_org: trans_org
        }
      }

      var result = {
        self_reported_symptom: getParagraphContentByType(me, 'PT_zs'), // 主诉
        history_of_present_illness: getParagraphContentByType(me, 'PT_xbs'), // 现病史
        past_medical_history: getParagraphContentByType(me, 'PT_jws'), // 既往史
        lastFollowupDate: getCtrllValueByTitle($(me.document), '上次随访时间'), // 上次随访日期
        // 目前用药
        drug: getParagraphContentByType(me, 'PT_2020103000001'),
        // 管理计划
        manage_plan: getParagraphContentByType(me, 'PT_gljh'),
        // 健康教育
        health_education: getParagraphContentByType(me, 'PT_jkjy'),
        // 本次随访医生
        followup_doctor: getCtrllValueByTitle($(me.document), '随访医生'),
        // 下次随访日期
        next_followup_date: getCtrllValueByTitle($(me.document), '下次随访时间'),
        // 签名医生
        signature_doctor: getCtrllValueByTitle($(me.document), '医师签名'),
        // 签名日期
        signature_date: getCtrllValueByTitle($(me.document), '签名时间'),
        // 随访日期
        followup_date: getCtrllValueByTitle($(me.document), '就诊时间'),
        // 就诊号
        en_id: getCtrllValueByTitle($(me.document), '就诊号')
      }

      $.extend(result, getNewlyIllnessCondition(), getPersonHistory(), getHealthInfo(), getFuzhu(), getZhenduan(), getChufang(), getZhuanzhen());
      return result;
    }
  };
};

// 获取普通门诊病历文书信息
AX.plugins['getoridinaryemrinfo'] = function () {
  var me = this,
    thePlugins = 'getoridinaryemrinfo';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      // 【体格检查】
      var getHealthInfo = function () {
        var $wrapperDom = $(me.document).find('[title="体格检查"]');
        var result = {
          // 体温
          temperature: getCtrllValueByTitle($wrapperDom, 'T')
                       || getCtrllValueByTitle($wrapperDom, '正常值域范围是32~43')
                       || getCtrllValueByTitle($wrapperDom, '体温')
                       || getCtrllValueByTitle($wrapperDom, '体温(℃)'),
          // 脉搏
          pulse: getCtrllValueByTitle($wrapperDom, 'P')
                 || getCtrllValueByTitle($wrapperDom, '正常值域范围是40~120')
                 || getCtrllValueByTitle($wrapperDom, '脉搏'),
          // 呼吸
          breathe: getCtrllValueByTitle($wrapperDom, 'R')
                   || getCtrllValueByTitle($wrapperDom, '正常值域范围是10~30')
                   || getCtrllValueByTitle($wrapperDom, '呼吸'),
          // 身高
          height: getCtrllValueByTitle($wrapperDom, '身高') || getCtrllValueByTitle($wrapperDom, '身高(cm)'),
          // 体重
          weight: getCtrllValueByTitle($wrapperDom, '体重') || getCtrllValueByTitle($wrapperDom, '体重(kg）'),
          // BMI值
          bmi: getCtrllValueByTitle($wrapperDom, 'BMI'),
          // 收缩压
          sbp: getCtrllValueByTitle($wrapperDom, '收缩压(mmHg）')
               || getCtrllValueByTitle($wrapperDom, '正常值域范围是60~200')
               || getCtrllValueByTitle($wrapperDom, '收缩压'),
          // 舒张压
          dbp: getCtrllValueByTitle($wrapperDom, '舒张压(mmHg)')
               || getCtrllValueByTitle($wrapperDom, '正常值域范围是40~120')
               || getCtrllValueByTitle($wrapperDom, '舒张压'),
          // 末次月经
          last_menstruation: getCtrllValueByTitle($wrapperDom, '末次月经：') || getCtrllValueByTitle($wrapperDom, '必填项！'),
          // 体格检查内容
          healthContent: getParagraphContentByType(me, 'PT_tgjcnr') || getParagraphContentByType(me, 'PT_2104030001')
        }
        return result;
      }

      // 【辅助检查】
      var getFuzhu = function () {
        var $wrapperDom = $(me.document).find('[title="辅助检查"]');
        var result = {
          // 空腹血糖
          glu: getCtrllValueByTitle($wrapperDom, '空腹血糖'),
        }
        return result
      }
      var result = {
        self_reported_symptom: getParagraphContentByType(me, 'PT_zs'), // 主诉
        history_of_present_illness: getParagraphContentByType(me, 'PT_xbs'), // 现病史
        past_medical_history: getParagraphContentByType(me, 'PT_jws'), // 既往史
        // 管理计划
        manage_plan: getParagraphContentByType(me, 'PT_gljh'),
        // 健康教育
        health_education: getParagraphContentByType(me, 'PT_jkjy'),
        // 本次随访医生
        followup_doctor: getCtrllValueByTitle($(me.document), '本次随访医生'),
        // 签名医生
        signature_doctor: getCtrllValueByTitle($(me.document), '医师签名'),
        // 签名日期
        signature_date: getCtrllValueByTitle($(me.document), '签名时间')
      }

      $.extend(result, getHealthInfo(), getFuzhu());
      return result;
    }
  };
};

// 由普通门诊病历拿到的内容给到高血压随访病历
AX.plugins['sethighbloodinfobyoridinary'] = function () {
  var me = this,
    thePlugins = 'sethighbloodinfobyoridinary';
  me.commands[thePlugins] = {
    execCommand: function (type, emrInfo) {
      // 主诉
      setParagraphContentByType(me, 'PT_zs', emrInfo.self_reported_symptom);
      // 现病史
      setParagraphContentByType(me, 'PT_xbs', emrInfo.history_of_present_illness);
      // 既往史
      setParagraphContentByType(me, 'PT_jws', emrInfo.past_medical_history);
      // 管理计划
      setParagraphContentByType(me, 'PT_gljh', emrInfo.manage_plan);
      // 健康教育
      setParagraphContentByType(me, 'PT_jkjy', emrInfo.health_education);
      // 本次随访医生
      setCtrllValueByTitle($(me.document), '随访医生', emrInfo.followup_doctor);
      // 签名医生
      setCtrllValueByTitle($(me.document), '医师签名', emrInfo.signature_doctor);
      // 签名日期
      setCtrllValueByTitle($(me.document), '签名时间', emrInfo.signature_date);
      // 空腹血糖
      setCtrllValueByTitle($(me.document).find('[title="辅助检查"]'), '空腹血糖', emrInfo.glu);


      /* 体格检查 */
      var $healthWrapperDom = $(me.document).find('[title="体格检查"]');
      // 体温
      setCtrllValueByTitle($healthWrapperDom, 'T', emrInfo.temperature);
      // 脉搏
      setCtrllValueByTitle($healthWrapperDom, 'P', emrInfo.pulse);
      // 呼吸
      setCtrllValueByTitle($healthWrapperDom, 'R', emrInfo.breathe);
      setCtrllValueByTitle($healthWrapperDom, '正常值域范围是10~30', emrInfo.breathe);
      setCtrllValueByTitle($healthWrapperDom, '必填项！', emrInfo.breathe);
      // 身高
      setCtrllValueByTitle($healthWrapperDom, '身高', emrInfo.height);
      setCtrllValueByTitle($healthWrapperDom, '身高(cm)', emrInfo.height);
      // 体重
      setCtrllValueByTitle($healthWrapperDom, '体重', emrInfo.weight);
      setCtrllValueByTitle($healthWrapperDom, '体重(kg）', emrInfo.weight);
      // BMI值
      setCtrllValueByTitle($healthWrapperDom, 'BMI', emrInfo.bmi);
      // 第一次收缩压
      setCtrllValueByTitle($healthWrapperDom, '第一次收缩压', emrInfo.sbp);
      // 第一次舒张压
      setCtrllValueByTitle($healthWrapperDom, '第一次舒张压', emrInfo.dbp);
      // 末次月经
      setCtrllValueByTitle($healthWrapperDom, '末次月经：', emrInfo.last_menstruation);
      // 体格检查内容
      setParagraphContentByType(me, 'PT_tgjcnr', emrInfo.healthContent);
    }
  }
}

// 获取主诉内容
AX.plugins['getzscontent'] = function () {
  var me = this,
    thePlugins = 'getzscontent';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $ctrl = $(me.document).find('[paragraphtype="PT_zs"]').clone();
      if (!$ctrl.length) {
        return ''
      }
      var $strongDom = $ctrl.find('strong.ctrl-value');
      $strongDom.remove();
      return $ctrl.find('.paragraphContent').text();
    }
  }
}


// 获取现病史内容
AX.plugins['getxbscontent'] = function () {
  var me = this,
    thePlugins = 'getxbscontent';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $ctrl = $(me.document).find('[paragraphtype="PT_xbs"]').clone();
      if (!$ctrl.length) {
        return ''
      }
      var $strongDom = $ctrl.find('strong.ctrl-value');
      $strongDom.remove();
      return $ctrl.find('.paragraphContent').text();
    }
  }
}

// 获取末次月经
AX.plugins['getmcyj'] = function () {
  var me = this,
    thePlugins = 'getmcyj';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $ctrl = $(me.document).find('span[title*="末次月经"].ctrl-value');
      if(!$ctrl.length) {
        $ctrl = $(me.document).find('span[title="必填项！"].ctrl-value');
      }
      return $ctrl.length ? $ctrl.text() : ''
    }
  }
}

// 获取辅助检查全部文字内容
AX.plugins['getfzjc'] = function () {
  var me = this,
    thePlugins = 'getfzjc';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $ctrl = $(me.document).find('[paragraphtype="PT_fzjc"]').clone();
      var $strongDom = $ctrl.find('strong.ctrl-value');
      $strongDom.remove();
      return $ctrl.find('.paragraphContent').text();
    }
  }
}


// 通过诊前筛查填充文书
AX.plugins['setemrinfobyrecentrecord'] = function () {
  var me = this,
    thePlugins = 'setemrinfobyrecentrecord';
  me.commands[thePlugins] = {
    execCommand: function (type, recentRecordInfo) {
      var setCtrllValueByTitle = function (titleArg, value, index) {
        index = index || 0;
        var $ctrl;
        if (typeof titleArg === 'string') {
          $ctrl = $(me.document).find('span[title="' + titleArg + '"].ctrl-value');
        } else {
          for(var i = 0; i < titleArg.length; i++) {
            var ctrl = $(me.document).find('span[title="' + titleArg[i] + '"].ctrl-value');
            if (ctrl.length) {
              $ctrl = ctrl;
              break;
            }
          }
        }
        if ($ctrl && $ctrl.length && value) {
          $ctrl.eq(index).text(value);

          var thePluginsNodeCombine = AX.dom.domUtils.findParent(
            $ctrl.get(0),
            function (dom) {
              return dom.getAttribute("axplugins") == "combine";
            },
            true
          );
          if (thePluginsNodeCombine == null) {
            thePluginsNodeCombine = me;
          }
          axTools.setCascadeMore(
            $ctrl.eq(index).text(),
            $ctrl.get(0).parentNode,
            me,
            thePluginsNodeCombine
          );
        }
      }
      setCtrllValueByTitle(['体重', '体重(kg）'], recentRecordInfo.weight);
      setCtrllValueByTitle(['身高', '身高(cm)'], recentRecordInfo.height);
      setCtrllValueByTitle('腰围', recentRecordInfo.waistline);
      setCtrllValueByTitle(['T', '正常值域范围是32~43', '体温', '体温(℃)]'], recentRecordInfo.animalHeat);
      setCtrllValueByTitle(['收缩压(mmHg）', '正常值域范围是60~200', '收缩压'], recentRecordInfo.bloodPressureLowLast);
      setCtrllValueByTitle(['舒张压(mmHg)', '正常值域范围是40~120', '舒张压'], recentRecordInfo.bloodPressureHighLast);
      setCtrllValueByTitle('第一次收缩压', recentRecordInfo.bloodPressureLowFirst);
      setCtrllValueByTitle('第一次舒张压', recentRecordInfo.bloodPressureHighFirst);
      setCtrllValueByTitle('心率', recentRecordInfo.heartRateFirst);
      setCtrllValueByTitle('第二次收缩压', recentRecordInfo.bloodPressureLowSecond);
      setCtrllValueByTitle('第二次舒张压', recentRecordInfo.bloodPressureHighSecond);
      setCtrllValueByTitle('心率', recentRecordInfo.heartRateSecond, 1);
    }
  }
}




/**
 *  对外提供获取文书内容接口
 **/
AX.plugins["getcontent"] = function () {
  var me = this,
    thePlugins = "getcontent";
  me.commands[thePlugins] = {
    execCommand: function (type) {
      return this.getContent();
    }
  };
};


/**
 * 查询是否包含血压元素且是否为空
 * 数据元编码：
    体温：DE04.10.186.00
    脉搏：DE04.10.118.00
    呼吸：DE04.10.081.00
    血压：收缩压DE04.10.174.00  舒张压DE04.10.176.00
    身高：DE04.10.167.00
    体重：DE04.10.188.00
    末次月经：DE02.10.051.00
 */

AX.plugins["checknotempty"] = function () {
  var me = this,
    thePlugins = "checknotempty";
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var dataSource = [
        "DE04.10.174.00", // 收缩压
        "DE04.10.176.00" // 舒张压
      ]
      var eles = axTools.getByClass("ctrl-bg", me.document);
      var res = true; // 返回结果
      for(var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var attrs = JSON.parse(ele.getAttribute("attrs"));
        if(attrs.metaData && dataSource.indexOf(JSON.parse(attrs.metaData).code) > -1) { // includes
          // 收缩压
          var value = axTools.getByClass("ctrl-value", ele)[0];
          if(value && value.innerText.replace(/\u200B/g,'') == "") {
            res = false;
            break;
          }
        }
      }
      return res;
    }
  }
}
/* eslint-disable */

/**
 * 配置表达式转成图片的过滤器
 * @command defaultfilter
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'defaultfilter');
 * ```
 */
AX.plugins['defaultfilter'] = function () {
	var me = this;
	me.setOpt({
		'allowDivTransToP': true,
		'disabledTableInTable': true,
		'rgb2Hex': true
	});
	//默认的过滤处理
	//进入编辑器的内容处理
	me.addInputRule(function (root) {
		var allowDivTransToP = this.options.allowDivTransToP;
		var val;

		function tdParent(node) {
			while (node && node.type == 'element') {
				if (node.tagName == 'td') {
					return true;
				}
				node = node.parentNode;
			}
			return false;
		}
		//进行默认的处理
		root.traversal(function (node) {
			if (node.type == 'element') {
				if (!AX.dom.dtd.$cdata[node.tagName] && me.options.autoClearEmptyNode && AX.dom.dtd.$inline[node.tagName] && !AX.dom.dtd.$empty[node.tagName] && (!node.attrs || AX.utils.isEmptyObject(node.attrs))) {
					if (!node.firstChild()) node.parentNode.removeChild(node);
					else if (node.tagName == 'span' && (!node.attrs || AX.utils.isEmptyObject(node.attrs))) {
						node.parentNode.removeChild(node, true)
					}
					return;
				}
				switch (node.tagName) {
					case 'style':
					case 'script':
						node.setAttr({
							cdata_tag: node.tagName,
							cdata_data: (node.innerHTML() || ''),
							'_ue_custom_node_': 'true'
						});
						node.tagName = 'div';
						node.innerHTML('');
						break;
					case 'a':
						if (val = node.getAttr('href')) {
							node.setAttr('_href', val)
						}
						break;
					case 'img':
						node.setAttr('_src', node.getAttr('src'));
						break;
					case 'span':
						if (AX.browser.webkit && (val = node.getStyle('white-space'))) {
							if (/nowrap|normal/.test(val)) {
								node.setStyle('white-space', '');
								if (me.options.autoClearEmptyNode && AX.utils.isEmptyObject(node.attrs)) {
									node.parentNode.removeChild(node, true)
								}
							}
						}
						val = node.getAttr('id');
						if (val && /^_baidu_bookmark_/i.test(val)) {
							node.parentNode.removeChild(node)
						}
						break;
					case 'p':
						if (val = node.getAttr('align')) {
							node.setAttr('align');
							node.setStyle('text-align', val)
						}
						//p标签不允许嵌套
						AX.utils.each(node.children, function (n) {
							if (n.type == 'element' && n.tagName == 'p') {
								var next = n.nextSibling();
								node.parentNode.insertAfter(n, node);
								var last = n;
								while (next) {
									var tmp = next.nextSibling();
									node.parentNode.insertAfter(next, last);
									last = next;
									next = tmp;
								}
								return false;
							}
						});
						if (!node.firstChild()) {
							node.innerHTML(AX.browser.ie ? '&nbsp;' : '<br/>')
						}
						break;
					case 'div':
						if (node.getAttr('cdata_tag')) {
							break;
						}
						//针对代码这里不处理插入代码的div
						val = node.getAttr('class');
						if (val && /^line number\d+/.test(val)) {
							break;
						}
						if (!allowDivTransToP) {
							break;
						}
						var tmpNode, p = AX.uNode.createElement('p');
						while (tmpNode = node.firstChild()) {
							if (tmpNode.type == 'text' || !AX.dom.AX.dom.dtd.$block[tmpNode.tagName]) {
								p.appendChild(tmpNode);
							} else {
								if (p.firstChild()) {
									node.parentNode.insertBefore(p, node);
									p = AX.uNode.createElement('p');
								} else {
									node.parentNode.insertBefore(tmpNode, node);
								}
							}
						}
						if (p.firstChild()) {
							node.parentNode.insertBefore(p, node);
						}
						node.parentNode.removeChild(node);
						break;
					case 'dl':
						node.tagName = 'ul';
						break;
					case 'dt':
					case 'dd':
						node.tagName = 'li';
						break;
					case 'li':
						var className = node.getAttr('class');
						if (!className || !/list\-/.test(className)) {
							node.setAttr()
						}
						var tmpNodes = node.getNodesByTagName('ol ul');
						AX.utils.each(tmpNodes, function (n) {
							node.parentNode.insertAfter(n, node);
						});
						break;
					case 'td':
					case 'th':
					case 'caption':
						if (!node.children || !node.children.length) {
							node.appendChild(AX.browser.ie11below ? AX.uNode.createText(' ') : AX.uNode.createElement('br'))
						}
						break;
					case 'table':
						if (me.options.disabledTableInTable && tdParent(node)) {
							node.parentNode.insertBefore(AX.uNode.createText(node.innerText()), node);
							node.parentNode.removeChild(node)
						}
				}

			}
		})

	});
	//从编辑器出去的内容处理
	me.addOutputRule(function (root) {
		var val;
		root.traversal(function (node) {
			if (node.type == 'element') {

				if (me.options.autoClearEmptyNode && AX.dom.dtd.$inline[node.tagName] && !AX.dom.dtd.$empty[node.tagName] && (!node.attrs || AX.utils.isEmptyObject(node.attrs))) {

					if (!node.firstChild()) node.parentNode.removeChild(node);
					else if (node.tagName == 'span' && (!node.attrs || AX.utils.isEmptyObject(node.attrs))) {
						node.parentNode.removeChild(node, true)
					}
					return;
				}
				switch (node.tagName) {
					case 'div':
						if (val = node.getAttr('cdata_tag')) {
							node.tagName = val;
							node.appendChild(AX.uNode.createText(node.getAttr('cdata_data')));
							node.setAttr({
								cdata_tag: '',
								cdata_data: '',
								'_ue_custom_node_': ''
							});
						}
						break;
					case 'a':
						if (val = node.getAttr('_href')) {
							node.setAttr({
								'href': AX.utils.html(val),
								'_href': ''
							})
						}
						break;
						break;
					case 'span':
						val = node.getAttr('id');
						if (val && /^_baidu_bookmark_/i.test(val)) {
							node.parentNode.removeChild(node)
						}
						//将color的rgb格式转换为#16进制格式
						if (me.getOpt('rgb2Hex')) {
							var cssStyle = node.getAttr('style');
							if (cssStyle) {
								node.setAttr('style', cssStyle.replace(/rgba?\(([\d,\s]+)\)/g, function (a, value) {
									var array = value.split(",");
									if (array.length > 3)
										return "";
									value = "#";
									for (var i = 0, color; color = array[i++];) {
										color = parseInt(color.replace(/[^\d]/gi, ''), 10).toString(16);
										value += color.length == 1 ? "0" + color : color;
									}
									return value.toUpperCase();

								}))
							}
						}
						break;
					case 'img':
						if (val = node.getAttr('_src')) {
							node.setAttr({
								'src': node.getAttr('_src'),
								'_src': ''
							})
						}
				}
			}
		})
	});
};
/**
 *  医学计算公式
 */
// 医学计算公式配置list
var formulaList = {
    BMI: {
        name: "计算BMI", // 公式名称
        content: "体质指数(BMI) = 体重(kg)÷身高^2(m)", // 公式描述
        callback: function (me, dom) { // 公式计算逻辑
            var wId = dom.getAttribute("w");
            var hId = dom.getAttribute("h");
            var targetId = dom.getAttribute("bmi");
            // 不包含目标元素时，return
            if (!me.document.getElementById(wId) || !me.document.getElementById(hId)) {
                return;
            }
            var w = axTools.getByClass("ctrl-value", me.document.getElementById(wId))[0].innerText.replace(/\u200B/g, '') * 1;
            var h = axTools.getByClass("ctrl-value", me.document.getElementById(hId))[0].innerText.replace(/\u200B/g, '') * 1;
            if (me.options.editorModel === "mark") { // 兼容留痕模式取值
                var cloneW = $(axTools.getByClass("ctrl-value", me.document.getElementById(wId))[0]).clone();
                $(cloneW).find(".editor-mark-del-text").remove();
                w = $(cloneW).text().replace(/\u200B/g, '') * 1;
                var cloneH = $(axTools.getByClass("ctrl-value", me.document.getElementById(hId))[0]).clone();
                $(cloneH).find(".editor-mark-del-text").remove();
                h = $(cloneH).text().replace(/\u200B/g, '') * 1;
            }
            // 校验值是否合法
            if (w == "" || h == "") {
                axTools.getByClass("ctrl-value", me.document.getElementById(targetId))[0].innerText = "";
                axTools.valueChange(axTools.getByClass("ctrl-value", me.document.getElementById(targetId))[0])
                return
            };
            if (isNaN(w) || isNaN(h)) {
                axTools.getByClass("ctrl-value", me.document.getElementById(targetId))[0].innerText = "";
                axTools.valueChange(axTools.getByClass("ctrl-value", me.document.getElementById(targetId))[0])
                return
            };
            var result = (w / Math.pow(h / 100, 2)).toFixed(2);
            var oldVal = me.document.getElementById(targetId).getAttribute("oldval");
            var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
            var name = me.options.userInfo.name
            // 获取删除项，保证为最原始的值
            var div = document.createElement('div');
            div.innerHTML = oldVal;
            if (axTools.getByClass('editor-mark-del-text', div).length > 0) {
                oldVal = axTools.getByClass('editor-mark-del-text', div)[0].innerText.replace(/\u200B/g, "");
            }
            // 是否需要留痕
            if (me.options.editorModel === "mark") {
                if (oldVal == result) {
                    result = result;
                } else if (oldVal == "" && oldVal != null) {
                    result = '<span class="editor-new-add-text editor-free-text" user="' + name + '" time="' + time + '">' + result + '</span>';
                } else if (oldVal != result && oldVal != "" && oldVal != null) {
                    result = '<span class="editor-mark-del-text editor-free-text" contenteditable="false" style="display: inline" user="' + name + '" time="' + time + '">' + oldVal + '</span><span class="editor-new-add-text editor-free-text">' + result + '</span>';
                }
            }
            axTools.getByClass("ctrl-value", me.document.getElementById(targetId))[0].innerHTML = result;
            axTools.valueChange(axTools.getByClass("ctrl-value", me.document.getElementById(targetId))[0])
        }
    }
}


AX.plugins["medicalformula"] = function () {
    var me = this,
        thePlugins = "medicalformula";
    me.commands[thePlugins] = {
        execCommand: function (type) {
            axTools.commandDialog({
                me: me,
                type: thePlugins,
                isEdit: true,
                cssRules: "width:800px;height:505px;",
                dialogUrl: "dialogs/extends/formula.html"
            });
        }
    };
    me.options.formulaList = formulaList;
}
/* eslint-disable */

/**
 * 有无元素
 * @command haveornot
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'haveornot');
 * ```
 */
AX.plugins['haveornot'] = function () {
	var me = this,
		thePlugins = 'haveornot';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:700px;height:634px;',
				dialogUrl: 'dialogs/extends/haveornot.html'
			});
		}
	};
	var menuTitle = me.getLang("labelMap."+thePlugins) || "",
		selectItems = new baidu.editor.ui.Menu({
			editor: me,
			className: "edui-for-editattr edui-list",
			content: "",
			title: menuTitle,
			initValue: menuTitle,
			indexByValue: function (value) {
				if (value) {
					for (var item, i = 0; item = this.items[i]; i++) {
						if (item.value.indexOf(value) != -1) {
							return i;
						}
					}
				}
				return -1;
			},
			selectByValue: function () {
				// console.log("selectByValue");
			}
		});
	selectItems.render();
	var popup = axTools.makePopup({
		me: me,
		type: thePlugins,
		editFunc: function (that) {
			var axplugins = that.anchorEl.getAttribute("axplugins"); //判断是多选 还是单选
			baidu.editor.plugins[axplugins].editdom = popup.anchorEl;
			me.execCommand(axplugins, true);
			that.hide();
		}
	});
	// popup.render();

	// me.addListener('mouseover', function (t, evt) {
	// 	axTools.commonEditTip(thePlugins,me,popup,evt);
	// });
	me.addListener("click", function (t, evt) {
		try {
			evt = evt || window.event;
			var el = evt.target || evt.srcElement;
			var multiList = []; //多选值数组
			if (me.options.editorModel === "pure" || me.options.editorModel === "dirty" || me.options.editorModel === "secret" || me.options.editorModel === "preview") return; //清洁模式与非清洁模式 保密模式下不触发点击事件
			if ("view" != me.options.editorModel) {
				if(axTools.hasClass(el,'ctrl-bg')){
					el=el.parentNode;
				}
				if (axTools.hasClass(el, 'ctrl-value')) {
					var ctrlType=el.parentNode.getAttribute('axplugins');
					if (ctrlType != 'combine') {//组合元素 内部文本 禁止点击选中
						var range = me.selection.getRange();
						if (range.collapsed || range.startContainer != el) {
                          //修复连续点击（点击元素，再点击桌面，再再点击元素 元素不获取焦点的问题出现）   yang
                          //ctrl-value 元素 如果为空的时候 不需要需要选中全部节点  (  ) selectNodeContents 解决上面的bug yang
                          	if (el.innerHTML !== '') {
                            	range.selectNodeContents(el);
						  	}
							range.select();
						}
					}
				}

				/**
				 * 渲染下拉项
				 * @param {Array} data option数据
				 * @param {String} id   select控件id
				 */
				var renderSelect = function (data, id) {
					var option, optionHtmls = [],
						textLen = 0,
						j = 0
					for (; j < data.length; j++) {
						option = data[j];
						textLen = option.value.length;
						optionHtmls.push({
							label: option.value,
							value: option.key,
							isSelect: option.isSelect,
							theme: me.options.theme,
							onclick: function (eventName, event) {
								var thePluginsNode = AX.dom.domUtils.findParent(el, function (dom) {
									return dom.getAttribute('axplugins') == thePlugins && dom.getAttribute('attrs');
								}, true);

								if (thePluginsNode === null) return;
								attrs = thePluginsNode.getAttribute("attrs");
								attrsObj = JSON.parse(attrs);

								el.innerHTML = this.label+(attrsObj.isShowName?attrsObj.name:'');
								thePluginsNode.setAttribute("selectVal", this.label);

								// if (me.options.editorModel == 'mark') {
									var range = new AX.dom.Range(me.document);
									range.setStart(thePluginsNode.children[0], 0).setCursor(false, true);
									me.execCommand('insertHtml', '');
									me.fireEvent("contentchange");
								// }
								var thePluginsNodeCombine = AX.dom.domUtils.findParent(el, function (dom) {
									return dom.getAttribute('axplugins') == 'combine';
								}, true);
								if (thePluginsNodeCombine == null) {
									thePluginsNodeCombine = me
								}
								axTools.setCascade(thePluginsNode.getAttribute('selectVal'),attrsObj.id,me);
								axTools.setCascadeMore(thePluginsNode.getAttribute('selectVal'),thePluginsNode,me,thePluginsNodeCombine);
							},
							renderLabelHtml: function () {
								var selectMenu = this.isSelect ? "selectedMenu" : "";
								return '<div class="edui-listitem-body edui-default"><div class="edui-label edui-listitem-label edui-default ' + selectMenu + '">' + (this.label || "") + "</div></div>"
							}
						})
					}
					selectItems.items = optionHtmls;
					selectItems.initItems();
					selectItems.autoSize = 13 * textLen + 20;
					selectItems.getDom("content").innerHTML = selectItems.getContentHtmlTpl();
					selectItems.anchorEl = el;
					selectItems.showAnchor(selectItems.anchorEl);
				};

				if ("BODY" != el.tagName && "HTML" !== el.tagName) {
					var thePluginsNode = AX.dom.domUtils.findParent(el, function (dom) {
						var axValidate = dom.getAttribute('axplugins') == thePlugins;
						return axValidate && dom.getAttribute('attrs');
					}, true);
					if (thePluginsNode === null) return;
					var attrs = thePluginsNode.getAttribute("attrs");
					attrs = JSON.parse(attrs);
					if(me.options.editorModel === 'edit' && !!attrs.readonly) return; // 编辑模式下，校验只读属性
					var selectId = attrs.id;

					var list=[];
					list.push({
						value: (attrs.notSuffixName == '0' || attrs.notSuffixName == '')?'无':attrs.notSuffixName,
						key:0,
						isSelect:false
					})
					list.push({
						value: (attrs.yesSuffixName == '0' || attrs.yesSuffixName == '')?'有':attrs.yesSuffixName,
						key:1,
						isSelect:false
					})
					renderSelect(list, selectId);
				}
			}
		} catch (e) {
			console.log(e);
		}
	});
};

/* eslint-disable */

/**
 * 拼接控件html后插入编辑区
 * @command insertelement
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'insertelement');
 * ```
 */
AX.plugins['insertelement'] = function () {
  var me = this,
    thePlugins = 'insertelement';
  me.commands[thePlugins] = {
    execCommand: function (t, params) {
      var type = getTypeName(params.type),
        data = params.data,
        oNode = null;
        signatureHtml = [];
      var html = '';
      var rang = me.selection.getRange();
      rang.startContainer
      var parentNode = AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
        return dom.getAttribute("attrs") && dom.getAttribute("axplugins") != "paragraphele" && dom.getAttribute("axplugins") != "combine";
      }, true);
      if (parentNode) {
        alert(me.getLang("ax.noWarp"));
        return;
      }
      if(type === "combine") { // 组合元素
        var div = document.createElement('div');
        html = params.data.content || '<p><br /></p>';
        div.innerHTML = html
        if (axTools.getByClass("ax-page-content", div).length > 0) {
          // 防止插入内容不规范，导致结构出错
          div.innerHTML = axTools.getByClass("ax-page-content", div)[0].innerHTML;
        }
        var ctrls = axTools.getByClass("ctrl-bg", div);
        // 包含元素时，需要切换元素id，防止id重复
        if (ctrls.length > 0) {
          axTools.getUUID(ctrls.length + 1, me, function (data){
            for(var i = 1; i < ctrls.length; i++) {
              var ctrl = ctrls[i];
              var id = ctrl.getAttribute("id");
              var reg = new RegExp(id, "g");
              div.innerHTML = div.innerHTML.replace(reg, data.data[i]);
            }
            div.children[0].setAttribute('isQuote', 'false');
            div.children[0].setAttribute("_attrs", div.children[0].getAttribute("attrs"));
            data.id = data.data[0];
            oNode = AX.mh.base.call(this.window, JSON.stringify(data), type, oNode);
            oNode.setAttribute('isQuote', 'false');
            oNode.setAttribute("_attrs", oNode.getAttribute("attrs"));
            oNode.children[0].innerHTML = div.innerHTML;
            me.execCommand('inserthtml', '\u200B' + oNode.outerHTML + '\u200B');
            return;
          })
        }else{
          axTools.getUUID(1, me, function (res){
            data.id = res.data[0];
            oNode = AX.mh.base.call(this.window, JSON.stringify(data), type, oNode);
            oNode.setAttribute('isQuote', 'false');
            oNode.setAttribute("_attrs", oNode.getAttribute("attrs"));
            oNode.children[0].innerHTML = div.innerHTML;
            me.execCommand('inserthtml', '\u200B' + oNode.outerHTML + '\u200B');
          })
        }
      } else {
        if (
          type === "checkbox" ||
          type === "radio" ||
          type === "select" ||
          type === "selectmulti"
        ) {
          data.options = JSON.stringify(data.options)
        }
        oNode = AX.mh.base.call(this.window, data, type, oNode);
        oNode.setAttribute('isQuote', 'false');
        oNode.setAttribute("_attrs", oNode.getAttribute("attrs"));
        me.execCommand('inserthtml', '\u200B' + oNode.outerHTML + '\u200B');
      }
      // if (data.namepos == "left" || data.namepos == "right") {
      //   var nameText = "<span>" + data.name + "</span>";
      //   html = data.namepos == "left" ? nameText + html : html + nameText;
      // }
      // try {
      //   oNode = document.createElement('span');
      //   setAttrs(oNode, data, type);
      //   oNode.setAttribute('id', data.id);
      //   oNode.setAttribute("contenteditable", 'false');
      //   oNode.setAttribute("isQuote", 'false'); // 增加属性校验是否为引入元素
      //   oNode.setAttribute("_attrs", oNode.getAttribute("attrs"));
      //   oNode.setAttribute(
      //     "class",
      //     "ctrl-bg ctrl-field " + (type == "checkbox" ? "checkbox-bg" : "") + " " + (type == "signature" ? " signature" : "")
      //   );
      //   if (type === "signature") {
      //     var signature = "";
      //     for (var j = 0; j < signatureHtml.length; j++) {
      //       signature += signatureHtml[j];
      //     }
      //     oNode.innerHTML = signature;
      //   }else{
      //     oNode.innerHTML = html;
      //   }
      //   oNode.setAttribute('axPlugins', type);
        // me.execCommand('inserthtml', '\u200B' + oNode.outerHTML + '\u200B');
      // } catch (e) {
      //   try {
      //     console.log(e);
      //     editor.execCommand('error');
      //   } catch (e) {
      //     alert(me.getLang('ax.ctrlErrorTip'));
      //   }
      //   return false;
      // }
    }
  };

  // /**
  //    * 构造控件html
  //    * @param {Object} json 控件属性json
  //    * @param {String} type 控件类型
  //    * @returns {String} 控件html
  //    */
  //   function radselectMakeHtml(json,type) {
  //     var labelStr = "";
  //     var dataList=json.options?(typeof(json.options) == 'string'? JSON.parse(json.options): json.options):[];
  //     $.each(dataList,function (index,item){
  //         var checked='';
  //         if(!!item.isDefault){//新增控件时根据默认项反显
  //             checked='checked';
  //         }
  //         labelStr += "<input id='"+json.id+"_"+index+"' value='" + item.key + "' name='checkField_" + json.id + "' valuestr='" + item.value + "' " + checked + " type='" + type + "'/><label for='"+json.id+"_"+index+"'>" + item.value + "</label>&nbsp;";
  //         if(json.direction==1){
  //             labelStr += '<br>';
  //         }
  //     });
  //     var spanHtml = '<span title="' + json.tipText + '" secret-value="' + !!json.isSecret + '" class="ctrl-value" placeholder="' + json.placeholderText + '" >' + labelStr + '</span>';
  //     return spanHtml;
  // }

  // /**
  //  * 构造控件html
  //  * @param {Object} json 控件属性json
  //  * @param {String} thePlugins 控件类型
  //  * @param {DOM} oNode 控件节点
  //  * @returns {String} 控件html
  //  */
  // function makeHtml(json, thePlugins, oNode) {
  //   var currText = oNode && $.trim(oNode.innerText).replace(/\u200B/g,'');//获取text，并删除空白字符&#8203;;
  //   var defaultVal = json.defaultVal === undefined ? "" : json.defaultVal;
  //   if(thePlugins === 'numberelement') {//数字元素插入单位和默认值，与其他元素不一样
  //       currText = "";//数字元素编辑回弹窗 不取oNode 的值。
  //       var numText='';
  //       defaultVal='';//oNode.childNodes[0].innerHTML?oNode.childNodes[0].innerHTML:defaultVal;
  //       if(json.eleUnitContr !='0' && json.eleUnitContr && json.elemUnit){
  //           var elemUnits = json.elemUnit.split("、");
  //           if(!!json.isPopuInput){
  //               defaultVal = '<span id="numVal" type="numVal"> ' + defaultVal + ' </span><span type="eleUnitVal">' + elemUnits[0] + '</span>'
  //           }
  //       }
  //   }
  //   var innerText = currText ? currText : defaultVal;
  //   //针对select 和 selectmulti 元素 显示默认值的情况
  //   if (thePlugins === "select" || thePlugins === "selectmulti") {
  //       var options = json.options,innerText='';
  //       for(var i=0;i<options.length;i++){
  //         for(var j=0;j<json.userDefault.length;j++){
  //           if(options[i].key==json.userDefault[j]){
  //             innerText+=options[i].value;
  //           }
  //         }
  //       }
  //       innerText=innerText==''?(currText==''?defaultVal:''):innerText;
  //   }

  //   if(thePlugins === 'numberelement' && !!json.isPopuInput && defaultVal!=undefined && json.eleUnitContr && json.elemUnit){
  //       innerText=defaultVal;
  //   }else if(thePlugins === 'numberelement' && !!!json.isPopuInput){
  //       innerText='';//oNode.childNodes[0].innerHTML;
  //   }

  //   var html = '<span title="' + json.tipText + '" secret-value="' + !!json.isSecret + '" class="ctrl-value" placeholder="' + json.placeholderText + '">' + innerText + '</span>';

  //   if(json.eleUnitContr !='0' && json.eleUnitContr && json.elemUnit){
  //       var elemUnits = json.elemUnit.split("、");
  //       if(!!!json.isPopuInput){
  //           if(elemUnits.length>1){
  //               html += '<select class="ax-editor-number-select" id="eleUnitVal" type="eleUnitVal">';
  //               for(var i=0;i<elemUnits.length;i++){
  //                   html+='<option value="'+elemUnits[i]+'">'+elemUnits[i]+'</option>';
  //               }
  //               html+='</select>';
  //           }else{
  //               html+='<span id="eleUnitVal" type="eleUnitVal">'+json.elemUnit+'</span>'
  //           }
  //       }
  //   }

  //   if(thePlugins == 'haveornot'){
  //       var showText =/* json.notSuffixName+json.yesSuffixName+ */ json.name;
  //       html = '<span title="' + json.tipText + '" secret-value="' + !!json.isSecret + '" class="ctrl-value" placeholder="' + showText + '" ' + (currText == '' ? 'placeWidth="true"' : '') + '>' + innerText + '</span>';
  //   }

  //   // if(thePlugins == 'signature'){
  //   //     var signatureStr = innerText;
  //   //     if(json.isCurrDoctor){
  //   //         var signatureType = me.options.signatureType;
  //   //         if(signatureType == 'text'){
  //   //             signatureStr = me.options.signatureName;
  //   //         }else if(signatureType == 'img'){
  //   //             signatureStr = '<img src="' + me.options.signatureUrl + '">';
  //   //         }
  //   //     }
  //   //     var placeholderTip = json.placeholderText ? json.placeholderText : '请签名';
  //   //     html = '<span title="' + placeholderTip + '" secret-value="' + !!json.isSecret + '" class="ctrl-value" placeholder="' + placeholderTip + '" ' + (currText == '' ? 'placeWidth="true"' : '') + '>' + signatureStr + '</span>';
  //   // }
  //   if (thePlugins == "signature") {
  //     var signatureStr = innerText;
  //     if (json.signtype === "checksign") {
  //       for (var j = 0; j < json.signatureLevel.length; j++) {
  //         if (json.signatureLevel[j] === "") {
  //           continue;
  //         }
  //         var placeholderTip =
  //           json.placeholderTextArr == ""
  //             ? json.signatureLevel[j] === "oneLevel"
  //               ? "一级医师"
  //               : json.signatureLevel[j] === "twoLevel"
  //               ? "二级医师"
  //               : "三级医师"
  //             : json.placeholderTextArr[j];

  //         html =
  //           (json.sort !== "isVertical" && signatureHtml.length > 0
  //             ? "/"
  //             : "") +
  //           "<span " +
  //           // (tabIndex != -1 ? "tabIndex=" + tabIndex : "") +
  //           ' title="' +
  //           json.tipText +
  //           '" itemSignture="' +
  //           json.signatureLevel[j] +
  //           '" secret-value="' +
  //           !!json.isSecret +
  //           '" class="ctrl-value" placeholder="' +
  //           placeholderTip +
  //           '" ' +
  //           (currText == "" ? 'placeWidth="true"' : "") +
  //           ">" +
  //           signatureStr +
  //           "</span>";
  //         if (json.sort === "isVertical") {
  //           html += "<br>";
  //         }
  //         signatureHtml.push(html);
  //       }
  //     } else {
  //       html =
  //         "<span " +
  //         // (tabIndex != -1 ? "tabIndex=" + tabIndex : "") +
  //         ' title="' +
  //         json.tipText +
  //         '" itemSignture="normal' +
  //         '" secret-value="' +
  //         !!json.isSecret +
  //         '" class="ctrl-value" placeholder="' +
  //         json.placeholderText +
  //         '" ' +
  //         (currText == "" ? 'placeWidth="true"' : "") +
  //         ">" +
  //         signatureStr +
  //         "</span>";
  //       signatureHtml.push(html);
  //     }
  //   }

  //   return html;
  // }

  // /**
  //  * 设置dom节点属性
  //  * @param {DOM} node 节点
  //  * @param {Object} json json属性
  //  * @returns {Null} nul
  //  */
  // function setAttrs(node, json, thePlugins) {
  //   if (thePlugins === "checkbox" || thePlugins === "radio" || thePlugins === "select" || thePlugins === "selectmulti") {
  //       if(!node.getAttribute('selectVal')){
  //         var options = json.options,selectedText='';
  //         for(var i=0;i<options.length;i++){
  //           for(var j=0;j<json.userDefault.length;j++){
  //             if(options[i].key==json.userDefault[j]){
  //               selectedText+=options[i].value;
  //               options[i].isDefault=true;
  //             }
  //           }
  //         }
  //         node.setAttribute("selectValText", selectedText);
  //         node.setAttribute('selectVal', json.userDefault && json.userDefault.join(','));
  //       }
  //   }
  //   var placeholderTip = json.placeholderText ? json.placeholderText : '请签名';
  //   node.setAttribute('title', thePlugins == 'signature' ? placeholderTip : json.tipText);
  //   node.setAttribute('isSecret', !!json.isSecret);

  //   //组合元素 显示边框是 {} 做个判断
  //   if (thePlugins === 'combine') {
  //       node.setAttribute('start-stain', json.showBorder ? '{' : '');
  //       node.setAttribute('end-stain', json.showBorder ? '}' : '');
  //   } else {
  //       node.setAttribute('start-stain', json.showBorder ? '[' : '');
  //       node.setAttribute('end-stain', json.showBorder ? ']' : '');
  //   }
  //   var nodeClass = node.getAttribute('class');
  //   if(json.showBorder){
  //       node.setAttribute('class',nodeClass ? nodeClass.replace(' no-border','') : '');
  //   }else{
  //       node.setAttribute('class',nodeClass ? nodeClass + ' no-border' : ' no-border');
  //   }
  //   node.setAttribute('isRequired', !!!json.isEmpty);
  //   node.setAttribute('cascadeId', json.cascadeId);
  //   node.setAttribute('showCondition', json.showCondition);
  //   json.options=JSON.stringify(json.options);
  //   node.setAttribute('attrs', JSON.stringify(json));
  // }

  // /**
  //  * 获取选中项
  //  * @param {Array} options
  //  * @returns {Array} 选中项
  //  */
  // function getSelectVals(options){
  //   var selectKeys=[],selectVals=[];
  //   for(var i=0;i<options.length;i++){
  //       if(options[i].isDefault){
  //           selectKeys.push(options[i].key);
  //           selectVals.push(options[i].value);
  //       }
  //   }
  //   return {selectKeys:selectKeys.join(','),selectVals:selectVals.join(',')};
  // }

  /**
   * 根据类型生成控件html
   * @param {String} type 控件类型
   * @param {Object} data 控件属性数据
   * @returns {String} str 控件html代码串
   */
  function getTypeName(type) {
    var typeText = '';
    switch (type) {
      case '00': // 基本元素
        typeText = 'macro';
        break;
      case '01': // 文本元素
        typeText = 'text';
        break;
      case '02': // 标签元素
        typeText = 'tagelement';
        break;
      case '03': // 数字元素
        typeText = 'numberelement';
        break;
      case '04': // 单选元素
        typeText = 'radio';
        break;
      case '05': // 多选元素
        typeText = 'checkbox';
        break;
      case '06': // 热点元素
        typeText = 'hot';
        break;
      case '07': // 日期元素
        typeText = 'datedomain';
        break;
      case '08': // 有无元素
        typeText = 'haveornot';
        break;
      case '09': // 组合元素
        typeText = 'combine';
        break;
      case '10': // 段落元素
        typeText = 'paragraphele';
        break;
      case '11': // 签名元素
        typeText = 'signature';
        break;
      case '12': // 单选下拉
        typeText = 'select';
        break;
      case '13': // 多选下拉
        typeText = 'selectmulti';
        break;
    }

    return typeText;
  }
};

/*!
 * jQuery JavaScript Library v3.5.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-04-10T15:07Z
 */
(function(global, factory) {
  "use strict";

    factory(global);

  // Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];

  var getProto = Object.getPrototypeOf;

  var slice = arr.slice;

  var flat = arr.flat
    ? function(array) {
        return arr.flat.call(array);
      }
    : function(array) {
        return arr.concat.apply([], array);
      };

  var push = arr.push;

  var indexOf = arr.indexOf;

  var class2type = {};

  var toString = class2type.toString;

  var hasOwn = class2type.hasOwnProperty;

  var fnToString = hasOwn.toString;

  var ObjectFunctionString = fnToString.call(Object);

  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    return typeof obj === "function" && typeof obj.nodeType !== "number";
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var document = window.document;

  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;

    var i,
      val,
      script = doc.createElement("script");

    script.text = code;
    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || (node.getAttribute && node.getAttribute(i));
        if (val) {
          script.setAttribute(i, val);
        }
      }
    }
    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    }

    // Support: Android <=2.3 only (functionish RegExp)
    return typeof obj === "object" || typeof obj === "function"
      ? class2type[toString.call(obj)] || "object"
      : typeof obj;
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module

  var version = "3.5.0",
    // Define a local copy of jQuery
    jQuery = function(selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init(selector, context);
    };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,

    constructor: jQuery,

    // The default length of a jQuery object is 0
    length: 0,

    toArray: function() {
      return slice.call(this);
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return slice.call(this);
      }

      // Return just the one element from the set
      return num < 0 ? this[num + this.length] : this[num];
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;

      // Return the newly-formed element set
      return ret;
    },

    // Execute a callback for every element in the matched set.
    each: function(callback) {
      return jQuery.each(this, callback);
    },

    map: function(callback) {
      return this.pushStack(
        jQuery.map(this, function(elem, i) {
          return callback.call(elem, i, elem);
        })
      );
    },

    slice: function() {
      return this.pushStack(slice.apply(this, arguments));
    },

    first: function() {
      return this.eq(0);
    },

    last: function() {
      return this.eq(-1);
    },

    even: function() {
      return this.pushStack(
        jQuery.grep(this, function(_elem, i) {
          return (i + 1) % 2;
        })
      );
    },

    odd: function() {
      return this.pushStack(
        jQuery.grep(this, function(_elem, i) {
          return i % 2;
        })
      );
    },

    eq: function(i) {
      var len = this.length,
        j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },

    end: function() {
      return this.prevObject || this.constructor();
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function() {
    var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if (typeof target === "boolean") {
      deep = target;

      // Skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== "object" && !isFunction(target)) {
      target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name];

          // Prevent Object.prototype pollution
          // Prevent never-ending loop
          if (name === "__proto__" || target === copy) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if (
            deep &&
            copy &&
            (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))
          ) {
            src = target[name];

            // Ensure proper type for the source value
            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }
            copyIsArray = false;

            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);

            // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

    // Assume jQuery is ready without the ready module
    isReady: true,

    error: function(msg) {
      throw new Error(msg);
    },

    noop: function() {},

    isPlainObject: function(obj) {
      var proto, Ctor;

      // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects
      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj);

      // Objects with no prototype (e.g., `Object.create( null )`) are plain
      if (!proto) {
        return true;
      }

      // Objects with prototype are plain iff they were constructed by a global Object function
      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return (
        typeof Ctor === "function" &&
        fnToString.call(Ctor) === ObjectFunctionString
      );
    },

    isEmptyObject: function(obj) {
      var name;

      for (name in obj) {
        return false;
      }
      return true;
    },

    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function(code, options, doc) {
      DOMEval(code, { nonce: options && options.nonce }, doc);
    },

    each: function(obj, callback) {
      var length,
        i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;
        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },

    // results is for internal usage only
    makeArray: function(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },

    inArray: function(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },

    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function(first, second) {
      var len = +second.length,
        j = 0,
        i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;

      return first;
    },

    grep: function(elems, callback, invert) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;

      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },

    // arg is for internal usage only
    map: function(elems, callback, arg) {
      var length,
        value,
        i = 0,
        ret = [];

      // Go through the array, translating each of the items to their new values
      if (isArrayLike(elems)) {
        length = elems.length;
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }

        // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      }

      // Flatten any nested arrays
      return flat(ret);
    },

    // A global GUID counter for objects
    guid: 1,

    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  }

  // Populate the class2type map
  jQuery.each(
    "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
      " "
    ),
    function(_i, name) {
      class2type["[object " + name + "]"] = name.toLowerCase();
    }
  );

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
      type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return (
      type === "array" ||
      length === 0 ||
      (typeof length === "number" && length > 0 && length - 1 in obj)
    );
  }
  var Sizzle =
    /*!
     * Sizzle CSS Selector Engine v2.3.5
     * https://sizzlejs.com/
     *
     * Copyright JS Foundation and other contributors
     * Released under the MIT license
     * https://js.foundation/
     *
     * Date: 2020-03-14
     */
    (function(window) {
      var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
        setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
        expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function(a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        },
        // Instance methods
        hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        pushNative = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
        // https://jsperf.com/thor-indexof-vs-for/5
        indexOf = function(list, elem) {
          var i = 0,
            len = list.length;
          for (; i < len; i++) {
            if (list[i] === elem) {
              return i;
            }
          }
          return -1;
        },
        booleans =
          "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
          "ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions

        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]",
        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
        identifier =
          "(?:\\\\[\\da-fA-F]{1,6}" +
          whitespace +
          "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes =
          "\\[" +
          whitespace +
          "*(" +
          identifier +
          ")(?:" +
          whitespace +
          // Operator (capture 2)
          "*([*^$|!~]?=)" +
          whitespace +
          // "Attribute values must be CSS identifiers [capture 5]
          // or strings [capture 3 or capture 4]"
          "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
          identifier +
          "))|)" +
          whitespace +
          "*\\]",
        pseudos =
          ":(" +
          identifier +
          ")(?:\\((" +
          // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
          // 1. quoted (capture 3; capture 4 or capture 5)
          "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
          // 2. simple (capture 6)
          "((?:\\\\.|[^\\\\()[\\]]|" +
          attributes +
          ")*)|" +
          // 3. anything else (capture 2)
          ".*" +
          ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp(
          "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
          "g"
        ),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp(
          "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"
        ),
        rdescend = new RegExp(whitespace + "|>"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
          ID: new RegExp("^#(" + identifier + ")"),
          CLASS: new RegExp("^\\.(" + identifier + ")"),
          TAG: new RegExp("^(" + identifier + "|[*])"),
          ATTR: new RegExp("^" + attributes),
          PSEUDO: new RegExp("^" + pseudos),
          CHILD: new RegExp(
            "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
              whitespace +
              "*(even|odd|(([+-]|)(\\d*)n|)" +
              whitespace +
              "*(?:([+-]|)" +
              whitespace +
              "*(\\d+)|))" +
              whitespace +
              "*\\)|)",
            "i"
          ),
          bool: new RegExp("^(?:" + booleans + ")$", "i"),

          // For use in libraries implementing .is()
          // We use this for POS matching in `select`
          needsContext: new RegExp(
            "^" +
              whitespace +
              "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
              whitespace +
              "*((?:-\\d)?\\d*)" +
              whitespace +
              "*\\)|)(?=[^-]|$)",
            "i"
          )
        },
        rhtml = /HTML$/i,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
        // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp(
          "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])",
          "g"
        ),
        funescape = function(escape, nonHex) {
          var high = "0x" + escape.slice(1) - 0x10000;

          return nonHex
            ? // Strip the backslash prefix from a non-hex escape sequence
              nonHex
            : // Replace a hexadecimal escape sequence with the encoded Unicode code point
            // Support: IE <=11+
            // For values outside the Basic Multilingual Plane (BMP), manually construct a
            // surrogate pair
            high < 0
            ? String.fromCharCode(high + 0x10000)
            : String.fromCharCode(
                (high >> 10) | 0xd800,
                (high & 0x3ff) | 0xdc00
              );
        },
        // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function(ch, asCodePoint) {
          if (asCodePoint) {
            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
            if (ch === "\0") {
              return "\uFFFD";
            }

            // Control characters and (dependent upon position) numbers get escaped as code points
            return (
              ch.slice(0, -1) +
              "\\" +
              ch.charCodeAt(ch.length - 1).toString(16) +
              " "
            );
          }

          // Other potentially-special ASCII characters get backslash-escaped
          return "\\" + ch;
        },
        // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function() {
          setDocument();
        },
        inDisabledFieldset = addCombinator(
          function(elem) {
            return (
              elem.disabled === true &&
              elem.nodeName.toLowerCase() === "fieldset"
            );
          },
          { dir: "parentNode", next: "legend" }
        );

      // Optimize for push.apply( _, NodeList )
      try {
        push.apply(
          (arr = slice.call(preferredDoc.childNodes)),
          preferredDoc.childNodes
        );

        // Support: Android<4.0
        // Detect silently failing push.apply
        // eslint-disable-next-line no-unused-expressions
        arr[preferredDoc.childNodes.length].nodeType;
      } catch (e) {
        push = {
          apply: arr.length
            ? // Leverage slice if possible
              function(target, els) {
                pushNative.apply(target, slice.call(els));
              }
            : // Support: IE<9
              // Otherwise append directly
              function(target, els) {
                var j = target.length,
                  i = 0;

                // Can't trust NodeList.length
                while ((target[j++] = els[i++])) {}
                target.length = j - 1;
              }
        };
      }

      function Sizzle(selector, context, results, seed) {
        var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
          nodeType = context ? context.nodeType : 9;

        results = results || [];

        // Return early from calls with invalid selector or context
        if (
          typeof selector !== "string" ||
          !selector ||
          (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
        ) {
          return results;
        }

        // Try to shortcut find operations (as opposed to filters) in HTML documents
        if (!seed) {
          setDocument(context);
          context = context || document;

          if (documentIsHTML) {
            // If the selector is sufficiently simple, try using a "get*By*" DOM method
            // (excepting DocumentFragment context, where the methods don't exist)
            if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
              // ID selector
              if ((m = match[1])) {
                // Document context
                if (nodeType === 9) {
                  if ((elem = context.getElementById(m))) {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  } else {
                    return results;
                  }

                  // Element context
                } else {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (
                    newContext &&
                    (elem = newContext.getElementById(m)) &&
                    contains(context, elem) &&
                    elem.id === m
                  ) {
                    results.push(elem);
                    return results;
                  }
                }

                // Type selector
              } else if (match[2]) {
                push.apply(results, context.getElementsByTagName(selector));
                return results;

                // Class selector
              } else if (
                (m = match[3]) &&
                support.getElementsByClassName &&
                context.getElementsByClassName
              ) {
                push.apply(results, context.getElementsByClassName(m));
                return results;
              }
            }

            // Take advantage of querySelectorAll
            if (
              support.qsa &&
              !nonnativeSelectorCache[selector + " "] &&
              (!rbuggyQSA || !rbuggyQSA.test(selector)) &&
              // Support: IE 8 only
              // Exclude object elements
              (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")
            ) {
              newSelector = selector;
              newContext = context;

              // qSA considers elements outside a scoping root when evaluating child or
              // descendant combinators, which is not what we want.
              // In such cases, we work around the behavior by prefixing every selector in the
              // list with an ID selector referencing the scope context.
              // The technique has to be used as well when a leading combinator is used
              // as such selectors are not recognized by querySelectorAll.
              // Thanks to Andrew Dupont for this technique.
              if (
                nodeType === 1 &&
                (rdescend.test(selector) || rcombinators.test(selector))
              ) {
                // Expand context for sibling selectors
                newContext =
                  (rsibling.test(selector) &&
                    testContext(context.parentNode)) ||
                  context;

                // We can use :scope instead of the ID hack if the browser
                // supports it & if we're not changing the context.
                if (newContext !== context || !support.scope) {
                  // Capture the context ID, setting it first if necessary
                  if ((nid = context.getAttribute("id"))) {
                    nid = nid.replace(rcssescape, fcssescape);
                  } else {
                    context.setAttribute("id", (nid = expando));
                  }
                }

                // Prefix every selector in the list
                groups = tokenize(selector);
                i = groups.length;
                while (i--) {
                  groups[i] =
                    (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
                }
                newSelector = groups.join(",");
              }

              try {
                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {
                nonnativeSelectorCache(selector, true);
              } finally {
                if (nid === expando) {
                  context.removeAttribute("id");
                }
              }
            }
          }
        }

        // All others
        return select(selector.replace(rtrim, "$1"), context, results, seed);
      }

      /**
       * Create key-value caches of limited size
       * @returns {function(string, object)} Returns the Object data after storing it on itself with
       *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
       *	deleting the oldest entry
       */
      function createCache() {
        var keys = [];

        function cache(key, value) {
          // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
          if (keys.push(key + " ") > Expr.cacheLength) {
            // Only keep the most recent entries
            delete cache[keys.shift()];
          }
          return (cache[key + " "] = value);
        }
        return cache;
      }

      /**
       * Mark a function for special use by Sizzle
       * @param {Function} fn The function to mark
       */
      function markFunction(fn) {
        fn[expando] = true;
        return fn;
      }

      /**
       * Support testing using an element
       * @param {Function} fn Passed the created element and returns a boolean result
       */
      function assert(fn) {
        var el = document.createElement("fieldset");

        try {
          return !!fn(el);
        } catch (e) {
          return false;
        } finally {
          // Remove from its parent by default
          if (el.parentNode) {
            el.parentNode.removeChild(el);
          }

          // release memory in IE
          el = null;
        }
      }

      /**
       * Adds the same handler for all of the specified attrs
       * @param {String} attrs Pipe-separated list of attributes
       * @param {Function} handler The method that will be applied
       */
      function addHandle(attrs, handler) {
        var arr = attrs.split("|"),
          i = arr.length;

        while (i--) {
          Expr.attrHandle[arr[i]] = handler;
        }
      }

      /**
       * Checks document order of two siblings
       * @param {Element} a
       * @param {Element} b
       * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
       */
      function siblingCheck(a, b) {
        var cur = b && a,
          diff =
            cur &&
            a.nodeType === 1 &&
            b.nodeType === 1 &&
            a.sourceIndex - b.sourceIndex;

        // Use IE sourceIndex if available on both nodes
        if (diff) {
          return diff;
        }

        // Check if b follows a
        if (cur) {
          while ((cur = cur.nextSibling)) {
            if (cur === b) {
              return -1;
            }
          }
        }

        return a ? 1 : -1;
      }

      /**
       * Returns a function to use in pseudos for input types
       * @param {String} type
       */
      function createInputPseudo(type) {
        return function(elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === type;
        };
      }

      /**
       * Returns a function to use in pseudos for buttons
       * @param {String} type
       */
      function createButtonPseudo(type) {
        return function(elem) {
          var name = elem.nodeName.toLowerCase();
          return (name === "input" || name === "button") && elem.type === type;
        };
      }

      /**
       * Returns a function to use in pseudos for :enabled/:disabled
       * @param {Boolean} disabled true for :disabled; false for :enabled
       */
      function createDisabledPseudo(disabled) {
        // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
        return function(elem) {
          // Only certain elements can match :enabled or :disabled
          // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
          // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
          if ("form" in elem) {
            // Check for inherited disabledness on relevant non-disabled elements:
            // * listed form-associated elements in a disabled fieldset
            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
            // * option elements in a disabled optgroup
            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
            // All such elements have a "form" property.
            if (elem.parentNode && elem.disabled === false) {
              // Option elements defer to a parent optgroup if present
              if ("label" in elem) {
                if ("label" in elem.parentNode) {
                  return elem.parentNode.disabled === disabled;
                } else {
                  return elem.disabled === disabled;
                }
              }

              // Support: IE 6 - 11
              // Use the isDisabled shortcut property to check for disabled fieldset ancestors
              return (
                elem.isDisabled === disabled ||
                // Where there is no isDisabled, check manually
                /* jshint -W018 */
                (elem.isDisabled !== !disabled &&
                  inDisabledFieldset(elem) === disabled)
              );
            }

            return elem.disabled === disabled;

            // Try to winnow out elements that can't be disabled before trusting the disabled property.
            // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
            // even exist on them, let alone have a boolean value.
          } else if ("label" in elem) {
            return elem.disabled === disabled;
          }

          // Remaining elements are neither :enabled nor :disabled
          return false;
        };
      }

      /**
       * Returns a function to use in pseudos for positionals
       * @param {Function} fn
       */
      function createPositionalPseudo(fn) {
        return markFunction(function(argument) {
          argument = +argument;
          return markFunction(function(seed, matches) {
            var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length;

            // Match elements found at the specified indexes
            while (i--) {
              if (seed[(j = matchIndexes[i])]) {
                seed[j] = !(matches[j] = seed[j]);
              }
            }
          });
        });
      }

      /**
       * Checks a node for validity as a Sizzle context
       * @param {Element|Object=} context
       * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
       */
      function testContext(context) {
        return (
          context &&
          typeof context.getElementsByTagName !== "undefined" &&
          context
        );
      }

      // Expose support vars for convenience
      support = Sizzle.support = {};

      /**
       * Detects XML nodes
       * @param {Element|Object} elem An element or a document
       * @returns {Boolean} True iff elem is a non-HTML XML node
       */
      isXML = Sizzle.isXML = function(elem) {
        var namespace = elem.namespaceURI,
          docElem = (elem.ownerDocument || elem).documentElement;

        // Support: IE <=8
        // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
        // https://bugs.jquery.com/ticket/4833
        return !rhtml.test(
          namespace || (docElem && docElem.nodeName) || "HTML"
        );
      };

      /**
       * Sets document-related variables once based on the current document
       * @param {Element|Object} [doc] An element or document object to use to set the document
       * @returns {Object} Returns the current document
       */
      setDocument = Sizzle.setDocument = function(node) {
        var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc;

        // Return early if doc is invalid or already selected
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
          return document;
        }

        // Update global variables
        document = doc;
        docElem = document.documentElement;
        documentIsHTML = !isXML(document);

        // Support: IE 9 - 11+, Edge 12 - 18+
        // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if (
          preferredDoc != document &&
          (subWindow = document.defaultView) &&
          subWindow.top !== subWindow
        ) {
          // Support: IE 11, Edge
          if (subWindow.addEventListener) {
            subWindow.addEventListener("unload", unloadHandler, false);

            // Support: IE 9 - 10 only
          } else if (subWindow.attachEvent) {
            subWindow.attachEvent("onunload", unloadHandler);
          }
        }

        // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
        // Safari 4 - 5 only, Opera <=11.6 - 12.x only
        // IE/Edge & older browsers don't support the :scope pseudo-class.
        // Support: Safari 6.0 only
        // Safari 6.0 supports :scope but it's an alias of :root there.
        support.scope = assert(function(el) {
          docElem.appendChild(el).appendChild(document.createElement("div"));
          return (
            typeof el.querySelectorAll !== "undefined" &&
            !el.querySelectorAll(":scope fieldset div").length
          );
        });

        /* Attributes
	---------------------------------------------------------------------- */

        // Support: IE<8
        // Verify that getAttribute really returns attributes and not properties
        // (excepting IE8 booleans)
        support.attributes = assert(function(el) {
          el.className = "i";
          return !el.getAttribute("className");
        });

        /* getElement(s)By*
	---------------------------------------------------------------------- */

        // Check if getElementsByTagName("*") returns only elements
        support.getElementsByTagName = assert(function(el) {
          el.appendChild(document.createComment(""));
          return !el.getElementsByTagName("*").length;
        });

        // Support: IE<9
        support.getElementsByClassName = rnative.test(
          document.getElementsByClassName
        );

        // Support: IE<10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programmatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert(function(el) {
          docElem.appendChild(el).id = expando;
          return (
            !document.getElementsByName ||
            !document.getElementsByName(expando).length
          );
        });

        // ID filter and find
        if (support.getById) {
          Expr.filter["ID"] = function(id) {
            var attrId = id.replace(runescape, funescape);
            return function(elem) {
              return elem.getAttribute("id") === attrId;
            };
          };
          Expr.find["ID"] = function(id, context) {
            if (
              typeof context.getElementById !== "undefined" &&
              documentIsHTML
            ) {
              var elem = context.getElementById(id);
              return elem ? [elem] : [];
            }
          };
        } else {
          Expr.filter["ID"] = function(id) {
            var attrId = id.replace(runescape, funescape);
            return function(elem) {
              var node =
                typeof elem.getAttributeNode !== "undefined" &&
                elem.getAttributeNode("id");
              return node && node.value === attrId;
            };
          };

          // Support: IE 6 - 7 only
          // getElementById is not reliable as a find shortcut
          Expr.find["ID"] = function(id, context) {
            if (
              typeof context.getElementById !== "undefined" &&
              documentIsHTML
            ) {
              var node,
                i,
                elems,
                elem = context.getElementById(id);

              if (elem) {
                // Verify the id attribute
                node = elem.getAttributeNode("id");
                if (node && node.value === id) {
                  return [elem];
                }

                // Fall back on getElementsByName
                elems = context.getElementsByName(id);
                i = 0;
                while ((elem = elems[i++])) {
                  node = elem.getAttributeNode("id");
                  if (node && node.value === id) {
                    return [elem];
                  }
                }
              }

              return [];
            }
          };
        }

        // Tag
        Expr.find["TAG"] = support.getElementsByTagName
          ? function(tag, context) {
              if (typeof context.getElementsByTagName !== "undefined") {
                return context.getElementsByTagName(tag);

                // DocumentFragment nodes don't have gEBTN
              } else if (support.qsa) {
                return context.querySelectorAll(tag);
              }
            }
          : function(tag, context) {
              var elem,
                tmp = [],
                i = 0,
                // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName(tag);

              // Filter out possible comments
              if (tag === "*") {
                while ((elem = results[i++])) {
                  if (elem.nodeType === 1) {
                    tmp.push(elem);
                  }
                }

                return tmp;
              }
              return results;
            };

        // Class
        Expr.find["CLASS"] =
          support.getElementsByClassName &&
          function(className, context) {
            if (
              typeof context.getElementsByClassName !== "undefined" &&
              documentIsHTML
            ) {
              return context.getElementsByClassName(className);
            }
          };

        /* QSA/matchesSelector
	---------------------------------------------------------------------- */

        // QSA and matchesSelector support

        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        rbuggyMatches = [];

        // qSa(:focus) reports false when true (Chrome 21)
        // We allow this because of a bug in IE8/9 that throws an error
        // whenever `document.activeElement` is accessed on an iframe
        // So, we allow :focus to pass through QSA all the time to avoid the IE error
        // See https://bugs.jquery.com/ticket/13378
        rbuggyQSA = [];

        if ((support.qsa = rnative.test(document.querySelectorAll))) {
          // Build QSA regex
          // Regex strategy adopted from Diego Perini
          assert(function(el) {
            var input;

            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // https://bugs.jquery.com/ticket/12359
            docElem.appendChild(el).innerHTML =
              "<a id='" +
              expando +
              "'></a>" +
              "<select id='" +
              expando +
              "-\r\\' msallowcapture=''>" +
              "<option selected=''></option></select>";

            // Support: IE8, Opera 11-12.16
            // Nothing should be selected when empty strings follow ^= or $= or *=
            // The test attribute must be unknown in Opera but "safe" for WinRT
            // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
            if (el.querySelectorAll("[msallowcapture^='']").length) {
              rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
            }

            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if (!el.querySelectorAll("[selected]").length) {
              rbuggyQSA.push(
                "\\[" + whitespace + "*(?:value|" + booleans + ")"
              );
            }

            // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
            if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
              rbuggyQSA.push("~=");
            }

            // Support: IE 11+, Edge 15 - 18+
            // IE 11/Edge don't find elements on a `[name='']` query in some cases.
            // Adding a temporary attribute to the document before the selection works
            // around the issue.
            // Interestingly, IE 10 & older don't seem to have the issue.
            input = document.createElement("input");
            input.setAttribute("name", "");
            el.appendChild(input);
            if (!el.querySelectorAll("[name='']").length) {
              rbuggyQSA.push(
                "\\[" +
                  whitespace +
                  "*name" +
                  whitespace +
                  "*=" +
                  whitespace +
                  "*(?:''|\"\")"
              );
            }

            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if (!el.querySelectorAll(":checked").length) {
              rbuggyQSA.push(":checked");
            }

            // Support: Safari 8+, iOS 8+
            // https://bugs.webkit.org/show_bug.cgi?id=136851
            // In-page `selector#id sibling-combinator selector` fails
            if (!el.querySelectorAll("a#" + expando + "+*").length) {
              rbuggyQSA.push(".#.+[+~]");
            }

            // Support: Firefox <=3.6 - 5 only
            // Old Firefox doesn't throw on a badly-escaped identifier.
            el.querySelectorAll("\\\f");
            rbuggyQSA.push("[\\r\\n\\f]");
          });

          assert(function(el) {
            el.innerHTML =
              "<a href='' disabled='disabled'></a>" +
              "<select disabled='disabled'><option/></select>";

            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            var input = document.createElement("input");
            input.setAttribute("type", "hidden");
            el.appendChild(input).setAttribute("name", "D");

            // Support: IE8
            // Enforce case-sensitivity of name attribute
            if (el.querySelectorAll("[name=d]").length) {
              rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
            }

            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if (el.querySelectorAll(":enabled").length !== 2) {
              rbuggyQSA.push(":enabled", ":disabled");
            }

            // Support: IE9-11+
            // IE's :disabled selector does not pick up the children of disabled fieldsets
            docElem.appendChild(el).disabled = true;
            if (el.querySelectorAll(":disabled").length !== 2) {
              rbuggyQSA.push(":enabled", ":disabled");
            }

            // Support: Opera 10 - 11 only
            // Opera 10-11 does not throw on post-comma invalid pseudos
            el.querySelectorAll("*,:x");
            rbuggyQSA.push(",.*:");
          });
        }

        if (
          (support.matchesSelector = rnative.test(
            (matches =
              docElem.matches ||
              docElem.webkitMatchesSelector ||
              docElem.mozMatchesSelector ||
              docElem.oMatchesSelector ||
              docElem.msMatchesSelector)
          ))
        ) {
          assert(function(el) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call(el, "*");

            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call(el, "[s!='']:x");
            rbuggyMatches.push("!=", pseudos);
          });
        }

        rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
        rbuggyMatches =
          rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

        /* Contains
	---------------------------------------------------------------------- */
        hasCompare = rnative.test(docElem.compareDocumentPosition);

        // Element contains another
        // Purposefully self-exclusive
        // As in, an element does not contain itself
        contains =
          hasCompare || rnative.test(docElem.contains)
            ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a,
                  bup = b && b.parentNode;
                return (
                  a === bup ||
                  !!(
                    bup &&
                    bup.nodeType === 1 &&
                    (adown.contains
                      ? adown.contains(bup)
                      : a.compareDocumentPosition &&
                        a.compareDocumentPosition(bup) & 16)
                  )
                );
              }
            : function(a, b) {
                if (b) {
                  while ((b = b.parentNode)) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };

        /* Sorting
	---------------------------------------------------------------------- */

        // Document order sorting
        sortOrder = hasCompare
          ? function(a, b) {
              // Flag for duplicate removal
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }

              // Sort on method existence if only one input has compareDocumentPosition
              var compare =
                !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }

              // Calculate position if both inputs belong to the same document
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              compare =
                (a.ownerDocument || a) == (b.ownerDocument || b)
                  ? a.compareDocumentPosition(b)
                  : // Otherwise we know they are disconnected
                    1;

              // Disconnected nodes
              if (
                compare & 1 ||
                (!support.sortDetached &&
                  b.compareDocumentPosition(a) === compare)
              ) {
                // Choose the first element that is related to our preferred document
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  a == document ||
                  (a.ownerDocument == preferredDoc && contains(preferredDoc, a))
                ) {
                  return -1;
                }

                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  b == document ||
                  (b.ownerDocument == preferredDoc && contains(preferredDoc, b))
                ) {
                  return 1;
                }

                // Maintain original order
                return sortInput
                  ? indexOf(sortInput, a) - indexOf(sortInput, b)
                  : 0;
              }

              return compare & 4 ? -1 : 1;
            }
          : function(a, b) {
              // Exit early if the nodes are identical
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }

              var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [a],
                bp = [b];

              // Parentless nodes are either documents or disconnected
              if (!aup || !bup) {
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */
                return a == document
                  ? -1
                  : b == document
                  ? 1
                  : /* eslint-enable eqeqeq */
                  aup
                  ? -1
                  : bup
                  ? 1
                  : sortInput
                  ? indexOf(sortInput, a) - indexOf(sortInput, b)
                  : 0;

                // If the nodes are siblings, we can do a quick check
              } else if (aup === bup) {
                return siblingCheck(a, b);
              }

              // Otherwise we need full lists of their ancestors for comparison
              cur = a;
              while ((cur = cur.parentNode)) {
                ap.unshift(cur);
              }
              cur = b;
              while ((cur = cur.parentNode)) {
                bp.unshift(cur);
              }

              // Walk down the tree looking for a discrepancy
              while (ap[i] === bp[i]) {
                i++;
              }

              return i
                ? // Do a sibling check if the nodes have a common ancestor
                  siblingCheck(ap[i], bp[i])
                : // Otherwise nodes in our document sort first
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */
                ap[i] == preferredDoc
                ? -1
                : bp[i] == preferredDoc
                ? 1
                : /* eslint-enable eqeqeq */
                  0;
            };

        return document;
      };

      Sizzle.matches = function(expr, elements) {
        return Sizzle(expr, null, null, elements);
      };

      Sizzle.matchesSelector = function(elem, expr) {
        setDocument(elem);

        if (
          support.matchesSelector &&
          documentIsHTML &&
          !nonnativeSelectorCache[expr + " "] &&
          (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
          (!rbuggyQSA || !rbuggyQSA.test(expr))
        ) {
          try {
            var ret = matches.call(elem, expr);

            // IE 9's matchesSelector returns false on disconnected nodes
            if (
              ret ||
              support.disconnectedMatch ||
              // As well, disconnected nodes are said to be in a document
              // fragment in IE 9
              (elem.document && elem.document.nodeType !== 11)
            ) {
              return ret;
            }
          } catch (e) {
            nonnativeSelectorCache(expr, true);
          }
        }

        return Sizzle(expr, document, null, [elem]).length > 0;
      };

      Sizzle.contains = function(context, elem) {
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ((context.ownerDocument || context) != document) {
          setDocument(context);
        }
        return contains(context, elem);
      };

      Sizzle.attr = function(elem, name) {
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ((elem.ownerDocument || elem) != document) {
          setDocument(elem);
        }

        var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
          val =
            fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
              ? fn(elem, name, !documentIsHTML)
              : undefined;

        return val !== undefined
          ? val
          : support.attributes || !documentIsHTML
          ? elem.getAttribute(name)
          : (val = elem.getAttributeNode(name)) && val.specified
          ? val.value
          : null;
      };

      Sizzle.escape = function(sel) {
        return (sel + "").replace(rcssescape, fcssescape);
      };

      Sizzle.error = function(msg) {
        throw new Error("Syntax error, unrecognized expression: " + msg);
      };

      /**
       * Document sorting and removing duplicates
       * @param {ArrayLike} results
       */
      Sizzle.uniqueSort = function(results) {
        var elem,
          duplicates = [],
          j = 0,
          i = 0;

        // Unless we *know* we can detect duplicates, assume their presence
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice(0);
        results.sort(sortOrder);

        if (hasDuplicate) {
          while ((elem = results[i++])) {
            if (elem === results[i]) {
              j = duplicates.push(i);
            }
          }
          while (j--) {
            results.splice(duplicates[j], 1);
          }
        }

        // Clear input after sorting to release objects
        // See https://github.com/jquery/sizzle/pull/225
        sortInput = null;

        return results;
      };

      /**
       * Utility function for retrieving the text value of an array of DOM nodes
       * @param {Array|Element} elem
       */
      getText = Sizzle.getText = function(elem) {
        var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

        if (!nodeType) {
          // If no nodeType, this is expected to be an array
          while ((node = elem[i++])) {
            // Do not traverse comment nodes
            ret += getText(node);
          }
        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
          // Use textContent for elements
          // innerText usage removed for consistency of new lines (jQuery #11153)
          if (typeof elem.textContent === "string") {
            return elem.textContent;
          } else {
            // Traverse its children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              ret += getText(elem);
            }
          }
        } else if (nodeType === 3 || nodeType === 4) {
          return elem.nodeValue;
        }

        // Do not include comment or processing instruction nodes

        return ret;
      };

      Expr = Sizzle.selectors = {
        // Can be adjusted by the user
        cacheLength: 50,

        createPseudo: markFunction,

        match: matchExpr,

        attrHandle: {},

        find: {},

        relative: {
          ">": { dir: "parentNode", first: true },
          " ": { dir: "parentNode" },
          "+": { dir: "previousSibling", first: true },
          "~": { dir: "previousSibling" }
        },

        preFilter: {
          ATTR: function(match) {
            match[1] = match[1].replace(runescape, funescape);

            // Move the given value to match[3] whether quoted or unquoted
            match[3] = (match[3] || match[4] || match[5] || "").replace(
              runescape,
              funescape
            );

            if (match[2] === "~=") {
              match[3] = " " + match[3] + " ";
            }

            return match.slice(0, 4);
          },

          CHILD: function(match) {
            /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
            match[1] = match[1].toLowerCase();

            if (match[1].slice(0, 3) === "nth") {
              // nth-* requires argument
              if (!match[3]) {
                Sizzle.error(match[0]);
              }

              // numeric x and y parameters for Expr.filter.CHILD
              // remember that false/true cast respectively to 0/1
              match[4] = +(match[4]
                ? match[5] + (match[6] || 1)
                : 2 * (match[3] === "even" || match[3] === "odd"));
              match[5] = +(match[7] + match[8] || match[3] === "odd");

              // other types prohibit arguments
            } else if (match[3]) {
              Sizzle.error(match[0]);
            }

            return match;
          },

          PSEUDO: function(match) {
            var excess,
              unquoted = !match[6] && match[2];

            if (matchExpr["CHILD"].test(match[0])) {
              return null;
            }

            // Accept quoted arguments as-is
            if (match[3]) {
              match[2] = match[4] || match[5] || "";

              // Strip excess characters from unquoted arguments
            } else if (
              unquoted &&
              rpseudo.test(unquoted) &&
              // Get excess from tokenize (recursively)
              (excess = tokenize(unquoted, true)) &&
              // advance to the next closing parenthesis
              (excess =
                unquoted.indexOf(")", unquoted.length - excess) -
                unquoted.length)
            ) {
              // excess is a negative index
              match[0] = match[0].slice(0, excess);
              match[2] = unquoted.slice(0, excess);
            }

            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice(0, 3);
          }
        },

        filter: {
          TAG: function(nodeNameSelector) {
            var nodeName = nodeNameSelector
              .replace(runescape, funescape)
              .toLowerCase();
            return nodeNameSelector === "*"
              ? function() {
                  return true;
                }
              : function(elem) {
                  return (
                    elem.nodeName && elem.nodeName.toLowerCase() === nodeName
                  );
                };
          },

          CLASS: function(className) {
            var pattern = classCache[className + " "];

            return (
              pattern ||
              ((pattern = new RegExp(
                "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)"
              )) &&
                classCache(className, function(elem) {
                  return pattern.test(
                    (typeof elem.className === "string" && elem.className) ||
                      (typeof elem.getAttribute !== "undefined" &&
                        elem.getAttribute("class")) ||
                      ""
                  );
                }))
            );
          },

          ATTR: function(name, operator, check) {
            return function(elem) {
              var result = Sizzle.attr(elem, name);

              if (result == null) {
                return operator === "!=";
              }
              if (!operator) {
                return true;
              }

              result += "";

              /* eslint-disable max-len */

              return operator === "="
                ? result === check
                : operator === "!="
                ? result !== check
                : operator === "^="
                ? check && result.indexOf(check) === 0
                : operator === "*="
                ? check && result.indexOf(check) > -1
                : operator === "$="
                ? check && result.slice(-check.length) === check
                : operator === "~="
                ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(
                    check
                  ) > -1
                : operator === "|="
                ? result === check ||
                  result.slice(0, check.length + 1) === check + "-"
                : false;
              /* eslint-enable max-len */
            };
          },

          CHILD: function(type, what, _argument, first, last) {
            var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";

            return first === 1 && last === 0
              ? // Shortcut for :nth-*(n)
                function(elem) {
                  return !!elem.parentNode;
                }
              : function(elem, _context, xml) {
                  var cache,
                    uniqueCache,
                    outerCache,
                    node,
                    nodeIndex,
                    start,
                    dir =
                      simple !== forward ? "nextSibling" : "previousSibling",
                    parent = elem.parentNode,
                    name = ofType && elem.nodeName.toLowerCase(),
                    useCache = !xml && !ofType,
                    diff = false;

                  if (parent) {
                    // :(first|last|only)-(child|of-type)
                    if (simple) {
                      while (dir) {
                        node = elem;
                        while ((node = node[dir])) {
                          if (
                            ofType
                              ? node.nodeName.toLowerCase() === name
                              : node.nodeType === 1
                          ) {
                            return false;
                          }
                        }

                        // Reverse direction for :only-* (if we haven't yet done so)
                        start = dir =
                          type === "only" && !start && "nextSibling";
                      }
                      return true;
                    }

                    start = [forward ? parent.firstChild : parent.lastChild];

                    // non-xml :nth-child(...) stores cache data on `parent`
                    if (forward && useCache) {
                      // Seek `elem` from a previously-cached index

                      // ...in a gzip-friendly way
                      node = parent;
                      outerCache = node[expando] || (node[expando] = {});

                      // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)
                      uniqueCache =
                        outerCache[node.uniqueID] ||
                        (outerCache[node.uniqueID] = {});

                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];

                      while (
                        (node =
                          (++nodeIndex && node && node[dir]) ||
                          // Fallback to seeking `elem` from the start
                          (diff = nodeIndex = 0) ||
                          start.pop())
                      ) {
                        // When found, cache indexes on `parent` and break
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          uniqueCache[type] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      // Use previously-cached element index if available
                      if (useCache) {
                        // ...in a gzip-friendly way
                        node = elem;
                        outerCache = node[expando] || (node[expando] = {});

                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache =
                          outerCache[node.uniqueID] ||
                          (outerCache[node.uniqueID] = {});

                        cache = uniqueCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex;
                      }

                      // xml :nth-child(...)
                      // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                      if (diff === false) {
                        // Use the same loop as above to seek `elem` from the start
                        while (
                          (node =
                            (++nodeIndex && node && node[dir]) ||
                            (diff = nodeIndex = 0) ||
                            start.pop())
                        ) {
                          if (
                            (ofType
                              ? node.nodeName.toLowerCase() === name
                              : node.nodeType === 1) &&
                            ++diff
                          ) {
                            // Cache the index of each encountered element
                            if (useCache) {
                              outerCache =
                                node[expando] || (node[expando] = {});

                              // Support: IE <9 only
                              // Defend against cloned attroperties (jQuery gh-1709)
                              uniqueCache =
                                outerCache[node.uniqueID] ||
                                (outerCache[node.uniqueID] = {});

                              uniqueCache[type] = [dirruns, diff];
                            }

                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }

                    // Incorporate the offset, then check against cycle size
                    diff -= last;
                    return (
                      diff === first ||
                      (diff % first === 0 && diff / first >= 0)
                    );
                  }
                };
          },

          PSEUDO: function(pseudo, argument) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args,
              fn =
                Expr.pseudos[pseudo] ||
                Expr.setFilters[pseudo.toLowerCase()] ||
                Sizzle.error("unsupported pseudo: " + pseudo);

            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if (fn[expando]) {
              return fn(argument);
            }

            // But maintain support for old signatures
            if (fn.length > 1) {
              args = [pseudo, pseudo, "", argument];
              return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())
                ? markFunction(function(seed, matches) {
                    var idx,
                      matched = fn(seed, argument),
                      i = matched.length;
                    while (i--) {
                      idx = indexOf(seed, matched[i]);
                      seed[idx] = !(matches[idx] = matched[i]);
                    }
                  })
                : function(elem) {
                    return fn(elem, 0, args);
                  };
            }

            return fn;
          }
        },

        pseudos: {
          // Potentially complex pseudos
          not: markFunction(function(selector) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));

            return matcher[expando]
              ? markFunction(function(seed, matches, _context, xml) {
                  var elem,
                    unmatched = matcher(seed, null, xml, []),
                    i = seed.length;

                  // Match elements unmatched by `matcher`
                  while (i--) {
                    if ((elem = unmatched[i])) {
                      seed[i] = !(matches[i] = elem);
                    }
                  }
                })
              : function(elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);

                  // Don't keep the element (issue #299)
                  input[0] = null;
                  return !results.pop();
                };
          }),

          has: markFunction(function(selector) {
            return function(elem) {
              return Sizzle(selector, elem).length > 0;
            };
          }),

          contains: markFunction(function(text) {
            text = text.replace(runescape, funescape);
            return function(elem) {
              return (elem.textContent || getText(elem)).indexOf(text) > -1;
            };
          }),

          // "Whether an element is represented by a :lang() selector
          // is based solely on the element's language value
          // being equal to the identifier C,
          // or beginning with the identifier C immediately followed by "-".
          // The matching of C against the element's language value is performed case-insensitively.
          // The identifier C does not have to be a valid language name."
          // http://www.w3.org/TR/selectors/#lang-pseudo
          lang: markFunction(function(lang) {
            // lang value must be a valid identifier
            if (!ridentifier.test(lang || "")) {
              Sizzle.error("unsupported lang: " + lang);
            }
            lang = lang.replace(runescape, funescape).toLowerCase();
            return function(elem) {
              var elemLang;
              do {
                if (
                  (elemLang = documentIsHTML
                    ? elem.lang
                    : elem.getAttribute("xml:lang") ||
                      elem.getAttribute("lang"))
                ) {
                  elemLang = elemLang.toLowerCase();
                  return (
                    elemLang === lang || elemLang.indexOf(lang + "-") === 0
                  );
                }
              } while ((elem = elem.parentNode) && elem.nodeType === 1);
              return false;
            };
          }),

          // Miscellaneous
          target: function(elem) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice(1) === elem.id;
          },

          root: function(elem) {
            return elem === docElem;
          },

          focus: function(elem) {
            return (
              elem === document.activeElement &&
              (!document.hasFocus || document.hasFocus()) &&
              !!(elem.type || elem.href || ~elem.tabIndex)
            );
          },

          // Boolean properties
          enabled: createDisabledPseudo(false),
          disabled: createDisabledPseudo(true),

          checked: function(elem) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return (
              (nodeName === "input" && !!elem.checked) ||
              (nodeName === "option" && !!elem.selected)
            );
          },

          selected: function(elem) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if (elem.parentNode) {
              // eslint-disable-next-line no-unused-expressions
              elem.parentNode.selectedIndex;
            }

            return elem.selected === true;
          },

          // Contents
          empty: function(elem) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
            //   but not by others (comment: 8; processing instruction: 7; etc.)
            // nodeType < 6 works because attributes (2) do not appear as children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              if (elem.nodeType < 6) {
                return false;
              }
            }
            return true;
          },

          parent: function(elem) {
            return !Expr.pseudos["empty"](elem);
          },

          // Element/input types
          header: function(elem) {
            return rheader.test(elem.nodeName);
          },

          input: function(elem) {
            return rinputs.test(elem.nodeName);
          },

          button: function(elem) {
            var name = elem.nodeName.toLowerCase();
            return (
              (name === "input" && elem.type === "button") || name === "button"
            );
          },

          text: function(elem) {
            var attr;
            return (
              elem.nodeName.toLowerCase() === "input" &&
              elem.type === "text" &&
              // Support: IE<8
              // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
              ((attr = elem.getAttribute("type")) == null ||
                attr.toLowerCase() === "text")
            );
          },

          // Position-in-collection
          first: createPositionalPseudo(function() {
            return [0];
          }),

          last: createPositionalPseudo(function(_matchIndexes, length) {
            return [length - 1];
          }),

          eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
            return [argument < 0 ? argument + length : argument];
          }),

          even: createPositionalPseudo(function(matchIndexes, length) {
            var i = 0;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          odd: createPositionalPseudo(function(matchIndexes, length) {
            var i = 1;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          lt: createPositionalPseudo(function(matchIndexes, length, argument) {
            var i =
              argument < 0
                ? argument + length
                : argument > length
                ? length
                : argument;
            for (; --i >= 0; ) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          gt: createPositionalPseudo(function(matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; ++i < length; ) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          })
        }
      };

      Expr.pseudos["nth"] = Expr.pseudos["eq"];

      // Add button/input type pseudos
      for (i in {
        radio: true,
        checkbox: true,
        file: true,
        password: true,
        image: true
      }) {
        Expr.pseudos[i] = createInputPseudo(i);
      }
      for (i in { submit: true, reset: true }) {
        Expr.pseudos[i] = createButtonPseudo(i);
      }

      // Easy API for creating new setFilters
      function setFilters() {}
      setFilters.prototype = Expr.filters = Expr.pseudos;
      Expr.setFilters = new setFilters();

      tokenize = Sizzle.tokenize = function(selector, parseOnly) {
        var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

        if (cached) {
          return parseOnly ? 0 : cached.slice(0);
        }

        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;

        while (soFar) {
          // Comma and first run
          if (!matched || (match = rcomma.exec(soFar))) {
            if (match) {
              // Don't consume trailing commas as valid
              soFar = soFar.slice(match[0].length) || soFar;
            }
            groups.push((tokens = []));
          }

          matched = false;

          // Combinators
          if ((match = rcombinators.exec(soFar))) {
            matched = match.shift();
            tokens.push({
              value: matched,

              // Cast descendant combinators to space
              type: match[0].replace(rtrim, " ")
            });
            soFar = soFar.slice(matched.length);
          }

          // Filters
          for (type in Expr.filter) {
            if (
              (match = matchExpr[type].exec(soFar)) &&
              (!preFilters[type] || (match = preFilters[type](match)))
            ) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: type,
                matches: match
              });
              soFar = soFar.slice(matched.length);
            }
          }

          if (!matched) {
            break;
          }
        }

        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly
          ? soFar.length
          : soFar
          ? Sizzle.error(selector)
          : // Cache the tokens
            tokenCache(selector, groups).slice(0);
      };

      function toSelector(tokens) {
        var i = 0,
          len = tokens.length,
          selector = "";
        for (; i < len; i++) {
          selector += tokens[i].value;
        }
        return selector;
      }

      function addCombinator(matcher, combinator, base) {
        var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === "parentNode",
          doneName = done++;

        return combinator.first
          ? // Check against closest ancestor/preceding element
            function(elem, context, xml) {
              while ((elem = elem[dir])) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context, xml);
                }
              }
              return false;
            }
          : // Check against all ancestor/preceding elements
            function(elem, context, xml) {
              var oldCache,
                uniqueCache,
                outerCache,
                newCache = [dirruns, doneName];

              // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
              if (xml) {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});

                    // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)
                    uniqueCache =
                      outerCache[elem.uniqueID] ||
                      (outerCache[elem.uniqueID] = {});

                    if (skip && skip === elem.nodeName.toLowerCase()) {
                      elem = elem[dir] || elem;
                    } else if (
                      (oldCache = uniqueCache[key]) &&
                      oldCache[0] === dirruns &&
                      oldCache[1] === doneName
                    ) {
                      // Assign to newCache so results back-propagate to previous elements
                      return (newCache[2] = oldCache[2]);
                    } else {
                      // Reuse newcache so results back-propagate to previous elements
                      uniqueCache[key] = newCache;

                      // A match means we're done; a fail means we have to keep checking
                      if ((newCache[2] = matcher(elem, context, xml))) {
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            };
      }

      function elementMatcher(matchers) {
        return matchers.length > 1
          ? function(elem, context, xml) {
              var i = matchers.length;
              while (i--) {
                if (!matchers[i](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            }
          : matchers[0];
      }

      function multipleContexts(selector, contexts, results) {
        var i = 0,
          len = contexts.length;
        for (; i < len; i++) {
          Sizzle(selector, contexts[i], results);
        }
        return results;
      }

      function condense(unmatched, map, filter, context, xml) {
        var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

        for (; i < len; i++) {
          if ((elem = unmatched[i])) {
            if (!filter || filter(elem, context, xml)) {
              newUnmatched.push(elem);
              if (mapped) {
                map.push(i);
              }
            }
          }
        }

        return newUnmatched;
      }

      function setMatcher(
        preFilter,
        selector,
        matcher,
        postFilter,
        postFinder,
        postSelector
      ) {
        if (postFilter && !postFilter[expando]) {
          postFilter = setMatcher(postFilter);
        }
        if (postFinder && !postFinder[expando]) {
          postFinder = setMatcher(postFinder, postSelector);
        }
        return markFunction(function(seed, results, context, xml) {
          var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
            elems =
              seed ||
              multipleContexts(
                selector || "*",
                context.nodeType ? [context] : context,
                []
              ),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn =
              preFilter && (seed || !selector)
                ? condense(elems, preMap, preFilter, context, xml)
                : elems,
            matcherOut = matcher
              ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter)
                ? // ...intermediate processing is necessary
                  []
                : // ...otherwise use results directly
                  results
              : matcherIn;

          // Find primary matches
          if (matcher) {
            matcher(matcherIn, matcherOut, context, xml);
          }

          // Apply postFilter
          if (postFilter) {
            temp = condense(matcherOut, postMap);
            postFilter(temp, [], context, xml);

            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while (i--) {
              if ((elem = temp[i])) {
                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
              }
            }
          }

          if (seed) {
            if (postFinder || preFilter) {
              if (postFinder) {
                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                temp = [];
                i = matcherOut.length;
                while (i--) {
                  if ((elem = matcherOut[i])) {
                    // Restore matcherIn since elem is not yet a final match
                    temp.push((matcherIn[i] = elem));
                  }
                }
                postFinder(null, (matcherOut = []), temp, xml);
              }

              // Move matched elements from seed to results to keep them synchronized
              i = matcherOut.length;
              while (i--) {
                if (
                  (elem = matcherOut[i]) &&
                  (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1
                ) {
                  seed[temp] = !(results[temp] = elem);
                }
              }
            }

            // Add elements to results, through postFinder if defined
          } else {
            matcherOut = condense(
              matcherOut === results
                ? matcherOut.splice(preexisting, matcherOut.length)
                : matcherOut
            );
            if (postFinder) {
              postFinder(null, results, matcherOut, xml);
            } else {
              push.apply(results, matcherOut);
            }
          }
        });
      }

      function matcherFromTokens(tokens) {
        var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
          matchContext = addCombinator(
            function(elem) {
              return elem === checkContext;
            },
            implicitRelative,
            true
          ),
          matchAnyContext = addCombinator(
            function(elem) {
              return indexOf(checkContext, elem) > -1;
            },
            implicitRelative,
            true
          ),
          matchers = [
            function(elem, context, xml) {
              var ret =
                (!leadingRelative && (xml || context !== outermostContext)) ||
                ((checkContext = context).nodeType
                  ? matchContext(elem, context, xml)
                  : matchAnyContext(elem, context, xml));

              // Avoid hanging onto element (issue #299)
              checkContext = null;
              return ret;
            }
          ];

        for (; i < len; i++) {
          if ((matcher = Expr.relative[tokens[i].type])) {
            matchers = [addCombinator(elementMatcher(matchers), matcher)];
          } else {
            matcher = Expr.filter[tokens[i].type].apply(
              null,
              tokens[i].matches
            );

            // Return special upon seeing a positional matcher
            if (matcher[expando]) {
              // Find the next relative operator (if any) for proper handling
              j = ++i;
              for (; j < len; j++) {
                if (Expr.relative[tokens[j].type]) {
                  break;
                }
              }
              return setMatcher(
                i > 1 && elementMatcher(matchers),
                i > 1 &&
                  toSelector(
                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                    tokens
                      .slice(0, i - 1)
                      .concat({ value: tokens[i - 2].type === " " ? "*" : "" })
                  ).replace(rtrim, "$1"),
                matcher,
                i < j && matcherFromTokens(tokens.slice(i, j)),
                j < len && matcherFromTokens((tokens = tokens.slice(j))),
                j < len && toSelector(tokens)
              );
            }
            matchers.push(matcher);
          }
        }

        return elementMatcher(matchers);
      }

      function matcherFromGroupMatchers(elementMatchers, setMatchers) {
        var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function(seed, context, xml, results, outermost) {
            var elem,
              j,
              matcher,
              matchedCount = 0,
              i = "0",
              unmatched = seed && [],
              setMatched = [],
              contextBackup = outermostContext,
              // We must always have either seed elements or outermost context
              elems = seed || (byElement && Expr.find["TAG"]("*", outermost)),
              // Use integer dirruns iff this is the outermost matcher
              dirrunsUnique = (dirruns +=
                contextBackup == null ? 1 : Math.random() || 0.1),
              len = elems.length;

            if (outermost) {
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              outermostContext = context == document || context || outermost;
            }

            // Add elements passing elementMatchers directly to results
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
            for (; i !== len && (elem = elems[i]) != null; i++) {
              if (byElement && elem) {
                j = 0;

                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (!context && elem.ownerDocument != document) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }
                while ((matcher = elementMatchers[j++])) {
                  if (matcher(elem, context || document, xml)) {
                    results.push(elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }

              // Track unmatched elements for set filters
              if (bySet) {
                // They will have gone through all possible matchers
                if ((elem = !matcher && elem)) {
                  matchedCount--;
                }

                // Lengthen the array for every element, matched or not
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }

            // `i` is now the count of elements visited above, and adding it to `matchedCount`
            // makes the latter nonnegative.
            matchedCount += i;

            // Apply set filters to unmatched elements
            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
            // no element matchers and no seed.
            // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
            // case, which will result in a "00" `matchedCount` that differs from `i` but is also
            // numerically zero.
            if (bySet && i !== matchedCount) {
              j = 0;
              while ((matcher = setMatchers[j++])) {
                matcher(unmatched, setMatched, context, xml);
              }

              if (seed) {
                // Reintegrate element matches to eliminate the need for sorting
                if (matchedCount > 0) {
                  while (i--) {
                    if (!(unmatched[i] || setMatched[i])) {
                      setMatched[i] = pop.call(results);
                    }
                  }
                }

                // Discard index placeholder values to get only actual matches
                setMatched = condense(setMatched);
              }

              // Add matches to results
              push.apply(results, setMatched);

              // Seedless set matches succeeding multiple successful matchers stipulate sorting
              if (
                outermost &&
                !seed &&
                setMatched.length > 0 &&
                matchedCount + setMatchers.length > 1
              ) {
                Sizzle.uniqueSort(results);
              }
            }

            // Override manipulation of globals by nested matchers
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }

            return unmatched;
          };

        return bySet ? markFunction(superMatcher) : superMatcher;
      }

      compile = Sizzle.compile = function(
        selector,
        match /* Internal Use Only */
      ) {
        var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

        if (!cached) {
          // Generate a function of recursive functions that can be used to check each element
          if (!match) {
            match = tokenize(selector);
          }
          i = match.length;
          while (i--) {
            cached = matcherFromTokens(match[i]);
            if (cached[expando]) {
              setMatchers.push(cached);
            } else {
              elementMatchers.push(cached);
            }
          }

          // Cache the compiled function
          cached = compilerCache(
            selector,
            matcherFromGroupMatchers(elementMatchers, setMatchers)
          );

          // Save selector and tokenization
          cached.selector = selector;
        }
        return cached;
      };

      /**
       * A low-level selection function that works with Sizzle's compiled
       *  selector functions
       * @param {String|Function} selector A selector or a pre-compiled
       *  selector function built with Sizzle.compile
       * @param {Element} context
       * @param {Array} [results]
       * @param {Array} [seed] A set of elements to match against
       */
      select = Sizzle.select = function(selector, context, results, seed) {
        var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize((selector = compiled.selector || selector));

        results = results || [];

        // Try to minimize operations if there is only one selector in the list and no seed
        // (the latter of which guarantees us context)
        if (match.length === 1) {
          // Reduce context if the leading compound selector is an ID
          tokens = match[0] = match[0].slice(0);
          if (
            tokens.length > 2 &&
            (token = tokens[0]).type === "ID" &&
            context.nodeType === 9 &&
            documentIsHTML &&
            Expr.relative[tokens[1].type]
          ) {
            context = (Expr.find["ID"](
              token.matches[0].replace(runescape, funescape),
              context
            ) || [])[0];
            if (!context) {
              return results;

              // Precompiled matchers will still verify ancestry, so step up a level
            } else if (compiled) {
              context = context.parentNode;
            }

            selector = selector.slice(tokens.shift().value.length);
          }

          // Fetch a seed set for right-to-left matching
          i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
          while (i--) {
            token = tokens[i];

            // Abort if we hit a combinator
            if (Expr.relative[(type = token.type)]) {
              break;
            }
            if ((find = Expr.find[type])) {
              // Search, expanding context for leading sibling combinators
              if (
                (seed = find(
                  token.matches[0].replace(runescape, funescape),
                  (rsibling.test(tokens[0].type) &&
                    testContext(context.parentNode)) ||
                    context
                ))
              ) {
                // If seed is empty or no tokens remain, we can return early
                tokens.splice(i, 1);
                selector = seed.length && toSelector(tokens);
                if (!selector) {
                  push.apply(results, seed);
                  return results;
                }

                break;
              }
            }
          }
        }

        // Compile and execute a filtering function if one is not provided
        // Provide `match` to avoid retokenization if we modified the selector above
        (compiled || compile(selector, match))(
          seed,
          context,
          !documentIsHTML,
          results,
          !context ||
            (rsibling.test(selector) && testContext(context.parentNode)) ||
            context
        );
        return results;
      };

      // One-time assignments

      // Sort stability
      support.sortStable =
        expando
          .split("")
          .sort(sortOrder)
          .join("") === expando;

      // Support: Chrome 14-35+
      // Always assume duplicates if they aren't passed to the comparison function
      support.detectDuplicates = !!hasDuplicate;

      // Initialize against the default document
      setDocument();

      // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
      // Detached nodes confoundingly follow *each other*
      support.sortDetached = assert(function(el) {
        // Should return 1, but returns 4 (following)
        return (
          el.compareDocumentPosition(document.createElement("fieldset")) & 1
        );
      });

      // Support: IE<8
      // Prevent attribute/property "interpolation"
      // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
      if (
        !assert(function(el) {
          el.innerHTML = "<a href='#'></a>";
          return el.firstChild.getAttribute("href") === "#";
        })
      ) {
        addHandle("type|href|height|width", function(elem, name, isXML) {
          if (!isXML) {
            return elem.getAttribute(
              name,
              name.toLowerCase() === "type" ? 1 : 2
            );
          }
        });
      }

      // Support: IE<9
      // Use defaultValue in place of getAttribute("value")
      if (
        !support.attributes ||
        !assert(function(el) {
          el.innerHTML = "<input/>";
          el.firstChild.setAttribute("value", "");
          return el.firstChild.getAttribute("value") === "";
        })
      ) {
        addHandle("value", function(elem, _name, isXML) {
          if (!isXML && elem.nodeName.toLowerCase() === "input") {
            return elem.defaultValue;
          }
        });
      }

      // Support: IE<9
      // Use getAttributeNode to fetch booleans when getAttribute lies
      if (
        !assert(function(el) {
          return el.getAttribute("disabled") == null;
        })
      ) {
        addHandle(booleans, function(elem, name, isXML) {
          var val;
          if (!isXML) {
            return elem[name] === true
              ? name.toLowerCase()
              : (val = elem.getAttributeNode(name)) && val.specified
              ? val.value
              : null;
          }
        });
      }

      return Sizzle;
    })(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;

  // Deprecated
  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function(elem, dir, until) {
    var matched = [],
      truncate = until !== undefined;

    while ((elem = elem[dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }
        matched.push(elem);
      }
    }
    return matched;
  };

  var siblings = function(n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function(elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }

    // Single element
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function(elem) {
        return (elem === qualifier) !== not;
      });
    }

    // Arraylike of elements (jQuery, arguments, Array)
    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function(elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    }

    // Filtered directly for both simple and complex selectors
    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function(expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(
      expr,
      jQuery.grep(elems, function(elem) {
        return elem.nodeType === 1;
      })
    );
  };

  jQuery.fn.extend({
    find: function(selector) {
      var i,
        ret,
        len = this.length,
        self = this;

      if (typeof selector !== "string") {
        return this.pushStack(
          jQuery(selector).filter(function() {
            for (i = 0; i < len; i++) {
              if (jQuery.contains(self[i], this)) {
                return true;
              }
            }
          })
        );
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function(selector) {
      return !!winnow(
        this,

        // If this is a positional/relative selector, check membership in the returned set
        // so $("p:first").is("p:last") won't return true for a doc with two "p".
        typeof selector === "string" && rneedsContext.test(selector)
          ? jQuery(selector)
          : selector || [],
        false
      ).length;
    }
  });

  // Initialize a jQuery object

  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
    init = (jQuery.fn.init = function(selector, context, root) {
      var match, elem;

      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }

      // Method init() accepts an alternate rootjQuery
      // so migrate can support jQuery.sub (gh-2101)
      root = root || rootjQuery;

      // Handle HTML strings
      if (typeof selector === "string") {
        if (
          selector[0] === "<" &&
          selector[selector.length - 1] === ">" &&
          selector.length >= 3
        ) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [null, selector, null];
        } else {
          match = rquickExpr.exec(selector);
        }

        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;

            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge(
              this,
              jQuery.parseHTML(
                match[1],
                context && context.nodeType
                  ? context.ownerDocument || context
                  : document,
                true
              )
            );

            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (isFunction(this[match])) {
                  this[match](context[match]);

                  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }

            return this;

            // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);

            if (elem) {
              // Inject the element directly into the jQuery object
              this[0] = elem;
              this.length = 1;
            }
            return this;
          }

          // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || root).find(selector);

          // HANDLE: $(expr, context)
          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }

        // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this[0] = selector;
        this.length = 1;
        return this;

        // HANDLE: $(function)
        // Shortcut for document ready
      } else if (isFunction(selector)) {
        return root.ready !== undefined
          ? root.ready(selector)
          : // Execute immediately if ready is not present
            selector(jQuery);
      }

      return jQuery.makeArray(selector, this);
    });

  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;

  // Initialize central reference
  rootjQuery = jQuery(document);

  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };

  jQuery.fn.extend({
    has: function(target) {
      var targets = jQuery(target, this),
        l = targets.length;

      return this.filter(function() {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },

    closest: function(selectors, context) {
      var cur,
        i = 0,
        l = this.length,
        matched = [],
        targets = typeof selectors !== "string" && jQuery(selectors);

      // Positional selectors never match, since there's no _selection_ context
      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (
              cur.nodeType < 11 &&
              (targets
                ? targets.index(cur) > -1
                : // Don't pass non-elements to Sizzle
                  cur.nodeType === 1 &&
                  jQuery.find.matchesSelector(cur, selectors))
            ) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(
        matched.length > 1 ? jQuery.uniqueSort(matched) : matched
      );
    },

    // Determine the position of an element within the set
    index: function(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode
          ? this.first().prevAll().length
          : -1;
      }

      // Index in selector
      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      }

      // Locate the position of the desired element
      return indexOf.call(
        this,

        // If it receives a jQuery object, the first element is used
        elem.jquery ? elem[0] : elem
      );
    },

    add: function(selector, context) {
      return this.pushStack(
        jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context)))
      );
    },

    addBack: function(selector) {
      return this.add(
        selector == null ? this.prevObject : this.prevObject.filter(selector)
      );
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
    return cur;
  }

  jQuery.each(
    {
      parent: function(elem) {
        var parent = elem.parentNode;
        return parent && parent.nodeType !== 11 ? parent : null;
      },
      parents: function(elem) {
        return dir(elem, "parentNode");
      },
      parentsUntil: function(elem, _i, until) {
        return dir(elem, "parentNode", until);
      },
      next: function(elem) {
        return sibling(elem, "nextSibling");
      },
      prev: function(elem) {
        return sibling(elem, "previousSibling");
      },
      nextAll: function(elem) {
        return dir(elem, "nextSibling");
      },
      prevAll: function(elem) {
        return dir(elem, "previousSibling");
      },
      nextUntil: function(elem, _i, until) {
        return dir(elem, "nextSibling", until);
      },
      prevUntil: function(elem, _i, until) {
        return dir(elem, "previousSibling", until);
      },
      siblings: function(elem) {
        return siblings((elem.parentNode || {}).firstChild, elem);
      },
      children: function(elem) {
        return siblings(elem.firstChild);
      },
      contents: function(elem) {
        if (
          elem.contentDocument != null &&
          // Support: IE 11+
          // <object> elements with no `data` attribute has an object
          // `contentDocument` with a `null` prototype.
          getProto(elem.contentDocument)
        ) {
          return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if (nodeName(elem, "template")) {
          elem = elem.content || elem;
        }

        return jQuery.merge([], elem.childNodes);
      }
    },
    function(name, fn) {
      jQuery.fn[name] = function(until, selector) {
        var matched = jQuery.map(this, fn, until);

        if (name.slice(-5) !== "Until") {
          selector = until;
        }

        if (selector && typeof selector === "string") {
          matched = jQuery.filter(selector, matched);
        }

        if (this.length > 1) {
          // Remove duplicates
          if (!guaranteedUnique[name]) {
            jQuery.uniqueSort(matched);
          }

          // Reverse order for parents* and prev-derivatives
          if (rparentsprev.test(name)) {
            matched.reverse();
          }
        }

        return this.pushStack(matched);
      };
    }
  );
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

  // Convert String-formatted options into Object-formatted ones
  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
      object[flag] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function(options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options =
      typeof options === "string"
        ? createOptions(options)
        : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
      firing,
      // Last fire value for non-forgettable lists
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to prevent firing
      locked,
      // Actual callback list
      list = [],
      // Queue of execution data for repeatable lists
      queue = [],
      // Index of currently firing callback (modified by add/remove as needed)
      firingIndex = -1,
      // Fire callbacks
      fire = function() {
        // Enforce single-firing
        locked = locked || options.once;

        // Execute callbacks for all pending executions,
        // respecting firingIndex overrides and runtime changes
        fired = firing = true;
        for (; queue.length; firingIndex = -1) {
          memory = queue.shift();
          while (++firingIndex < list.length) {
            // Run callback and check for early termination
            if (
              list[firingIndex].apply(memory[0], memory[1]) === false &&
              options.stopOnFalse
            ) {
              // Jump to end and forget the data so .add doesn't re-fire
              firingIndex = list.length;
              memory = false;
            }
          }
        }

        // Forget the data if we're done with it
        if (!options.memory) {
          memory = false;
        }

        firing = false;

        // Clean up if we're done firing for good
        if (locked) {
          // Keep an empty list if we have data for future add calls
          if (memory) {
            list = [];

            // Otherwise, this object is spent
          } else {
            list = "";
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function() {
          if (list) {
            // If we have memory from a past run, we should fire after adding
            if (memory && !firing) {
              firingIndex = list.length - 1;
              queue.push(memory);
            }

            (function add(args) {
              jQuery.each(args, function(_, arg) {
                if (isFunction(arg)) {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && toType(arg) !== "string") {
                  // Inspect recursively
                  add(arg);
                }
              });
            })(arguments);

            if (memory && !firing) {
              fire();
            }
          }
          return this;
        },

        // Remove a callback from the list
        remove: function() {
          jQuery.each(arguments, function(_, arg) {
            var index;
            while ((index = jQuery.inArray(arg, list, index)) > -1) {
              list.splice(index, 1);

              // Handle firing indexes
              if (index <= firingIndex) {
                firingIndex--;
              }
            }
          });
          return this;
        },

        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function(fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
        },

        // Remove all callbacks from the list
        empty: function() {
          if (list) {
            list = [];
          }
          return this;
        },

        // Disable .fire and .add
        // Abort any current/pending executions
        // Clear all callbacks and values
        disable: function() {
          locked = queue = [];
          list = memory = "";
          return this;
        },
        disabled: function() {
          return !list;
        },

        // Disable .fire
        // Also disable .add unless we have memory (since it would have no effect)
        // Abort any pending executions
        lock: function() {
          locked = queue = [];
          if (!memory && !firing) {
            list = memory = "";
          }
          return this;
        },
        locked: function() {
          return !!locked;
        },

        // Call all callbacks with the given context and arguments
        fireWith: function(context, args) {
          if (!locked) {
            args = args || [];
            args = [context, args.slice ? args.slice() : args];
            queue.push(args);
            if (!firing) {
              fire();
            }
          }
          return this;
        },

        // Call all the callbacks with the given arguments
        fire: function() {
          self.fireWith(this, arguments);
          return this;
        },

        // To know if the callbacks have already been called at least once
        fired: function() {
          return !!fired;
        }
      };

    return self;
  };

  function Identity(v) {
    return v;
  }
  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction((method = value.promise))) {
        method
          .call(value)
          .done(resolve)
          .fail(reject);

        // Other thenables
      } else if (value && isFunction((method = value.then))) {
        method.call(value, resolve, reject);

        // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      }

      // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.
    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function(func) {
      var tuples = [
          // action, add listener, callbacks,
          // ... .then handlers, argument index, [final state]
          [
            "notify",
            "progress",
            jQuery.Callbacks("memory"),
            jQuery.Callbacks("memory"),
            2
          ],
          [
            "resolve",
            "done",
            jQuery.Callbacks("once memory"),
            jQuery.Callbacks("once memory"),
            0,
            "resolved"
          ],
          [
            "reject",
            "fail",
            jQuery.Callbacks("once memory"),
            jQuery.Callbacks("once memory"),
            1,
            "rejected"
          ]
        ],
        state = "pending",
        promise = {
          state: function() {
            return state;
          },
          always: function() {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          catch: function(fn) {
            return promise.then(null, fn);
          },

          // Keep pipe for back-compat
          pipe: function(/* fnDone, fnFail, fnProgress */) {
            var fns = arguments;

            return jQuery
              .Deferred(function(newDefer) {
                jQuery.each(tuples, function(_i, tuple) {
                  // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                  // deferred.progress(function() { bind to newDefer or newDefer.notify })
                  // deferred.done(function() { bind to newDefer or newDefer.resolve })
                  // deferred.fail(function() { bind to newDefer or newDefer.reject })
                  deferred[tuple[1]](function() {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && isFunction(returned.promise)) {
                      returned
                        .promise()
                        .progress(newDefer.notify)
                        .done(newDefer.resolve)
                        .fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](
                        this,
                        fn ? [returned] : arguments
                      );
                    }
                  });
                });
                fns = null;
              })
              .promise();
          },
          then: function(onFulfilled, onRejected, onProgress) {
            var maxDepth = 0;
            function resolve(depth, deferred, handler, special) {
              return function() {
                var that = this,
                  args = arguments,
                  mightThrow = function() {
                    var returned, then;

                    // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts
                    if (depth < maxDepth) {
                      return;
                    }

                    returned = handler.apply(that, args);

                    // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48
                    if (returned === deferred.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }

                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once
                    then =
                      returned &&
                      // Support: Promises/A+ section 2.3.4
                      // https://promisesaplus.com/#point-64
                      // Only check objects and functions for thenability
                      (typeof returned === "object" ||
                        typeof returned === "function") &&
                      returned.then;

                    // Handle a returned thenable
                    if (isFunction(then)) {
                      // Special processors (notify) just wait for resolution
                      if (special) {
                        then.call(
                          returned,
                          resolve(maxDepth, deferred, Identity, special),
                          resolve(maxDepth, deferred, Thrower, special)
                        );

                        // Normal processors (resolve) also hook into progress
                      } else {
                        // ...and disregard older resolution values
                        maxDepth++;

                        then.call(
                          returned,
                          resolve(maxDepth, deferred, Identity, special),
                          resolve(maxDepth, deferred, Thrower, special),
                          resolve(
                            maxDepth,
                            deferred,
                            Identity,
                            deferred.notifyWith
                          )
                        );
                      }

                      // Handle all other returned values
                    } else {
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if (handler !== Identity) {
                        that = undefined;
                        args = [returned];
                      }

                      // Process the value(s)
                      // Default process is resolve
                      (special || deferred.resolveWith)(that, args);
                    }
                  },
                  // Only normal processors (resolve) catch and reject exceptions
                  process = special
                    ? mightThrow
                    : function() {
                        try {
                          mightThrow();
                        } catch (e) {
                          if (jQuery.Deferred.exceptionHook) {
                            jQuery.Deferred.exceptionHook(
                              e,
                              process.stackTrace
                            );
                          }

                          // Support: Promises/A+ section 2.3.3.3.4.1
                          // https://promisesaplus.com/#point-61
                          // Ignore post-resolution exceptions
                          if (depth + 1 >= maxDepth) {
                            // Only substitute handlers pass on context
                            // and multiple values (non-spec behavior)
                            if (handler !== Thrower) {
                              that = undefined;
                              args = [e];
                            }

                            deferred.rejectWith(that, args);
                          }
                        }
                      };

                // Support: Promises/A+ section 2.3.3.3.1
                // https://promisesaplus.com/#point-57
                // Re-resolve promises immediately to dodge false rejection from
                // subsequent errors
                if (depth) {
                  process();
                } else {
                  // Call an optional hook to record the stack, in case of exception
                  // since it's otherwise lost when execution goes async
                  if (jQuery.Deferred.getStackHook) {
                    process.stackTrace = jQuery.Deferred.getStackHook();
                  }
                  window.setTimeout(process);
                }
              };
            }

            return jQuery
              .Deferred(function(newDefer) {
                // progress_handlers.add( ... )
                tuples[0][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onProgress) ? onProgress : Identity,
                    newDefer.notifyWith
                  )
                );

                // fulfilled_handlers.add( ... )
                tuples[1][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onFulfilled) ? onFulfilled : Identity
                  )
                );

                // rejected_handlers.add( ... )
                tuples[2][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onRejected) ? onRejected : Thrower
                  )
                );
              })
              .promise();
          },

          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function(obj) {
            return obj != null ? jQuery.extend(obj, promise) : promise;
          }
        },
        deferred = {};

      // Add list-specific methods
      jQuery.each(tuples, function(i, tuple) {
        var list = tuple[2],
          stateString = tuple[5];

        // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add
        promise[tuple[1]] = list.add;

        // Handle state
        if (stateString) {
          list.add(
            function() {
              // state = "resolved" (i.e., fulfilled)
              // state = "rejected"
              state = stateString;
            },

            // rejected_callbacks.disable
            // fulfilled_callbacks.disable
            tuples[3 - i][2].disable,

            // rejected_handlers.disable
            // fulfilled_handlers.disable
            tuples[3 - i][3].disable,

            // progress_callbacks.lock
            tuples[0][2].lock,

            // progress_handlers.lock
            tuples[0][3].lock
          );
        }

        // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire
        list.add(tuple[3].fire);

        // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }
        deferred[tuple[0]] = function() {
          deferred[tuple[0] + "With"](
            this === deferred ? undefined : this,
            arguments
          );
          return this;
        };

        // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith
        deferred[tuple[0] + "With"] = list.fireWith;
      });

      // Make the deferred a promise
      promise.promise(deferred);

      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }

      // All done!
      return deferred;
    },

    // Deferred helper
    when: function(singleValue) {
      var // count of uncompleted subordinates
        remaining = arguments.length,
        // count of unprocessed arguments
        i = remaining,
        // subordinate fulfillment data
        resolveContexts = Array(i),
        resolveValues = slice.call(arguments),
        // the master Deferred
        master = jQuery.Deferred(),
        // subordinate callback factory
        updateFunc = function(i) {
          return function(value) {
            resolveContexts[i] = this;
            resolveValues[i] =
              arguments.length > 1 ? slice.call(arguments) : value;
            if (!--remaining) {
              master.resolveWith(resolveContexts, resolveValues);
            }
          };
        };

      // Single- and empty arguments are adopted like Promise.resolve
      if (remaining <= 1) {
        adoptValue(
          singleValue,
          master.done(updateFunc(i)).resolve,
          master.reject,
          !remaining
        );

        // Use .then() to unwrap secondary thenables (cf. gh-3000)
        if (
          master.state() === "pending" ||
          isFunction(resolveValues[i] && resolveValues[i].then)
        ) {
          return master.then();
        }
      }

      // Multiple arguments are aggregated like Promise.all array elements
      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), master.reject);
      }

      return master.promise();
    }
  });

  // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.
  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function(error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (
      window.console &&
      window.console.warn &&
      error &&
      rerrorNames.test(error.name)
    ) {
      window.console.warn(
        "jQuery.Deferred exception: " + error.message,
        error.stack,
        stack
      );
    }
  };

  jQuery.readyException = function(error) {
    window.setTimeout(function() {
      throw error;
    });
  };

  // The deferred used on DOM ready
  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function(fn) {
    readyList
      .then(fn)

      // Wrap jQuery.readyException in a function so that the lookup
      // happens at the time of error handling instead of callback
      // registration.
      .catch(function(error) {
        jQuery.readyException(error);
      });

    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,

    // Handle when the DOM is ready
    ready: function(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }

      // Remember that the DOM is ready
      jQuery.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);
    }
  });

  jQuery.ready.then = readyList.then;

  // The ready event handler and self cleanup method
  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  }

  // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon
  if (
    document.readyState === "complete" ||
    (document.readyState !== "loading" && !document.documentElement.doScroll)
  ) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed);

    // A fallback to window.onload, that will always work
    window.addEventListener("load", completed);
  }

  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
      len = elems.length,
      bulk = key == null;

    // Sets many values
    if (toType(key) === "object") {
      chainable = true;
      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      }

      // Sets one value
    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null;

          // ...except when executing function values
        } else {
          bulk = fn;
          fn = function(elem, _key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(
            elems[i],
            key,
            raw ? value : value.call(elems[i], i, fn(elems[i], key))
          );
        }
      }
    }

    if (chainable) {
      return elems;
    }

    // Gets
    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  };

  // Matches dashed string for camelizing
  var rmsPrefix = /^-ms-/,
    rdashAlpha = /-([a-z])/g;

  // Used by camelCase as callback to replace()
  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  }

  // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)
  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }
  var acceptData = function(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;

  Data.prototype = {
    cache: function(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando];

      // If not, create one
      if (!value) {
        value = Object.create(null);

        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.
        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value;

            // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function(owner, data, value) {
      var prop,
        cache = this.cache(owner);

      // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)
      if (typeof data === "string") {
        cache[camelCase(data)] = value;

        // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }
      return cache;
    },
    get: function(owner, key) {
      return key === undefined
        ? this.cache(owner)
        : // Always use camelCase key (gh-2257)
          owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (
        key === undefined ||
        (key && typeof key === "string" && value === undefined)
      ) {
        return this.get(owner, key);
      }

      // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function(owner, key) {
      var i,
        cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key);

          // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace
          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      }

      // Remove the expando if there's no more data
      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();

  var dataUser = new Data();

  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    }

    // Only convert to a number if it doesn't change the string
    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {}

        // Make sure we set the data so it isn't changed later
        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }

  jQuery.extend({
    hasData: function(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },

    data: function(elem, name, data) {
      return dataUser.access(elem, name, data);
    },

    removeData: function(elem, name) {
      dataUser.remove(elem, name);
    },

    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },

    _removeData: function(elem, name) {
      dataPriv.remove(elem, name);
    }
  });

  jQuery.fn.extend({
    data: function(key, value) {
      var i,
        name,
        data,
        elem = this[0],
        attrs = elem && elem.attributes;

      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;
            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      }

      // Sets multiple values
      if (typeof key === "object") {
        return this.each(function() {
          dataUser.set(this, key);
        });
      }

      return access(
        this,
        function(value) {
          var data;

          // The calling jQuery object (element matches) is not empty
          // (and therefore has an element appears at this[ 0 ]) and the
          // `value` parameter was not undefined. An empty jQuery object
          // will result in `undefined` for elem = this[ 0 ] which will
          // throw an exception if an attempt to read a data cache is made.
          if (elem && value === undefined) {
            // Attempt to get data from the cache
            // The key will always be camelCased in Data
            data = dataUser.get(elem, key);
            if (data !== undefined) {
              return data;
            }

            // Attempt to "discover" the data in
            // HTML5 custom data-* attrs
            data = dataAttr(elem, key);
            if (data !== undefined) {
              return data;
            }

            // We tried really hard, but the data doesn't exist.
            return;
          }

          // Set the data...
          this.each(function() {
            // We always store the camelCased key
            dataUser.set(this, key, value);
          });
        },
        null,
        value,
        arguments.length > 1,
        null,
        true
      );
    },

    removeData: function(key) {
      return this.each(function() {
        dataUser.remove(this, key);
      });
    }
  });

  jQuery.extend({
    queue: function(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type);

        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },

    dequeue: function(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = jQuery._queueHooks(elem, type),
        next = function() {
          jQuery.dequeue(elem, type);
        };

      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        }

        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },

    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function(elem, type) {
      var key = type + "queueHooks";
      return (
        dataPriv.get(elem, key) ||
        dataPriv.access(elem, key, {
          empty: jQuery.Callbacks("once memory").add(function() {
            dataPriv.remove(elem, [type + "queue", key]);
          })
        })
      );
    }
  });

  jQuery.fn.extend({
    queue: function(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined
        ? this
        : this.each(function() {
            var queue = jQuery.queue(this, type, data);

            // Ensure a hooks for this queue
            jQuery._queueHooks(this, type);

            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery.dequeue(this, type);
            }
          });
    },
    dequeue: function(type) {
      return this.each(function() {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function(type) {
      return this.queue(type || "fx", []);
    },

    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function(type, obj) {
      var tmp,
        count = 1,
        defer = jQuery.Deferred(),
        elements = this,
        i = this.length,
        resolve = function() {
          if (!--count) {
            defer.resolveWith(elements, [elements]);
          }
        };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }
      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

  var cssExpand = ["Top", "Right", "Bottom", "Left"];

  var documentElement = document.documentElement;

  var isAttached = function(elem) {
      return jQuery.contains(elem.ownerDocument, elem);
    },
    composed = { composed: true };

  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.
  if (documentElement.getRootNode) {
    isAttached = function(elem) {
      return (
        jQuery.contains(elem.ownerDocument, elem) ||
        elem.getRootNode(composed) === elem.ownerDocument
      );
    };
  }
  var isHiddenWithinTree = function(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;

    // Inline style trumps all
    return (
      elem.style.display === "none" ||
      (elem.style.display === "" &&
        // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached(elem) &&
        jQuery.css(elem, "display") === "none")
    );
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
      scale,
      maxIterations = 20,
      currentValue = tween
        ? function() {
            return tween.cur();
          }
        : function() {
            return jQuery.css(elem, prop, "");
          },
      initial = currentValue(),
      unit =
        (valueParts && valueParts[3]) || (jQuery.cssNumber[prop] ? "" : "px"),
      // Starting value computation is required for potential unit mismatches
      initialInUnit =
        elem.nodeType &&
        (jQuery.cssNumber[prop] || (unit !== "px" && +initial)) &&
        rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2;

      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[3];

      // Iteratively approximate from a nonzero starting point
      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);
        if (
          (1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <=
          0
        ) {
          maxIterations = 0;
        }
        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit);

      // Make sure we update the tween properties later on
      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0;

      // Apply relative offset (+=/-=) if specified
      adjusted = valueParts[1]
        ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
        : +valueParts[2];
      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }
    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
      doc = elem.ownerDocument,
      nodeName = elem.nodeName,
      display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");

    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }
    defaultDisplayMap[nodeName] = display;

    return display;
  }

  function showHide(elements, show) {
    var display,
      elem,
      values = [],
      index = 0,
      length = elements.length;

    // Determine new display value for elements that need to change
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }

      display = elem.style.display;
      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;
          if (!values[index]) {
            elem.style.display = "";
          }
        }
        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none";

          // Remember what we're overwriting
          dataPriv.set(elem, "display", display);
        }
      }
    }

    // Set the display of the elements in a second loop to avoid constant reflow
    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function() {
      return showHide(this, true);
    },
    hide: function() {
      return showHide(this);
    },
    toggle: function(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function() {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;

  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

  (function() {
    var fragment = document.createDocumentFragment(),
      div = fragment.appendChild(document.createElement("div")),
      input = document.createElement("input");

    // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)
    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");

    div.appendChild(input);

    // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

    // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

    // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.
    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  })();

  // We have to close these tags to support XHTML (#13200)
  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

    _default: [0, "", ""]
  };

  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption =
    wrapMap.thead;
  wrapMap.th = wrapMap.td;

  // Support: IE <=9 only
  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [
      1,
      "<select multiple='multiple'>",
      "</select>"
    ];
  }

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || (tag && nodeName(context, tag))) {
      return jQuery.merge([context], ret);
    }

    return ret;
  }

  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0,
      l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(
        elems[i],
        "globalEval",
        !refElements || dataPriv.get(refElements[i], "globalEval")
      );
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
      tmp,
      tag,
      wrap,
      attached,
      j,
      fragment = context.createDocumentFragment(),
      nodes = [],
      i = 0,
      l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

          // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem));

          // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div"));

          // Deserialize a standard representation
          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

          // Descend through wrappers to the right content
          j = wrap[0];
          while (j--) {
            tmp = tmp.lastChild;
          }

          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, tmp.childNodes);

          // Remember the top-level container
          tmp = fragment.firstChild;

          // Ensure the created nodes are orphaned (#12392)
          tmp.textContent = "";
        }
      }
    }

    // Remove wrapper from fragment
    fragment.textContent = "";

    i = 0;
    while ((elem = nodes[i++])) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }
        continue;
      }

      attached = isAttached(elem);

      // Append to fragment
      tmp = getAll(fragment.appendChild(elem), "script");

      // Preserve script evaluation history
      if (attached) {
        setGlobalEval(tmp);
      }

      // Capture executables
      if (scripts) {
        j = 0;
        while ((elem = tmp[j++])) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  var rkeyEvent = /^key/,
    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  }

  // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).
  function expectSync(elem, type) {
    return (elem === safeActiveElement()) === (type === "focus");
  }

  // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function on(elem, types, selector, data, fn, one) {
    var origFn, type;

    // Types can be a map of types/handlers
    if (typeof types === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for (type in types) {
        on(elem, type, selector, data, types[type], one);
      }
      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;
      fn = function(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      };

      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }
    return elem.each(function() {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {
    global: {},

    add: function(elem, types, handler, data, selector) {
      var handleObjIn,
        eventHandle,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.get(elem);

      // Only attach events to objects that accept data
      if (!acceptData(elem)) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)
      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function(e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" &&
            jQuery.event.triggered !== e.type
            ? jQuery.event.dispatch.apply(elem, arguments)
            : undefined;
        };
      }

      // Handle multiple events separated by a space
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }

        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;

        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};

        // handleObj is passed to all event handlers
        handleObj = jQuery.extend(
          {
            type: type,
            origType: origType,
            data: data,
            handler: handler,
            guid: handler.guid,
            selector: selector,
            needsContext:
              selector && jQuery.expr.match.needsContext.test(selector),
            namespace: namespaces.join(".")
          },
          handleObjIn
        );

        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if (
            !special.setup ||
            special.setup.call(elem, data, namespaces, eventHandle) === false
          ) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }

        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
    },

    // Detach an event or set of events from an element
    remove: function(elem, types, handler, selector, mappedTypes) {
      var j,
        origCount,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp =
          tmp[2] &&
          new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];

          if (
            (mappedTypes || origType === handleObj.origType) &&
            (!handler || handler.guid === handleObj.guid) &&
            (!tmp || tmp.test(handleObj.namespace)) &&
            (!selector ||
              selector === handleObj.selector ||
              (selector === "**" && handleObj.selector))
          ) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (
            !special.teardown ||
            special.teardown.call(elem, namespaces, elemData.handle) === false
          ) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      }

      // Remove data and the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },

    dispatch: function(nativeEvent) {
      var i,
        j,
        ret,
        matched,
        handleObj,
        handlerQueue,
        args = new Array(arguments.length),
        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix(nativeEvent),
        handlers =
          (dataPriv.get(this, "events") || Object.create(null))[event.type] ||
          [],
        special = jQuery.event.special[event.type] || {};

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (
        special.preDispatch &&
        special.preDispatch.call(this, event) === false
      ) {
        return;
      }

      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);

      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;

        j = 0;
        while (
          (handleObj = matched.handlers[j++]) &&
          !event.isImmediatePropagationStopped()
        ) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (
            !event.rnamespace ||
            handleObj.namespace === false ||
            event.rnamespace.test(handleObj.namespace)
          ) {
            event.handleObj = handleObj;
            event.data = handleObj.data;

            ret = (
              (jQuery.event.special[handleObj.origType] || {}).handle ||
              handleObj.handler
            ).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },

    handlers: function(event, handlers) {
      var i,
        handleObj,
        sel,
        matchedHandlers,
        matchedSelectors,
        handlerQueue = [],
        delegateCount = handlers.delegateCount,
        cur = event.target;

      // Find delegate handlers
      if (
        delegateCount &&
        // Support: IE <=9
        // Black-hole SVG <use> instance trees (trac-13180)
        cur.nodeType &&
        // Support: Firefox <=42
        // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
        // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
        // Support: IE 11 only
        // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
        !(event.type === "click" && event.button >= 1)
      ) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (
            cur.nodeType === 1 &&
            !(event.type === "click" && cur.disabled === true)
          ) {
            matchedHandlers = [];
            matchedSelectors = {};
            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i];

              // Don't conflict with Object.prototype properties (#13203)
              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext
                  ? jQuery(sel, this).index(cur) > -1
                  : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }
            if (matchedHandlers.length) {
              handlerQueue.push({ elem: cur, handlers: matchedHandlers });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      cur = this;
      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },

    addProp: function(name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,

        get: isFunction(hook)
          ? function() {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            }
          : function() {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },

        set: function(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },

    fix: function(originalEvent) {
      return originalEvent[jQuery.expando]
        ? originalEvent
        : new jQuery.Event(originalEvent);
    },

    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Claim the first handler
          if (
            rcheckableType.test(el.type) &&
            el.click &&
            nodeName(el, "input")
          ) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", returnTrue);
          }

          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Force setup before triggering a click
          if (
            rcheckableType.test(el.type) &&
            el.click &&
            nodeName(el, "input")
          ) {
            leverageNative(el, "click");
          }

          // Return non-false to allow normal event-path propagation
          return true;
        },

        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function(event) {
          var target = event.target;
          return (
            (rcheckableType.test(target.type) &&
              target.click &&
              nodeName(target, "input") &&
              dataPriv.get(target, "click")) ||
            nodeName(target, "a")
          );
        }
      },

      beforeunload: {
        postDispatch: function(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  };

  // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.
  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }
      return;
    }

    // Register the controller as a special universal handler for all event namespaces
    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function(event) {
        var notAsync,
          result,
          saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if (!saved.length) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = slice.call(arguments);
            dataPriv.set(this, type, saved);

            // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous
            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);
            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = {};
            }
            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();
              return result.value;
            }

            // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.
          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          }

          // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments
        } else if (saved.length) {
          // ...and capture the result
          dataPriv.set(this, type, {
            value: jQuery.event.trigger(
              // Support: IE <=9 - 11+
              // Extend with the prototype to reset the above stopImmediatePropagation()
              jQuery.extend(saved[0], jQuery.Event.prototype),
              saved.slice(1),
              this
            )
          });

          // Abort handling of the native event
          event.stopImmediatePropagation();
        }
      }
    });
  }

  jQuery.removeEvent = function(elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function(src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }

    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented =
        src.defaultPrevented ||
        (src.defaultPrevented === undefined &&
          // Support: Android <=2.3 only
          src.returnValue === false)
          ? returnTrue
          : returnFalse;

      // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)
      this.target =
        src.target && src.target.nodeType === 3
          ? src.target.parentNode
          : src.target;

      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget;

      // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = (src && src.timeStamp) || Date.now();

    // Mark it as fixed
    this[jQuery.expando] = true;
  };

  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,

    preventDefault: function() {
      var e = this.originalEvent;

      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function() {
      var e = this.originalEvent;

      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function() {
      var e = this.originalEvent;

      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  };

  // Includes all common event props including KeyEvent and MouseEvent specific props
  jQuery.each(
    {
      altKey: true,
      bubbles: true,
      cancelable: true,
      changedTouches: true,
      ctrlKey: true,
      detail: true,
      eventPhase: true,
      metaKey: true,
      pageX: true,
      pageY: true,
      shiftKey: true,
      view: true,
      char: true,
      code: true,
      charCode: true,
      key: true,
      keyCode: true,
      button: true,
      buttons: true,
      clientX: true,
      clientY: true,
      offsetX: true,
      offsetY: true,
      pointerId: true,
      pointerType: true,
      screenX: true,
      screenY: true,
      targetTouches: true,
      toElement: true,
      touches: true,

      which: function(event) {
        var button = event.button;

        // Add which for key events
        if (event.which == null && rkeyEvent.test(event.type)) {
          return event.charCode != null ? event.charCode : event.keyCode;
        }

        // Add which for click: 1 === left; 2 === middle; 3 === right
        if (
          !event.which &&
          button !== undefined &&
          rmouseEvent.test(event.type)
        ) {
          if (button & 1) {
            return 1;
          }

          if (button & 2) {
            return 3;
          }

          if (button & 4) {
            return 2;
          }

          return 0;
        }

        return event.which;
      }
    },
    jQuery.event.addProp
  );

  jQuery.each({ focus: "focusin", blur: "focusout" }, function(
    type,
    delegateType
  ) {
    jQuery.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function() {
        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, expectSync);

        // Return false to allow normal processing in the caller
        return false;
      },
      trigger: function() {
        // Force setup before trigger
        leverageNative(this, type);

        // Return non-false to allow normal event-path propagation
        return true;
      },

      delegateType: delegateType
    };
  });

  // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).
  jQuery.each(
    {
      mouseenter: "mouseover",
      mouseleave: "mouseout",
      pointerenter: "pointerover",
      pointerleave: "pointerout"
    },
    function(orig, fix) {
      jQuery.event.special[orig] = {
        delegateType: fix,
        bindType: fix,

        handle: function(event) {
          var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj;

          // For mouseenter/leave call the handler if related is outside the target.
          // NB: No relatedTarget if the mouse left/entered the browser window
          if (
            !related ||
            (related !== target && !jQuery.contains(target, related))
          ) {
            event.type = handleObj.origType;
            ret = handleObj.handler.apply(this, arguments);
            event.type = fix;
          }
          return ret;
        }
      };
    }
  );

  jQuery.fn.extend({
    on: function(types, selector, data, fn) {
      return on(this, types, selector, data, fn);
    },
    one: function(types, selector, data, fn) {
      return on(this, types, selector, data, fn, 1);
    },
    off: function(types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(
          handleObj.namespace
            ? handleObj.origType + "." + handleObj.namespace
            : handleObj.origType,
          handleObj.selector,
          handleObj.handler
        );
        return this;
      }
      if (typeof types === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function() {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });

  var // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

  // Prefer a tbody over its parent table for containing new rows
  function manipulationTarget(elem, content) {
    if (
      nodeName(elem, "table") &&
      nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")
    ) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  }

  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    }

    // 1. Copy private data: events, handlers, etc.
    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;

      if (events) {
        dataPriv.remove(dest, "handle events");

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }

    // 2. Copy user data
    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);

      dataUser.set(dest, udataCur);
    }
  }

  // Fix IE bugs, see support tests
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked;

      // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);

    var fragment,
      first,
      scripts,
      hasScripts,
      node,
      doc,
      i = 0,
      l = collection.length,
      iNoClone = l - 1,
      value = args[0],
      valueIsFunction = isFunction(value);

    // We can't cloneNode fragments that contain checked, in WebKit
    if (
      valueIsFunction ||
      (l > 1 &&
        typeof value === "string" &&
        !support.checkClone &&
        rchecked.test(value))
    ) {
      return collection.each(function(index) {
        var self = collection.eq(index);
        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }
        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(
        args,
        collection[0].ownerDocument,
        false,
        collection,
        ignored
      );
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      }

      // Require either new content or an interest in ignored elements to invoke the callback
      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length;

        // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).
        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true);

            // Keep references to cloned scripts for later restoration
            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument;

          // Reenable scripts
          jQuery.map(scripts, restoreScript);

          // Evaluate executable scripts on first document insertion
          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];
            if (
              rscriptType.test(node.type || "") &&
              !dataPriv.access(node, "globalEval") &&
              jQuery.contains(doc, node)
            ) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(
                    node.src,
                    {
                      nonce: node.nonce || node.getAttribute("nonce")
                    },
                    doc
                  );
                }
              } else {
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function remove(elem, selector, keepData) {
    var node,
      nodes = selector ? jQuery.filter(selector, elem) : elem,
      i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }
        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function(html) {
      return html;
    },

    clone: function(elem, dataAndEvents, deepDataAndEvents) {
      var i,
        l,
        srcElements,
        destElements,
        clone = elem.cloneNode(true),
        inPage = isAttached(elem);

      // Fix IE cloning issues
      if (
        !support.noCloneChecked &&
        (elem.nodeType === 1 || elem.nodeType === 11) &&
        !jQuery.isXMLDoc(elem)
      ) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }

      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }

      // Preserve script evaluation history
      destElements = getAll(clone, "script");
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      }

      // Return the cloned set
      return clone;
    },

    cleanData: function(elems) {
      var data,
        elem,
        type,
        special = jQuery.event.special,
        i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if ((data = elem[dataPriv.expando])) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);

                  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }

            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataPriv.expando] = undefined;
          }
          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });

  jQuery.fn.extend({
    detach: function(selector) {
      return remove(this, selector, true);
    },

    remove: function(selector) {
      return remove(this, selector);
    },

    text: function(value) {
      return access(
        this,
        function(value) {
          return value === undefined
            ? jQuery.text(this)
            : this.empty().each(function() {
                if (
                  this.nodeType === 1 ||
                  this.nodeType === 11 ||
                  this.nodeType === 9
                ) {
                  this.textContent = value;
                }
              });
        },
        null,
        value,
        arguments.length
      );
    },

    append: function() {
      return domManip(this, arguments, function(elem) {
        if (
          this.nodeType === 1 ||
          this.nodeType === 11 ||
          this.nodeType === 9
        ) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },

    prepend: function() {
      return domManip(this, arguments, function(elem) {
        if (
          this.nodeType === 1 ||
          this.nodeType === 11 ||
          this.nodeType === 9
        ) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },

    before: function() {
      return domManip(this, arguments, function(elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },

    after: function() {
      return domManip(this, arguments, function(elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },

    empty: function() {
      var elem,
        i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));

          // Remove any remaining nodes
          elem.textContent = "";
        }
      }

      return this;
    },

    clone: function(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents =
        deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

      return this.map(function() {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },

    html: function(value) {
      return access(
        this,
        function(value) {
          var elem = this[0] || {},
            i = 0,
            l = this.length;

          if (value === undefined && elem.nodeType === 1) {
            return elem.innerHTML;
          }

          // See if we can take a shortcut and just use innerHTML
          if (
            typeof value === "string" &&
            !rnoInnerhtml.test(value) &&
            !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]
          ) {
            value = jQuery.htmlPrefilter(value);

            try {
              for (; i < l; i++) {
                elem = this[i] || {};

                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                  jQuery.cleanData(getAll(elem, false));
                  elem.innerHTML = value;
                }
              }

              elem = 0;

              // If using innerHTML throws an exception, use the fallback method
            } catch (e) {}
          }

          if (elem) {
            this.empty().append(value);
          }
        },
        null,
        value,
        arguments.length
      );
    },

    replaceWith: function() {
      var ignored = [];

      // Make the changes, replacing each non-ignored context element with the new content
      return domManip(
        this,
        arguments,
        function(elem) {
          var parent = this.parentNode;

          if (jQuery.inArray(this, ignored) < 0) {
            jQuery.cleanData(getAll(this));
            if (parent) {
              parent.replaceChild(elem, this);
            }
          }

          // Force callback invocation
        },
        ignored
      );
    }
  });

  jQuery.each(
    {
      appendTo: "append",
      prependTo: "prepend",
      insertBefore: "before",
      insertAfter: "after",
      replaceAll: "replaceWith"
    },
    function(name, original) {
      jQuery.fn[name] = function(selector) {
        var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

        for (; i <= last; i++) {
          elems = i === last ? this : this.clone(true);
          jQuery(insert[i])[original](elems);

          // Support: Android <=4.0 only, PhantomJS 1 only
          // .get() because push.apply(_, arraylike) throws on ancient WebKit
          push.apply(ret, elems.get());
        }

        return this.pushStack(ret);
      };
    }
  );
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var getStyles = function(elem) {
    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var swap = function(elem, options, callback) {
    var ret,
      name,
      old = {};

    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.call(elem);

    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  var rboxStyle = new RegExp(cssExpand.join("|"), "i");

  (function() {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText =
        "position:absolute;left:-11111px;width:60px;" +
        "margin-top:1px;padding:0;border:0";
      div.style.cssText =
        "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
        "margin:auto;border:1px;padding:1px;" +
        "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);

      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%";

      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't
      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

      // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements
      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

      // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)
      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

      documentElement.removeChild(container);

      // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed
      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
      boxSizingReliableVal,
      scrollboxSizeVal,
      pixelBoxStylesVal,
      reliableTrDimensionsVal,
      reliableMarginLeftVal,
      container = document.createElement("div"),
      div = document.createElement("div");

    // Finish early in limited (non-browser) environments
    if (!div.style) {
      return;
    }

    // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)
    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";

    jQuery.extend(support, {
      boxSizingReliable: function() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function() {
        computeStyleTests();
        return scrollboxSizeVal;
      },

      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      reliableTrDimensions: function() {
        var table, tr, trChild, trStyle;
        if (reliableTrDimensionsVal == null) {
          table = document.createElement("table");
          tr = document.createElement("tr");
          trChild = document.createElement("div");

          table.style.cssText = "position:absolute;left:-11111px";
          tr.style.height = "1px";
          trChild.style.height = "9px";

          documentElement
            .appendChild(table)
            .appendChild(tr)
            .appendChild(trChild);

          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal = parseInt(trStyle.height) > 3;

          documentElement.removeChild(table);
        }
        return reliableTrDimensionsVal;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
      minWidth,
      maxWidth,
      ret,
      // Support: Firefox 51+
      // Retrieving style before computed somehow
      // fixes an issue with getting wrong values
      // on detached elements
      style = elem.style;

    computed = computed || getStyles(elem);

    // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)
    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      if (ret === "" && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      }

      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values
      if (
        !support.pixelBoxStyles() &&
        rnumnonpx.test(ret) &&
        rboxStyle.test(name)
      ) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined
      ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + ""
      : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }

        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var cssPrefixes = ["Webkit", "Moz", "ms"],
    emptyStyle = document.createElement("div").style,
    vendorProps = {};

  // Return a vendor-prefixed property or undefined
  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
      i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  }

  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
  function finalPropName(name) {
    var final = jQuery.cssProps[name] || vendorProps[name];

    if (final) {
      return final;
    }
    if (name in emptyStyle) {
      return name;
    }
    return (vendorProps[name] = vendorPropName(name) || name);
  }

  var // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    rcustomProp = /^--/,
    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
    cssNormalTransform = {
      letterSpacing: "0",
      fontWeight: "400"
    };

  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches
      ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px")
      : value;
  }

  function boxModelAdjustment(
    elem,
    dimension,
    box,
    isBorderBox,
    styles,
    computedVal
  ) {
    var i = dimension === "width" ? 1 : 0,
      extra = 0,
      delta = 0;

    // Adjustment may not be necessary
    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      }

      // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

        // For "border" or "margin", add border
        if (box !== "padding") {
          delta += jQuery.css(
            elem,
            "border" + cssExpand[i] + "Width",
            true,
            styles
          );

          // But still keep track of it otherwise
        } else {
          extra += jQuery.css(
            elem,
            "border" + cssExpand[i] + "Width",
            true,
            styles
          );
        }

        // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"
      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        }

        // For "content" or "padding", subtract border
        if (box !== "margin") {
          delta -= jQuery.css(
            elem,
            "border" + cssExpand[i] + "Width",
            true,
            styles
          );
        }
      }
    }

    // Account for positive content-box scroll gutter when requested by providing computedVal
    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta +=
        Math.max(
          0,
          Math.ceil(
            elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] -
              computedVal -
              delta -
              extra -
              0.5

            // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
            // Use an explicit zero to avoid NaN (gh-3964)
          )
        ) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
      // Fake content-box until we know it's needed to know the true value.
      boxSizingNeeded = !support.boxSizingReliable() || extra,
      isBorderBox =
        boxSizingNeeded &&
        jQuery.css(elem, "boxSizing", false, styles) === "border-box",
      valueIsBorderBox = isBorderBox,
      val = curCSS(elem, dimension, styles),
      offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);

    // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.
    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }
      val = "auto";
    }

    // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.
    if (
      ((!support.boxSizingReliable() && isBorderBox) ||
        // Support: IE 10 - 11+, Edge 15 - 18+
        // IE/Edge misreport `getComputedStyle` of table rows with width/height
        // set in CSS while `offset*` properties report correct values.
        // Interestingly, in some cases IE 9 doesn't suffer from this issue.
        (!support.reliableTrDimensions() && nodeName(elem, "tr")) ||
        // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        val === "auto" ||
        // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        (!parseFloat(val) &&
          jQuery.css(elem, "display", false, styles) === "inline")) &&
      // Make sure the element is visible & connected
      elem.getClientRects().length
    ) {
      isBorderBox =
        jQuery.css(elem, "boxSizing", false, styles) === "border-box";

      // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.
      valueIsBorderBox = offsetProp in elem;
      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    }

    // Normalize "" and auto
    val = parseFloat(val) || 0;

    // Adjust for the element's box model
    return (
      val +
      boxModelAdjustment(
        elem,
        dimension,
        extra || (isBorderBox ? "border" : "content"),
        valueIsBorderBox,
        styles,

        // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val
      ) +
      "px"
    );
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },

    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      animationIterationCount: true,
      columnCount: true,
      fillOpacity: true,
      flexGrow: true,
      flexShrink: true,
      fontWeight: true,
      gridArea: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnStart: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowStart: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      widows: true,
      zIndex: true,
      zoom: true
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},

    // Get and set the style property on a DOM Node
    style: function(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }

      // Make sure that we're working with the right name
      var ret,
        type,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name),
        style = elem.style;

      // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Gets hook for the prefixed version, then unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // Check if we're setting a value
      if (value !== undefined) {
        type = typeof value;

        // Convert "+=" or "-=" to relative numbers (#7345)
        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret);

          // Fixes bug #9237
          type = "number";
        }

        // Make sure that null and NaN values aren't set (#7116)
        if (value == null || value !== value) {
          return;
        }

        // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.
        if (type === "number" && !isCustomProp) {
          value += (ret && ret[3]) || (jQuery.cssNumber[origName] ? "" : "px");
        }

        // background-* props affect original clone's values
        if (
          !support.clearCloneStyle &&
          value === "" &&
          name.indexOf("background") === 0
        ) {
          style[name] = "inherit";
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if (
          !hooks ||
          !("set" in hooks) ||
          (value = hooks.set(elem, value, extra)) !== undefined
        ) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (
          hooks &&
          "get" in hooks &&
          (ret = hooks.get(elem, false, extra)) !== undefined
        ) {
          return ret;
        }

        // Otherwise just get the value from the style object
        return style[name];
      }
    },

    css: function(elem, name, extra, styles) {
      var val,
        num,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name);

      // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Try prefixed name followed by the unprefixed name
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // If a hook was provided get the computed value from there
      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      }

      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }

      // Convert "normal" to computed value
      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }

      // Make numeric if forced or a qualifier was provided and val looks numeric
      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });

  jQuery.each(["height", "width"], function(_i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) &&
            // Support: Safari 8+
            // Table columns in Safari have non-zero offsetWidth & zero
            // getBoundingClientRect().width unless display is changed.
            // Support: IE <=11 only
            // Running getBoundingClientRect on a disconnected node
            // in IE throws an error.
            (!elem.getClientRects().length ||
              !elem.getBoundingClientRect().width)
            ? swap(elem, cssShow, function() {
                return getWidthOrHeight(elem, dimension, extra);
              })
            : getWidthOrHeight(elem, dimension, extra);
        }
      },

      set: function(elem, value, extra) {
        var matches,
          styles = getStyles(elem),
          // Only read styles.position if the test has a chance to fail
          // to avoid forcing a reflow.
          scrollboxSizeBuggy =
            !support.scrollboxSize() && styles.position === "absolute",
          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
          boxSizingNeeded = scrollboxSizeBuggy || extra,
          isBorderBox =
            boxSizingNeeded &&
            jQuery.css(elem, "boxSizing", false, styles) === "border-box",
          subtract = extra
            ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles)
            : 0;

        // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)
        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(
            elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] -
              parseFloat(styles[dimension]) -
              boxModelAdjustment(elem, dimension, "border", false, styles) -
              0.5
          );
        }

        // Convert to pixels if value adjustment is needed
        if (
          subtract &&
          (matches = rcssNum.exec(value)) &&
          (matches[3] || "px") !== "px"
        ) {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });

  jQuery.cssHooks.marginLeft = addGetHookIf(
    support.reliableMarginLeft,
    function(elem, computed) {
      if (computed) {
        return (
          (parseFloat(curCSS(elem, "marginLeft")) ||
            elem.getBoundingClientRect().left -
              swap(elem, { marginLeft: 0 }, function() {
                return elem.getBoundingClientRect().left;
              })) + "px"
        );
      }
    }
  );

  // These hooks are used by animate to expand properties
  jQuery.each(
    {
      margin: "",
      padding: "",
      border: "Width"
    },
    function(prefix, suffix) {
      jQuery.cssHooks[prefix + suffix] = {
        expand: function(value) {
          var i = 0,
            expanded = {},
            // Assumes a single number if not a string
            parts = typeof value === "string" ? value.split(" ") : [value];

          for (; i < 4; i++) {
            expanded[prefix + cssExpand[i] + suffix] =
              parts[i] || parts[i - 2] || parts[0];
          }

          return expanded;
        }
      };

      if (prefix !== "margin") {
        jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
      }
    }
  );

  jQuery.fn.extend({
    css: function(name, value) {
      return access(
        this,
        function(elem, name, value) {
          var styles,
            len,
            map = {},
            i = 0;

          if (Array.isArray(name)) {
            styles = getStyles(elem);
            len = name.length;

            for (; i < len; i++) {
              map[name[i]] = jQuery.css(elem, name[i], false, styles);
            }

            return map;
          }

          return value !== undefined
            ? jQuery.style(elem, name, value)
            : jQuery.css(elem, name);
        },
        name,
        value,
        arguments.length > 1
      );
    }
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;

  Tween.prototype = {
    constructor: Tween,
    init: function(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function() {
      var hooks = Tween.propHooks[this.prop];

      return hooks && hooks.get
        ? hooks.get(this)
        : Tween.propHooks._default.get(this);
    },
    run: function(percent) {
      var eased,
        hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](
          percent,
          this.options.duration * percent,
          0,
          1,
          this.options.duration
        );
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    }
  };

  Tween.prototype.init.prototype = Tween.prototype;

  Tween.propHooks = {
    _default: {
      get: function(tween) {
        var result;

        // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.
        if (
          tween.elem.nodeType !== 1 ||
          (tween.elem[tween.prop] != null &&
            tween.elem.style[tween.prop] == null)
        ) {
          return tween.elem[tween.prop];
        }

        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = jQuery.css(tween.elem, tween.prop, "");

        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === "auto" ? 0 : result;
      },
      set: function(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (
          tween.elem.nodeType === 1 &&
          (jQuery.cssHooks[tween.prop] ||
            tween.elem.style[finalPropName(tween.prop)] != null)
        ) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  };

  // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };

  jQuery.easing = {
    linear: function(p) {
      return p;
    },
    swing: function(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };

  jQuery.fx = Tween.prototype.init;

  // Back compat <1.8 extension point
  jQuery.fx.step = {};

  var fxNow,
    inProgress,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  }

  // Animations created synchronously will run synchronously
  function createFxNow() {
    window.setTimeout(function() {
      fxNow = undefined;
    });
    return (fxNow = Date.now());
  }

  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which,
      i = 0,
      attrs = { height: type };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
      collection = (Animation.tweeners[prop] || []).concat(
        Animation.tweeners["*"]
      ),
      index = 0,
      length = collection.length;
    for (; index < length; index++) {
      if ((tween = collection[index].call(animation, prop, value))) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
      value,
      toggle,
      hooks,
      oldfire,
      propTween,
      restoreDisplay,
      display,
      isBox = "width" in props || "height" in props,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHiddenWithinTree(elem),
      dataShow = dataPriv.get(elem, "fxshow");

    // Queue-skipping animations hijack the fx hooks
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function() {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;

      anim.always(function() {
        // Ensure the complete handler is called before this completes
        anim.always(function() {
          hooks.unqueued--;
          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    }

    // Detect show/hide animations
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";
        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true;

            // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }
        orig[prop] = (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
      }
    }

    // Bail out if this is a no-op like .hide().hide()
    propTween = !jQuery.isEmptyObject(props);
    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    }

    // Restrict "overflow" and "display" styles during box animations
    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY];

      // Identify a display type, preferring old show/hide data over the CSS cascade
      restoreDisplay = dataShow && dataShow.display;
      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }
      display = jQuery.css(elem, "display");
      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, "display");
          showHide([elem]);
        }
      }

      // Animate inline elements as inline-block
      if (
        display === "inline" ||
        (display === "inline-block" && restoreDisplay != null)
      ) {
        if (jQuery.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function() {
              style.display = restoreDisplay;
            });
            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }
          style.display = "inline-block";
        }
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function() {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }

    // Implement show/hide animations
    propTween = false;
    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        }

        // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
        if (toggle) {
          dataShow.hidden = !hidden;
        }

        // Show elements before animating them
        if (hidden) {
          showHide([elem], true);
        }

        /* eslint-disable no-loop-func */

        anim.done(function() {
          /* eslint-enable no-loop-func */

          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }
          dataPriv.remove(elem, "fxshow");
          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      }

      // Per-property setup
      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;
        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];
      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name];

        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
      stopped,
      index = 0,
      length = Animation.prefilters.length,
      deferred = jQuery.Deferred().always(function() {
        // Don't match elem in the :animated selector
        delete tick.elem;
      }),
      tick = function() {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max(
            0,
            animation.startTime + animation.duration - currentTime
          ),
          // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
          temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }

        deferred.notifyWith(elem, [animation, percent, remaining]);

        // If there's more to do, yield
        if (percent < 1 && length) {
          return remaining;
        }

        // If this was an empty animation, synthesize a final progress notification
        if (!length) {
          deferred.notifyWith(elem, [animation, 1, 0]);
        }

        // Resolve the animation and report its conclusion
        deferred.resolveWith(elem, [animation]);
        return false;
      },
      animation = deferred.promise({
        elem: elem,
        props: jQuery.extend({}, properties),
        opts: jQuery.extend(
          true,
          {
            specialEasing: {},
            easing: jQuery.easing._default
          },
          options
        ),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function(prop, end) {
          var tween = jQuery.Tween(
            elem,
            animation.opts,
            prop,
            end,
            animation.opts.specialEasing[prop] || animation.opts.easing
          );
          animation.tweens.push(tween);
          return tween;
        },
        stop: function(gotoEnd) {
          var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }

          // Resolve when we played the last frame; otherwise, reject
          if (gotoEnd) {
            deferred.notifyWith(elem, [animation, 1, 0]);
            deferred.resolveWith(elem, [animation, gotoEnd]);
          } else {
            deferred.rejectWith(elem, [animation, gotoEnd]);
          }
          return this;
        }
      }),
      props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(
        animation,
        elem,
        props,
        animation.opts
      );
      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(
            animation.elem,
            animation.opts.queue
          ).stop = result.stop.bind(result);
        }
        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }

    // Attach callbacks from options
    animation
      .progress(animation.opts.progress)
      .done(animation.opts.done, animation.opts.complete)
      .fail(animation.opts.fail)
      .always(animation.opts.always);

    jQuery.fx.timer(
      jQuery.extend(tick, {
        elem: elem,
        anim: animation,
        queue: animation.opts.queue
      })
    );

    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [
        function(prop, value) {
          var tween = this.createTween(prop, value);
          adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
          return tween;
        }
      ]
    },

    tweener: function(props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
        index = 0,
        length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },

    prefilters: [defaultPrefilter],

    prefilter: function(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });

  jQuery.speed = function(speed, easing, fn) {
    var opt =
      speed && typeof speed === "object"
        ? jQuery.extend({}, speed)
        : {
            complete: fn || (!fn && easing) || (isFunction(speed) && speed),
            duration: speed,
            easing: (fn && easing) || (easing && !isFunction(easing) && easing)
          };

    // Go to the end state if fx are off
    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    }

    // Normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function() {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return (
        this.filter(isHiddenWithinTree)
          .css("opacity", 0)
          .show()

          // Animate to the value specified
          .end()
          .animate({ opacity: to }, speed, easing, callback)
      );
    },
    animate: function(prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
        optall = jQuery.speed(speed, easing, callback),
        doAnimation = function() {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, jQuery.extend({}, prop), optall);

          // Empty animations, or finishing resolves immediately
          if (empty || dataPriv.get(this, "finish")) {
            anim.stop(true);
          }
        };
      doAnimation.finish = doAnimation;

      return empty || optall.queue === false
        ? this.each(doAnimation)
        : this.queue(optall.queue, doAnimation);
    },
    stop: function(type, clearQueue, gotoEnd) {
      var stopQueue = function(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue) {
        this.queue(type || "fx", []);
      }

      return this.each(function() {
        var dequeue = true,
          index = type != null && type + "queueHooks",
          timers = jQuery.timers,
          data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--; ) {
          if (
            timers[index].elem === this &&
            (type == null || timers[index].queue === type)
          ) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }

        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function(type) {
      if (type !== false) {
        type = type || "fx";
      }
      return this.each(function() {
        var index,
          data = dataPriv.get(this),
          queue = data[type + "queue"],
          hooks = data[type + "queueHooks"],
          timers = jQuery.timers,
          length = queue ? queue.length : 0;

        // Enable finishing flag on private data
        data.finish = true;

        // Empty the queue first
        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }

        // Look for any active animations, and finish them
        for (index = timers.length; index--; ) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }

        // Look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }

        // Turn off finishing flag
        delete data.finish;
      });
    }
  });

  jQuery.each(["toggle", "show", "hide"], function(_i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function(speed, easing, callback) {
      return speed == null || typeof speed === "boolean"
        ? cssFn.apply(this, arguments)
        : this.animate(genFx(name, true), speed, easing, callback);
    };
  });

  // Generate shortcuts for custom animations
  jQuery.each(
    {
      slideDown: genFx("show"),
      slideUp: genFx("hide"),
      slideToggle: genFx("toggle"),
      fadeIn: { opacity: "show" },
      fadeOut: { opacity: "hide" },
      fadeToggle: { opacity: "toggle" }
    },
    function(name, props) {
      jQuery.fn[name] = function(speed, easing, callback) {
        return this.animate(props, speed, easing, callback);
      };
    }
  );

  jQuery.timers = [];
  jQuery.fx.tick = function() {
    var timer,
      i = 0,
      timers = jQuery.timers;

    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i];

      // Run the timer and safely remove it when done (allowing for external removal)
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };

  jQuery.fx.timer = function(timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;
  jQuery.fx.start = function() {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function() {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,

    // Default speed
    _default: 400
  };

  // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
  jQuery.fn.delay = function(time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";

    return this.queue(type, function(next, hooks) {
      var timeout = window.setTimeout(next, time);
      hooks.stop = function() {
        window.clearTimeout(timeout);
      };
    });
  };

  (function() {
    var input = document.createElement("input"),
      select = document.createElement("select"),
      opt = select.appendChild(document.createElement("option"));

    input.type = "checkbox";

    // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== "";

    // Support: IE <=11 only
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: IE <=11 only
    // An input loses its value after becoming a radio
    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
    attrHandle = jQuery.expr.attrHandle;

  jQuery.fn.extend({
    attr: function(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },

    removeAttr: function(name) {
      return this.each(function() {
        jQuery.removeAttr(this, name);
      });
    }
  });

  jQuery.extend({
    attr: function(elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set attributes on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      }

      // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks =
          jQuery.attrHooks[name.toLowerCase()] ||
          (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (
          hooks &&
          "set" in hooks &&
          (ret = hooks.set(elem, value, name)) !== undefined
        ) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name);

      // Non-existent attributes return null, we normalize to undefined
      return ret == null ? undefined : ret;
    },

    attrHooks: {
      type: {
        set: function(elem, value) {
          if (
            !support.radioValue &&
            value === "radio" &&
            nodeName(elem, "input")
          ) {
            var val = elem.value;
            elem.setAttribute("type", value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    },

    removeAttr: function(elem, value) {
      var name,
        i = 0,
        // Attribute names can contain non-HTML whitespace characters
        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
        attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while ((name = attrNames[i++])) {
          elem.removeAttribute(name);
        }
      }
    }
  });

  // Hooks for boolean attributes
  boolHook = {
    set: function(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };

  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(_i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function(elem, name, isXML) {
      var ret,
        handle,
        lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }
      return ret;
    };
  });

  var rfocusable = /^(?:input|select|textarea|button)$/i,
    rclickable = /^(?:a|area)$/i;

  jQuery.fn.extend({
    prop: function(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },

    removeProp: function(name) {
      return this.each(function() {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });

  jQuery.extend({
    prop: function(elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set properties on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (
          hooks &&
          "set" in hooks &&
          (ret = hooks.set(elem, value, name)) !== undefined
        ) {
          return ret;
        }

        return (elem[name] = value);
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },

    propHooks: {
      tabIndex: {
        get: function(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (
            rfocusable.test(elem.nodeName) ||
            (rclickable.test(elem.nodeName) && elem.href)
          ) {
            return 0;
          }

          return -1;
        }
      }
    },

    propFix: {
      for: "htmlFor",
      class: "className"
    }
  });

  // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function(elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      },
      set: function(elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(
    [
      "tabIndex",
      "readOnly",
      "maxLength",
      "cellSpacing",
      "cellPadding",
      "rowSpan",
      "colSpan",
      "useMap",
      "frameBorder",
      "contentEditable"
    ],
    function() {
      jQuery.propFix[this.toLowerCase()] = this;
    }
  );

  // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  function getClass(elem) {
    return (elem.getAttribute && elem.getAttribute("class")) || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }
    return [];
  }

  jQuery.fn.extend({
    addClass: function(value) {
      var classes,
        elem,
        cur,
        curValue,
        clazz,
        j,
        finalValue,
        i = 0;

      if (isFunction(value)) {
        return this.each(function(j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classes = classesToArray(value);

      if (classes.length) {
        while ((elem = this[i++])) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;
            while ((clazz = classes[j++])) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },

    removeClass: function(value) {
      var classes,
        elem,
        cur,
        curValue,
        clazz,
        j,
        finalValue,
        i = 0;

      if (isFunction(value)) {
        return this.each(function(j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classes = classesToArray(value);

      if (classes.length) {
        while ((elem = this[i++])) {
          curValue = getClass(elem);

          // This expression is here for better compressibility (see addClass)
          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;
            while ((clazz = classes[j++])) {
              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },

    toggleClass: function(value, stateVal) {
      var type = typeof value,
        isValidValue = type === "string" || Array.isArray(value);

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (isFunction(value)) {
        return this.each(function(i) {
          jQuery(this).toggleClass(
            value.call(this, i, getClass(this), stateVal),
            stateVal
          );
        });
      }

      return this.each(function() {
        var className, i, self, classNames;

        if (isValidValue) {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = classesToArray(value);

          while ((className = classNames[i++])) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }

          // Toggle whole class name
        } else if (value === undefined || type === "boolean") {
          className = getClass(this);
          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          }

          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          if (this.setAttribute) {
            this.setAttribute(
              "class",
              className || value === false
                ? ""
                : dataPriv.get(this, "__className__") || ""
            );
          }
        }
      });
    },

    hasClass: function(selector) {
      var className,
        elem,
        i = 0;

      className = " " + selector + " ";
      while ((elem = this[i++])) {
        if (
          elem.nodeType === 1 &&
          (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1
        ) {
          return true;
        }
      }

      return false;
    }
  });

  var rreturn = /\r/g;

  jQuery.fn.extend({
    val: function(value) {
      var hooks,
        ret,
        valueIsFunction,
        elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks =
            jQuery.valHooks[elem.type] ||
            jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (
            hooks &&
            "get" in hooks &&
            (ret = hooks.get(elem, "value")) !== undefined
          ) {
            return ret;
          }

          ret = elem.value;

          // Handle most common string cases
          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          }

          // Handle cases where value is null/undef or number
          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);

      return this.each(function(i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function(value) {
            return value == null ? "" : value + "";
          });
        }

        hooks =
          jQuery.valHooks[this.type] ||
          jQuery.valHooks[this.nodeName.toLowerCase()];

        // If set returns undefined, fall back to normal setting
        if (
          !hooks ||
          !("set" in hooks) ||
          hooks.set(this, val, "value") === undefined
        ) {
          this.value = val;
        }
      });
    }
  });

  jQuery.extend({
    valHooks: {
      option: {
        get: function(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null
            ? val
            : // Support: IE <=10 - 11 only
              // option.text throws exceptions (#14686, #14858)
              // Strip and collapse whitespace
              // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
              stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function(elem) {
          var value,
            option,
            i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one",
            values = one ? null : [],
            max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          }

          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];

            // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)
            if (
              (option.selected || i === index) &&
              // Don't return options that are disabled or in a disabled optgroup
              !option.disabled &&
              (!option.parentNode.disabled ||
                !nodeName(option.parentNode, "optgroup"))
            ) {
              // Get the specific value for the option
              value = jQuery(option).val();

              // We don't need an array for one selects
              if (one) {
                return value;
              }

              // Multi-Selects return an array
              values.push(value);
            }
          }

          return values;
        },

        set: function(elem, value) {
          var optionSet,
            option,
            options = elem.options,
            values = jQuery.makeArray(value),
            i = options.length;

          while (i--) {
            option = options[i];

            /* eslint-disable no-cond-assign */

            if (
              (option.selected =
                jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1)
            ) {
              optionSet = true;
            }

            /* eslint-enable no-cond-assign */
          }

          // Force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });

  // Radios and checkboxes getter/setter
  jQuery.each(["radio", "checkbox"], function() {
    jQuery.valHooks[this] = {
      set: function(elem, value) {
        if (Array.isArray(value)) {
          return (elem.checked =
            jQuery.inArray(jQuery(elem).val(), value) > -1);
        }
      }
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function(elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  });

  // Return jQuery for attributes-only inclusion

  support.focusin = "onfocusin" in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    stopPropagationCallback = function(e) {
      e.stopPropagation();
    };

  jQuery.extend(jQuery.event, {
    trigger: function(event, data, elem, onlyHandlers) {
      var i,
        cur,
        tmp,
        bubbleType,
        ontype,
        handle,
        special,
        lastElement,
        eventPath = [elem || document],
        type = hasOwn.call(event, "type") ? event.type : event,
        namespaces = hasOwn.call(event, "namespace")
          ? event.namespace.split(".")
          : [];

      cur = lastElement = tmp = elem = elem || document;

      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(":") < 0 && "on" + type;

      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando]
        ? event
        : new jQuery.Event(type, typeof event === "object" && event);

      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace
        ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)")
        : null;

      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);

      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (
        !onlyHandlers &&
        special.trigger &&
        special.trigger.apply(elem, data) === false
      ) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }

      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type;

        // jQuery handler
        handle =
          (dataPriv.get(cur, "events") || Object.create(null))[event.type] &&
          dataPriv.get(cur, "handle");
        if (handle) {
          handle.apply(cur, data);
        }

        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if (
          (!special._default ||
            special._default.apply(eventPath.pop(), data) === false) &&
          acceptData(elem)
        ) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },

    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });

      jQuery.event.trigger(e, null, elem);
    }
  });

  jQuery.fn.extend({
    trigger: function(type, data) {
      return this.each(function() {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function(type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });

  // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
  if (!support.focusin) {
    jQuery.each({ focus: "focusin", blur: "focusout" }, function(orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function() {
          // Handle: regular nodes (via `this.ownerDocument`), window
          // (via `this.document`) & document (via `this`).
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function() {
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }
  var location = window.location;

  var nonce = { guid: Date.now() };

  var rquery = /\?/;

  // Cross-browser xml parsing
  jQuery.parseXML = function(data) {
    var xml;
    if (!data || typeof data !== "string") {
      return null;
    }

    // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.
    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {
      xml = undefined;
    }

    if (!xml || xml.getElementsByTagName("parsererror").length) {
      jQuery.error("Invalid XML: " + data);
    }
    return xml;
  };

  var rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function(i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(
            prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
            v,
            traditional,
            add
          );
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }

  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function(a, traditional) {
    var prefix,
      s = [],
      add = function(key, valueOrFunction) {
        // If value is a function, invoke it and use its return value
        var value = isFunction(valueOrFunction)
          ? valueOrFunction()
          : valueOrFunction;

        s[s.length] =
          encodeURIComponent(key) +
          "=" +
          encodeURIComponent(value == null ? "" : value);
      };

    if (a == null) {
      return "";
    }

    // If an array was passed in, assume that it is an array of form elements.
    if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
      // Serialize the form elements
      jQuery.each(a, function() {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }

    // Return the resulting serialization
    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function() {
      return this.map(function() {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      })
        .filter(function() {
          var type = this.type;

          // Use .is( ":disabled" ) so that fieldset[disabled] works
          return (
            this.name &&
            !jQuery(this).is(":disabled") &&
            rsubmittable.test(this.nodeName) &&
            !rsubmitterTypes.test(type) &&
            (this.checked || !rcheckableType.test(type))
          );
        })
        .map(function(_i, elem) {
          var val = jQuery(this).val();

          if (val == null) {
            return null;
          }

          if (Array.isArray(val)) {
            return jQuery.map(val, function(val) {
              return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            });
          }

          return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
        })
        .get();
    }
  });

  var r20 = /%20/g,
    rhash = /#.*$/,
    rantiCache = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*"),
    // Anchor tag for parsing the document origin
    originAnchor = document.createElement("a");
  originAnchor.href = location.href;

  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function(dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while ((dataType = dataTypes[i++])) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func);

            // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }

  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(
    structure,
    options,
    originalOptions,
    jqXHR
  ) {
    var inspected = {},
      seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(
          options,
          originalOptions,
          jqXHR
        );
        if (
          typeof dataTypeOrTransport === "string" &&
          !seekingTransport &&
          !inspected[dataTypeOrTransport]
        ) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || (!inspected["*"] && inspect("*"));
  }

  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887
  function ajaxExtend(target, src) {
    var key,
      deep,
      flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }

  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
      type,
      finalDataType,
      firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === "*") {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    }

    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }

      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }

  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
      current,
      conv,
      tmp,
      prev,
      converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift();

    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }

      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev;

          // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current];

          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv =
                  converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];

                    // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s.throws) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv
                    ? e
                    : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }

    return { state: "success", data: response };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},

    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",

      /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },

      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },

      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },

      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,

        // Text to html (true = no transformation)
        "text html": true,

        // Evaluate text as a json expression
        "text json": JSON.parse,

        // Parse text as xml
        "text xml": jQuery.parseXML
      },

      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function(target, settings) {
      return settings
        ? // Building a settings object
          ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)
        : // Extending ajaxSettings
          ajaxExtend(jQuery.ajaxSettings, target);
    },

    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),

    // Main method
    ajax: function(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (typeof url === "object") {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};

      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString,
        responseHeaders,
        // timeout handle
        timeoutTimer,
        // Url cleanup var
        urlAnchor,
        // Request state (becomes false upon send and true upon completion)
        completed,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // uncached part of the url
        uncached,
        // Create the final options object
        s = jQuery.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext =
          s.context && (callbackContext.nodeType || callbackContext.jquery)
            ? jQuery(callbackContext)
            : jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(),
        completeDeferred = jQuery.Callbacks("once memory"),
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
        // Default abort message
        strAbort = "canceled",
        // Fake xhr
        jqXHR = {
          readyState: 0,

          // Builds headers hashtable if needed
          getResponseHeader: function(key) {
            var match;
            if (completed) {
              if (!responseHeaders) {
                responseHeaders = {};
                while ((match = rheaders.exec(responseHeadersString))) {
                  responseHeaders[match[1].toLowerCase() + " "] = (
                    responseHeaders[match[1].toLowerCase() + " "] || []
                  ).concat(match[2]);
                }
              }
              match = responseHeaders[key.toLowerCase() + " "];
            }
            return match == null ? null : match.join(", ");
          },

          // Raw string
          getAllResponseHeaders: function() {
            return completed ? responseHeadersString : null;
          },

          // Caches the header
          setRequestHeader: function(name, value) {
            if (completed == null) {
              name = requestHeadersNames[name.toLowerCase()] =
                requestHeadersNames[name.toLowerCase()] || name;
              requestHeaders[name] = value;
            }
            return this;
          },

          // Overrides response content-type header
          overrideMimeType: function(type) {
            if (completed == null) {
              s.mimeType = type;
            }
            return this;
          },

          // Status-dependent callbacks
          statusCode: function(map) {
            var code;
            if (map) {
              if (completed) {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              } else {
                // Lazy-add the new callbacks in a way that preserves old ones
                for (code in map) {
                  statusCode[code] = [statusCode[code], map[code]];
                }
              }
            }
            return this;
          },

          // Cancel the request
          abort: function(statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          }
        };

      // Attach deferreds
      deferred.promise(jqXHR);

      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || location.href) + "").replace(
        rprotocol,
        location.protocol + "//"
      );

      // Alias method option to type as per ticket #12004
      s.type = options.method || options.type || s.method || s.type;

      // Extract dataTypes list
      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [
        ""
      ];

      // A cross-domain request is in order when the origin doesn't match the current origin.
      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a");

        // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/
        try {
          urlAnchor.href = s.url;

          // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative
          urlAnchor.href = urlAnchor.href;
          s.crossDomain =
            originAnchor.protocol + "//" + originAnchor.host !==
            urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      }

      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      }

      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

      // If request was aborted inside a prefilter, stop there
      if (completed) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
      fireGlobals = jQuery.event && s.global;

      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      }

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);

      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation
      cacheURL = s.url.replace(rhash, "");

      // More options handling for requests with no content
      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length);

        // If data is available and should be processed, append data to url
        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Add or update anti-cache param if needed
        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached =
            (rquery.test(cacheURL) ? "&" : "?") +
            "_=" +
            nonce.guid++ +
            uncached;
        }

        // Put hash and anti-cache on the URL that will be requested (gh-1732)
        s.url = cacheURL + uncached;

        // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (
        s.data &&
        s.processData &&
        (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0
      ) {
        s.data = s.data.replace(r20, "+");
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader(
            "If-Modified-Since",
            jQuery.lastModified[cacheURL]
          );
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      }

      // Set the correct header, if data is being sent
      if (
        (s.data && s.hasContent && s.contentType !== false) ||
        options.contentType
      ) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader(
        "Accept",
        s.dataTypes[0] && s.accepts[s.dataTypes[0]]
          ? s.accepts[s.dataTypes[0]] +
              (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "")
          : s.accepts["*"]
      );

      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }

      // Allow custom headers/mimetypes and early abort
      if (
        s.beforeSend &&
        (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)
      ) {
        // Abort if not done already and return
        return jqXHR.abort();
      }

      // Aborting is no longer a cancellation
      strAbort = "abort";

      // Install callbacks on deferreds
      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error);

      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

      // If no transport, we auto-abort
      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1;

        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        }

        // If request was aborted inside ajaxSend, stop there
        if (completed) {
          return jqXHR;
        }

        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function() {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          }

          // Propagate others as results
          done(-1, e);
        }
      }

      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
          success,
          error,
          response,
          modified,
          statusText = nativeStatusText;

        // Ignore repeat invocations
        if (completed) {
          return;
        }

        completed = true;

        // Clear timeout if it exists
        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || "";

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Determine if successful
        isSuccess = (status >= 200 && status < 300) || status === 304;

        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }

        // Use a noop converter for missing script
        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1) {
          s.converters["text script"] = function() {};
        }

        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);

        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader("etag");
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }

          // if no content
          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent";

            // if not modified
          } else if (status === 304) {
            statusText = "notmodified";

            // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = "error";
            if (status < 0) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + "";

        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        }

        // Status-dependent callbacks
        jqXHR.statusCode(statusCode);
        statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [
            jqXHR,
            s,
            isSuccess ? success : error
          ]);
        }

        // Complete
        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

          // Handle the global AJAX counter
          if (!--jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },

    getJSON: function(url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },

    getScript: function(url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });

  jQuery.each(["get", "post"], function(_i, method) {
    jQuery[method] = function(url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      // The url can be an options object (which then must have .url)
      return jQuery.ajax(
        jQuery.extend(
          {
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          },
          jQuery.isPlainObject(url) && url
        )
      );
    };
  });

  jQuery.ajaxPrefilter(function(s) {
    var i;
    for (i in s.headers) {
      if (i.toLowerCase() === "content-type") {
        s.contentType = s.headers[i] || "";
      }
    }
  });

  jQuery._evalUrl = function(url, options, doc) {
    return jQuery.ajax({
      url: url,

      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,

      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function() {}
      },
      dataFilter: function(response) {
        jQuery.globalEval(response, options, doc);
      }
    });
  };

  jQuery.fn.extend({
    wrapAll: function(html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        }

        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument)
          .eq(0)
          .clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap
          .map(function() {
            var elem = this;

            while (elem.firstElementChild) {
              elem = elem.firstElementChild;
            }

            return elem;
          })
          .append(this);
      }

      return this;
    },

    wrapInner: function(html) {
      if (isFunction(html)) {
        return this.each(function(i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function() {
        var self = jQuery(this),
          contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },

    wrap: function(html) {
      var htmlIsFunction = isFunction(html);

      return this.each(function(i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },

    unwrap: function(selector) {
      this.parent(selector)
        .not("body")
        .each(function() {
          jQuery(this).replaceWith(this.childNodes);
        });
      return this;
    }
  });

  jQuery.expr.pseudos.hidden = function(elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };
  jQuery.expr.pseudos.visible = function(elem) {
    return !!(
      elem.offsetWidth ||
      elem.offsetHeight ||
      elem.getClientRects().length
    );
  };

  jQuery.ajaxSettings.xhr = function() {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
      // File protocol always yields status code 0, assume 200
      0: 200,

      // Support: IE <=9 only
      // #1450: sometimes IE returns 1223 when it should be 204
      1223: 204
    },
    xhrSupported = jQuery.ajaxSettings.xhr();

  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;

  jQuery.ajaxTransport(function(options) {
    var callback, errorCallback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || (xhrSupported && !options.crossDomain)) {
      return {
        send: function(headers, complete) {
          var i,
            xhr = options.xhr();

          xhr.open(
            options.type,
            options.url,
            options.async,
            options.username,
            options.password
          );

          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }

          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          }

          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }

          // Callback
          callback = function(type) {
            return function() {
              if (callback) {
                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete(
                      // File: protocol always yields status 0; see #8605, #14207
                      xhr.status,
                      xhr.statusText
                    );
                  }
                } else {
                  complete(
                    xhrSuccessStatus[xhr.status] || xhr.status,
                    xhr.statusText,

                    // Support: IE <=9 only
                    // IE9 has no XHR2 but throws on binary (trac-11426)
                    // For XHR2 non-text, let the caller handle it (gh-2498)
                    (xhr.responseType || "text") !== "text" ||
                      typeof xhr.responseText !== "string"
                      ? { binary: xhr.response }
                      : { text: xhr.responseText },
                    xhr.getAllResponseHeaders()
                  );
                }
              }
            };
          };

          // Listen to events
          xhr.onload = callback();
          errorCallback = xhr.onerror = xhr.ontimeout = callback("error");

          // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts
          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function() {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function() {
                  if (callback) {
                    errorCallback();
                  }
                });
              }
            };
          }

          // Create the abort callback
          callback = callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send((options.hasContent && options.data) || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (callback) {
              throw e;
            }
          }
        },

        abort: function() {
          if (callback) {
            callback();
          }
        }
      };
    }
  });

  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
  jQuery.ajaxPrefilter(function(s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  });

  // Install script dataType
  jQuery.ajaxSetup({
    accepts: {
      script:
        "text/javascript, application/javascript, " +
        "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function(text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  });

  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter("script", function(s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = "GET";
    }
  });

  // Bind script tag hack transport
  jQuery.ajaxTransport("script", function(s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, callback;
      return {
        send: function(_, complete) {
          script = jQuery("<script>")
            .attr(s.scriptAttrs || {})
            .prop({ charset: s.scriptCharset, src: s.url })
            .on(
              "load error",
              (callback = function(evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              })
            );

          // Use native DOM manipulation to avoid our domManip AJAX trickery
          document.head.appendChild(script[0]);
        },
        abort: function() {
          if (callback) {
            callback();
          }
        }
      };
    }
  });

  var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function() {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
      this[callback] = true;
      return callback;
    }
  });

  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
    var callbackName,
      overwritten,
      responseContainer,
      jsonProp =
        s.jsonp !== false &&
        (rjsonp.test(s.url)
          ? "url"
          : typeof s.data === "string" &&
            (s.contentType || "").indexOf(
              "application/x-www-form-urlencoded"
            ) === 0 &&
            rjsonp.test(s.data) &&
            "data");

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
        ? s.jsonpCallback()
        : s.jsonpCallback;

      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url +=
          (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters["script json"] = function() {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }
        return responseContainer[0];
      };

      // Force json dataType
      s.dataTypes[0] = "json";

      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function() {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function() {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName);

          // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        }

        // Save back as free
        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // Save the callback name for future use
          oldCallbacks.push(callbackName);
        }

        // Call if it was a function and we have a response
        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return "script";
    }
  });

  // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337
  support.createHTMLDocument = (function() {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  })();

  // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function(data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }
    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument("");

        // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)
        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && [];

    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };

  /**
   * Load a url into a page
   */
  jQuery.fn.load = function(url, params, callback) {
    var selector,
      type,
      response,
      self = this,
      off = url.indexOf(" ");

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    }

    // If it's a function
    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;

      // Otherwise, build a param string
    } else if (params && typeof params === "object") {
      type = "POST";
    }

    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery
        .ajax({
          url: url,

          // If "type" variable is undefined, then "GET" method will be used.
          // Make value of this field explicit since
          // user can override it through ajaxSetup method
          type: type || "GET",
          dataType: "html",
          data: params
        })
        .done(function(responseText) {
          // Save response for use in complete callback
          response = arguments;

          self.html(
            selector
              ? // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery("<div>")
                  .append(jQuery.parseHTML(responseText))
                  .find(selector)
              : // Otherwise use the full result
                responseText
          );

          // If the request succeeds, this function gets "data", "status", "jqXHR"
          // but they are ignored because response was set above.
          // If it fails, this function gets "jqXHR", "status", "error"
        })
        .always(
          callback &&
            function(jqXHR, status) {
              self.each(function() {
                callback.apply(
                  this,
                  response || [jqXHR.responseText, status, jqXHR]
                );
              });
            }
        );
    }

    return this;
  };

  jQuery.expr.pseudos.animated = function(elem) {
    return jQuery.grep(jQuery.timers, function(fn) {
      return elem === fn.elem;
    }).length;
  };

  jQuery.offset = {
    setOffset: function(elem, options, i) {
      var curPosition,
        curLeft,
        curCSSTop,
        curTop,
        curOffset,
        curCSSLeft,
        calculatePosition,
        position = jQuery.css(elem, "position"),
        curElem = jQuery(elem),
        props = {};

      // Set position first, in-case top/left are set even on static elem
      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition =
        (position === "absolute" || position === "fixed") &&
        (curCSSTop + curCSSLeft).indexOf("auto") > -1;

      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        if (typeof props.top === "number") {
          props.top += "px";
        }
        if (typeof props.left === "number") {
          props.left += "px";
        }
        curElem.css(props);
      }
    }
  };

  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined
          ? this
          : this.each(function(i) {
              jQuery.offset.setOffset(this, options, i);
            });
      }

      var rect,
        win,
        elem = this[0];

      if (!elem) {
        return;
      }

      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error
      if (!elem.getClientRects().length) {
        return { top: 0, left: 0 };
      }

      // Get document-relative position by adding viewport scroll to viewport-relative gBCR
      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },

    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
        offset,
        doc,
        elem = this[0],
        parentOffset = { top: 0, left: 0 };

      // position:fixed elements are offset from the viewport, which itself always has zero offset
      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset();

        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;
        while (
          offsetParent &&
          (offsetParent === doc.body || offsetParent === doc.documentElement) &&
          jQuery.css(offsetParent, "position") === "static"
        ) {
          offsetParent = offsetParent.parentNode;
        }
        if (
          offsetParent &&
          offsetParent !== elem &&
          offsetParent.nodeType === 1
        ) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(
            offsetParent,
            "borderLeftWidth",
            true
          );
        }
      }

      // Subtract parent offsets and element margins
      return {
        top:
          offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left:
          offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },

    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function() {
      return this.map(function() {
        var offsetParent = this.offsetParent;

        while (
          offsetParent &&
          jQuery.css(offsetParent, "position") === "static"
        ) {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  });

  // Create scrollLeft and scrollTop methods
  jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(
    method,
    prop
  ) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function(val) {
      return access(
        this,
        function(elem, method, val) {
          // Coalesce documents and windows
          var win;
          if (isWindow(elem)) {
            win = elem;
          } else if (elem.nodeType === 9) {
            win = elem.defaultView;
          }

          if (val === undefined) {
            return win ? win[prop] : elem[method];
          }

          if (win) {
            win.scrollTo(
              !top ? val : win.pageXOffset,
              top ? val : win.pageYOffset
            );
          } else {
            elem[method] = val;
          }
        },
        method,
        val,
        arguments.length
      );
    };
  });

  // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  jQuery.each(["top", "left"], function(_i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(
      elem,
      computed
    ) {
      if (computed) {
        computed = curCSS(elem, prop);

        // If curCSS returns percentage, fallback to offset
        return rnumnonpx.test(computed)
          ? jQuery(elem).position()[prop] + "px"
          : computed;
      }
    });
  });

  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({ Height: "height", Width: "width" }, function(name, type) {
    jQuery.each(
      { padding: "inner" + name, content: type, "": "outer" + name },
      function(defaultExtra, funcName) {
        // Margin is only for outerHeight, outerWidth
        jQuery.fn[funcName] = function(margin, value) {
          var chainable =
              arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra =
              defaultExtra ||
              (margin === true || value === true ? "margin" : "border");

          return access(
            this,
            function(elem, type, value) {
              var doc;

              if (isWindow(elem)) {
                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                return funcName.indexOf("outer") === 0
                  ? elem["inner" + name]
                  : elem.document.documentElement["client" + name];
              }

              // Get document width or height
              if (elem.nodeType === 9) {
                doc = elem.documentElement;

                // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                // whichever is greatest
                return Math.max(
                  elem.body["scroll" + name],
                  doc["scroll" + name],
                  elem.body["offset" + name],
                  doc["offset" + name],
                  doc["client" + name]
                );
              }

              return value === undefined
                ? // Get width or height on the element, requesting but not forcing parseFloat
                  jQuery.css(elem, type, extra)
                : // Set width or height on the element
                  jQuery.style(elem, type, value, extra);
            },
            type,
            chainable ? margin : undefined,
            chainable
          );
        };
      }
    );
  });

  jQuery.each(
    [
      "ajaxStart",
      "ajaxStop",
      "ajaxComplete",
      "ajaxError",
      "ajaxSuccess",
      "ajaxSend"
    ],
    function(_i, type) {
      jQuery.fn[type] = function(fn) {
        return this.on(type, fn);
      };
    }
  );

  jQuery.fn.extend({
    bind: function(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function(types, fn) {
      return this.off(types, null, fn);
    },

    delegate: function(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1
        ? this.off(selector, "**")
        : this.off(types, selector || "**", fn);
    },

    hover: function(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });

  jQuery.each(
    (
      "blur focus focusin focusout resize scroll click dblclick " +
      "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
      "change select submit keydown keypress keyup contextmenu"
    ).split(" "),
    function(_i, name) {
      // Handle event binding
      jQuery.fn[name] = function(data, fn) {
        return arguments.length > 0
          ? this.on(name, null, data, fn)
          : this.trigger(name);
      };
    }
  );

  // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon
  jQuery.proxy = function(fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    }

    // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.
    if (!isFunction(fn)) {
      return undefined;
    }

    // Simulated bind
    args = slice.call(arguments, 2);
    proxy = function() {
      return fn.apply(context || this, args.concat(slice.call(arguments)));
    };

    // Set the guid of unique handler to the same of original handler, so it can be removed
    proxy.guid = fn.guid = fn.guid || jQuery.guid++;

    return proxy;
  };

  jQuery.holdReady = function(hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };
  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;

  jQuery.now = Date.now;

  jQuery.isNumeric = function(obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (
      (type === "number" || type === "string") &&
      // parseFloat NaNs numeric-cast false positives ("")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      !isNaN(obj - parseFloat(obj))
    );
  };

  jQuery.trim = function(text) {
    return text == null ? "" : (text + "").replace(rtrim, "");
  };

  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.

  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (typeof define === "function" && define.amd) {
    define("jquery", [], function() {
      return jQuery;
    });
  }

  var // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;

  jQuery.noConflict = function(deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  };

  // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)
  if (typeof noGlobal === "undefined") {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});

/* eslint-disable */

/**
 *  基本元素
 */
AX.plugins["macro"] = function() {
  var me = this,
    thePlugins = "macro";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        isEdit: isEdit,
        cssRules: "width:700px;height:500px;",
        dialogUrl: "dialogs/extends/macroelement.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins,
    delFunc: function(that) {
      me.window.confirmMsg(me.getLang("ax.delCtrlTip"), function(rsl) {
        if (!rsl) {
          return;
        }
        var targetDom = that.anchorEl; //获取根节点元素，并删除
        if (targetDom.getAttribute("axplugins") === null) {
          targetDom = targetDom.parentNode;
        }
        baidu.editor.dom.domUtils.remove(targetDom, false);
      });
      // if( window.confirm(me.getLang('ax.delCtrlTip')) ) {
      //     var targetDom = that.anchorEl;//获取根节点元素，并删除
      //     if(targetDom.getAttribute('axplugins') === null){
      //         targetDom = targetDom.parentNode;
      //     }
      //     baidu.editor.dom.domUtils.remove(targetDom,false);
      // }
      that.hide();
    }
  });
  // popup.render();
  me.addListener("mouseover", function(t, evt) {
    try {
      evt = evt || window.event;
      var el = evt.target || evt.srcElement,
        parentNode = el.parentNode;
      if (!parentNode || me.options.editorModel != "design") return; //父节点为空过滤掉
      if ("BODY" != el.tagName && "HTML" !== el.tagName) {
        //body及html过滤掉
        var axPlugins =
          el.getAttribute("axplugins") || parentNode.getAttribute("axplugins");
        // 判断条件
        // 1、标签为span
        // 2、类型一致
        // 3、节点有ctrl-bg或ctrl-value样式，标识为控件，非控件不展示
        if (
          /span/gi.test(el.tagName) &&
          axPlugins == thePlugins &&
          (axTools.hasClass(el, "ctrl-bg") ||
            axTools.hasClass(parentNode, "ctrl-bg") ||
            axTools.hasClass(el, "ctrl-value"))
        ) {
          axTools.setPopupContent(
            popup,
            el,
            "<nobr>" +
              me.getLang("ax." + thePlugins) +
              ': <span onclick=$$._delete() class="edui-clickable">' +
              this.getLang("delete") +
              "</span></nobr>"
          );
          // axTools.setPopupContent(popup, el, '<nobr>' + me.getLang('ax.' + thePlugins) + ': <span onclick=$$._edittext() class="edui-clickable">' + this.getLang('edit') + '</span></span>&nbsp;&nbsp;<span onclick=$$._delete() class="edui-clickable">' + this.getLang('delete') + '</span></nobr>');
        } else {
          popup.hide();
        }
      } else {
        popup.hide();
      }
    } catch (e) {
      console.log(e);
    }
  });
};

/**
 * 插入基本元素
 * @command insertmacros
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'insertmacros');
 * ```
 */
AX.plugins["insertmacros"] = function() {
  var me = this,
    thePlugins = "insertmacros";
  me.commands[thePlugins] = {
    execCommand: function(type, data) {
      if (
        me.options.editorModel == "pure" ||
        me.options.editorModel == "dirty" ||
        me.options.editorModel == "secret" || me.options.editorModel === "preview"
      ) {
        alert(me.getLang("ax.viewNotEditTip"));
        return;
      }
      if (!data) {
        alert(me.getLang("ax.macroDataIllegal"));
        return;
      }
      // var oNode = document.createElement('span');
      // oNode.setAttribute('id',data.id);
      // oNode.setAttribute('title', data.name);
      // oNode.setAttribute('isSecret', data.isSecret);
      // oNode.setAttribute('attrs', JSON.stringify(data));
      // oNode.setAttribute("contenteditable", 'false');
      // oNode.setAttribute("macroCode", data.code);
      // oNode.setAttribute('class', 'ctrl-bg ctrl-field macro-ctrl macro-'+data.id);
      // oNode.setAttribute('axPlugins', 'macro');
      // oNode.innerHTML = '<span title="' + data.name + '" placeholder="' + data.name + '" secret-value="' + (data.isSecret) + '" contenteditable="false" class="ctrl-value"></span>';
      var oNode = AX.mh.macro(data);
      var o = me.selection.getRange();
      // 防止控件嵌套
      if (
        o.startContainer.parentNode.getAttribute("axplugins") ===
          "paragraphele" ||
        o.startContainer.parentNode.getAttribute("axplugins") === "combine" ||
        !!!o.startContainer.parentNode.getAttribute("axplugins")
      ) {
        me.execCommand("inserthtml", "\u200B" + oNode.outerHTML + "\u200B");
      } else {
        alert(me.getLang("ax.noWarp"));
      }
    }
  };
};

/**
 * 同步信息--基本元素、诊断、处方
 * @command synchronize
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'synchronize');
 * ```
 */
AX.plugins["synchronize"] = function() {
  var me = this,
    thePlugins = "synchronize";
  me.commands[thePlugins] = {
    execCommand: function() {
      if (typeof this.options.synchronizeMethod == "function") {
        this.options.synchronizeMethod();
      } else {
        var successFlag = false;
        if (typeof this.options.refreshMacrosMethod == "function") {
          this.options.refreshMacrosMethod();
          successFlag = true;
        }
        if (axTools.getByClass("prescription", me.document).length > 0) {
          typeof me.options.refreshPrescriptionMethod == "function"
            ? me.options.refreshPrescriptionMethod()
            : alert(me.getLang("ax.configRefreshPrescriptionMethod"));
          successFlag = true;
        }
        if (axTools.getByClass("diagnose", me.document).length > 0) {
          typeof me.options.refreshDiagnoseMethod == "function"
            ? me.options.refreshDiagnoseMethod()
            : alert(me.getLang("ax.configRefreshDiagnoseMethod"));
          successFlag = true;
        }
        if (!successFlag) {
          alert(me.getLang("ax.synchronizeInfoError"));
        } else {
          alert(me.getLang("ax.synchronizeInfo"), "success");
        }
      }
    }
  };
};

/**
 * 刷新基本元素
 * @command refreshmacros
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'refreshmacros');
 * ```
 */
AX.plugins["refreshmacros"] = function() {
  var me = this,
    thePlugins = "refreshmacros";
  me.commands[thePlugins] = {
    execCommand: function() {
      if (typeof this.options.refreshMacrosMethod == "function") {
        this.options.refreshMacrosMethod();
      } else {
        alert(me.getLang("ax.noRefreshMacroMethod"));
      }
    }
  };
};

/**
 * 更新基本元素
 * @command updatemacros
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'updatemacros');
 * ```
 */
AX.plugins["updatemacros"] = function() {
  var me = this,
    thePlugins = "updatemacros";
  me.commands[thePlugins] = {
    execCommand: function(type, params) {
      var data = params.macros,
        hideConfirmTip = !!params.hideConfirmTip;
      if (!data) {
        alert(me.getLang("ax.macroDataIllegal"));
        return;
      }
      try{
        me.undoManger.disconnect(); // 刷新宏元素时，暂停撤回监听
      }catch(e){console.log(e)}
      for (var i = 0; i < data.length; i++) {
        var macroObjs = axTools.getByClass("macro-" + data[i].id, me.document); //me.document.getElementById(data[i].id);
        if (macroObjs.length > 0) {
          for (var j = 0; j < macroObjs.length; j++) {
            var val = data[i].val == undefined ? "" : data[i].val;
            if (me.options.editorModel == "secret" && data[i].isSecret) {
              val =
                data[i].val == undefined
                  ? ""
                  : axTools.getSecretVal(data[i].val);
            }
            // 留痕模式校验
            if (me.options.editorModel == 'mark' && params.isTranformData) {
              var userName = me.options.userInfo.name;
              var markNode = axTools.getByTagAttr("span", 'forCtrlId', data[i].id, me.document);
              var oldVal = macroObjs[j].childNodes[0].innerHTML;
              var currVal = val;
              if (markNode.length > 0) { // 有留痕标识时
                for(var m = 0; m < markNode.length; m++) {
                  if (oldVal != '') { // 旧值不为空 表示此次为删除操作 ， del
                    if (oldVal != currVal) {
                      var delNode = document.createElement("span");
                      axTools.addClass(delNode, "editor-mark-del-text");
                      delNode.setAttribute("contenteditable", false);
                      delNode.innerHTML = oldVal;
                      markNode[m].innerHTML = delNode.outerHTML;
                    }else{ // 值前后未改变 删除留痕记录
                      markNode[m].parentNode.removeChild(markNode[m]);
                    }
                  }
                }
              }else{ // 没有留痕标识时 值改变
                if (oldVal != '') { // 旧值不为空 表示此次为删除操作 ， del
                  if (oldVal != currVal) {
                    var delNode = document.createElement("span");
                    axTools.addClass(delNode, "editor-mark-del-text");
                    delNode.setAttribute("contenteditable", false);
                    delNode.innerHTML = oldVal;
                    markNode[m].innerHTML = delNode.outerHTML;
                  }
                }else{
                  if (oldVal != currVal) {
                    var addMark = document.createElement("span")
                    axTools.addClass(addMark, "on");
                    axTools.addClass(addMark, "editor-mark-text");
                    axTools.addClass(addMark, "editor-mark-modify-text");
                    addMark.setAttribute("user", userName);
                    addMark.setAttribute("contenteditable", false);
                    addMark.setAttribute("forCtrlId", data[i].id);
                    addMark.innerHTML = currVal;
                  }
                }
                macroObjs[j].parentNode.insertBefore(addMark, macroObjs[j]);
              }
            }
            macroObjs[j].childNodes[0].innerHTML = val;
            if(me.options.editorModel == 'edit') {
              axTools.valueChange(macroObjs[j]);
            }
          }
        }
      }
      try{
        // 刷新基本元素的时候，不记录撤回栈
        me.undoManger.reset();
        me.undoManger.reObserve(); // 宏元素更新后，重新监听撤回
      }catch(e){console.log(e)}
      // 刷新后，页眉高度可能发生变化，重新计算页面高度
      // var pages = AX.pageControler.pages;
      // for(var i = 0; i < pages.length; i++) {
        // pages[i].updateStyle();
      // }
      // this.execCommand("sensitive");
      // axTools.validateSign(me,hideConfirmTip);
    }
  };
};

/**
 * 检验文书是否包含诊断、处方元素  prescription-- 处方   diagnose-- 诊断
 */
AX.plugins["checkelementcontent"] = function() {
  var me = this,
    thePlugins = "checkelementcontent";
  me.commands[thePlugins] = {
    execCommand: function(type, param, diagnosetype) {
      var targetList = axTools.getByClass(param, me.document);
      var result = false;
      if (targetList.length > 0) {
        // if (param == "diagnose") {
        //   for(var i = 0; i < targetList.length; i++) {
        //     if (targetList[i].getAttribute("diagnosetype") == diagnosetype) {
        //       result = true;
        //       break;
        //     }
        //   }
        // }else{
          result = true;
        // }
      }
      return result;
    },
		notNeedUndo: 1
  };
};


/**
 * 校验诊断、处方、宏元素是否有内容  prescription-- 处方   diagnose-- 诊断   macro-ctrl -- 宏元素
 */
AX.plugins["checkcontent"] = function() {
  var me = this,
    thePlugins = "checkcontent";
  me.commands[thePlugins] = {
    execCommand: function(type, param) {
      var targetList = axTools.getByClass(param, me.document);
      var result = true; // 需要返回的结果
      if (targetList.length > 0) {
        for(var i = 0; i < targetList.length; i++) {
          var item = targetList[i];
          var ctrl = axTools.getByClass('ctrl-value', item)[0];
          if (param == 'prescription' && (ctrl.innerText == '处方内容' || ctrl.innerText.replace(/\u200B/g,'') == '')) {
            result = false;
            break;
          } else if (param == 'diagnose'){
            ctrl = axTools.getByClass("hasdata", item);
            if(ctrl.length == 0) {
              result = false;
            }
            break;
          }
          if (param == 'macro-ctrl' && ctrl.innerText.replace(/\u200B/g,'') != ''){
            result = true;
            break;
          }else if(param == 'macro-ctrl'){
            result = false;
          }
        }
      }else{
        result = false;
      }
      return result;
    }
  };
};

/**插入身高体重
 * @param{
 *    height: '',
 *    weight: ''
 * }
 */
AX.plugins["insertelecontent"] = function() {
  var me = this,
    thePlugins = "insertelecontent";
  me.commands[thePlugins] = {
    execCommand: function(type, param) {
      var hCode = 'DE04.10.167.00';
      var wCode = 'DE04.10.188.00';
      var ctrls = axTools.getByClass('ctrl-bg', me.document);
      for(var i = 0; i < ctrls.length; i++) {
        var attrs = ctrls[i].getAttribute("attrs") && JSON.parse(ctrls[i].getAttribute("attrs"));
        if(!attrs.metaData || attrs.metaData === "") continue;
        if(JSON.parse(attrs.metaData).code === hCode) {
          var ctrlValue = axTools.getByClass('ctrl-value', ctrls[i])[0];
          ctrlValue.innerHTML = param.height;
        }else if(JSON.parse(attrs.metaData).code === wCode) {
          var ctrlValue = axTools.getByClass('ctrl-value', ctrls[i])[0];
          ctrlValue.innerHTML = param.weight;
        }
      }
      // 内容变化时校验 医学公式
      axTools.formulas(me)
    },
		notNeedUndo: 1
  };
};

// 单独更新本次随访医生
AX.plugins["updatevisdoctor"] = function() {
  var me = this,
    thePlugins = "updatevisdoctor";
  me.commands[thePlugins] = {
    execCommand: function(type, doctorName) {
      var ctrl = axTools.getByTagAttr("div", "title", "本次随访医生", me.document);
      var $doctorCom = $(ctrl).find('span.ctrl-value');
      $doctorCom.text(doctorName)
    }
  };
};

// 更新当前病人信息
AX.plugins["updatepatientinfo"] = function() {
  var me = this,
    thePlugins = "updatepatientinfo";
  me.commands[thePlugins] = {
    execCommand: function(type, patientInfo) {
      AX.patientInfo = patientInfo
    }
  };
};


function getDefaultData () {
    return {
        value: {}
    }
}

// 清除元素值
function clearValue() {

}

// 获取结构化元素的值
function getValue() {

}

// 检测元素结构是否异常
function checkStruct() {

}


// AX.med["paragraph"] = function(json, thePlugins, oNode) {
//     window.$ = this.$;

// };
// 该文件专门用于通过元素的配置信息生成HTML结构

function getSelectVals(options) {
  var selectKeys = [],
    selectVals = [];
  for (var i = 0; i < options.length; i++) {
    if (options[i].isDefault) {
      selectKeys.push(options[i].key);
      selectVals.push(options[i].value);
    }
  }
  return {
    selectKeys: selectKeys.join(","),
    selectVals: selectVals.join(",")
  };
}

function getOptions() {
  var optionTrs = $(".option-tr"),
    options = [],
    keys = {},
    isContinue = false;
  for (var i = 0; i < optionTrs.length; i++) {
    var key = $(optionTrs[i])
        .find(".key")
        .val(),
      val = $(optionTrs[i])
        .find(".value")
        .val(),
      isDefault = $(optionTrs[i])
        .find(".isDefault")
        .is(":checked");
    if (!isContinue && (key == "" || val == "")) {
      if (confirm("选项值或含义为空将会丢失，是否继续保存？")) {
        isContinue = true;
        continue;
      } else {
        return false;
      }
    } else if (key != "" && val != "") {
      options.push({
        index: i + 1,
        key: key,
        value: val,
        isDefault: isDefault
      });
    }
    if (!keys[key]) {
      keys[key] = true;
    } else if (key != "") {
      alert("选项值不能重复，请修改！");
      return false;
    }
  }

  return options;
}

function createElement(type, name) {
  var element = null;
  try {
    element = document.createElement(type);
    if (element) {
      element.id = name;
    }
  } catch (e) {}
  if (element == null) {
    element = document.createElement(type);
    element.name = name;
  }
  return element;
}

function insertCurDate(newFormat) {
  var myDate = new Date();
  var year = myDate.getFullYear();
  var month = myDate.getMonth();
  var date = myDate.getDate();
  var hours = myDate.getHours(); // 获取当前小时数(0-23)
  var minutes = myDate.getMinutes(); // 获取当前分钟数(0-59)
  var seconds = myDate.getSeconds();
  newFormat =
    newFormat.match(new RegExp("yyyy|y|MM|M|dd|d|HH|H|mm|m|ss|s|.", "g")) || [];

  var digit = function(num, length, end) {
    var str = "";
    num = String(num);
    length = length || 2;
    for (var i = num.length; i < length; i++) {
      str += "0";
    }
    return num < Math.pow(10, length) ? str + (num | 0) : num;
  };
  //转义为规定格式
  $.each(newFormat, function(i, item) {
    if (/yyyy|y/.test(item)) {
      //年
      newFormat[i] = digit(year, item.length);
    } else if (/MM|M/.test(item)) {
      //月
      newFormat[i] = digit(month + 1, item.length);
    } else if (/dd|d/.test(item)) {
      //日
      newFormat[i] = digit(date, item.length);
    } else if (/HH|H/.test(item)) {
      //时
      newFormat[i] = digit(hours, item.length);
    } else if (/mm|m/.test(item)) {
      //分
      newFormat[i] = digit(minutes, item.length);
    } else if (/ss|s/.test(item)) {
      //秒
      newFormat[i] = digit(seconds, item.length);
    }
  });
  console.log(newFormat.join(""));
  return newFormat.join("");
}

function getBody(elem) {
  var ret = elem;
  var i = 0;
  while (i < 50) {
    i++;
    if (!elem.parentElement) {
      return null;
    }
    if (ret.tagName.toLowerCase() == "body") {
      return ret;
    }
    ret = ret.parentElement;
  }
  return null;
}

AX.mh["base"] = function(json, thePlugins, oNode, tabIndex, mode, editor) {
  tabIndex = tabIndex || -1;
  mode = mode || "add";
  window.$ = this.$;
  var signatureHtml = [];

  function setAttrs(node, json) {
    oNode.setAttribute("axPlugins", thePlugins);
    if (
      thePlugins === "checkbox" ||
      thePlugins === "radio" ||
      thePlugins === "select" ||
      thePlugins === "selectmulti"
    ) {
      if (!node.getAttribute("selectVal")) {
        var selectedInfo = getSelectVals(JSON.parse(json.options));
        node.setAttribute("selectValText", selectedInfo.selectedVals);
        node.setAttribute("selectVal", selectedInfo.selectKeys);
      }
    }
    var placeholderTip = json.placeholderText ? json.placeholderText : "请签名";
    node.setAttribute(
      "title",
      thePlugins == "signature" ? placeholderTip : json.tipText
    );
    node.setAttribute("isSecret", !!json.isSecret);
    node.setAttribute("isPrint", !!json.isPrint);
    if(thePlugins == "macro") {
      node.setAttribute("macrocode", json.code);
    }
    // //组合元素 显示边框是 {} 做个判断
    // if (thePlugins === "combine") {
    //   node.setAttribute("start-stain", json.showBorder ? "{" : "");
    //   node.setAttribute("end-stain", json.showBorder ? "}" : "");
    // } else {
    //   node.setAttribute("start-stain", json.showBorder ? "[" : "");
    //   node.setAttribute("end-stain", json.showBorder ? "]" : "");
    // }

    // 边框还是下划线，或者不显示
    // 边框分为三种 stain0 - 2
    // ctrl-field 为下划线
    var nodeClass = node.getAttribute("class");
    if (json.borderType == "border") {
      node.setAttribute(
        "class",
        nodeClass
          ? nodeClass
              .replace("stain0", "")
              .replace("stain1", "")
              .replace("stain2", "")
              .replace("ctrl-field", "") +
              " stain" +
              json.borderStyle
          : "stain" + json.borderStyle
      );
    } else if (json.borderType == "underline") {
      node.setAttribute(
        "class",
        nodeClass
          ? nodeClass
              .replace("stain0", "")
              .replace("stain1", "")
              .replace("stain2", "") + " ctrl-field"
          : "ctrl-field"
      );
    } else {
      node.setAttribute(
        "class",
        nodeClass
          ? nodeClass
              .replace("stain0", "")
              .replace("stain1", "")
              .replace("stain2", "")
              .replace("ctrl-field", "")
          : ""
      );
    }

    // 清洁模式下边框是否保留原有的占位
    // stain-hide 边框仅仅隐藏
    // stain-clear 边框content置空
    nodeClass = node.getAttribute("class");
    if (json.stainholder && json.borderType == "border") {
      node.setAttribute(
        "class",
        nodeClass
          ? nodeClass.replace("stain-clear", "") + " stain-hide"
          : "stain-hide"
      );
    } else {
      node.setAttribute(
        "class",
        nodeClass
          ? nodeClass.replace("stain-hide", "") + " stain-clear"
          : "stain-clear"
      );
    }

    // nodeClass = node.getAttribute("class");
    // if (json.showBorder) {
    //   node.setAttribute(
    //     "class",
    //     nodeClass ? nodeClass.replace(" no-border", "") : ""
    //   );
    // } else {
    //   node.setAttribute(
    //     "class",
    //     nodeClass ? nodeClass + " no-border" : " no-border"
    //   );
    // }
    node.setAttribute("isRequired", !!!json.isEmpty);
    node.setAttribute("cascadeId", json.cascadeId);
    node.setAttribute("showCondition", json.showCondition);
    var jsonVal = JSON.stringify(json);
    node.setAttribute("attrs", jsonVal);
  }

  // 同步更新页面上所有该结构化元素
  function updateAllAttrs(node, json) {
    var id = json.id;
    var rsl = $("." + id, getBody(node));
    if (node.parentElement && rsl && rsl.length > 0) {
      for (var i = 0; i < rsl.length; i++) {
        setAttrs(rsl[i], json);
      }
    } else {
      setAttrs(node, json);
    }
  }

  // 构造控件html
  function radselectMakeHtml(json, thePlugins, oNode) {
    var type = thePlugins;
    var labelStr = "";
    var dataList = json.options ? JSON.parse(json.options) : [],
      selectVals =
        mode == "edit" && oNode.getAttribute("selectval")
          ? oNode.getAttribute("selectval").split(",")
          : [];
    if (mode == "edit") {
      var oldOptions = JSON.parse(JSON.parse(oNode.getAttribute("attrs")).options);
      var oldDefault = [];
      $.each(oldOptions, function (index, item){
        if(!!item.isDefault){
          oldDefault.push(item.key)
        }
      })
    }
    $.each(dataList, function(index, item) {
      var checked = "";
      if (mode == "edit") {
        //编辑控件时根据已选中的项反显
        if ($.inArray(item.key, selectVals) != -1 && $.inArray(item.key, oldDefault) == -1) {
          checked = "checked";
        }else if(!!item.isDefault) {
          checked = "checked";
        }
      } else if (mode == "add" && !!item.isDefault) {
        //新增控件时根据默认项反显
        checked = "checked";
      }
      labelStr +=
        "<span class='checkbox-underline-wrapper' style='display:inline;'><input id='" +
        json.id +
        "_" +
        index +
        "' value='" +
        item.key +
        "' name='checkField_" +
        json.id +
        "' valuestr='" +
        item.value +
        "' " +
        checked +
        " type='" +
        type +
        "'/><label for='" +
        json.id +
        "_" +
        index +
        "'>" +
        item.value +
        "</label>&nbsp;</span>";
      if (json.direction == 1 && (index != dataList.length - 1)) {
        labelStr += "<br>";
      }
    });
    var spanHtml =
      '<span title="' +
      json.tipText +
      '" secret-value="' +
      !!json.isSecret +
      '" class="ctrl-value" placeholder="' +
      json.placeholderText +
      '" contenteditable="false"'+
      ' >' +
      labelStr +
      "</span>";
    return "\u200B" + spanHtml + "\u200B";
  }

  function getElemValue(node) {
    if (!node) {
      return "";
    }
    var children = node.children;
    for (var i = 0; i < children.length; i++) {
      var child = children[i];
      var className = child.getAttribute("class");
      if (className && className.indexOf("ctrl-value") != -1) {
        return child.innerText;
      }
    }
    return node.innerText;
  }

  // 构造控件html
  function makeHtml(json, thePlugins, oNode, editor) {
    var content = getElemValue(oNode);
    var child = axTools.getByClass("ctrl-value", oNode);
    var currText = oNode && $.trim(content); //.replace(/\u200B/g, ""); //获取text，并删除空白字符&#8203;;
    var defaultVal = json.defaultVal === undefined ? "" : json.defaultVal;
    if (thePlugins === "diagnose") {
      var div = document.createElement('span');
      div.setAttribute("class", "ctrl-bg ctrl-field diagnose no-border");
      div.setAttribute("id", json.id);
      div.setAttribute("title", json.diagnoseType);
      div.setAttribute("diagnoseType", json.diagnoseCode);
      div.setAttribute("attrs", JSON.stringify(json));
      div.setAttribute("axPlugins", thePlugins);
      div.innerHTML = '<span class="ctrl-value">'+json.diagnoseType+'</span>';
      // div.outerHTML = div.outerHTML; // + '<span style="display:block;clear:both;height: 0;"></span>';

      // me.execCommand('inserthtml',str.replace(/\u200B/g,''));
      return div;
    }
    if (thePlugins === "prescription") {
      var attrs = {
        id: json.id,
        name: editor.getLang('ax.prescriptionTitle'),
        checkDirectCite: json.checkDirectCite
      }
      var div = document.createElement('span');
      div.setAttribute("class", "ctrl-bg ctrl-field prescription no-border");
      div.setAttribute("id", json.id);
      div.setAttribute("title", editor.getLang('ax.prescriptionTitle'));
      div.setAttribute("style", "display:block;float:left");
      div.setAttribute("attrs", JSON.stringify(attrs));
      div.setAttribute("axPlugins", thePlugins);
      div.innerHTML = '	<span class="ctrl-value">'+editor.getLang('ax.prescriptionContent')+'</span>';
      return div;
    }
    if (thePlugins === "numberelement") {
      //数字元素插入单位和默认值，与其他元素不一样
      currText = ""; //数字元素编辑回弹窗 不取oNode 的值。
      if (
        json.isPopuInput &&
        $("#numVal", oNode).html() != defaultVal &&
        $("#numVal", oNode).html() != undefined
      ) {
        defaultVal = $("#numVal", oNode).html() || child[0].innerHTML || "";
      }
      if (oNode) {
        var child = axTools.getByClass("ctrl-value", oNode);
        var innerHTMLNode =
          child[0].children.length > 0
            ? child[0].children[0].innerHTML
            : child[0].innerHTML;
        var jsonOld = JSON.parse(oNode.getAttribute("attrs"));
        defaultVal = jsonOld.defaultVal == innerHTMLNode? defaultVal: innerHTMLNode
        // defaultVal = innerHTMLNode ? innerHTMLNode : defaultVal;
      }
      // ax-update: 这里之所以注释掉是保证无论是否有弹窗输入，都使得数字元素的内容部结构一致
      // if (!!json.eleUnitContr && json.elemUnit) {
      //   var elemUnits = json.elemUnit.split("、"),
      //     selectedUnitVal = $("#eleUnitVal", oNode).val();
      //   if (!!json.isPopuInput) {
      //     defaultVal =
      //       '<span id="numVal" type="numVal"> ' +
      //       defaultVal +
      //       ' </span><span type="eleUnitVal">' +
      //       (selectedUnitVal ? selectedUnitVal : elemUnits[0]) +
      //       "</span>";
      //   }
      // }
    }
    if (thePlugins === "tagelement") {
      currText = json.name || "";
    }
    var innerText = currText ? currText : defaultVal;
    //针对select 和 selectmulti 元素 显示默认值的情况
    if (thePlugins === "select" || thePlugins === "selectmulti") {
      var optionsSelect = (typeof json.options == "string"?JSON.parse(json.options): json.options);
      if (mode == "add") {
        var options = getOptions();
        innerText = getSelectVals(options).selectVals;
      } else {
        for (var m = 0; m < optionsSelect.length; m++) {
          if (oNode.getAttribute("selectval") == optionsSelect[m].key) {
            innerText = optionsSelect[m].value;
            break;
          } else {
            innerText = oNode.getAttribute("selectvaltext") == "undefined"? "":oNode.getAttribute("selectvaltext");
          }
        }
      }
      if (innerText === null || innerText === "" || innerText === undefined) {
        innerText = "";
        for (var i = 0; i < optionsSelect.length; i++) {
          if (
            optionsSelect[i].isDefault == true &&
            (innerText === "" || thePlugins === "select")
          ) {
            innerText = optionsSelect[i].value;
          } else if (optionsSelect[i].isDefault == true) {
            innerText += "," + optionsSelect[i].value;
          }
        }
      } else if (thePlugins === "select") {
        try {
          if (innerText.split(",").length > 1) {
            innerText = innerText.split(",")[innerText.split(",").length - 1];
          }
        } catch (e) {}
      }
    }
    if (
      thePlugins === "numberelement" &&
      !!json.isPopuInput &&
      defaultVal != undefined &&
      !!json.eleUnitContr &&
      json.elemUnit
    ) {
      innerText = defaultVal;
    } else if (
      oNode &&
      thePlugins === "numberelement" &&
      !!!json.isPopuInput &&
      !!json.eleUnitContr
    ) {
      var valContent = $("#numVal", oNode);
      if (valContent.length) {
        innerText = valContent.html();
      } else {
        innerText = child[0].innerHTML;
      }
    }

    // 从xml反显到HTML过程会用到
    if (json.value) {
      innerText = json.value;
    }

    // 设计模式下，文本编辑后，强刷入默认值
    // 仅限于有默认值属性的
    if (editor && editor.options.editorModel == "design" && json.defaultVal != undefined) {
      innerText = defaultVal
    }
    // 时间元素 修改时间格式
    // if (thePlugins == "datedomain" && oNode) {
    //   var cV = oNode.getAttribute("currval") || json.defaultVal || "";
    //   innerText = axTools.formatCurDate(cV, json.dateFormat);
    // }
    if(thePlugins == "macro") {
      json.tipText = json.placeholderText = json.defaultVal = json.name;
    }
    var html =
      "<span " +
      (tabIndex != -1 ? "tabIndex=" + tabIndex : "") +
      ' title="' +
      json.tipText +
      '" secret-value="' +
      !!json.isSecret +
      '" class="ctrl-value" placeholder="' +
      (json.placeholderText || json.defaultVal || json.name) +
      '">' +
      innerText +
      "</span>";
    if ((thePlugins == 'select' || thePlugins == 'selectmulti') && json.isEdit != 'on') {
      html =
      "<span " +
      (tabIndex != -1 ? "tabIndex=" + tabIndex : "") +
      ' title="' +
      json.tipText +
      '" secret-value="' +
      !!json.isSecret +
      '" contenteditable="false"'+
      ' class="ctrl-value" placeholder="' +
      (json.placeholderText || json.defaultVal || json.name) +
      '">' +
      innerText +
      "</span>";
    }
    if (!!json.eleUnitContr && json.elemUnit) {
      var elemUnits = json.elemUnit.split("、"),
        selectedUnitVal = $("#eleUnitVal", oNode).val();
        if (elemUnits.length > 1) {
          html +=
            '<select class="ax-editor-number-select" id="eleUnitVal" type="eleUnitVal">';
          for (var i = 0; i < elemUnits.length; i++) {
            html +=
              '<option value="' +
              elemUnits[i] +
              '"' +
              (selectedUnitVal == elemUnits[i] ? " selected" : "") +
              ">" +
              elemUnits[i] +
              "</option>";
          }
          html += "</select>";
        } else {
          html +=
            '<span id="eleUnitVal" type="eleUnitVal">' +
            json.elemUnit +
            "</span>";
        }
    }

    if (thePlugins == "haveornot") {
      var showText = /* json.notSuffixName+json.yesSuffixName+ */ !!json.isShowName
        ? json.name
        : "";
      html =
        "<span " +
        (tabIndex != -1 ? "tabIndex=" + tabIndex : "") +
        ' title="' +
        json.tipText +
        '" secret-value="' +
        !!json.isSecret +
        '" class="ctrl-value" placeholder="' +
        json.placeholderText +
        '" ' +
        // (currText == "" ? 'placeWidth="true"' : "") +
        ">" +
        showText +
        "</span>";
    }

    if (thePlugins == "signature") {
      var signatureStr = innerText;
      // if(json.isCurrDoctor){
      //     var signatureType = editor.options.signatureType;
      //     if(signatureType == 'text'){
      //         signatureStr = editor.options.signatureName;
      //     }else if(signatureType == 'img'){
      //         signatureStr = '<img src="' + editor.options.signatureUrl + '">';
      //     }
      // }

      // var placeholderTip = json.placeholderText
      //   ? json.placeholderText
      //   : "请签名";
      if (json.signtype === "checksign") {
        for (var j = 0; j < json.signatureLevel.length; j++) {
          if (json.signatureLevel[j] === "") {
            continue;
          }
          var placeholderTip =
            (json.placeholderTextArr[j] == "" || json.placeholderTextArr == "")
              ?(json.signatureLevel[j] === "oneLevel"
                ? "一级医师"
                :( json.signatureLevel[j] === "twoLevel"
                ? "二级医师"
                : "三级医师"))
              : json.placeholderTextArr[j];

          html =
            (json.sort !== "isVertical" && signatureHtml.length > 0
              ? "/"
              : "") +
            (json.showPlaceholder == "on"? placeholderTip: "") +
            "<span " +
            (tabIndex != -1 ? "tabIndex=" + tabIndex : "") +
            ' title="' +
            json.tipText +
            '" itemSignture="' +
            json.signatureLevel[j] +
            '" secret-value="' +
            !!json.isSecret +
            '" class="ctrl-value" placeholder="' +
            placeholderTip +
            '" ' +
            // (currText == "" ? 'placeWidth="true"' : "") +
            ">" +
            signatureStr +
            "</span>";
          if (json.sort === "isVertical") {
            html += "<br>";
          }
          signatureHtml.push(html);
        }
      } else {
        html =
          "<span " +
          (tabIndex != -1 ? "tabIndex=" + tabIndex : "") +
          ' title="' +
          json.tipText +
          '" itemSignture="normal' +
          '" secret-value="' +
          !!json.isSecret +
          '" class="ctrl-value" placeholder="' +
          json.placeholderText +
          '" ' +
          // (currText == "" ? 'placeWidth="true"' : "") +
          ">" +
          signatureStr +
          "</span>";
        signatureHtml.push(html);
      }
    }

    return "\u200B" + html + "\u200B";
  }

  var html = "";
  if (thePlugins === "checkbox" || thePlugins === "radio") {
    //这两种类型单独做模板
    html = radselectMakeHtml(json, thePlugins, oNode);
  } else {
    html = makeHtml(json, thePlugins, oNode, editor);
  }

  // 元素名称是否显示，以及显示位置
  if (json.namepos == "left" || json.namepos == "right") {
    var nameText = json.name; //"<span>" + json.name + "</span>";
    html = json.namepos == "left" ? nameText + html : html + nameText;
  }
  if (thePlugins === 'diagnose') { // 为诊断元素时 因结构不同提前return html
    return html;
  }
  if (thePlugins === 'prescription') { // 为处方元素时 因结构不同提前return html
    return html;
  }
  if (!oNode) {
    try {
      oNode = createElement("span", json.id);
      oNode.setAttribute("contenteditable", "false");
      oNode.setAttribute(
        "class",
        "ctrl-bg " +
          (thePlugins == "checkbox" ? "checkbox-bg" : "") +
          " " +
          (thePlugins == "signature" ? " signature" : "") +
          " " +
          (thePlugins == "combine" ? " combine-bg no-border": "")
      );
      setAttrs(oNode, json);
      if (thePlugins === "signature") {
        var signature = "";
        for (var j = 0; j < signatureHtml.length; j++) {
          signature += signatureHtml[j];
        }
        oNode.innerHTML = signature;
        return oNode;
      }
      oNode.innerHTML = html;

      // 时间元素的逻辑处理
      if (thePlugins === "datedomain") {
        if (json.inserCurDate == "on") {
          // oNode.innerText = insertCurDate(json.dateFormat);
        }
      }

      return oNode;
    } catch (e) {
      console.log(e);
      return null;
    }
  } else {
    oNode.setAttribute("id", json.id);
    updateAllAttrs(oNode, json);
    if (thePlugins === "signature") {
      var signature = "";
      for (var j = 0; j < signatureHtml.length; j++) {
        signature += signatureHtml[j];
      }
      oNode.innerHTML = signature;
      return oNode;
    }
    // 修改元素前，校验是否为引入元素，属性值是否编辑过。。。
    if (oNode.getAttribute("_attrs")) {
      var isOk = true;
      var attr_one = JSON.parse(oNode.getAttribute("_attrs"));
      var attr_two = JSON.parse(oNode.getAttribute("attrs"));
      var key_value = Object.getOwnPropertyNames(attr_one);
      for (var i = 0; i < key_value.length; i++) {
        var item = key_value[i];
        if (
          item == "options" ||
          item == "userDefault" ||
          attr_two[item] == undefined ||
          item == "isRange"
        )
          continue;
        if (attr_one[item] != attr_two[item]) {
          isOk = false;
        }
      }
      if (
        attr_one.options != "[]" &&
        attr_one.options && attr_two.options &&
        attr_one.options.length !=
        attr_two.options.length
      ) {
        isOk = false;
      }
      if (!isOk) {
        oNode.setAttribute("isQuote", "true");
      } else {
        oNode.setAttribute("isQuote", "false");
      }
    }

    // 时间元素的逻辑处理
    if (thePlugins === "datedomain") {
      if (json.inserCurDate == "on") {
        // oNode.innerText = insertCurDate(json.dateFormat);
      }
    }

    oNode.innerHTML = html;
    return oNode;
  }
};

// 段落元素的源码构建函数
AX.mh["paragraph"] = function(json, thePlugins, oNode) {
  window.$ = this.$;
  var editor = this.editor;

  function setAttrs(node, json) {
    node.setAttribute("title", json.name || "");
    node.setAttribute("isSecret", !!json.isSecret);
    node.setAttribute("isPrint", !!json.isPrint);
    node.setAttribute("isLock", !!json.isLock);
    node.setAttribute("start-stain", json.showBorder ? "[" : "");
    node.setAttribute("end-stain", json.showBorder ? "]" : "");
    node.setAttribute("cascadeId", json.cascadeId || "");
    node.setAttribute("showCondition", json.showCondition || "");
    node.setAttribute("attrs", JSON.stringify(json));
    node.setAttribute("paragraphType", json.paratype);
    oNode.setAttribute(
      "class",
      "ctrl-bg ctrl-field paragraphele paragraphele-" + json.paratype
    );

    //设置 段落的 行高等
    var paraBeforeIndNum = editor.queryCommandValue("rowspacing", "top");
    var paraAfterIndNum = editor.queryCommandValue("rowspacing", "bottom");
    var paraLineheight = editor.queryCommandValue("lineheight");

    var firlineIndNum = editor.queryCommandValue("indent");
    if (
      !isNaN(parseInt(firlineIndNum)) &&
      parseInt(firlineIndNum) == firlineIndNum
    ) {
      firlineIndNum = firlineIndNum + "px";
    }
    var styles =
      "margin-top:" +
      paraBeforeIndNum +
      "px;margin-bottom" +
      paraAfterIndNum +
      "px;" +
      /*  + 'line-height:' + paraLineheight + ';' */
      "text-indent:" +
      firlineIndNum +
      ";";
    node.setAttribute("style", styles);
  }

  // 同步更新页面上所有该结构化元素
  function updateAllAttrs(node, json) {
    var id = json.id;
    var rsl = $("." + id, getBody(node));
    if (node.parentElement && rsl && rsl.length > 0) {
      for (var i = 0; i < rsl.length; i++) {
        setAttrs.call(this, rsl[i], json);
      }
    } else {
      setAttrs.call(this, node, json);
    }
  }

  function makeHtml(json) {
    var currText = oNode ? oNode.innerHTML : "",
      paragraphContent = "",
      contentNode = null,
      tags = oNode ? oNode.childNodes : [];
    // 兼容被分割的段落元素
    var isFirstNode = false;

    if (oNode) {
      if (oNode.id) {
        var prevDom = $("#" + oNode.id, getBody(oNode));
        // 由于被分割的节点的两个部分的id一直，如果当前的oNode和第一个被取到的节点的Node都是一样id
        // 说明当前的就是第一个
        if (prevDom[0] == oNode) {
          isFirstNode = true;
        }
      }

      // 判断这个节点之前是不是显示标题的，如果是，那么下面拼接paragraphContent的时候就过滤掉第一个
      var oldAttrsStr = oNode.getAttribute("attrs");
      var oldSingleTitle = "";
      try {
        var oldAttrs = JSON.parse(oldAttrsStr);
        oldSingleTitle = oldAttrs.singleTitle;
      } catch (error) {}
      var startIdx = 0;
      if (oldSingleTitle == "on" && isFirstNode) {
        startIdx = 1;
      }
      for (var i = startIdx; i < tags.length; i++) {
        var tag = tags[i];
        if (tag.nodeType != 1) {
          continue;
        }
        var titles = axTools.getByTagAttr("strong", "class", "ctrl-value", tag);
        if(titles.length > 0 && json.singleTitle == "on") {
          titles[0].parentElement.removeChild(titles[0])
        }
        paragraphContent += tag.outerHTML;
      }
    } else {
      isFirstNode = true;
      if (json.singleTitle) {
        paragraphContent = "&nbsp;";
      } else {
        paragraphContent = json.name;
      }
    }
    if (paragraphContent == "") {
      paragraphContent = "&nbsp;";
    }
    var html =
      paragraphContent == "&nbsp;" || paragraphContent == json.name
        ? '<div class="paragraphContent" style="margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;" contenteditable="true"><strong class="ctrl-value" contenteditable="false">【' +
          paragraphContent +
          "】</strong>&nbsp;</div>"
        : paragraphContent; //'<strong class="ctrl-value" style="'+((json.singleTitle && json.titleBg)?'display:block;margin: 15px 0;padding: 5px 10px;background:#'+json.titleBg:'')+'">' + (json.singleTitle?'<p>'+json.name+'</p>':json.name) + '</strong>'+(json.singleTitle?'<p style="margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;"> </p>':'');
    if (oNode && oldSingleTitle == "on" && json.singleTitle == "") {
      html = '<div class="paragraphContent" style="margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;" contenteditable="true"><strong class="ctrl-value" contenteditable="false">【' +
            json.name +
          "】</strong>&nbsp;</div>" + html;
    }
    if (json.singleTitle && isFirstNode) {
      html =
        (json.singleTitle ? '<p style="margin:0">' : "") +
        '<span class="ctrl-value" style="' +
        (json.singleTitle ? "display:block;padding: 5px 10px;" : "") +
        (json.titleBg ? "background:#" + json.titleBg : "") +
        '"><strong>' +
        json.name +
        "</strong></span>" +
        (json.singleTitle
          ? "</p>" +
            (paragraphContent == "&nbsp;"
              ? '<div class="paragraphContent" style="margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;">' +
                paragraphContent +
                "</div>"
              : paragraphContent)
          : "");
    }
    return html;
  }

  var html = makeHtml(json);
  if (!oNode) {
    try {
      oNode = createElement("div", json.id);
      setAttrs.call(this, oNode, json);
      oNode.setAttribute("attrs", JSON.stringify(json));
      oNode.setAttribute("axPlugins", thePlugins);
      oNode.innerHTML = html;
      return oNode;
    } catch (e) {
      console.log(e);
      return null;
    }
  } else {
    oNode.setAttribute("id", json.id);
    updateAllAttrs.call(this, oNode, json);
    oNode.innerHTML = html;
    var isLock = oNode.getAttribute("islock");
    if(isLock == "true" && editor.options.editorModel != "design") {
      var state = false;
    }else{
      var state = true;
    }
    var contents = axTools.getByClass("paragraphContent", oNode);
    for(var s = 0; s < contents.length; s++) {
      contents[s].setAttribute("contenteditable", state);
    }
    return oNode;
  }
};

// 医学表达式
/**
 *
 * @param {*} previewDom
 * @param {*} attrs
 * @param {*} thePlugins
 * @param {*} size
 * @param {*} markClass 医学表达式 是否生成为留痕标签的class标识
 */
AX.mh["medical"] = function(previewDom, attrs, thePlugins, size, markClass) {
  window.$ = this.$;
  window.html2canvas = this.html2canvas;
  return new Promise(function(resolve, reject) {
    if (!previewDom) {
      var previewStruct = AX.medicalPreview[thePlugins](true, attrs);
      var orgDom = document.getElementById("editor_make_html_org");
      if (orgDom && orgDom.parentElement) {
        orgDom.parentElement.removeChild(orgDom);
      }
      var structDom = document.createElement("div");
      structDom.innerHTML = previewStruct;
      // structDom.style.visibility = "hidden";
      structDom.id = "editor_make_html_org";
      document.getElementsByTagName("body")[0].appendChild(structDom);
      previewDom = structDom.children[0];
    }
    attrs = attrs || {};
    var width = size.sizeWidth - 0;
    var height = size.sizeHeight - 0;
    var canvas = document.createElement("canvas");
    canvas.width = width * 2;
    canvas.height = height * 2;
    canvas.style.width = width + "px";
    canvas.style.height = height + "px";
    var context = canvas.getContext("2d");
    context.scale(2, 2);
    html2canvas(previewDom, {
      scale: 1,
      canvas: canvas,
      width: width,
      height: height
    })
      .then(function(canvas) {
        var base64Data = canvas.toDataURL();
        var html =
          '<img src="' +
          base64Data +
          '" class="medical-expression ' +
          (markClass || "") + '" axplugins="' +
          thePlugins +
          '" sizeWidth="' +
          width +
          '" sizeHeight="' +
          height +
          "\" attrs='" +
          JSON.stringify({ attrs: attrs }) +
          "'>";
        resolve({
          imgStr: html,
          imgSrc: base64Data
        });
        // callback(html, base64Data);
      })
      .catch(function(error) {
        reject(error);
        // callback(null, null, error);
      });
  });
};

// 批注
AX.mh["note"] = function(data) {
  window.$ = this.$;
  var oNode = document.createElement("span");
  var history = [];
  history.push(
    JSON.stringify({
      noteUserId: data.userId,
      noteUser: data.userName,
      noteText: data.val
    })
  );
  oNode.setAttribute("noteText", data.val);
  oNode.setAttribute("noteUser", data.userName);
  oNode.setAttribute("noteTime", data.noteTime);
  oNode.setAttribute("history", history);
  oNode.setAttribute("contenteditable", "true");
  oNode.setAttribute("class", "ax-editor-note");
  oNode.setAttribute("axPlugins", "note");
  return oNode;
};

// 基本元素
AX.mh["macro"] = function(data) {
  window.$ = this.$;
  var oNode = document.createElement("span");
  oNode.setAttribute("id", data.id);
  oNode.setAttribute("title", data.name);
  oNode.setAttribute("isSecret", data.isSecret);
  oNode.setAttribute("isPrint", data.isPrint);
  oNode.setAttribute("attrs", JSON.stringify(data));
  oNode.setAttribute("contenteditable", "false");
  oNode.setAttribute("macroCode", data.code);
  oNode.setAttribute("class", "ctrl-bg ctrl-field macro-ctrl macro-" + data.id);
  oNode.setAttribute("axPlugins", "macro");
  oNode.innerHTML =
    '<span title="' +
    data.name +
    '" placeholder="' +
    data.name +
    '" secret-value="' +
    data.isSecret +
    '" contenteditable="false" class="ctrl-value"></span>';
  return oNode;
};

AX.plugins['marktag'] = function () {
    var me = this,
        thePlugins = 'marktag';
    me.commands[thePlugins] = {
        execCommand: function (type, rang){
            var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
            var tmpNode = rang.document.createElement("span");
            tmpNode.setAttribute("class", "editor-new-add-text editor-free-text"); //设置class
            tmpNode.setAttribute("user", me.options.userInfo.name);
            tmpNode.setAttribute("time", time)
            return tmpNode;
        }
    }
    var popup = axTools.makePopup({
        me: me,
        type: thePlugins,
        delFunc: function (that){
            that.anchorEl.setAttribute('class', that.anchorEl.getAttribute("class") + " editor-free-text-hide");
            popup.hide();
        }
    });
    // popup.render();
    me.addListener('mouseover', function (t, evt) {
        var target = evt.target;
        var isDel = false;
        if (me.options.editorModel != "mark") {
            return;
        }
        if (target.className.indexOf("editor-mark-del-text") > -1 && !target.getAttribute("user")){
            isDel = true;
            target = evt.target.parentElement;
        }
        if (target.className.indexOf("editor-mark-del-text") > -1) {
            isDel = true;
        }
        if (target.className.indexOf("editor-mark") > -1 || target.className.indexOf("editor-new-add-text") > -1) {
            var text = axTools.getTextByNode(target);
            if (isDel) {
                if (axTools.hasClass(target, "editor-mark-del-text")) {
                    text = axTools.getTextByNode(target)
                }else {
                    text = axTools.getByClass("editor-mark-del-text", target)[0].innerText;
                }
            }
            var paragraphNode = AX.dom.domUtils.findParent(
                target,
                function (dom) {
                    return dom.tagName === "DIV" && axTools.hasClass(dom, "paragraphContent");
                },
                true,
                true
            );
            // console.log(evt.offsetX, evt.offsetY)
            // var leftDis = Math.ceil(evt.pageX - (me.document.documentElement.clientWidth - me.body.clientWidth) / 2)
            var left = evt.offsetX + 330 > paragraphNode.clientWidth ? paragraphNode.clientWidth - 345 : evt.offsetX // (me.body.clientWidth - target.offsetLeft) < 320?320:target.offsetLeft + 40;
            var top = evt.offsetY + 10 // target.offsetTop + 30 + target.offsetHeight;
            // console.log(left, top)
            var span = '<span class="mark-tip" style="position: absolute;z-index: 10000;top: '+ top +'px;left: '+ left +'px;width: 320px;padding: 5px 10px;background: #fffcd2;border: 1px solid #ccc;box-shadow: 0 0 3px #eee;/* font-weight: bold; */">'
            + target.getAttribute("user") + '  ' + (isDel ?"删除": "增加") + ' "' + text + '" 字符  时间：' + target.getAttribute("time")
            '</span>';
            var tips = axTools.getByClass("mark-tip", me.document);
            for(var i = 0;i < tips.length; i++) {
                var tip = tips[i];
                tip.parentElement.parentElement.removeChild(tip.parentElement);
            }
            var div = document.createElement("div");
            div.innerHTML = span;
            paragraphNode.appendChild(div);
        }else{
            var tips = axTools.getByClass("mark-tip", me.document);
            for(var i = 0;i < tips.length; i++) {
                var tip = tips[i];
                tip.parentElement.parentElement.removeChild(tip.parentElement);
            }
        }

        // axTools.commonEditTip(thePlugins,me,popup,evt);
    });
}

AX.plugins['hidemarktag'] = function () {
    var me = this,
        thePlugins = 'hidemarktag';
    me.commands[thePlugins] = {
        execCommand: function (type){
            var els = axTools.getByClass("editor-free-text", me.document);
            els = els.concat(axTools.getByClass("editor-mark-text", me.document));
            for(var i = 0; i < els.length; i++) {
                if(!axTools.hasClass(els[i], "markedCtrl")) {
                    // els[i].setAttribute('class', els[i].getAttribute("class") + " editor-free-text-hide")
                    els[i].parentElement.removeChild(els[i]);
                }
            }
        }
    }
}
/* eslint-disable */

/**
 * 医学表达式弹窗
 * @command medical
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'medical');
 * ```
 */
AX.plugins["medical"] = function() {
  var me = this,
    thePlugins = "medical";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        isEdit: isEdit,
        cssRules: "width:800px;height:400px;",
        dialogUrl: "dialogs/extends/medical.html"
      });
    }
  };
};


/**
 * 眼球突出度
 * @command exophthalmos
 * @method exophthalmos
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'exophthalmos');
 * ```
 */
AX.plugins["exophthalmos"] = function() {
  var me = this,
    thePlugins = "exophthalmos";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:510px;height:470px;",
        dialogUrl: "dialogs/extends/exophthalmos.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 通用型医学表达式1
 * @command common1
 * @method common1
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'common1');
 * ```
 */
AX.plugins["common1"] = function() {
  var me = this,
    thePlugins = "common1";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:510px;height:430px;",
        dialogUrl: "dialogs/extends/common1.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 通用型医学表达式2
 * @command common2
 * @method common2
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'common2');
 * ```
 */
AX.plugins["common2"] = function() {
  var me = this,
    thePlugins = "common2";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:510px;height:430px;",
        dialogUrl: "dialogs/extends/common2.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 通用型医学表达式3
 * @command common3
 * @method common3
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'common3');
 * ```
 */
AX.plugins["common3"] = function() {
  var me = this,
    thePlugins = "common3";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:510px;height:430px;",
        dialogUrl: "dialogs/extends/common3.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 通用型医学表达式4
 * @command common4
 * @method common4
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'common4');
 * ```
 */
AX.plugins["common4"] = function() {
  var me = this,
    thePlugins = "common4";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:510px;height:430px;",
        dialogUrl: "dialogs/extends/common4.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 月经表达式1
 * @command menses1
 * @method menses1
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'menses1');
 * ```
 */
AX.plugins["menses1"] = function() {
  var me = this,
    thePlugins = "menses1";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:500px;height:470px;",
        dialogUrl: "dialogs/extends/menses1.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();
  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 月经表达式2
 * @command menses2
 * @method menses2
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'menses2');
 * ```
 */
AX.plugins["menses2"] = function() {
  var me = this,
    thePlugins = "menses2";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:460px;height:470px;",
        dialogUrl: "dialogs/extends/menses2.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 月经表达式3
 * @command menses3
 * @method menses3
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'menses3');
 * ```
 */
AX.plugins["menses3"] = function() {
  var me = this,
    thePlugins = "menses3";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:460px;height:470px;",
        dialogUrl: "dialogs/extends/menses3.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 月经表达式4
 * @command menses4
 * @method menses4
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'menses4');
 * ```
 */
AX.plugins["menses4"] = function() {
  var me = this,
    thePlugins = "menses4";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:460px;height:470px;",
        dialogUrl: "dialogs/extends/menses4.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 瞳孔表达式
 * @command pupil
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'pupil');
 * ```
 */
AX.plugins["pupil"] = function() {
  var me = this,
    thePlugins = "pupil";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:460px;height:400px;",
        dialogUrl: "dialogs/extends/pupil.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 光定位表达式
 * @command light
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'light');
 * ```
 */
AX.plugins["light"] = function() {
  var me = this,
    thePlugins = "light";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:460px;height:420px;",
        dialogUrl: "dialogs/extends/light.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 胎心表达式
 * @command fetal
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'fetal');
 * ```
 */
AX.plugins["fetal"] = function() {
  var me = this,
    thePlugins = "fetal";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:460px;height:420px;",
        dialogUrl: "dialogs/extends/fetal.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 恒牙
 * @command permanentteeth
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'permanentteeth');
 * ```
 */
AX.plugins["permanentteeth"] = function() {
  var me = this,
    thePlugins = "permanentteeth";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:630px;height:560px;",
        dialogUrl: "dialogs/extends/permanentTeeth.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 乳牙
 * @command babyteeth
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'babyteeth');
 * ```
 */
AX.plugins["babyteeth"] = function() {
  var me = this,
    thePlugins = "babyteeth";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:500px;height:560px;",
        dialogUrl: "dialogs/extends/babyTeeth.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 混合牙
 * @command mixteeth
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'mixteeth');
 * ```
 */
AX.plugins["mixteeth"] = function() {
  var me = this,
    thePlugins = "mixteeth";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:600px;height:630px;",
        dialogUrl: "dialogs/extends/mixTeeth.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

/**
 * 牙体图
 * @command mixteeth2
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'mixteeth2');
 * ```
 */
AX.plugins["mixteeth2"] = function() {
  var me = this,
    thePlugins = "mixteeth2";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        hideBtns: true,
        isEdit: isEdit,
        cssRules: "width:800px;height:450px;",
        dialogUrl: "dialogs/extends/mixTeeth2.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();

  me.addListener("click mouseover", function(t, evt) {
    axTools.expressionHover(evt, thePlugins, popup, me);
  });
};

// 此文件为所有表达式预览部分的生成函数
// 之所以提取出来是因为我们从电子病例中导出到xml
// 信息提取出来后再导入xml的时候需要生成HTML的电子病例信息
// 这个时候表达式就需要一个独立的预览生成函数才可以导出图片信息

function createMarkMedicalHtml (html) { // 生成隐藏的结构，用于留痕使用
  var div = document.createElement('div');
  var reg = new RegExp("<br>", "g");
  div.innerHTML = html.replace(reg, "");
  div.children[0].id = "imgBoxDirty";
  div.children[0].className = "imgBox";
  div.children[0].style.position = "absolute";
  div.children[0].style.bottom = "-500px";
  div.children[0].style.left = "-1000px";
  return div.innerHTML;
}

AX.medicalPreview["pupil"] = function(
  isgenerator,
  attrs,
  modelType
) {
  var value1 = attrs.value0,
    value2 = attrs.value1,
    value3 = attrs.value2,
    value4 = attrs.value3,
    value5 = attrs.value4,
    value6 = attrs.value5,
    value7 = attrs.value6;
  // var html =
  // '<div id="imgBox" class="imgBox">' +
  //   '<div class="img-left">' +
  //       '<li><span class="ivalue0"><i>value1</i></span></li>' +
  //       '<li><span class="ivalue2"><i>value3</i></span></li>' +
  //       '<li><span class="ivalue5"><i>value6</i></span></li>' +
  //   '</div>' +
  //   '<div class="img-center">' +
  //       '<li><span class="ivalue3"><i>value4</i></span></li>' +
  //   '</div>' +
  //   '<div class="img-right">' +
  //       '<li><span class="ivalue1"><i>value2</i></span></li>' +
  //       '<li><span class="ivalue4"><i>value5</i></span></li>' +
  //       '<li><span class="ivalue6"><i>value7</i></span></li>' +
  //   '</div>' +
  // '</div>';
  var html =
    '<div id="imgBox" class="imgBox">' +
    '<div class="img-left">' +
    '<li><span class="ivalue0"><i>' +
    value1 +
    "</i></span></li>" +
    '<li><span class="ivalue2"><i>' +
    value3 +
    "</i></span></li>" +
    '<li><span class="ivalue5"><i>' +
    value6 +
    "</i></span></li>" +
    "</div>" +
    '<div class="img-center">' +
    '<li><span class="ivalue3"><i>' +
    value4 +
    "</i></span></li>" +
    "</div>" +
    '<div class="img-right">' +
    '<li><span class="ivalue1"><i>' +
    value2 +
    "</i></span></li>" +
    '<li><span class="ivalue4"><i>' +
    value5 +
    "</i></span></li>" +
    '<li><span class="ivalue6"><i>' +
    value7 +
    "</i></span></li>" +
    "</div>" +
    "</div>";
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/pupil.css">';
  }

  return html;
};


AX.medicalPreview["menses1"] = function(isgenerator, attrs, modelType) {
  var value1 = attrs.firstMenses,
    value2 = attrs.period,
    value3 = attrs.cycle,
    value4 = attrs.lastMenses;
  var html = '<div id="imgBox" class="imgBox">'+
      '<div class="left val-box" id="firstMenses"><span class="img-tip firstMenses">'+value1+'</span></div>'+
      '<div class="center">'+
          '<div class="val-box" id="period"><span class="img-tip period">'+value2+'</span></div>'+
          '<div class="line"></div>'+
          '<div class="val-box" id="cycle"><span class="img-tip cycle">'+value3+'</span></div>'+
      '</div>'+
      '<div class="right val-box" id="lastMenses"><span class="img-tip lastMenses">'+value4+'</span></div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/expression.css">';
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/menses1.css">';
  }
  return html;
}

AX.medicalPreview["menses2"] = function(isgenerator, attrs, modelType) {
  var value1 = attrs.firstMenses,
    value3 = attrs.period,
    value4 = attrs.cycle,
    value2 = attrs.lastMenses;
  var html = '<div id="imgBox" class="imgBox">'+
    '<div>'+
      '<div class="box" id="firstMenses"><span class="img-tip firstMenses">'+value1+'</span></div><br>'+
      '<div class="h-line"></div><br>'+
      '<div class="box" id="lastMenses"><span class="img-tip lastMenses">'+value2+'</span></div>'+
    '</div>'+
    '<div class="v-line"></div>'+
    '<div>'+
      '<div class="box" id="period"><span class="img-tip period">'+value3+'</span></div><br>'+
      '<div class="h-line"></div><br>'+
      '<div class="box" id="cycle"><span class="img-tip cycle">'+value4+'</span></div>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/expression.css">';
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/menses2.css">';
  }
  return html;
}

AX.medicalPreview["menses3"] = function(isgenerator, attrs, modelType) {
  var value1 = attrs.firstMenses,
    value2 = attrs.period,
    value3 = attrs.cycle,
    value4 = attrs.lastMenses;
  var html = '<div id="imgBox" class="imgBox">'+
    '<div class="left val-box" id="firstMenses"><span class="img-tip firstMenses">'+value1+'</span></div>'+
    '<div class="left-line"></div>'+
    '<div class="right-line"></div>'+
    '<div class="period">'+
      '<div class="val-box" id="period"><span class="img-tip period">'+value2+'</span></div>'+
    '</div>'+
    '<div class="cycle">'+
      '<div class="val-box" id="cycle"><span class="img-tip cycle">'+value3+'</span></div>'+
    '</div>'+
    '<div class="right">'+
      '<div class="val-box" id="lastMenses"><span class="img-tip lastMenses">'+value4+'</span></div>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/expression.css">';
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/menses3.css">';
  }
  return html;
}

AX.medicalPreview["menses4"] = function(isgenerator, attrs, modelType) {
  var value1 = attrs.firstMenses,
    value2 = attrs.period,
    value3 = attrs.cycle;
  var html = '<div id="imgBox" class="imgBox">'+
    '<div class="left val-box" id="firstMenses"><span class="img-tip firstMenses">'+value1+'</span></div>'+
    '<div class="lean-line"></div>'+
    '<div class="center">'+
      '<div class="val-box" id="period"><span class="img-tip period">'+value2+'</span></div>'+
      '<div class="line"></div>'+
      '<div class="val-box" id="cycle"><span class="img-tip cycle">'+value3+'</span></div>'+
   ' </div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/expression.css">';
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/menses4.css">';
  }
  return html;
}

AX.medicalPreview["fetal"] = function(isgenerator, attrs, modelType) {
  var value1 = attrs.value0,
    value2 = attrs.value1,
    value3 = attrs.value2,
    value4 = attrs.value3,
    value5 = attrs.value4,
    value6 = attrs.value5;
  var html = '<div id="imgBox" class="imgBox">'+
    '<div class="img-left">'+
        '<li><span class="ivalue0"><i>'+value1+'</i></span></li>'+
        '<li><span class="beforeLine"></span><span class="ivalue1"><i>'+value2+'</i></span><span class="afterLine"></span></li>'+
        '<li><span class="ivalue2"><i>'+value3+'</i></span></li>'+
    '</div>'+
    '<div class="img-center">'+
    '</div>'+
    '<div class="img-right">'+
        '<li><span class="ivalue3"><i>'+value4+'</i></span></li>'+
        '<li><span class="beforeLine"></span><span class="ivalue4"><i>'+value5+'</i></span><span class="afterLine"></span></li>'+
        '<li><span class="ivalue5"><i>'+value6+'</i></span></li>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/fetal.css">';
  }
  return html;
}

AX.medicalPreview["light"] = function(isgenerator, attrs, modelType) {
  var value1 = attrs.value0,
    value2 = attrs.value1,
    value3 = attrs.value2,
    value4 = attrs.value3,
    value5 = attrs.value4,
    value6 = attrs.value5,
    value7 = attrs.value6,
    value8 = attrs.value7,
    value9 = attrs.value8;
  var html = '<div id="imgBox" class="imgBox">'+
    '<div class="img-left">'+
        '<li><span class="ivalue0"><i>'+value1+'</i></span></li>'+
        '<li><span class="ivalue3"><i>'+value4+'</i></span></li>'+
        '<li><span class="ivalue6"><i>'+value7+'</i></span></li>'+
    '</div>'+
    '<div class="img-center">'+
        '<li><span class="ivalue1"><i>'+value2+'</i></span></li>'+
        '<li><span class="ivalue4"><i>'+value5+'</i></span></li>'+
        '<li><span class="ivalue7"><i>'+value8+'</i></span></li>'+
    '</div>'+
    '<div class="img-right">'+
        '<li><span class="ivalue2"><i>'+value3+'</i></span></li>'+
        '<li><span class="ivalue5"><i>'+value6+'</i></span></li>'+
        '<li><span class="ivalue8"><i>'+value9+'</i></span></li>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/light.css">';
  }
  return html;
}

AX.medicalPreview["permanentteeth"] = function(isgenerator, modelType) {
  var html = '<div id="imgBox" class="imgBox">'+
    '<div class="topTeethImg clearfloat">'+
      '<span class="teethItemImg teethItemImg0" teeth="0"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI0" teeth="0"></i></span>'+
      '<span class="teethItemImg teethItemImg1" teeth="1"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI1" teeth="1"></i></span>'+
      '<span class="teethItemImg teethItemImg2" teeth="2"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI2" teeth="2"></i></span>'+
      '<span class="teethItemImg teethItemImg3" teeth="3"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI3" teeth="3"></i></span>'+
      '<span class="teethItemImg teethItemImg4" teeth="4"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI4" teeth="4"></i></span>'+
      '<span class="teethItemImg teethItemImg5" teeth="5"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI5" teeth="5"></i></span>'+
      '<span class="teethItemImg teethItemImg6" teeth="6"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI6" teeth="6"></i></span>'+
      '<span class="teethItemImg teethItemImg7" teeth="7"><div class="h-line"></div><div class="v-line"></div><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI7" teeth="7"></i></span>'+
      '<span class="teethItemImg teethItemImg8" teeth="8"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI8" teeth="8"></i></span>'+
      '<span class="teethItemImg teethItemImg9" teeth="9"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI9" teeth="9"></i></span>'+
      '<span class="teethItemImg teethItemImg10" teeth="10"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI10" teeth="10"></i></span>'+
      '<span class="teethItemImg teethItemImg11" teeth="11"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI11" teeth="11"></i></span>'+
      '<span class="teethItemImg teethItemImg12" teeth="12"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI12" teeth="12"></i></span>'+
      '<span class="teethItemImg teethItemImg13" teeth="13"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI13" teeth="13"></i></span>'+
      '<span class="teethItemImg teethItemImg14" teeth="14"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI14" teeth="14"></i></span>'+
      '<span class="teethItemImg teethItemImg15" teeth="15"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI15" teeth="15"></i></span>'+
    '</div><br />'+
    '<div class="bottomTeethImg clearfloat">'+
      '<span class="teethItemImg teethItemImg16" teeth="16"><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI16" teeth="16"></i></span>'+
      '<span class="teethItemImg teethItemImg17" teeth="17"><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI17" teeth="17"></i></span>'+
      '<span class="teethItemImg teethItemImg18" teeth="18"><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI18" teeth="18"></i></span>'+
      '<span class="teethItemImg teethItemImg19" teeth="19"><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI19" teeth="19"></i></span>'+
      '<span class="teethItemImg teethItemImg20" teeth="20"><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI20" teeth="20"></i></span>'+
      '<span class="teethItemImg teethItemImg21" teeth="21"><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI21" teeth="21"></i></span>'+
      '<span class="teethItemImg teethItemImg22" teeth="22"><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI22" teeth="22"></i></span>'+
      '<span class="teethItemImg teethItemImg23" teeth="23"><div class="v-line"></div><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI23" teeth="23"></i></span>'+
      '<span class="teethItemImg teethItemImg24" teeth="24"><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI24" teeth="24"></i></span>'+
      '<span class="teethItemImg teethItemImg25" teeth="25"><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI25" teeth="25"></i></span>'+
      '<span class="teethItemImg teethItemImg26" teeth="26"><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI26" teeth="26"></i></span>'+
      '<span class="teethItemImg teethItemImg27" teeth="27"><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI27" teeth="27"></i></span>'+
      '<span class="teethItemImg teethItemImg28" teeth="28"><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI28" teeth="28"></i></span>'+
      '<span class="teethItemImg teethItemImg29" teeth="29"><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI29" teeth="29"></i></span>'+
      '<span class="teethItemImg teethItemImg30" teeth="30"><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI30" teeth="30"></i></span>'+
      '<span class="teethItemImg teethItemImg31" teeth="31"><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI31" teeth="31"></i></span>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/teeth.css">';
  }
  return html;
}

AX.medicalPreview["babyteeth"] = function(isgenerator, modelType) {
  var html =  '<div id="imgBox" class="imgBox">'+
    '<div class="topTeethImg clearfloat">'+
      '<span class="teethItemImg teethItemImg0" teeth="0"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">Ⅴ</span><i class="teethItemI teethItemI0" teeth="0"></i></span>'+
      '<span class="teethItemImg teethItemImg1" teeth="1"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">Ⅳ</span><i class="teethItemI teethItemI1" teeth="1"></i></span>'+
      '<span class="teethItemImg teethItemImg2" teeth="2"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">Ⅲ</span><i class="teethItemI teethItemI2" teeth="2"></i></span>'+
      '<span class="teethItemImg teethItemImg3" teeth="3"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">Ⅱ</span><i class="teethItemI teethItemI3" teeth="3"></i></span>'+
      '<span class="teethItemImg teethItemImg4" teeth="4"><div class="h-line"></div><div class="v-line"></div><span class="teethItemText" style="visibility:hidden">Ⅰ</span><i class="teethItemI teethItemI4" teeth="4"></i></span>'+
      '<span class="teethItemImg teethItemImg5" teeth="5"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">Ⅰ</span><i class="teethItemI teethItemI5" teeth="5"></i></span>'+
      '<span class="teethItemImg teethItemImg6" teeth="6"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">Ⅱ</span><i class="teethItemI teethItemI6" teeth="6"></i></span>'+
      '<span class="teethItemImg teethItemImg7" teeth="7"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">Ⅲ</span><i class="teethItemI teethItemI7" teeth="7"></i></span>'+
      '<span class="teethItemImg teethItemImg8" teeth="8"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">Ⅳ</span><i class="teethItemI teethItemI8" teeth="8"></i></span>'+
      '<span class="teethItemImg teethItemImg9" teeth="9"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">Ⅴ</span><i class="teethItemI teethItemI9" teeth="9"></i></span>'+
    '</div><br />'+
    '<div class="bottomTeethImg clearfloat">'+
      '<span class="teethItemImg teethItemImg10" teeth="10"><span class="teethItemText" style="visibility:hidden">Ⅴ</span><i class="teethItemI teethItemI10" teeth="10"></i></span>'+
      '<span class="teethItemImg teethItemImg11" teeth="11"><span class="teethItemText" style="visibility:hidden">Ⅳ</span><i class="teethItemI teethItemI11" teeth="11"></i></span>'+
      '<span class="teethItemImg teethItemImg12" teeth="12"><span class="teethItemText" style="visibility:hidden">Ⅲ</span><i class="teethItemI teethItemI12" teeth="12"></i></span>'+
      '<span class="teethItemImg teethItemImg13" teeth="13"><span class="teethItemText" style="visibility:hidden">Ⅱ</span><i class="teethItemI teethItemI13" teeth="13"></i></span>'+
      '<span class="teethItemImg teethItemImg14" teeth="14"><div class="v-line"></div><span class="teethItemText" style="visibility:hidden">Ⅰ</span><i class="teethItemI teethItemI14" teeth="14"></i></span>'+
      '<span class="teethItemImg teethItemImg15" teeth="15"><span class="teethItemText" style="visibility:hidden">Ⅰ</span><i class="teethItemI teethItemI15" teeth="15"></i></span>'+
      '<span class="teethItemImg teethItemImg16" teeth="16"><span class="teethItemText" style="visibility:hidden">Ⅱ</span><i class="teethItemI teethItemI16" teeth="16"></i></span>'+
      '<span class="teethItemImg teethItemImg17" teeth="17"><span class="teethItemText" style="visibility:hidden">Ⅲ</span><i class="teethItemI teethItemI17" teeth="17"></i></span>'+
      '<span class="teethItemImg teethItemImg18" teeth="18"><span class="teethItemText" style="visibility:hidden">Ⅳ</span><i class="teethItemI teethItemI18" teeth="18"></i></span>'+
      '<span class="teethItemImg teethItemImg19" teeth="19"><span class="teethItemText" style="visibility:hidden">Ⅴ</span><i class="teethItemI teethItemI19" teeth="19"></i></span>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/teeth.css">';
  }
  return html;
}

AX.medicalPreview["mixteeth"] = function(isgenerator, modelType) {
  var html =  '<div id="imgBox" class="imgBox">'+
    '<div class="topTeethImg clearfloat">'+
      '<div class="topTeethImgHeng clearfloat">'+
        '<span class="teethItemImg teethItemImg0" teethType="1" teeth="0"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI0" teethType="1" teeth="0"></i></span>'+
        '<span class="teethItemImg teethItemImg1" teethType="1" teeth="1"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI1" teethType="1" teeth="1"></i></span>'+
        '<span class="teethItemImg teethItemImg2" teethType="1" teeth="2"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI2" teethType="1" teeth="2"></i></span>'+
        '<span class="teethItemImg teethItemImg3" teethType="1" teeth="3"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI3" teethType="1" teeth="3"></i></span>'+
        '<span class="teethItemImg teethItemImg4" teethType="1" teeth="4"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI4" teethType="1" teeth="4"></i></span>'+
        '<span class="teethItemImg teethItemImg5" teethType="1" teeth="5"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI5" teethType="1" teeth="5"></i></span>'+
        '<span class="teethItemImg teethItemImg6" teethType="1" teeth="6"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI6" teethType="1" teeth="6"></i></span>'+
        '<span class="teethItemImg teethItemImg7" teethType="1" teeth="7"><div class="h-line"></div><div class="v-line"></div><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI7" teethType="1" teeth="7"></i></span>'+
        '<span class="teethItemImg teethItemImg8" teethType="1" teeth="8"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI8" teethType="1" teeth="8"></i></span>'+
        '<span class="teethItemImg teethItemImg9" teethType="1" teeth="9"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI9" teethType="1" teeth="9"></i></span>'+
        '<span class="teethItemImg teethItemImg10" teethType="1" teeth="10"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI10" teethType="1" teeth="10"></i></span>'+
        '<span class="teethItemImg teethItemImg11" teethType="1" teeth="11"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI11" teethType="1" teeth="11"></i></span>'+
        '<span class="teethItemImg teethItemImg12" teethType="1" teeth="12"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI12" teethType="1" teeth="12"></i></span>'+
        '<span class="teethItemImg teethItemImg13" teethType="1" teeth="13"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI13" teethType="1" teeth="13"></i></span>'+
        '<span class="teethItemImg teethItemImg14" teethType="1" teeth="14"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI14" teethType="1" teeth="14"></i></span>'+
        '<span class="teethItemImg teethItemImg15" teethType="1" teeth="15"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI15" teethType="1" teeth="15"></i></span>'+
      '</div>'+
    '</div><br />'+
    '<div class="bottomTeethImg clearfloat">'+
      '<div class="bottomTeethImgHeng clearfloat">'+
        '<span class="teethItemImg teethItemImg16" teethType="1" teeth="16"><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI16" teethType="1" teeth="16"></i></span>'+
        '<span class="teethItemImg teethItemImg17" teethType="1" teeth="17"><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI17" teethType="1" teeth="17"></i></span>'+
        '<span class="teethItemImg teethItemImg18" teethType="1" teeth="18"><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI18" teethType="1" teeth="18"></i></span>'+
        '<span class="teethItemImg teethItemImg19" teethType="1" teeth="19"><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI19" teethType="1" teeth="19"></i></span>'+
        '<span class="teethItemImg teethItemImg20" teethType="1" teeth="20"><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI20" teethType="1" teeth="20"></i></span>'+
        '<span class="teethItemImg teethItemImg21" teethType="1" teeth="21"><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI21" teethType="1" teeth="21"></i></span>'+
        '<span class="teethItemImg teethItemImg22" teethType="1" teeth="22"><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI22" teethType="1" teeth="22"></i></span>'+
        '<span class="teethItemImg teethItemImg23" teethType="1" teeth="23"><div class="v-line"></div><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI23" teethType="1" teeth="23"></i></span>'+
        '<span class="teethItemImg teethItemImg24" teethType="1" teeth="24"><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI24" teethType="1" teeth="24"></i></span>'+
        '<span class="teethItemImg teethItemImg25" teethType="1" teeth="25"><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI25" teethType="1" teeth="25"></i></span>'+
        '<span class="teethItemImg teethItemImg26" teethType="1" teeth="26"><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI26" teethType="1" teeth="26"></i></span>'+
        '<span class="teethItemImg teethItemImg27" teethType="1" teeth="27"><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI27" teethType="1" teeth="27"></i></span>'+
        '<span class="teethItemImg teethItemImg28" teethType="1" teeth="28"><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI28" teethType="1" teeth="28"></i></span>'+
        '<span class="teethItemImg teethItemImg29" teethType="1" teeth="29"><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI29" teethType="1" teeth="29"></i></span>'+
        '<span class="teethItemImg teethItemImg30" teethType="1" teeth="30"><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI30" teethType="1" teeth="30"></i></span>'+
        '<span class="teethItemImg teethItemImg31" teethType="1" teeth="31"><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI31" teethType="1" teeth="31"></i></span>'+
      '</div>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/teeth.css">';
  }
  return html;
}


AX.medicalPreview["mixteeth2"] = function(isgenerator, modelType) {
  var html = '<div id="imgBox" class="imgBox">'+
    '<div class="topTeethImg clearfloat">'+
        '<div class="topTeethImgHeng clearfloat">'+
            '<span class="teethItemImg teethItemImg0" teethType="1" teeth="0"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI0" teethType="1" teeth="0"></i></span>'+
            '<span class="teethItemImg teethItemImg1" teethType="1" teeth="1"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI1" teethType="1" teeth="1"></i></span>'+
            '<span class="teethItemImg teethItemImg2" teethType="1" teeth="2"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI2" teethType="1" teeth="2"></i></span>'+
            '<span class="teethItemImg teethItemImg3" teethType="1" teeth="3"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI3" teethType="1" teeth="3"></i></span>'+
            '<span class="teethItemImg teethItemImg4" teethType="1" teeth="4"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI4" teethType="1" teeth="4"></i></span>'+
            '<span class="teethItemImg teethItemImg5" teethType="1" teeth="5"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI5" teethType="1" teeth="5"></i></span>'+
            '<span class="teethItemImg teethItemImg6" teethType="1" teeth="6"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI6" teethType="1" teeth="6"></i></span>'+
            '<span class="teethItemImg teethItemImg7" teethType="1" teeth="7"><div class="h-line"></div><div class="v-line"></div><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI7" teethType="1" teeth="7"></i></span>'+
            '<span class="teethItemImg teethItemImg8" teethType="1" teeth="8"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI8" teethType="1" teeth="8"></i></span>'+
            '<span class="teethItemImg teethItemImg9" teethType="1" teeth="9"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI9" teethType="1" teeth="9"></i></span>'+
            '<span class="teethItemImg teethItemImg10" teethType="1" teeth="10"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI10" teethType="1" teeth="10"></i></span>'+
            '<span class="teethItemImg teethItemImg11" teethType="1" teeth="11"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI11" teethType="1" teeth="11"></i></span>'+
            '<span class="teethItemImg teethItemImg12" teethType="1" teeth="12"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI12" teethType="1" teeth="12"></i></span>'+
            '<span class="teethItemImg teethItemImg13" teethType="1" teeth="13"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI13" teethType="1" teeth="13"></i></span>'+
            '<span class="teethItemImg teethItemImg14" teethType="1" teeth="14"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI14" teethType="1" teeth="14"></i></span>'+
            '<span class="teethItemImg teethItemImg15" teethType="1" teeth="15"><div class="h-line"></div><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI15" teethType="1" teeth="15"></i></span>'+
        '</div>'+
    '</div><br>'+
    '<div class="bottomTeethImg clearfloat">'+
        '<div class="bottomTeethImgHeng clearfloat">'+
            '<span class="teethItemImg teethItemImg16" teethType="1" teeth="16"><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI16" teethType="1" teeth="16"></i></span>'+
            '<span class="teethItemImg teethItemImg17" teethType="1" teeth="17"><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI17" teethType="1" teeth="17"></i></span>'+
            '<span class="teethItemImg teethItemImg18" teethType="1" teeth="18"><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI18" teethType="1" teeth="18"></i></span>'+
            '<span class="teethItemImg teethItemImg19" teethType="1" teeth="19"><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI19" teethType="1" teeth="19"></i></span>'+
            '<span class="teethItemImg teethItemImg20" teethType="1" teeth="20"><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI20" teethType="1" teeth="20"></i></span>'+
            '<span class="teethItemImg teethItemImg21" teethType="1" teeth="21"><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI21" teethType="1" teeth="21"></i></span>'+
            '<span class="teethItemImg teethItemImg22" teethType="1" teeth="22"><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI22" teethType="1" teeth="22"></i></span>'+
            '<span class="teethItemImg teethItemImg23" teethType="1" teeth="23"><div class="v-line"></div><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI23" teethType="1" teeth="23"></i></span>'+
            '<span class="teethItemImg teethItemImg24" teethType="1" teeth="24"><span class="teethItemText" style="visibility:hidden">1</span><i class="teethItemI teethItemI24" teethType="1" teeth="24"></i></span>'+
            '<span class="teethItemImg teethItemImg25" teethType="1" teeth="25"><span class="teethItemText" style="visibility:hidden">2</span><i class="teethItemI teethItemI25" teethType="1" teeth="25"></i></span>'+
            '<span class="teethItemImg teethItemImg26" teethType="1" teeth="26"><span class="teethItemText" style="visibility:hidden">3</span><i class="teethItemI teethItemI26" teethType="1" teeth="26"></i></span>'+
            '<span class="teethItemImg teethItemImg27" teethType="1" teeth="27"><span class="teethItemText" style="visibility:hidden">4</span><i class="teethItemI teethItemI27" teethType="1" teeth="27"></i></span>'+
            '<span class="teethItemImg teethItemImg28" teethType="1" teeth="28"><span class="teethItemText" style="visibility:hidden">5</span><i class="teethItemI teethItemI28" teethType="1" teeth="28"></i></span>'+
            '<span class="teethItemImg teethItemImg29" teethType="1" teeth="29"><span class="teethItemText" style="visibility:hidden">6</span><i class="teethItemI teethItemI29" teethType="1" teeth="29"></i></span>'+
            '<span class="teethItemImg teethItemImg30" teethType="1" teeth="30"><span class="teethItemText" style="visibility:hidden">7</span><i class="teethItemI teethItemI30" teethType="1" teeth="30"></i></span>'+
            '<span class="teethItemImg teethItemImg31" teethType="1" teeth="31"><span class="teethItemText" style="visibility:hidden">8</span><i class="teethItemI teethItemI31" teethType="1" teeth="31"></i></span>'+
        '</div>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/teeth.css">';
  }
  return html;
}


AX.medicalPreview["common1"] = function(isgenerator, modelType) {
  var html = '<div id="imgBox">'+
    '<div>'+
        '<div class="box" id="value1"><span class="value1"></span></div>'+
       ' <div class="h-line"></div>'+
        '<div class="box" id="value3"><span class="value3"></span></div>'+
    '</div>'+
    '<div class="v-line"></div>'+
    '<div>'+
       '<div class="box" id="value2"><span class="value2"></span></div>'+
        '<div class="h-line"></div>'+
       '<div class="box" id="value4"><span class="value4"></span></div>'+
    '</div>'+
 '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/expression.css">';
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/common1.css">';
  }
  return html;
}

AX.medicalPreview["common2"] = function(isgenerator, modelType) {
  var html = '<div id="imgBox" class="imgBox">'+
    '<div class="left val-box" id="value1"><span class="value1"></span></div>'+
    '<div class="left-line"></div>'+
    '<div class="right-line"></div>'+
    '<div class="period">'+
        '<div class="val-box" id="value2"><span class="value2"></span></div>'+
    '</div>'+
    '<div class="cycle">'+
        '<div class="val-box" id="value4"><span class="value4"></span></div>'+
    '</div>'+
    '<div class="right">'+
        '<div class="val-box" id="value3"><span class="value3"></span></div>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/expression.css">';
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/common2.css">';
  }
  return html;
}

AX.medicalPreview["common3"] = function(isgenerator, modelType) {
  var html = '<div id="imgBox">'+
    '<div>'+
        '<div class="box clearfloat"><div class="float-right"><span class="img-tip margin-top-08 svalue1b" id="svalue1b"></span></div><div class="mainVal"><span class="value-tip svalue1" id="svalue1"></span></div></div><br>'+
        '<div class="h-line"></div><br>'+
        '<div class="box clearfloat"><div class="float-right"><span class="img-tip svalue3b" id="svalue3b"></span></div><div class="mainVal"><span class="value-tip svalue3" id="svalue3"></span></div></div>'+
    '</div>'+
    '<div class="v-line"></div>'+
    '<div>'+
        '<div class="box clearfloat"><div class="float-right"><span class="img-tip margin-top-08 svalue2b" id="svalue2b"></span></div><div class="mainVal"><span class="value-tip svalue2" id="svalue2"></span></div></div><br>'+
        '<div class="h-line"></div><br>'+
        '<div class="box clearfloat"><div class="float-right"><span class="img-tip svalue4b" id="svalue4b"></span></div><div class="mainVal"><span class="value-tip svalue4" id="svalue4"></span></div></div>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/expression.css">';
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/common3.css">';
  }
  return html;
}

AX.medicalPreview["common4"] = function(isgenerator, modelType) {
  var html = '<div id="imgBox" class="imgBox">' +
    '<div class="left val-box"><div class="float-right"><span class="img-tip margin-top-08 svalue1b" id="svalue1b"></span></div><div class="mainVal"><span class="value-tip svalue1" id="svalue1"></span></div></div>' +
    '<div class="left-line"></div>' +
    '<div class="right-line"></div>' +
    '<div class="period">' +
        '<div class="val-box"><div class="float-right"><span class="img-tip margin-top-08 svalue2b" id="svalue2b"></span></div><div class="mainVal"><span class="value-tip svalue2" id="svalue2"></span></div></div>' +
    '</div>' +
    '<div class="cycle">' +
        '<div class="val-box"><div class="float-right"><span class="img-tip margin-top-08 svalue4b" id="svalue4b"></span></div><div class="mainVal"><span class="value-tip svalue4" id="svalue4"></span></div></div>' +
    '</div>' +
    '<div class="right">' +
        '<div class="val-box"><div class="float-right"><span class="img-tip margin-top-08 svalue3b" id="svalue3b"></span></div><div class="mainVal"><span class="value-tip svalue3" id="svalue3"></span></div></div>' +
    '</div>' +
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/expression.css">';
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/common4.css">';
  }
  return html;
}



AX.medicalPreview["exophthalmos"] = function(isgenerator, modelType) {
  var html = '<div id="imgBox" class="imgBox">'+
    '<div class="eye-wrap">'+
      '<div class="lefttop-line line"></div>'+
      '<div class="left-inputwrap">'+
        '<label for="leftinput">左</label>'+
        '<span class="value-wrapper value1" id="value1"></span>'+
        '<span>mm</span>'+
      '</div>'+
      '<div class="leftbottom-line line"></div>'+
      '<div class="center">'+
        '<div class="center-inputwrap">'+
          '<label for="centerinput">眶距 </label>'+
          '<span class="value-wrapper value2" id="value2"></span>'+
          '<span>mm</span>'+
        '</div>'+
      '</div>'+
      '<div class="center-line"></div>'+
      '<div class="righttop-line line"></div>'+
      '<div class="right-inputwrap">'+
          '<label for="rightinput">右</label>'+
          '<span class="value-wrapper value3" id="value3"></span>'+
          '<span>mm</span>'+
      '</div>'+
      '<div class="rightbottom-line line"></div>'+
    '</div>'+
  '</div>';
  if (modelType == 'mark') {
    html += createMarkMedicalHtml(html)
  }
  if (isgenerator) {
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/expression.css">';
    html +=
      '<link rel="stylesheet" type="text/css" href="./axEditor/dialogs/extends/css/expression/exophthalmos.css">';
  }
  return html;
}

/* eslint-disable */

/**
 * 切换为设计模式
 * @command design
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'design');
 * ```
 */
AX.plugins["design"] = function () {
  var me = this,
    thePlugins = "design";
  me.commands[thePlugins] = {
    execCommand: function (type, isEdit) {
      if (this.options.editorModel == "design") {
        this.options.editorModel = this.options.defaultModel;
      } else {
        this.options.editorModel = "design";
        axTools.clearValueChange(me);
      }
      this.setEnabled();
      axTools.setStateLock(me);
    },
    queryCommandState: function () {
      if (this.options.editorModel == "design") {
        axTools.setCtrlShow(true, me.document, "design");
        return 1;
      } else {
        axTools.setCtrlShow(false, me.document);
        return 0;
      }
    },
    notNeedUndo: 1
  };
};

/**
 * 切换为书写模式
 * @command edit
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'edit');
 * ```
 */
AX.plugins["edit"] = function () {
  var me = this,
    thePlugins = "edit";
  var timer = null;
  me.commands[thePlugins] = {
    execCommand: function (type, isEdit) {
      if (this.options.editorModel == "edit") {
        this.options.editorModel = this.options.defaultModel;
        // axTools.setEditable(true, me.document, this.options.editorModel);
      } else {
        this.options.editorModel = "edit";
        axTools.setBodyEditAttr(me, false);
        axTools.setDateOnly(me);
        var allCtrl = axTools.getByClass("ctrl-bg", me.document);
        for (var i = 0; i < allCtrl.length; i++) {
          if (allCtrl[i].getAttribute("axplugins") !== "paragraphele" && allCtrl[i].getAttribute("axplugins") !== "combine") {
            axTools.valueChange(allCtrl[i]);
          }
        }
      }
      axTools.setEditable(true, me.document, this.options.editorModel);
      this.setEnabled();
      axTools.setStateLock(me);
    },
    queryCommandState: function () {
      if (this.options.editorModel == "edit") {
        return 1;
      } else {
        var currModel = this.options.editorModel;
        if (currModel == "design") {
          axTools.setBodyEditAttr(me, true);
        }
        return 0;
      }
    },
    notNeedUndo: 1
  };
  function getSelectedContents() { // 获取选中内容的HTML结构
    console.log(me.window.getSelection());
    if (me.window.getSelection) { //chrome,firefox,opera
      var range = me.window.getSelection().getRangeAt(0);
      var container = me.document.createElement('div');
      container.appendChild(range.cloneContents());
      return container.innerHTML;
      //return window.getSelection(); //只复制文本
    }
    else if (me.document.getSelection) { //其他
      var range = me.window.getSelection().getRangeAt(0);
      var container = me.document.createElement('div');
      container.appendChild(range.cloneContents());
      return container.innerHTML;
      //return document.getSelection(); //只复制文本
    }
    else if (me.document.selection) { //IE特有的
      return me.document.selection.createRange().htmlText;
      //return document.selection.createRange().text; //只复制文本
    }
  }
  me.addListener("keydown", function (t, evt) {
    var keycode = evt.keyCode || evt.which,
      currModel = me.options.editorModel,
      rang = me.selection.getRange(),
      parentNode = rang.startContainer.parentElement;

    // 判断当前复制粘贴权限
    if (keycode == 86 && evt.ctrlKey) {
    }
    //段落元素
    var paragraphNode = AX.dom.domUtils.findParent(
      rang.startContainer,
      function (dom) {
        return dom.tagName === "DIV" && axTools.hasClass(dom, "paragraphele");
      },
      true,
      true
    );
    //所属控件
    var ctrlNode = AX.dom.domUtils.findParent(
      rang.startContainer,
      function (dom) {
        return dom.tagName === "SPAN" && axTools.hasClass(dom, "ctrl-bg");
      },
      true,
      true
    );
    var table = AX.dom.domUtils.findParent(
      rang.startContainer,
      function (dom) {
        return dom.tagName === "TABLE";
      },
      true,
      true
    );
    //由于控件元素无法将光标置于控件后，此处增加ctrl+enter快捷键实现在控件后添加空格，shift+enter快捷键实现在控件前添加空格
    if (ctrlNode) {
      if ((evt.ctrlKey) && (keycode == 37 || keycode == 39)) {
        var blankDom = document.createElement("span");
        var rangeDom = new AX.dom.Range(me.document);
        var inTd = AX.dom.domUtils.findParent(
          rang.startContainer,
          function (dom) {
            return dom.tagName === "TD";
          },
          true,
          true
        );
        if (inTd) {
          // blankDom = document.createElement("div");
          // blankDom.style.display = "inline-block";
        }
        blankDom.innerHTML = "&#8203;";
        if (keycode == 39) {
          AX.dom.domUtils.insertAfter(ctrlNode, blankDom);
        } else if (keycode == 37) {
          ctrlNode.parentNode.insertBefore(blankDom, ctrlNode);
        }
        setRange(keycode, blankDom);
        axTools.stopDefault(evt);
        axTools.stopPropagation(evt);
        return;
      }
      function setRange (keyCode, box){
        setTimeout(function() {
          if (keyCode == 37) {
            me.document.body.click(); // 使原有控件失去焦点
            var rangeLeft = me.document.createRange();
            rangeLeft.setStart(box, 0); //
            // if (box.tagName === 'P') {
              rangeLeft.setStart(box, 0);
            // } else {
            //   rangeLeft.selectNodeContents(box);
            // }
            rangeLeft.collapse(false);
            var selLeft = me.window.getSelection();
            selLeft.removeAllRanges();
            selLeft.addRange(rangeLeft);
          } else {
            me.document.body.click();
            var rangeRight = me.document.createRange();
            rangeRight.setStart(box, 0);
            rangeRight.collapse(false);
            var selRight = me.window.getSelection();
            selRight.removeAllRanges();
            selRight.addRange(rangeRight);
          }
        }, 50)
      }
    }
    //由于段落元素无法将光标置于末尾，通过回车换行，此处增加ctrl+enter快捷键实现添加空行
    if (paragraphNode || table) {
      if ((evt.ctrlKey || evt.shiftKey) && (keycode == 13 || keycode == 108)) {
        var p = me.document.createElement("p");
        p.innerHTML = "<br>";
        if (evt.ctrlKey) {
          var isEdit = true;
          if(me.options.editorModel == "edit" || me.options.editorModel == "mark") {
            var bodyEdit = me.document.body.children[1].getAttribute("islock");
            if(bodyEdit == false) isEdit = false;
            if(paragraphNode.parentElement.getAttribute("axplugins") == "paragraphele") {
              var attrs = JSON.parse(paragraphNode.parentElement.getAttribute("attrs"));
              if(attrs.islock == "on") isEdit = false; else isEdit = true;
            }
          }
          if(paragraphNode.parentElement.getAttribute("axplugins") == "paragraphele") {
            p.className = "paragraphContent";
          }
          p.setAttribute("contenteditable", isEdit);
          AX.dom.domUtils.insertAfter(paragraphNode || table, p);
        } else {
          if (table) {
            table.parentElement.insertBefore(p, table);
          } else {
            paragraphNode.parentElement.insertBefore(p, paragraphNode);
          }
        }
        axTools.stopDefault(evt);
        axTools.stopPropagation(evt);
        setTimeout(function () {
          me.document.body.click();
          axTools.focusDom(me, p);
        }, 100);
        return;
      }
    }
    // 绑定可keydown 事件  下拉 日期选择 禁用回车事件
    try {
      // console.log(parentNode === null)
      if (parentNode === null) return;
      var axPluginsNode = AX.dom.domUtils.findParent(
        parentNode,
        function (dom) {
          return (
            dom.tagName === "SPAN" &&
            dom.getAttribute("axplugins") != null &&
            dom.getAttribute("attrs")
          );
        },
        true
      );
      if (axPluginsNode != null) {
        var axplugins = axPluginsNode.getAttribute("axplugins");
        var attrs = JSON.parse(axPluginsNode.getAttribute("attrs"));
        //数字或下拉框不可编辑条件判断
        // if (axplugins) {
        setTimeout(function () { // 做延迟处理
          me.fireEvent("contentchange"); // 触发事件，修改元素状态
        }, 300)
        // }
        if (
          (axplugins === "numberelement" &&
            (keycode == 13 || keycode == 108)) ||
          ((axplugins == "select" || axplugins == "selectmulti") &&
            !!!attrs.isEdit &&
            keycode != 13 &&
            keycode != 108 &&
            keycode != 40 &&
            keycode != 38)
        ) {
          axTools.stopDefault(evt);
          axTools.stopPropagation(evt);
          // return;
        }
        if (
          axplugins === "select" ||
          axplugins === "selectmulti" ||
          axplugins === "datedomain" ||
          axplugins === "haveornot" /*  || axplugins === "numberelement" */
        ) {
          // 监听上下键进行单独处理 上38 下40
          if (keycode == 40 || keycode == 38) {
            axPluginsNode.setAttribute("currItem", "");
            var selectBoxs = axTools.getByClass("edui-for-editattr", document),
              currBoxIndex = -1;
            for (var i = 0; i < selectBoxs.length; i++) {
              if (
                selectBoxs[i].style.visibility == "visible" &&
                selectBoxs[i].style.display != "none"
              ) {
                currBoxIndex = i;
                break;
              }
            }
            if (currBoxIndex > -1) {
              var items = axTools.getByClass(
                "edui-menuitem",
                selectBoxs[currBoxIndex]
              ),
                currHoveItem = -1;
              if (keycode == 38) {
                currHoveItem = items.length;
              }
              if (currBoxIndex > -1) {
                for (var j = 0; j < items.length; j++) {
                  if (axTools.hasClass(items[j], "edui-state-hover")) {
                    currHoveItem = j;
                  }
                }
                for (var j = 0; j < items.length; j++) {
                  axTools.removeClass(items[j], "edui-state-hover");
                }
                if (keycode == 40 && currHoveItem + 1 == items.length) {
                  currHoveItem = -1;
                }

                if (keycode == 38 && currHoveItem == 0) {
                  currHoveItem = items.length;
                }

                axTools.addClass(
                  items[keycode == 38 ? currHoveItem - 1 : currHoveItem + 1],
                  "edui-state-hover"
                );
                axPluginsNode.setAttribute(
                  "currItem",
                  keycode == 38 ? currHoveItem - 1 : currHoveItem + 1
                );
              }
              axTools.stopDefault(evt);
              axTools.stopPropagation(evt);
            }
          }

          if (keycode == 13 || keycode == 108) {
            if (axplugins != "datedomain") {
              axPluginsNode.children[0].click();
              axPluginsNode.children[0].focus();
            }
            //下拉等进行回车选中下拉项操作
            var currItemNum = axPluginsNode.getAttribute("currItem");
            if (currItemNum != "") {
              var selectBoxs = axTools.getByClass(
                "edui-for-editattr",
                document
              ),
                currBoxIndex = -1;
              for (var i = 0; i < selectBoxs.length; i++) {
                if (
                  selectBoxs[i].style.visibility == "visible" &&
                  selectBoxs[i].style.display != "none"
                ) {
                  currBoxIndex = i;
                  break;
                }
              }
              if (currBoxIndex > -1) {
                var items = axTools.getByClass(
                  "edui-menuitem",
                  selectBoxs[currBoxIndex]
                );
                items[currItemNum].click();
                axPluginsNode.setAttribute("currItem", "");
              }
            }

            //日期回车填充控件指定格式的当前时间
            if (axplugins === "datedomain") {
              var dateCtrlAttrs = JSON.parse(
                axPluginsNode.getAttribute("attrs")
              );
              axTools.getByClass(
                "ctrl-value",
                axPluginsNode
              )[0].innerHTML = axTools.getCurrDate(
                dateCtrlAttrs.dateFormat.replace("HH", "hh")
              );

              if (
                axTools.getByClass("layui-laydate", me.document)[0].style
                  .display != "none"
              ) {
                axTools.getByClass(
                  "layui-laydate",
                  me.document
                )[0].style.display = "none";
              } else {
                axTools.getByClass(
                  "layui-laydate",
                  me.document
                )[0].style.display = "block";
              }
            }
            axTools.stopDefault(evt);
            axTools.stopPropagation(evt);
            return false;
          }
        } else if (axplugins === "radio" || axplugins === "checkbox") {
          if (keycode == 37 || keycode == 39) {
            // 监听左右键 左37 右39
            var childNodes = axTools.getByTagAttr(
              "input",
              "type",
              axplugins,
              axPluginsNode.childNodes[0]
            ),
              currIndex = -1;
            if (childNodes.length == 0) {
              return;
            }
            for (var i = 0; i < childNodes.length; i++) {
              if (axTools.hasClass(childNodes[i], "focusBox")) {
                currIndex = i;
              }
              axTools.removeClass(childNodes[i], "selectBox");
            }
            axTools.removeClass(childNodes[currIndex], "focusBox");

            if (keycode == 37) {
              currIndex--;
              currIndex = currIndex < 0 ? childNodes.length - 1 : currIndex;
            }

            if (keycode == 39) {
              currIndex++;
              currIndex = currIndex > childNodes.length - 1 ? 0 : currIndex;
            }

            axTools.addClass(childNodes[currIndex], "focusBox");

            childNodes[currIndex].focus();

            axTools.stopDefault(evt);
            axTools.stopPropagation(evt);
          }

          //回车触发选中或取消选中功能
          if (keycode == 13 || keycode == 108) {
            var currCtrl = axTools.getByClass(
              "focusBox",
              axPluginsNode.childNodes[0]
            )[0];
            currCtrl.click();
            axTools.addClass(currCtrl, "selectBox");

            axTools.stopDefault(evt);
            axTools.stopPropagation(evt);
          }
        }
      }
    } catch (e) {
      console.log(e);
    }

    //控件内容区不允许回车
    var valNode = AX.dom.domUtils.findParent(
      rang.startContainer,
      function (dom) {
        return dom.tagName === "SPAN" && axTools.hasClass(dom, "ctrl-value");
      },
      true,
      true
    );
    if (
      valNode &&
      (keycode == 13 || keycode == 108) &&
      valNode.parentNode.getAttribute("axplugins") != "text"
    ) {
      axTools.stopDefault(evt);
      axTools.stopPropagation(evt);
      return;
    } else if (
      valNode &&
      (keycode == 13 || keycode == 108) &&
      valNode.parentNode.getAttribute("axplugins") == "text"
    ) {
      br = rang.document.createElement("br");
      rang
        .insertNode(br)
        .setStartAfter(br)
        .setCursor();
      evt.preventDefault();
    }

    // 留痕模式下自由文本留痕
    if (currModel == "mark" && parentNode.nodeType != 3) {
      var inNodeType = ctrlNode ? ctrlNode.getAttribute("axPlugins") : "";

      var islock = me.document.querySelectorAll(".ax-page-wrapper")[0].getAttribute("islock");
      // if (islock == 'false' && inNodeType == "") return;
      if (
        (!axTools.hasClass(parentNode, "ctrl-value") &&
          !axTools.hasClass(parentNode.childNodes[0], "ctrl-value")) ||
          !ctrlNode ||
        inNodeType == "text" ||
        inNodeType == "numberelement"
      ) {
        //需要忽略的按键
        var ignores = {
          "33": 1,
          "34": 1,
          "25": 1,
          "36": 1,
          "37": 1,
          "38": 1,
          "39": 1,
          "40": 1,
          "45": 1,
          "144": 1
        };
        if (!(keycode in ignores) && !(keycode >= 112 && keycode <= 123)) {
          //需要特殊处理的按键
          var specialCodes = { "8": 1, "190": 1, "191": 1, "220": 1, "229": 1 };
          if(currModel !== "design") { // 校验焦点是否在诊断或者处方内，在则中断操作
            // 校验选中的删除内容是否包含不可删除内容
            var isDiaOrpreStart = AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
              return dom.nodeType == 1 && dom.getAttribute("attrs") && dom.tagName === "SPAN" && (dom.getAttribute("axplugins") === "diagnose" || dom.getAttribute("axplugins") === "prescription");
            }, true);
            var isDiaOrpreEnd = AX.dom.domUtils.findParent(rang.endContainer.parentElement, function (dom) {
              return dom.nodeType == 1 && dom.getAttribute("attrs") && dom.tagName === "SPAN" && (dom.getAttribute("axplugins") === "diagnose" || dom.getAttribute("axplugins") === "prescription");
            }, true);
            var div = document.createElement('div');
            var isTitle = false,
              isHeader = false,
              isFooter = false,
              isEditText = true;
            if(!rang.collapsed) { // 选中状态
              div.appendChild(rang.cloneContents());
              for(var m = 0; m < axTools.getByClass("ctrl-value", div).length; m++) {
                if(axTools.getByClass("ctrl-value", div)[m].tagName === 'STRONG') {
                  isTitle = true;
                  break;
                }
              }
              isHeader = axTools.getByClass("ax-page-header", div).length > 0? true: false;
              isFooter = axTools.getByClass("ax-page-footer", div).length > 0? true: false;
            }
            isHeader = !isHeader && AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
              return dom.className.indexOf("ax-page-header") > -1
            }, true);
            isFooter = !isFooter && AX.dom.domUtils.findParent(rang.startContainer.parentElement, function (dom) {
              return dom.className.indexOf("ax-page-footer") > -1 || dom.className.indexOf("ax-page-pagenum") > -1
            }, true);
            if((rang.collapsed && (isDiaOrpreStart || isDiaOrpreEnd)) // 未框选时校验
            || axTools.getByClass("diagnose", div).length > 0   // 诊断校验
            || axTools.getByClass("prescription", div).length > 0 // 处方诊断
            || isTitle   // 段落标题校验
            || isHeader  // 页眉校验
            || isFooter  // 页脚校验
            ) {
              axTools.stopDefault(evt);
              axTools.stopPropagation(evt);
              return;
            }
            var parentCur = rang.startContainer.nodeType == 1?rang.startContainer: rang.startContainer.parentElement;
            while(parentCur.getAttribute("contenteditable") == undefined){
              parentCur = parentCur.parentElement;
            }
            isEditText = parentCur.getAttribute("contenteditable");
            if(
              isEditText == "false"  // 当前内容是否可编辑
            ){
              return;
            }
          }
          if ((keycode >= 32 && keycode <= 126) || specialCodes[keycode]) {
            var modifyNode = AX.dom.domUtils.findParent(
              rang.startContainer,
              function (dom) {
                return (
                  dom.tagName === "SPAN" &&
                  axTools.hasClass(dom, "editor-new-add-text")
                );
              },
              true,
              true
            ),
              delLabelNode = AX.dom.domUtils.findParent(
                rang.startContainer,
                function (dom) {
                  return (
                    dom.tagName === "SPAN" &&
                    axTools.hasClass(dom, "editor-mark-del-text")
                  );
                },
                true,
                true
              ),
              currParagraphNode = AX.dom.domUtils.findParent(
                rang.startContainer,
                function (dom) {
                  return (
                    dom.tagName === "DIV" &&
                    axTools.hasClass(dom, "paragraphele")
                  );
                },
                true,
                true
              );
            //选中文字删除或直接输入替换
            if (
              me.selection.getText().replace(/\u200B/g, "") != "" &&
              !event.ctrlKey &&
              !(event.ctrlKey && keycode == 67) &&
              !(event.ctrlKey == 17 && keycode == 86)
            ) {
              if (rang.startContainer.nodeName != "#text") {
                //控件ctrl-value内容节点被选中时，将光标置于结束位置
                rang = rang.setCursor(true);
              }
              rang.applyInlineStyle("span", {
                class: "editor-mark-del-text editor-free-text",
                user: me.options.userInfo.name,
                time: axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss"),
                contenteditable: false
              });
              //设置选区位置后会返回新的选区对象。此处重新绑定prevStart
              rang = rang.setCursor(true);
              rang = axTools.createMarkWrap(me);

              if (keycode == "8" || keycode == "46") {
                if (
                  axTools.hasClass(
                    rang.startContainer.parentNode,
                    "editor-new-add-text"
                  ) &&
                  rang.startContainer.parentNode.textContent.replace(
                    /\u200B/g,
                    ""
                  ) == ""
                ) {
                  rang.setEndAfter(
                    rang.startContainer.parentNode.previousElementSibling
                  );
                }
                axTools.stopDefault(evt);
              }
              //为该段落添加留痕标识
              if (currParagraphNode) {
                axTools.hasClass(currParagraphNode, "markedCtrl")
                  ? ""
                  : axTools.addClass(currParagraphNode, "markedCtrl");
              }
            } else if (!modifyNode && (keycode == "8" || keycode == "46")) {
              // 直接点击删除键
              var data = rang.startContainer.data,
                currIndex = AX.dom.domUtils.getNodeIndex(rang.startContainer),
                prevRangNode = null;
              if (
                data == undefined ||
                data.replace(/\u200B/g, "") ==
                "" /*  || (keycode==8 && axTools.hasClass(rang.startContainer.previousElementSibling,'editor-mark-del-text')) */
              ) {
                //内容为空时分为可能是空文本，也可能是非文本选区，此处对非文本选区进行处理，根据startOffset位置来查找对应得文字选区
                if (
                  keycode == 46 &&
                  axTools.hasClass(rang.startContainer, "paragraphContent")
                ) {
                  var scChildNodes = rang.startContainer.childNodes;
                  if (rang.startOffset <= scChildNodes.length - 1) {
                    rang.startContainer = scChildNodes[rang.startOffset];
                    rang.endContainer = scChildNodes[rang.startOffset];
                    rang.startOffset = 0;
                    rang.endOffset = 0;
                    data = rang.startContainer.data; //重新获取data，防止之前的data为空到之后后续无法执行
                  }
                }
                if (rang.startContainer.nodeName == "#text") {
                  if (currIndex != 0) {
                    prevRangNode =
                      rang.startContainer.parentElement.childNodes[
                      currIndex - 1
                      ];
                  }
                }
              }

              //光标在删除的标签内或backspace键前一个字符在删除标签内无需再执行删除操作
              if (
                delLabelNode ||
                (keycode == 8 &&
                  axTools.hasClass(prevRangNode, "editor-mark-del-text"))
              ) {
                axTools.stopDefault(evt);
                return;
              }
              var spliceStartIndex = rang.endOffset - 1,
                spliceEndIndex = rang.endOffset;
              if (keycode == 46) {
                //del键做下阻止默认事件，用程序模拟删除效果
                axTools.stopDefault(evt);
                if (
                  (data && data.replace(/\u200B/g, "") == "") ||
                  data == undefined
                ) {
                  var nextNode = rang.startContainer.nextSibling;
                  if (nextNode && nextNode.nodeName == "#text") {
                    data = nextNode.data;
                    rang.startContainer = nextNode;
                    rang.endContainer = nextNode;
                    spliceStartIndex = 0;
                    spliceEndIndex = 1;
                  }
                } else {
                  spliceStartIndex = rang.endOffset;
                  spliceEndIndex = rang.endOffset + 1;
                }
              }
              //内容为空或删除结束位置大于文本长度不做任何处理
              if (
                data == undefined ||
                data.replace(/\u200B/g, "") == "" ||
                spliceEndIndex > data.length
              ) {
                axTools.stopDefault(evt);
                // if(rangeDom.startContainer.previousSibling == null) {
                  // 删除到文本首位时，跳转到上一行
                  var prevDom = rang.startContainer;
                  var isEditor = false;
                  var editParent = null;
                  while(!prevDom.previousSibling){
                    prevDom = prevDom.parentElement;
                  }
                  editParent = prevDom;
                  // 校验元素是否可编辑
                  while(editParent.getAttribute("contenteditable") == undefined || editParent.getAttribute("contenteditable") == null){
                    editParent = editParent.parentElement;
                  }
                  isEditor = editParent.getAttribute("contenteditable")
                  if(isEditor == 'true') {
                    var tag = prevDom.previousSibling.childNodes.length > 0? prevDom.previousSibling.childNodes[prevDom.previousSibling.childNodes.length - 1]: "";
                    tag != "" && axTools.focusDomEnd(me, tag);
                  }
                // }
                return;
              }

              //用带删除标签的dom替换被删除的文字
              var delText = data.substring(spliceStartIndex, spliceEndIndex);
              data = data.split("");
              var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
              if (keycode == 46) {
                data.splice(
                  spliceStartIndex,
                  1,
                  '<span contenteditable="false" user="' + me.options.userInfo.name + '" time="' + time + '" class="editor-mark-del-text editor-free-text">' +
                  delText +
                  "</span>"
                );
              } else {
                data.splice(
                  spliceStartIndex,
                  1,
                  delText +
                  '<span contenteditable="false" user="' + me.options.userInfo.name + '" time="' + time + '"  class="editor-mark-del-text editor-free-text">' +
                  delText +
                  "</span>"
                );
              }
              rang.startContainer.data = "";
              me.execCommand("inserthtml", data.join(""));

              //替换之后重新定位选区位置，方便下一次删除
              var delNode = rang.endContainer.previousElementSibling;
              if (keycode == 46) {
                rang.setEndAfter(delNode).setCursor(true);
              } else {
                rang.setStartBefore(delNode).setCursor();
              }
              //为该段落添加留痕标识
              if (currParagraphNode) {
                axTools.hasClass(currParagraphNode, "markedCtrl")
                  ? ""
                  : axTools.addClass(currParagraphNode, "markedCtrl");
              }
              return;
            } else {
              // 其他情况
              if (!modifyNode) {
                rang = axTools.createMarkWrap(me);
                //为该段落添加留痕标识
                if (currParagraphNode) {
                  axTools.hasClass(currParagraphNode, "markedCtrl")
                    ? ""
                    : axTools.addClass(currParagraphNode, "markedCtrl");
                }
              }
              if (
                keycode == 46 &&
                axTools.hasClass(
                  rang.startContainer.parentElement,
                  "editor-new-add-text"
                )
              ) {
                var currPNode = rang.startContainer.parentElement,
                  currData = rang.startContainer.data;
                //若在新增区域的最后一位，则进行rang重定位
                if (
                  currData != undefined &&
                  rang.endOffset == currData.length
                ) {
                  rang.startContainer = currPNode;
                  rang.endContainer = currPNode;
                  var currIndex = AX.dom.domUtils.getNodeIndex(
                    rang.startContainer
                  );
                  if (keycode == 46) {
                    var currPChildren =
                      rang.startContainer.parentElement.childNodes,
                      targetNode = null;
                    if (currIndex < currPChildren.length - 1) {
                      targetNode = currPChildren[currIndex + 1];
                      rang.selectNode(targetNode).setCursor();
                    }
                  }
                  axTools.stopDefault(evt);
                }
              }
              if (
                keycode == 8 &&
                axTools.hasClass(
                  rang.startContainer.previousElementSibling,
                  "editor-mark-del-text"
                )
              ) {
                axTools.stopDefault(evt);
              }
              if (keycode == 46) {
                //此处在选中文字删除后，会出现del键删除文本不会留痕问题，原因是光标定位在edit标签内，此处先清除一次所有空edit标签，再执行删除，会出现第一次删不掉的现象，后续优化
                axTools.clearEmptyMarkLabel(me);
                axTools.stopDefault(evt);
              }
            }
          }
        }
      }
    }

    // 暂时只监听删除键，来满足是否可删除属性
    // 有其他需要时可调整此处判断

    // if (keycode != 8 && keycode != 46) {
    //   return;
    // }
    // var ctrl = me.selection.getRange().startContainer.parentNode,
    //   attrs = ctrl.getAttribute("attrs");
    // var ctrlPar = me.selection.getRange().startContainer.parentNode.parentNode,
    //   parentAttrs = ctrlPar.getAttribute("attrs");
    // if (axTools.hasClass(ctrl, "ctrl-value")) {
    //   attrs = ctrl.parentNode.getAttribute("attrs");
    // }
    // if (keycode == 8) { // backspace
    //   // 光标在元素外 删除校验
    //   if (
    //     rang.startContainer.previousSibling &&
    //     rang.startContainer.previousSibling.nodeName !== "#text"
    //   ) {
    //     var preAttrs = rang.startContainer.previousSibling.getAttribute("attrs");
    //   }
    //   // 校验 空白p标签 获取rang父元素的前一元素
    //   var p1 = rang.startContainer.parentElement.innerHTML && rang.startContainer.parentElement.innerHTML.replace(/\u200B/g, '');
    //   if (rang.startContainer.nodeType == 3 && (p1 == "<br>" || rang.startContainer.parentElement.innerHTML == "")) {
    //     var preAttrs = rang.startContainer.parentElement.previousSibling.getAttribute("attrs");
    //   }
    //   // 兼容 range 在p标签内且p标签内只有一个结构化元素时
    //   if (rang.startContainer.tagName == 'P' && rang.startContainer.childNodes.length == 1 && rang.startContainer.children[0].getAttribute("attrs")) {
    //     var preAttrs = rang.startContainer.children[0].getAttribute("attrs");
    //   }
    //   // 当rang作用于text节点时，避免全部删除后无法获取光标问题
    //   if (rang.startContainer.nodeType == 3 && rang.startContainer.data == "" && rang.startContainer.previousSibling.getAttribute("attrs")) {
    //     axTools.stopDefault(evt);
    //     axTools.stopPropagation(evt);
    //   }
    // }
    // if (keycode == 46) { // delete
    //   if (
    //     rang.startContainer.nextSibling &&
    //     rang.startContainer.nextSibling.nodeName !== "#text"
    //   ) {
    //     var preAttrs = rang.startContainer.nextSibling.getAttribute("attrs");
    //   }
    //   // 校验 光标在最后 #text内
    //   if (rang.startContainer.nodeType == 3 && rang.startContainer.nextSibling == null && rang.startContainer.parentElement.nextSibling.children[0].nodeType != 3) {
    //     var preAttrs = rang.startContainer.parentElement.nextSibling.children[0].getAttribute("attrs");
    //   }
    //   // 兼容 range 在p标签内且p标签内只有一个结构化元素时
    //   if (rang.startContainer.tagName == 'P' && rang.startContainer.childNodes.length == 1 && rang.startContainer.nextSibling.children[0].getAttribute("attrs") && (rang.startOffset == 0 || rang.startOffset == 1)) {
    //     var preAttrs = rang.startContainer.nextSibling.children[0].getAttribute("attrs");
    //   }
    //   // 当rang作用于text节点时，避免全部删除后无法获取光标问题
    //   if (rang.startContainer.nodeType == 3 && rang.startContainer.data == "" && rang.startContainer.nextSibling.getAttribute("attrs")) {
    //     axTools.stopDefault(evt);
    //     axTools.stopPropagation(evt);
    //   }
    // }


    // if (!!preAttrs) {
    //   var pos = rang.startOffset;
    //   if (pos === 0 || (rang.startContainer.tagName == 'P' && pos == 1) || (pos == 1 && rang.startContainer.nodeValue.replace(/\u200B/g, "") == '' && !(rang.startContainer.firstChild && rang.startContainer.firstChild.tagName == "IMG"))) {
    //     preAttrs = JSON.parse(preAttrs);
    //     if (preAttrs.isDel !== "on" && (currModel == "edit" || currModel == "mark")) {
    //       if (keycode == 46) {
    //         axTools.stopDefault(evt);
    //         axTools.stopPropagation(evt);
    //         return;
    //       };
    //       evt.preventDefault();
    //       var box = rang.startContainer.previousSibling;
    //       if (!!!box.getAttribute("axplugins")) {
    //         box = box.parentElement;
    //       }
    //       while (!box.previousSibling) {
    //         box = box.parentElement;
    //         if (box.tagName === "BODY") {
    //           break;
    //         }
    //       }
    //       box = box.previousSibling;
    //       me.document.body.click(); // 使原有控件失去焦点
    //       var rangeLeft = document.createRange();
    //       rangeLeft.selectNodeContents(box);
    //       rangeLeft.collapse(false);
    //       var selLeft = me.window.getSelection();
    //       selLeft.removeAllRanges();
    //       selLeft.addRange(rangeLeft);
    //       return;
    //     } else {
    //       if (rang.startContainer.tagName == 'P' && pos == 1) {
    //         rang.startContainer.removeChild(rang.startContainer.children[0]);
    //       } else {
    //         rang.startContainer.previousSibling.parentElement.removeChild(
    //           rang.startContainer.previousSibling
    //         );
    //       }
    //       axTools.stopDefault(evt);
    //       axTools.stopPropagation(evt);
    //     }
    //   }
    // }
    // // 当段落内无text类型文字，追加 &#8203 防止光标会到行末位置
    // // if (rang.startContainer.tagName == "P") {
    // //   rang.startContainer.innerHTML =
    // //     rang.startContainer.innerHTML.replace(/\u200B/g, "") + "&#8203";
    // // }
    // if (!!!attrs) {
    //   return;
    // }
    // attrs = JSON.parse(attrs);

    // // fix: 处理段落的删除与不可删除
    // //
    // if (ctrl && ctrl.getAttribute("axplugins") == "paragraphele") {
    //   if (currModel == "edit" || currModel == "mark") {
    //     if (!attrs.isDel) {
    //       evt.preventDefault();
    //       return false;
    //     } else {
    //       var contentpara = axTools.getByClass("paragraphContent", ctrl);
    //       if (me.selection.getRange().startContainer.innerHTML == "" || me.selection.getRange().startContainer.innerHTML == "<br>") {
    //         if (contentpara.length == 1) {
    //           ctrl.parentElement.removeChild(ctrl);
    //         } else {
    //           me.selection.getRange().startContainer.parentElement.removeChild(me.selection.getRange().startContainer);
    //         }
    //         evt.preventDefault();
    //       }
    //     }
    //   } else {
    //     var contentpara = axTools.getByClass("paragraphContent", ctrl);
    //     if (me.selection.getRange().startContainer.innerHTML == "" || me.selection.getRange().startContainer.innerHTML == "<br>") {
    //       if (contentpara.length == 1) {
    //         ctrl.parentElement.removeChild(ctrl);
    //       } else {
    //         me.selection.getRange().startContainer.parentElement.removeChild(me.selection.getRange().startContainer);
    //       }
    //       evt.preventDefault();
    //     }
    //   }
    // }

    // if (
    //   ctrl.innerText.replace(/(^\s*)|(\s*$)/g, "").replace(/\u200B/g, "") == ""
    // ) {
    //   //当控件内容为空时，再点删除键删除控件
    //   //编辑和留痕模式需判断控件属性是否可删除
    //   //其余模式跳过属性判断
    //   if (currModel == "edit" || currModel == "mark") {
    //     try {
    //       if (!!!attrs.isDel || !!!attrs.isEmpty) {
    //         return;
    //       }
    //     } catch (e) {
    //       console.log(e);
    //     }
    //     try {
    //       parentAttrs = JSON.parse(parentAttrs);
    //       if (!!!parentAttrs.isDel && parentAttrs.isDel != null) {
    //         // 当元素不可删除时，阻止删除默认事件
    //         evt.preventDefault();
    //         return false;
    //       }
    //     } catch (e) {
    //       console.log(e);
    //     }
    //     try {
    //       if (!!!attrs.isDel && attrs.isDel != null) {
    //         // 当元素不可删除时，阻止删除默认事件
    //         evt.preventDefault();
    //         return false;
    //       }
    //     } catch (e) {
    //       console.log(e);
    //     }
    //   }
    //   var pos = rang.startOffset;
    //   if (pos === 0) {
    //     try {
    //       rang.startContainer.previousSibling.parentElement.removeChild(
    //         rang.startContainer.previousSibling
    //       );
    //     } catch (e) {
    //       console.log(e);
    //     }
    //   }

    //   // if ()
    //   var i = 0,
    //     flag = false,
    //     ctrlParent = ctrl;
    //   while (i < 3 || !flag) {
    //     if (
    //       !axTools.hasClass(ctrlParent, "ctrl-bg") &&
    //       !axTools.hasClass(ctrlParent, "ctrl-value")
    //     ) {
    //       try {
    //         ctrlParent.removeChild(ctrl);
    //       } catch (e) {
    //         console.log(e);
    //       }
    //       flag = true;
    //     } else {
    //       ctrlParent = ctrl.parentNode;
    //     }
    //     i++;
    //     if (i > 5) {
    //       return;
    //     }
    //   }
    // } else { // 在下拉选择类型的控件 删除键清空内容
    //   if (ctrl.getAttribute("axplugins") == 'haveornot') {
    //     ctrl.setAttribute("selectval", "")
    //     ctrl.children[0].innerText = "";
    //   } else if (ctrl.getAttribute("axplugins") == 'select') {
    //     ctrl.setAttribute("selectvaltext", "")
    //     ctrl.children[0].innerText = "";
    //   }
    // }

    /**
     * 限制段落 合并
     */
    if (keycode == 8 || keycode == 46) {
      if (rang.collapsed) {
        paraNode = AX.dom.domUtils.findParent(
          rang.startContainer,
          function (node) {
            return (
              AX.dom.domUtils.isBlockElm(node) &&
              node.getAttribute("axplugins") === "paragraphele"
            );
          },
          true
        );
        // 判断rang区域 是否在段落末尾
        var isParaEnd =
          paraNode && rang.startOffset === rang.startContainer.length;
        // 段落末尾禁用 delete 键
        if (keycode == 46 && isParaEnd) {
          axTools.stopDefault(evt);
          axTools.stopPropagation(evt);
          return false;
        }
        // 判断rang区域 是否在段落开头
        var isParaStart =
          paraNode &&
          parent.tagName === "STRONG" &&
          rang.startOffset == 0 &&
          rang.startContainer.nodeType === 3;
        // 段落开头禁用 backspace 键
        if (keycode == 8 && isParaStart) {
          axTools.stopDefault(evt);
          axTools.stopPropagation(evt);
          return false;
        }
      }
    }
  });

  //元素失去焦点 如果为空 元素出现占位文本
  me.addListener("click", function (t, evt) {
    console.log('click---------------------')
    try {
      evt = evt || window.event;
      var el = evt.target || evt.srcElement;
      AX.globalTargetDom = el;
      var elems = me.document.getElementsByClassName("plugins-bg-foucs");
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        axTools.removeClass(elem, "plugins-bg-foucs");
      }
      if (!isViewModel()) {
        axTools.placeholderAssistHandler(el, me.body); //placeholder 去除空格
        if ("BODY" != el.tagName && "HTML" !== el.tagName) {
          var thePluginsNode = AX.dom.domUtils.findParent(
            el,
            function (dom) {
              return (
                dom.tagName === "SPAN" &&
                dom.getAttribute("axplugins") != null &&
                dom.getAttribute("attrs")
              );
            },
            true
          );
          var iptList = [];
          var keyList = [];
          var strList = [];
          if (thePluginsNode === null) {
            thePluginsNode = AX.dom.domUtils.findParent(
              el,
              function (dom) {
                return (
                  dom.getAttribute("axplugins") != null &&
                  dom.getAttribute("attrs")
                );
              },
              true
            );
            if (thePluginsNode){
              if (typeof this.options.clickElement == "function") {
                thePluginsNode.getAttribute("axplugins") === 'paragraphele' && this.options.clickElement(thePluginsNode.getAttribute("paragraphtype"));
              }
            }else{
              typeof this.options.clickElement == "function" && this.options.clickElement('iframe');
            }
            return
          };
          //以下为用户操作：选中checkbox radio span标签增加 selectVal 属性
          if (
            el.tagName === "INPUT" &&
            (el.getAttribute("type") === "radio" ||
              el.getAttribute("type") === "checkbox")
          ) {
            var attrs = JSON.parse(thePluginsNode.getAttribute("attrs"));
            if (me.options.editorModel === "edit" && !!attrs.readonly) {
              evt.preventDefault();
              return; // 编辑模式下，校验只读属性
            }
            setTimeout(function () {
              var type = el.getAttribute("type");
              if (el.getAttribute("type") === "checkbox") {
                if (el.getAttribute("checked") == null) {
                  el.setAttribute("checked", true);
                } else {
                  el.removeAttribute("checked");
                }
              } else {
                if (el.getAttribute("checked") === "true") {
                  el.checked = false;
                  el.removeAttribute("checked");
                } else {
                  AX.utils.each(
                    axTools.getByTagAttr(
                      "input",
                      "name",
                      el.getAttribute("name"),
                      thePluginsNode
                    ),
                    function (item, index) {
                      item.removeAttribute("checked");
                    }
                  );
                  el.setAttribute("checked", true);
                  thePluginsNode.setAttribute("selectValText", el.getAttribute("valuestr"));
                }
                setTimeout(function () {
                  var thePluginsNodeCombine = AX.dom.domUtils.findParent(
                    el,
                    function (dom) {
                      return dom.getAttribute("axplugins") == "combine";
                    },
                    true
                  );
                  if (thePluginsNodeCombine == null) {
                    thePluginsNodeCombine = me;
                  }
                  axTools.setCascadeMore(
                    el.getAttribute("value"),
                    thePluginsNode,
                    me,
                    thePluginsNodeCombine
                  );
                }, 50);
              }

              iptList = axTools.getByTagAttr(
                "input",
                "type",
                type,
                thePluginsNode
              );
              AX.utils.each(iptList, function (item, index) {
                var key = item.value;
                var str = item.getAttribute("valuestr");
                if (item.checked && key != "" && key != null) {
                  keyList.push(key);
                  strList.push(str);
                }
              });
              thePluginsNode.setAttribute("selectVal", keyList.join(","));
              thePluginsNode.setAttribute("selectValText", strList.join(","));
              if (me.options.editorModel == "mark") {
                thePluginsNode.getElementsByTagName("span")[0].click();
                me.execCommand("inserthtml", "");
              }
              axTools.setCascade(strList.join(","), attrs.id, me);
              axTools.setCheckboxDisabled(strList.join(","), attrs.id, me)
              axTools.setDatePickerDisabled(strList.join(","), attrs.id, me)
            }, 100);
          }

          if (thePluginsNode.getAttribute("axplugins") === "signature") {
            el.tagName == "IMG" ? el.parentNode.focus() : el.focus();
            me.execCommand(
              "getsignature",
              el.tagName == "IMG"
                ? el.parentNode.getAttribute("itemsignture")
                : el.getAttribute("itemsignture"),
              (el.getAttribute("userId") || "")
            );
          }else{ // 点击元素 返回元素类型
            if (thePluginsNode.getAttribute("axplugins")){
              if (typeof this.options.clickElement == "function") {
                this.options.clickElement(thePluginsNode.getAttribute("axplugins"));
              }
            }
          }

          // 增加控件获取焦点时的样式
          var ctrlValues = axTools.getByClass("ctrl-value", me.document);
          //删除获取焦点样式
          for (var i = 0; i < ctrlValues.length; i++) {
            axTools.removeClass(ctrlValues[i], "focusCtrl");
            var thePluginsNode1 = AX.dom.domUtils.findParent(
              ctrlValues[i],
              function (dom) {
                return (
                  dom.tagName === "SPAN" &&
                  dom.getAttribute("axplugins") != null &&
                  dom.getAttribute("attrs")
                );
              },
              true
            );
            axTools.removeClass(thePluginsNode1, "plugins-bg-foucs");
          }
          axTools.addClass(
            axTools.getByClass("ctrl-value", thePluginsNode)[0],
            "focusCtrl"
          );
          axTools.addClass(thePluginsNode, "plugins-bg-foucs");
          if (thePluginsNode.getAttribute("axplugins") === "combine" && axTools.getByClass("ctrl-value", thePluginsNode)[0].textContent.replace(/\u200B/g, "") == "") {
            var rangeDom = new AX.dom.Range(me.document);
            rangeDom.setStart(axTools.getByClass("ctrl-value", thePluginsNode)[0], 0).setCursor(false, true);
          }
        }else {
          typeof this.options.clickElement == "function" && this.options.clickElement('iframe');
        }
      }
    } catch (e) {
      console.log(e);
    }
  });

  // 监听主诉现病史改变
  me.addListener("keyup", function (t, evt) {
    var titleList = [
      { text: '主诉', type: 'PT_zs' },
      { text: '现病史', type: 'PT_xbs'}
    ];
    var $paragraphele = $(evt.target).parents('.paragraphele').length ? $(evt.target).parents('.paragraphele').clone() : $(AX.globalTargetDom).parents('.paragraphele').clone();
    var title = $paragraphele.attr('title');
    for(var i = 0; i < titleList.length; i++) {
      var $strong = $paragraphele.find('strong');
      $strong.remove();
      if (titleList[i].text === title) {
        me.fireEvent('paragraphKeyUp', { type: titleList[i].type, msg: $paragraphele.find('.paragraphContent').html() });
        break;
      }
    }
  });

  //双击改变页眉页脚编辑状态
  me.addListener("dblclick", function (type, evt) {
    var range = me.selection.getRange(),
      pageHeaders = axTools.getByClass("ax-editor-page-header", me.document),
      pageFooters = axTools.getByClass("ax-editor-page-footer", me.document),
      node = range.startContainer.parentNode;
    //设置页眉状态
    if (pageHeaders && pageHeaders.length > 0) {
      isHeader = !!AX.dom.domUtils.findParentByTagName(node, ["header"], true);
      if (!isHeader) {
        for (var i = 0; i < pageHeaders.length; i++) {
          axTools.removeClass(pageHeaders[i], "focus");
          pageHeaders[i].setAttribute("contenteditable", false);
        }
      } else {
        for (var i = 0; i < pageHeaders.length; i++) {
          axTools.addClass(pageHeaders[i], "focus");
          pageHeaders[i].setAttribute("contenteditable", true);
        }
      }
    }
    //设置页脚状态
    if (pageFooters && pageFooters.length > 0) {
      isFooter = !!AX.dom.domUtils.findParentByTagName(node, ["footer"], true);
      if (!isFooter) {
        for (var i = 0; i < pageFooters.length; i++) {
          axTools.removeClass(pageFooters[i], "focus");
          pageFooters[i].setAttribute("contenteditable", false);
        }
      } else {
        for (var i = 0; i < pageFooters.length; i++) {
          axTools.addClass(pageFooters[i], "focus");
          pageFooters[i].setAttribute("contenteditable", true);
        }
      }
    }
    // 可编辑模式下，双击医学表达式编辑
    if(evt.target.className.indexOf("medical-expression ") > -1) {
      var type = evt.target.getAttribute("axplugins");
      if (type) {
        baidu.editor.plugins[type].editdom = evt.target;
        me.execCommand(type);
      }
    }
    axTools.stopPropagation(evt);
  });

  me.addListener("selectionchange", function () {
    var bk = me.document.getElementById("bookfr");
    if(bk) { // 插入HTML时，光标位置插入书签，用于光标定位 -- zw
      bk.parentElement.removeChild(bk);
    }
    var range = me.selection.getRange(),
      pageHeaders = axTools.getByClass("ax-editor-page-header", me.document),
      pageFooters = axTools.getByClass("ax-editor-page-footer", me.document),
      node = range.startContainer.parentNode;
    //段落选中时显示边框，未选中时取消边框
    var paragraphNode = AX.dom.domUtils.findParent(
      node,
      function (dom) {
        return (
          dom.tagName === "DIV" &&
          dom.getAttribute("axplugins") == "paragraphele"
        );
      },
      true
    );
    var parentNode = AX.dom.domUtils.findParent(range.startContainer, function (
      dom
    ) {
      return dom.tagName === "SPAN" && dom.getAttribute("axplugins");
    });
    if (
      parentNode &&
      parentNode.getAttribute("axplugins") &&
      parentNode.getAttribute("axplugins") != "paragraphele" &&
      parentNode.getAttribute("axplugins") != "signature"
    ) {
      var className = parentNode.getAttribute("class");
      if (className && className.indexOf("plugins-bg-foucs") == -1) {
        axTools.addClass(parentNode, "plugins-bg-foucs");
      }
    }
    //先清除其他段落边框样式
    var paragraphArr = axTools.getByClass("paragraph-border", me.document);
    for (var i = 0; i < paragraphArr.length; i++) {
      axTools.removeClass(paragraphArr[i], "paragraph-border");
    }

    //给选中段落添加边框样式
    if (paragraphNode) {
      axTools.addClass(paragraphNode, "paragraph-border");
      me.options.selectParagraphType = paragraphNode.getAttribute(
        "paragraphtype"
      );
    } else {
      me.options.selectParagraphType = "";
    }

    //设置页眉状态
    if (pageHeaders && pageHeaders.length > 0) {
      isHeader = !!AX.dom.domUtils.findParentByTagName(node, ["header"], true);
      if (!isHeader) {
        for (var i = 0; i < pageHeaders.length; i++) {
          axTools.removeClass(pageHeaders[i], "focus");
          pageHeaders[i].setAttribute("contenteditable", false);
        }
        me.execCommand("inserthtml", "");
      }
    }
    //设置页脚状态
    if (pageFooters && pageFooters.length > 0) {
      isFooter = !!AX.dom.domUtils.findParentByTagName(node, ["footer"], true);
      if (!isFooter) {
        for (var i = 0; i < pageFooters.length; i++) {
          axTools.removeClass(pageFooters[i], "focus");
          pageFooters[i].setAttribute("contenteditable", false);
        }
        me.execCommand("inserthtml", "");
      }
    }

    checkCtrlValueValidate(range);
    // 删除操作时，校验级联属性
    var hNode = AX.dom.domUtils.findParent(
      node,
      function (dom) {
        return dom.tagName === "SPAN" && dom.getAttribute("attrs");
      },
      true
    );
    if (hNode) {
      var ctrl = axTools.getByClass("ctrl-value", hNode);
      if (ctrl.length) {
        var attrs = JSON.parse(hNode.getAttribute("attrs"));
        if (hNode.getAttribute("axplugins") == "radio" || hNode.getAttribute("axplugins") == "checkbox") {
          var val = hNode.getAttribute("selectValText") || hNode.getAttribute("selectval");
        } else {
          var val = ctrl[0].innerText;
        }
        if (val.replace(/\u200B/g, '') != "") {
          axTools.setCascade(val, attrs.id, me);
        }
      }
    }
  });

  me.ready(function () {
    // 设置水印背景
    var currVal = me.queryCommandValue("watermarksetting");
    me.execCommand("watermarksetting", currVal);

    // 设置页面缩放
    var currVal = me.queryCommandValue("paperscale");
    me.execCommand("paperscale", currVal);

    // 覆盖内部的alert方法
    if (typeof me.options.alertMsg == "function") {
      me.window.alert = me.options.alertMsg;
    }
    if (typeof me.options.confirmMsg == "function") {
      me.window.confirmMsg = me.options.confirmMsg;
    }
    if (typeof me.options.getServerDate == 'function') {
      me.options.getServerDate(function (time) {
        me.options.dateObj.serverDate = +new Date(time);
        me.options.dateObj.localDate = +new Date()
      });
    }

    me.window.onload = function () {
      // 设置水印背景
      var currVal = me.queryCommandValue("watermarksetting");
      me.execCommand("watermarksetting", currVal);

      // 设置页面缩放
      var currVal = me.queryCommandValue("paperscale");
      me.execCommand("paperscale", currVal);
    };

    // me.execCommand("sensitive"); // 敏感词校验
    me.addListener("copy", function (t, evt) {
      // if (me.options.editorModel == "mark" || me.options.editorModel == "edit") {
      // evt.preventDefault();
      console.log(t)
      //复制的内容
      var rang = getSelectedContents();
      if (!me.options.copySwitch) {
        if (rang.indexOf("axplugins") == -1) {
          evt.preventDefault();
          if (evt.clipboardData) {
            evt.clipboardData.setData("text/html", rang + 'copyswitch');
          } else if (window.clipboardData) {
            window.clipboardData.setData("html", rang + 'copyswitch');
          }
        }
      }
      // }
    });

    // 复制粘贴 权限控制   ------粘贴校验
    me.document.addEventListener("paste", function (t) {
      // if (me.options.editorModel == 'mark' || me.options.editorModel == 'edit') {
      var rang = me.selection.getRange();
      var start = rang.startContainer;
      t.preventDefault();
      t.stopPropagation();
      while((start.nodeType == 1 && start.getAttribute("contenteditable") == null) || start.nodeType == 3){
        start = start.parentElement;
      }
      if(start.getAttribute("contenteditable") == "false") { // 元素不可编辑时，禁止粘贴
        return;
      }
      var txt;
      if (t.clipboardData) {
        txt = t.clipboardData.getData('text/html');
      } else if (window.clipboardData) {
        txt = window.clipboardData.getData("text");
      }
      if (txt == "") {
        txt = t.clipboardData.getData('text/plain');
      }
      var div = document.createElement('html');
      // txt = txt.replace(/<div/g, "<span");
      // txt = txt.replace(/\/div>/g, "/span>");
      div.innerHTML = txt;
      var axPlugin = axTools.getByClass('ctrl-bg', div);
      if (axPlugin.length != 0) {
        var removeArr = axTools.getByClass("Apple-interchange-newline", div);
        if (removeArr.length > 0) {
          for (var i = 0; i < removeArr.length; i++) {
            removeArr[i].parentElement.removeChild(removeArr[i]);
          }
        }
        axTools.getUUID(axPlugin.length, me, function (data) {
          for (var i = 0; i < axPlugin.length; i++) {
            var item = axPlugin[i];
            var json = JSON.parse(item.getAttribute("attrs"));
            json.id = data.data[i]
            item.setAttribute('id', data.data[i])
            item.setAttribute('attrs', JSON.stringify(json));
          }
          me.execCommand("insertHtml", div.innerHTML);
        })
      } else {
        if (div.innerText.indexOf("copyswitch") > -1) {
          div.innerHTML = div.innerHTML.replace("copyswitch", "");
          txt = me.options.copyNumber ? div.innerText.slice(0, me.options.copyNumber) : div.innerHTML;
          me.execCommand("insertHtml", txt)
        } else {
          if (me.options.copySwitch) {
            var table = div.getElementsByTagName("table")[0];
            if (table) {
              table.style.width = '100%';
            }
            var copyContent = div.getElementsByTagName("body")[0];
            try {
              copyContent.children[0].style.backgroundColor = "";
              for(var a = 0; a < copyContent.children.length; a++) {
                copyContent.children[a].style = "";
                // copyContent.children[a].style.marginLeft = "";
                // copyContent.children[a].style.marginRight = "";
                // copyContent.children[a].style.textIndent = "";
              }
            } catch (e) { }
            var lis = div.getElementsByTagName("li");
            // if(lis.length > 0) {
            //   txt = me.options.copyNumber ? div.innerText.slice(0, me.options.copyNumber) : copyContent.innerText;
            // }else{
              txt = me.options.copyNumber ? div.innerText.slice(0, me.options.copyNumber) : copyContent.innerText;
            // }

            me.execCommand("insertHtml", txt)
          }
        }
      }
      // }
    })
  });

  me.addListener("contentchange", function (t, evt) {
    console.log(111111111111)
    var rang = me.selection.getRange(),
      ctrl = rang.startContainer.parentNode;
    if (!ctrl) return;
    var attrs = ctrl.getAttribute("attrs"),
      currModel = me.options.editorModel,
      parentNode = rang.startContainer.parentElement,
      userName = me.options.userInfo.name;
    if (currModel == "edit") { // 编辑模式下 改变元素值状态
      var allCtrl = axTools.getByClass("ctrl-bg", me.document);
        for (var i = 0; i < allCtrl.length; i++) {
          if (allCtrl[i].getAttribute("axplugins") !== "paragraphele" && allCtrl[i].getAttribute("axplugins") !== "combine") {
            axTools.valueChange(allCtrl[i]);
          }
        }
    }

    // 内容变化时校验 医学公式
    axTools.formulas(me)

    // 留痕模式下进行控件痕迹记录
    if (currModel == "mark" && parentNode) {
      if (parentNode.nodeType != 3) {
        if (!axTools.hasClass(parentNode, "ctrl-value")) {
          //留痕模式下，段落元素需单独处理
          var paragraphNode = AX.dom.domUtils.findParent(
            parentNode,
            function (dom) {
              return (
                dom.tagName === "DIV" &&
                dom.getAttribute("axplugins") == "paragraphele"
              );
            },
            true
          );
          if (axTools.hasClass(parentNode.children[0], "ctrl-value")) {
            parentNode = parentNode.children[0];
          } else if (axTools.hasClass(parentNode.children[0], "ctrl-bg")) {
            parentNode = parentNode.children[0].children[0];
          } else if (paragraphNode) {
            parentNode = paragraphNode;
          } else {
            return;
          }

        }

        var ctrlNode = axTools.hasClass(parentNode, "paragraphele")
          ? parentNode
          : parentNode.parentNode,
          type = ctrlNode.getAttribute("axPlugins");
        //不可编辑元素不做处理
        if (
          (parentNode.getAttribute("contenteditable") == "false" && type != "radio" && type != "checkbox" && type != "haveornot") ||
          type == "text" ||
          type == "numberelement"
        ) {
          // return;
        }
        if (type == "text" ||
          type == "numberelement") return;
        var markNode = document.createElement("span"),
          markNodeArr = axTools.getByClass(
            "editor-mark-text",
            ctrlNode.parentNode
          ),
          currVal = axTools.nullToBlank(
            parentNode.innerHTML.replace(/\u200B/g, "")
          ),
          oldVal = axTools.nullToBlank(ctrlNode.getAttribute("oldVal")),
          isDel = true,
          isMuti = false, // 是否为多选元素
          isExist = false;

        if (type == "radio" || type == "checkbox") {
          var inputs = parentNode.getElementsByTagName("input"),
            selectedVals = [];
          for (var j = 0; j < inputs.length; j++) {
            if (inputs[j].checked) {
              selectedVals.push(inputs[j].getAttribute("valueStr"));
            }
          }
          currVal = selectedVals.join(",");
        } else if (type == "paragraphele") {
          return;
        }

        for (var i = 0; i < markNodeArr.length; i++) {
          if (
            markNodeArr[i].getAttribute("user") == userName &&
            markNodeArr[i].getAttribute("forCtrlId") == ctrlNode.getAttribute("id") &&
            markNodeArr[i].className.indexOf("editor-mark-disable") == -1
          ) {
            markNode = markNodeArr[i];
            isExist = true;
            break;
          }
        }
        //oldVal为空时，可能是新插入的控件，此处做下存在处理，否则会多次新建留痕记录标签
        if (oldVal == "" && markNodeArr.length > 0) {
          for (var i = 0; i < markNodeArr.length; i++) {
            if (
              markNodeArr[i].getAttribute("forCtrlId") == ctrlNode.getAttribute("id") &&
              markNodeArr[i].className.indexOf("editor-mark-disable") == -1
            ) {
              markNode = markNodeArr[i];
              isExist = true;
            }
          }
        }

        //修改后又还原，此时不记录修改
        if (currVal == oldVal && isExist) {
          markNode.parentNode.removeChild(markNode);
          axTools.removeClass(parentNode, "ctrl-modify");
          //复位本控件留痕标识
          axTools.hasClass(ctrlNode, "markedCtrl")
            ? axTools.removeClass(ctrlNode, "markedCtrl")
            : "";
          return;
        }

        if (currVal != oldVal) {
          //若currVal为空且原始值不为空，则表示删除
          if (oldVal != "") {
            isDel = true;
          }
          //  else if (
          //   currVal != "" &&
          //   oldVal != "" &&
          //   currVal.indexOf("/>") == -1 &&
          //   oldVal.indexOf("/>") == -1
          // ) {

          // var count = 0;
          // for (var i = 0; i < currVal.length; i++) {
          //   for (var j = 0; j < oldVal.length; j++) {
          //     if (oldVal[j] == currVal[i]) {
          //       isDel = false;
          //       break;
          //     }
          //   }
          //   if (!isDel) {
          //     break;
          //   }
          //   //防止出现死循环，暂未找到真实原因，此处暂停
          //   if (++count > 1000) {
          //     break;
          //   }
          // }
          // }
          if (type == 'select' && oldVal != currVal) {
            isDel = true;
          } else if (type == 'selectmulti' || type == 'checkbox') {
            var delData = [],
              addData = [];
            currVal = currVal.indexOf(',') > -1 ? currVal.split(',') : [currVal];
            oldVal = oldVal.indexOf(',') > -1 ? oldVal.split(',') : [oldVal];
            for (var m = 0; m < currVal.length; m++) {
              if (oldVal.indexOf(currVal[m]) == -1) {
                addData.push(currVal[m])
              }
            }
            for (var n = 0; n < oldVal.length; n++) {
              if (currVal.indexOf(oldVal[n]) == -1) {
                delData.push(oldVal[n])
              }
            }
            isMuti = true;
            currVal = currVal.join(',');
            oldVal = oldVal.join(',');
          }
          if (type == 'datedomain') {
            if (oldVal != '' && oldVal != currVal) {
              isDel = true;
            }
          }
          if (isExist) {
            if (isDel && oldVal != "") {
              if (
                axTools.getByClass("editor-mark-del-text", markNode).length == 0
              ) {
                var delNode = document.createElement("span");
                axTools.addClass(delNode, "editor-mark-del-text");
                delNode.setAttribute("contenteditable", false);
                delNode.innerHTML = oldVal;
                markNode.innerHTML = delNode.outerHTML;
              }
            } else {
              //删除后又恢复了一部分，此时应去掉删除线
              if (oldVal == "") {
                markNode.innerHTML = currVal;
              } else {
                markNode.innerHTML = markNode.innerText;
              }
            }
            if (isMuti) { // 在多选元素前 创建删除和新增留痕
              if (delData.length > 0) { // 有删除的留痕创建留痕
                var delNode = document.createElement("span");
                axTools.addClass(delNode, "editor-mark-del-text");
                delNode.setAttribute("contenteditable", false);
                delNode.innerHTML = delData.join(',');
                markNode.innerHTML = addData.join(',') + delNode.outerHTML;
              } else {
                markNode.innerHTML = addData.join(',')
              }
            }
          } else {
            var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
            axTools.addClass(markNode, "on");
            axTools.addClass(markNode, "editor-mark-text");
            axTools.addClass(markNode, "editor-mark-modify-text");
            markNode.setAttribute("user", userName);
            markNode.setAttribute("time", time);
            markNode.setAttribute("contenteditable", false);
            markNode.setAttribute("forCtrlId", ctrlNode.getAttribute("id"));

            if (isDel && oldVal != "") {
              var delNode = document.createElement("span");
              axTools.addClass(delNode, "editor-mark-del-text");
              delNode.setAttribute("contenteditable", false);
              delNode.innerHTML = oldVal;
              markNode.innerHTML = delNode.outerHTML;
            } else {
              if (oldVal == "") {
                markNode.innerHTML = currVal;
              } else {
                markNode.innerHTML = oldVal;
              }
            }
            if (isMuti) { // 在多选元素前 创建删除和新增留痕
              if (delData.length > 0) { // 有删除的留痕创建留痕
                var delNode = document.createElement("span");
                axTools.addClass(delNode, "editor-mark-del-text");
                delNode.setAttribute("contenteditable", false);
                delNode.innerHTML = delData.join(',');
                markNode.innerHTML = addData.join(',') + delNode.outerHTML;
              } else {
                markNode.innerHTML = addData.join(',')
              }
            }
            if($(ctrlNode).find("strong.ctrl-value").length === 0) {
              ctrlNode.parentNode.insertBefore(markNode, ctrlNode);
            }
          }
          //当前组件无内容，作为删除处理，去除修改双下划线
          if (currVal == "") {
            axTools.removeClass(markNode, "editor-mark-modify-text");
          } else {
            axTools.addClass(markNode, "editor-mark-modify-text");
          }

          axTools.hasClass(ctrlNode, "markedCtrl")
            ? ""
            : axTools.addClass(ctrlNode, "markedCtrl");
        }
      }
    }

    //获取控件属性
    if (axTools.hasClass(ctrl, "ctrl-value")) {
      var ctrlNode = ctrl.parentNode;
      attrs = ctrl.parentNode.getAttribute("attrs");
    } else {
      var ctrlNode = ctrl;
    }
    if (!!!attrs || !!!ctrlNode) {
      return;
    }
    attrs = JSON.parse(attrs);
    //校验控件信息有效性
    checkCtrlValueValidate(rang);

    //设置级联控件显示隐藏
    var ctrlText = ctrl.innerText
      .replace(/(^\s*)|(\s*$)/g, "")
      .replace(/\u200B/g, "");
    if (ctrlNode.getAttribute("axPlugins") == "haveornot") {
      ctrlText =
        ctrlNode.getAttribute("selectValText") == undefined
          ? ctrlNode.getAttribute("selectVal")
          : ctrlNode.getAttribute("selectValText") == undefined;
    }
    if (ctrlNode.getAttribute("axPlugins") == "radio") {
      ctrlText =
        ctrlNode.getAttribute("selectvaltext") == undefined
          ? ctrlNode.getAttribute("selectval")
          : ctrlNode.getAttribute("selectvaltext");
    }


    axTools.setCascade(ctrlText, attrs.id, me);
    // console.log(ctrl.parentNode)
    var thePluginsNodeCombine = AX.dom.domUtils.findParent(
      ctrl,
      function (dom) {
        return dom.getAttribute("axplugins") == "combine";
      },
      true
    );
    if (thePluginsNodeCombine == null) {
      thePluginsNodeCombine = me;
    }
    axTools.setCascadeMore(
      ctrlText,
      ctrl.parentNode,
      me,
      thePluginsNodeCombine
    );

    /* 根据血压数值设置下次预约时间开始 */
    var dateFormat = function (date, format) {
      var args = {
            "M+": date.getMonth() + 1,
            "d+": date.getDate(),
            "h+": date.getHours(),
            "m+": date.getMinutes(),
            "s+": date.getSeconds(),
            "q+": Math.floor((date.getMonth() + 3) / 3), //quarter

            "S": date.getMilliseconds()
        };
        if (/(y+)/.test(format)) format = format.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var i in args) {
            var n = args[i];

            if (new RegExp("(" + i + ")").test(format)) format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? n : ("00" + n).substr(("" + n).length));
        }
        return format;
    };
    var getFeatureDate = function (day){
      return new Date(new Date().getTime() + 1000 * 60 * 60 * 24 * day);
    };

    var titleText = ctrlNode.getAttribute("title");
    if (titleText.indexOf('收缩压') > -1 || titleText.indexOf('舒张压') > -1) {
      var targetNode = $(ctrl).parents('body').find('[title="下次随访预约"]');
      var outerSpan = $(targetNode).find('span.ctrl-bg');
      var innerSpan = $(targetNode).find('span.ctrl-value');
      var isNormal = true;
      var $scPressuresDoms = $(me.document).find('[title*="收缩压"].ctrl-value');
      var $szPressuresDoms = $(me.document).find('[title*="舒张压"].ctrl-value');

      for(var i = 0; i < $scPressuresDoms.length; i++) {
        var scPressuresValue = $scPressuresDoms.eq(i).text()
        var szPressuresValue = $szPressuresDoms.eq(i).text()
        if(scPressuresValue && (scPressuresValue < 90 || scPressuresValue >=140)) {
          isNormal = false;
          continue;
        }
        if (szPressuresValue && (szPressuresValue >= 90 || szPressuresValue < 60)) {
          isNormal = false;
          continue;
        }
        if (scPressuresValue && szPressuresValue) {
          isNormal = true
        }
      }

      var nextDate = isNormal ? dateFormat(getFeatureDate(90), 'yyyy-MM-dd') : dateFormat(getFeatureDate(14), 'yyyy-MM-dd');
      $(outerSpan).attr('currentVal', nextDate)
      $(innerSpan).html(nextDate)
    }
    /* 根据血压数值设置下次预约时间结束 */

    // }
  });

  me.addListener("contentchange", function (t, evt) {
    var rang = me.selection.getRange();
    var ctrl = rang.startContainer.parentNode;
    var ctrlText = ctrl.innerText
      .replace(/(^\s*)|(\s*$)/g, "")
      .replace(/\u200B/g, "");
    console.log('ctrlText===', ctrlText)
  })


  me.addListener("ready", function () {
    if (typeof me.options.alertMsg == "function") {
      window.alert = me.options.alertMsg;
    }
    if (typeof me.options.confirmMsg == "function") {
      me.window.confirmMsg = me.options.confirmMsg;
    }

    //执行传入的模式
    var defaultModel = me.options.defaultModel;
    if (
      defaultModel == "pure" ||
      defaultModel == "dirty" ||
      defaultModel == "secret"
    ) {
      me.execCommand(defaultModel);
    }

    // 点击非控件处，删除控件获取焦点样式
    AX.dom.domUtils.bindEvent(me.document.body, "click", function () {
      var range = me.selection.getRange(),
        start = me.selection.getStart();
      if (
        start.className.indexOf("ctrl-value") == -1 &&
        start.className.indexOf("ctrl-bg") == -1
      ) {
        var ctrlValues = axTools.getByClass("ctrl-value", me.document);
        //删除获取焦点样式
        for (var i = 0; i < ctrlValues.length; i++) {
          axTools.removeClass(ctrlValues[i], "focusCtrl");
          var thePluginsNode = AX.dom.domUtils.findParent(
            ctrlValues[i],
            function (dom) {
              return (
                dom.tagName === "SPAN" &&
                dom.getAttribute("axplugins") != null &&
                dom.getAttribute("attrs")
              );
            },
            true
          );
          axTools.removeClass(thePluginsNode, "plugins-bg-foucs");
        }
      }
    });

    AX.dom.domUtils.bindEvent(me.document.body, "keydown", function (evt) {
      var keycode = evt.keyCode || evt.which,
        rang = me.selection.getRange(),
        parentNode = rang.startContainer.parentElement;

      // 绑定可keydown 事件  下拉 日期选择 禁用回车事件
      try {
        if (parentNode === null) return;
        var axPluginsNode = AX.dom.domUtils.findParent(
          parentNode,
          function (dom) {
            return (
              (dom.tagName === "SPAN" || dom.tagName === "DIV") &&
              dom.getAttribute("axplugins") != null &&
              dom.getAttribute("attrs")
            );
          },
          true
        );
        if (axPluginsNode == null && keycode == 9) {
          var tabIndexBox = me.document.getElementById("tabIndexBox"),
            nextIndex = 0;
          if (tabIndexBox) {
            nextIndex = tabIndexBox.value;
          }
          axTools.getByClass("ctrl-value", me.document)[nextIndex].focus();
          axTools.getByClass("ctrl-value", me.document)[nextIndex].click();
          axTools.stopDefault(evt);
          axTools.stopPropagation(evt);
          return;
        }
      } catch (e) { }


      // 该位置的出发转移到 axeditor.base.js 中的setcontent 中
      // 重置相关配置
      // me.execCommand("restart");
    });
    AX.dom.domUtils.bindEvent(me.document.body, "keyup", function (evt) {
      var keycode = evt.keyCode || evt.which,
        rang = me.selection.getRange();
      // 处理分页的光标在当前页顶部，删除光标回到上一页尾部
      // 处理分页的光标在当前页底部，回车光标回到下一页顶部
      if (keycode == 8) {
        // ax-update: 空节点删除操作, 这里只删除常规p标签，其他的不处理
        if (rang.startContainer.tagName) {
          var tagName = rang.startContainer.tagName.toLowerCase();
          if (
            tagName == "p" &&
            rang.startContainer.className.indexOf("ctrl-value") == -1 &&
            rang.startContainer.innerHTML == ""
          ) {
            rang.startContainer.parentNode.removeChild(rang.startContainer);
          }
        }
        AX.pageControler.backspaceHandler(rang);
        axTools.stopDefault(evt);
        axTools.stopPropagation(evt);
        return;
      }

      // 回车事件的表现是
      // 如果回车后光标所在元素超出页面了，那就认为应该进行光标换位
      if (keycode == 13) {
        AX.pageControler.enterHandler(rang);
      }
    });
  });



  /**
   * 判断是不是浏览模式
   */
  function isViewModel() {
    var currModel = me.options.editorModel;
    if (currModel == "secret" || currModel == "pure" || currModel == "dirty") {
      return true;
    }
    return false;
  }

  /**
   * 校验控件内容合法性
   * @param {Range} range 选中区域
   * @returns
   */
  function checkCtrlValueValidate(range) {
    var currModel = me.options.editorModel;
    //浏览模式因不可编辑，所以不触发校验
    if (isViewModel()) {
      return;
    }
    if (currModel == "design") {
      var warnings = axTools.getByClass("warning", me.document);
      var errors = axTools.getByClass("error", me.document);
      for(var i = 0; i < warnings.length; i++) {
        axTools.removeClass(warnings[i], "warning");
      }
      for(var i = 0; i < errors.length; i++) {
        axTools.removeClass(errors[i], "error");
      }
    }
    var ctrl = range.startContainer.parentNode;

    //获取控件属性
    if (axTools.hasClass(ctrl, "ctrl-value")) {
      attrs = ctrl.parentNode.getAttribute("attrs");
      ctrlType = ctrl.parentNode.getAttribute("axplugins");
      ctrl = ctrl.parentNode;
    } else if (!axTools.hasClass(ctrl, "ctrl-bg")) {
      ctrl = AX.dom.domUtils.findParent(
        ctrl,
        function (dom) {
          return (
            dom.tagName === "SPAN" &&
            axTools.hasClass(dom, "ctrl-bg") != null &&
            dom.getAttribute("attrs")
          );
        },
        true
      );
      if (!ctrl) {
        return;
      }
    }

    var attrs = ctrl.getAttribute("attrs"),
      ctrlType = ctrl.getAttribute("axplugins");
    if (!!!attrs) {
      return;
    } else {
      attrs = JSON.parse(attrs);
    }

    // 判断字符长度
    var ctrlText = ctrl.innerText
      .replace(/(^\s*)|(\s*$)/g, "")
      .replace(/\u200B/g, ""),
      ctrlValue = axTools.getByClass("ctrl-value", ctrl)[0];
    if (ctrlType == "text" && (me.options.editorModel === "edit" || me.options.editorModel === "mark")) {
      if (
        (attrs.minLen != "" && ctrlText.length < attrs.minLen) ||
        (attrs.maxLen != "" && ctrlText.length > attrs.maxLen)
      ) {
        axTools.addClass(ctrl, "error");
        var tip =
          attrs.name +
          "内容长度应在" +
          attrs.minLen +
          " ~ " +
          attrs.maxLen +
          "之间";
        ctrl.setAttribute("title", tip);
        ctrlValue.setAttribute("title", tip);
        return;
      } else {
        axTools.removeClass(ctrl, "error");
        ctrl.setAttribute("title", attrs.name);
        ctrlValue.setAttribute("title", attrs.name);
      }
    } else if (ctrlType == "text" && me.options.editorModel !== "edit") {
      // 在非编辑模式时，将控件校验错误的信息清掉
      axTools.removeClass(ctrl, "error");
      ctrl.setAttribute("title", attrs.name);
      ctrlValue.setAttribute("title", attrs.name);
    }

    // axTools.modifyNumStyle(me, ctrl);

    //数字控件校验
    if (ctrlType == "numberelement" && (me.options.editorModel === "edit" || me.options.editorModel === "mark")) {
      ctrlText = axTools.getByClass("ctrl-value", ctrl)[0].innerText
        .replace(/(^\s*)|(\s*$)/g, "")
        .replace(/\u200B/g, "");
      // ax-update: 注释掉是因为数字元素结构的变化，ctrlText的取值肯定是数字部分，不需要下面的处理
      // if (!!attrs.eleUnitContr && attrs.elemUnit) {
      //   if (isNaN(ctrlText * 1)) {
      //     // 校验 输入时是否携带单位
      //     ctrlText = ctrlText.substring(0, ctrlText.indexOf(attrs.elemUnit));
      //   }
      //   ctrlText = ctrlText * 1;
      // }
      var validFlag = true,
        errorTip = "",
        max = attrs.valMax,
        min = attrs.valMin,
        normalMin = attrs.normalMin,
        normalMax = attrs.normalMax;
      if(me.options.editorModel === "mark") {
        var cloneCtrl = $(axTools.getByClass("ctrl-value", ctrl)[0]).clone()[0];
        $(cloneCtrl).find(".editor-mark-del-text").remove();
        ctrlText = cloneCtrl.innerText
        .replace(/(^\s*)|(\s*$)/g, "")
        .replace(/\u200B/g, "");
      }
      if (ctrlText && !axTools.validate.integer(ctrlText, attrs.numAccuracy)) {
        //数字类型校验
        validFlag = false;
        errorTip = attrs.name + me.getLang("ax.beNum");
      } else if (
        ctrlText != "" &&
        max != undefined &&
        max != "" &&
        ctrlText*1 > (max - 0) * 1
      ) {
        //最大值域校验
        validFlag = false;
        errorTip =
          attrs.name +
          me.getLang("ax.normalNum") +
          min + '~' + max +
          "，" +
          me.getLang("ax.changeNum");
      } else if (
        ctrlText != "" &&
        min != undefined &&
        min != "" &&
        ctrlText*1 < (min - 0) * 1
      ) {
        //最小值域校验
        validFlag = false;
        errorTip =
          attrs.name +
          me.getLang("ax.normalNum") +
          min + '~' + max +
          "，" +
          me.getLang("ax.changeNum");
      } else {
        if (("" + ctrlText).indexOf(".") > -1) {
          // 校验输入时小数位数
          if (("" + ctrlText).split(".")[1].length > attrs.numAccuracy) {
            validFlag = false;
            errorTip =
              me.getLang("ax.decimal") +
              attrs.numAccuracy +
              me.getLang("ax.decimalUnit");
          }
        } else {
          validFlag = true;
          errorTip = "";
        }
      }
      if(validFlag){
        // 正常值域校验
        var isNormal = 1; // 1 验证通过 2：失败
        if (
          ctrlText != "" &&
          normalMin != undefined &&
          normalMin != "" &&
          ctrlText * 1 < (normalMin - 0) * 1
        ) {
          axTools.addClass(ctrl, "warning");
          errorTip = me.getLang("ax.normalNum2") + normalMin + "~" + normalMax;
          ctrl.setAttribute("title", errorTip);
          ctrlValue.setAttribute("title", errorTip);
          axTools.removeClass(ctrl, "error");
          isNormal = 2;
        } else if (
          ctrlText != "" &&
          normalMax != undefined &&
          normalMax != "" &&
          ctrlText * 1 > (normalMax - 0) * 1
        ) {
          axTools.addClass(ctrl, "warning");
          errorTip = me.getLang("ax.normalNum2") + normalMin + "~" + normalMax;
          ctrl.setAttribute("title", errorTip);
          ctrlValue.setAttribute("title", errorTip);
          axTools.removeClass(ctrl, "error");
          isNormal = 2;
        } else {
          isNormal = 1;
          axTools.removeClass(ctrl, "warning");
        }
      }

      // 删除错误提示
      var errTips = axTools.getByClass(ctrl.id, me.document);
      for (var m = 0; m < errTips.length; m++) {
        errTips[m].parentElement.parentElement.removeChild(errTips[m].parentElement);
      }
      if (validFlag && isNormal != 2) {
        axTools.removeClass(ctrl, "error");
        ctrl.setAttribute("title", attrs.tipText);
        ctrlValue.setAttribute("title", attrs.tipText);
      } else if(!validFlag) {
        var paragraphNode = AX.dom.domUtils.findParent(
          ctrl,
          function (dom) {
            return dom.tagName === "DIV" && axTools.hasClass(dom, "ax-page-content");
          },
          true,
          true
        );
        var left = (Number(ctrl.offsetLeft) + Number(ctrl.offsetWidth) + 200) > paragraphNode.offsetWidth ? (paragraphNode.offsetWidth - 200) : (Number(ctrl.offsetLeft) + Number(ctrl.offsetWidth) + 5);
        var top = (Number(ctrl.offsetTop) + Number(ctrl.offsetHeight)) > paragraphNode.offsetHeight ? (paragraphNode.offsetHeight - ctrl.offsetHeight - ctrl.offsetHeight) : (Number(ctrl.offsetTop) + Number(ctrl.offsetHeight) + 5);
        top += AX.dom.domUtils.findParent(
          ctrl,
          function (dom) {
            return axTools.hasClass(dom, "ax-page-wrapper");
          },
          true,
          true
        ).offsetTop;
        var tipHtml = "<div class='errorTip " + ctrl.id + "' style='position: absolute; left: " + left + "px; top: " + top + "px; background: #fff; border: 1px solid #000; padding: 2px 6px; '>" + errorTip + "</div>"
        var div = document.createElement("div");
        div.innerHTML = tipHtml
        paragraphNode.appendChild(div);
        axTools.addClass(ctrl, "error");
        ctrl.setAttribute("title", errorTip);
        ctrlValue.setAttribute("title", errorTip);
      }
    } else if (
      ctrlType == "numberelement" &&
      me.options.editorModel !== "edit"
    ) {
      // 在非编辑模式时，将控件校验错误的信息清掉
      axTools.removeClass(ctrl, "error");
      ctrl.setAttribute("title", attrs.name);
      ctrlValue.setAttribute("title", attrs.name);
    }

    //校验必填项
    axTools.validRequired(me, ctrl);
  }
};

/**
 * 切换为留痕模式
 * @command mark
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'mark');
 * ```
 */
AX.plugins["mark"] = function () {
  var me = this,
    thePlugins = "mark";
  me.commands[thePlugins] = {
    execCommand: function (type, isEdit) {
      if (this.options.editorModel == "mark") {
        this.options.editorModel = this.options.defaultModel;
      } else {
        this.options.editorModel = "mark";
        // axTools.setBodyEditAttr(me, false);
        axTools.clearValueChange(me);
        me.execCommand("resetmarkflag");
        if (
          !(
            axTools.getByClass("editor-mark-text").length > 0 &&
            axTools.getByClass("editor-mark-text")[0].hasClass("on")
          )
        ) {
          axTools.recordInitMarkVal(me);
        }
      }
      this.setEnabled();
      axTools.setMarkState(true, me.document);
      // axTools.setStateLock(me);
    },
    queryCommandState: function () {
      if (this.options.editorModel == "mark") {
        return 1;
      } else {
        var currModel = this.options.editorModel;
        if (currModel == "design" || currModel == "edit") {
          axTools.setStateLock(me);
        }
        if (currModel != "dirty") {
          axTools.setMarkState(false, me.document);
        }
        return 0;
      }
    },
    notNeedUndo: 1
  };
};
// /**
//  * 切换为预览模式  防止影响主页面编辑器所出现的模式
//  * @command preview
//  */

// AX.plugins["preview"] = function () {
//   var me = this,
//     thePlugins = "preview";
//   me.commands[thePlugins] = {
//     execCommand: function (type) {
//       //控件不可编辑
//       axTools.setEditable(false, me.document, "pure");
//       axTools.setBodyEditAttr(me, false);
//     }
//   }
// }

/**
 * 切换为清洁模式
 * @command pure
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'pure');
 * ```
 */
AX.plugins["pure"] = function () {
  var me = this,
    thePlugins = "pure";
  me.commands[thePlugins] = {
    execCommand: function (type, diabledBtns) {
      unsecret(me, this.options.editorModel);
      if (this.options.editorModel == "pure") {
        this.options.editorModel = this.options.defaultModel;
        this.setEnabled();
        this.execCommand(this.options.editorModel);
      } else {
        if (
          this.options.editorModel == "dirty" ||
          this.options.editorModel == "secret"
        ) {
          // 此判断修复 在 非清洁模式或保密模式 切换到清洁模式报错卡死问题
          this.options.editorModel = "pure";
        } else {
          this.options.editorModel = "pure";
          if (diabledBtns) { // 由入参决定某些浏览模式可用按钮 为不可用
            var midArr = [];
            for (var i = 0; i < me.options.readOnlyEditBtns.length; i++) {
              if (diabledBtns.indexOf(me.options.readOnlyEditBtns[i]) == -1) {
                midArr.push(me.options.readOnlyEditBtns[i]);
              }
            }
            this.setDisabled(midArr);
          } else {
            this.setDisabled(me.options.readOnlyEditBtns);
          }
          axTools.clearValueChange(me);
        }
      }
      axTools.setStateLock(me, false);
      //不显示留痕
      if (this.options.editorModel != 'mark') {
        axTools.setMarkState(false, me.document);
      }

      //控件不可编辑
      axTools.setEditable(this.options.editorModel == "pure" ? false : true, me.document, this.options.editorModel);
      axTools.setBodyEditAttr(me, false);
    },
    queryCommandState: function () {
      var currModel = this.options.editorModel;
      if (currModel == "pure") {
        return 1;
      } else {
        return 0;
      }
    },
    notNeedUndo: 1
  };
};

/**
 * 切换为非清洁模式
 * @command dirty
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'dirty');
 * ```
 */
AX.plugins["dirty"] = function () {
  var me = this,
    thePlugins = "dirty";
  me.commands[thePlugins] = {
    execCommand: function (type, diabledBtns) {
      unsecret(me, this.options.editorModel);
      if (this.options.editorModel == "dirty") {
        this.options.editorModel = this.options.defaultModel;
        this.setEnabled();
      } else {
        if (
          this.options.editorModel == "pure" ||
          this.options.editorModel == "secret"
        ) {
          // 此判断修复 在 非清洁模式或保密模式 切换到清洁模式报错卡死问题
          this.options.editorModel = "dirty";
        } else {
          this.options.editorModel = "dirty";
          // this.setDisabled(me.options.readOnlyEditBtns);
          if (diabledBtns) { // 由入参决定某些浏览模式可用按钮 为不可用
            var midArr = [];
            for (var i = 0; i < me.options.readOnlyEditBtns.length; i++) {
              if (diabledBtns.indexOf(me.options.readOnlyEditBtns[i]) == -1) {
                midArr.push(me.options.readOnlyEditBtns[i]);
              }
            }
            this.setDisabled(midArr);
          } else {
            this.setDisabled(me.options.readOnlyEditBtns);
          }
        }
        axTools.clearValueChange(me);
      }
      axTools.setStateLock(me);
      //显示留痕
      axTools.setMarkState(true, me.document);
      //控件不可编辑
      axTools.setEditable(this.options.editorModel == "dirty" ? false : true, me.document, this.options.editorModel);
      axTools.setBodyEditAttr(me, false);
    },
    queryCommandState: function () {
      var currModel = this.options.editorModel;
      if (currModel == "dirty") {
        return 1;
      } else {
        if (currModel == "design" || currModel == "edit") {
          axTools.setBodyEditAttr(me, true);
        }
        // if (currModel != "pure" && currModel != "secret") {
        //   axTools.setEditable(true, me.document, currModel);
        // }
        return 0;
      }
    },
    notNeedUndo: 1
  };
};
/**
 * 当处于保密模式切换到其他模式时，自动解除密文
 * @param {*} me
 * @param {*} thePlugins
 */

function unsecret(me, thePlugins) {
  var secretCtrls = axTools.getByTagAttr(
    "span",
    "secret-value",
    "true",
    me.document
  );
  if (thePlugins == "secret") {
    //显示为未加密状态
    for (var i = 0; i < secretCtrls.length; i++) {
      var unsecretVal = secretCtrls[i].getAttribute("unsecretVal");
      if (
        unsecretVal == "" ||
        unsecretVal == "undefined" ||
        unsecretVal == null ||
        unsecretVal == "null"
      ) {
        continue;
      }
      secretCtrls[i].innerHTML = unsecretVal;
    }
  }
}

/**
 * 切换为保密模式
 * @command secret
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'secret');
 * ```
 */
AX.plugins["secret"] = function () {
  var me = this,
    thePlugins = "secret";
  me.commands[thePlugins] = {
    execCommand: function (type, isEdit) {
      var secretCtrls = axTools.getByTagAttr(
        "span",
        "secret-value",
        "true",
        me.document
      );
      if (this.options.editorModel == "secret") {
        this.options.editorModel = this.options.defaultModel;
        this.setEnabled();
        //显示为未加密状态
        for (var i = 0; i < secretCtrls.length; i++) {
          var unsecretVal = secretCtrls[i].getAttribute("unsecretVal");
          if (
            unsecretVal == "" ||
            unsecretVal == "undefined" ||
            unsecretVal == null ||
            unsecretVal == "null"
          ) {
            continue;
          }
          secretCtrls[i].innerHTML = unsecretVal;
        }
      } else {
        if (
          this.options.editorModel == "dirty" ||
          this.options.editorModel == "pure"
        ) {
          // 此判断修复 在 非清洁模式或保密模式 切换到清洁模式报错卡死问题
          this.options.editorModel = "secret";
        } else {
          this.options.editorModel = "secret";
          this.setDisabled(me.options.readOnlyEditBtns);
        }
        axTools.secretVal(secretCtrls);
        axTools.clearValueChange(me);
      }
      axTools.setStateLock(me);
      //不显示留痕
      axTools.setMarkState(false, me.document);
      axTools.setBodyEditAttr(me, false);
      axTools.setEditable(this.options.editorModel == "secret" ? false : true, me.document, this.options.editorModel);
    },
    queryCommandState: function () {
      var currModel = this.options.editorModel;
      if (currModel == "secret") {
        return 1;
      } else {
        if (currModel == "design") {
          axTools.setBodyEditAttr(me, true);
        }
        // if (currModel != "pure" && currModel != "dirty") {
        //   axTools.setEditable(true, me.document, currModel);
        // }
        if (currModel != "secret") {
          var secretCtrls = axTools.getByTagAttr(
            "span",
            "isSecret",
            "true",
            me.document
          );
          //显示为未加密状态
          for (var i = 0; i < secretCtrls.length; i++) {
            var unsecretVal = secretCtrls[i].getAttribute("unsecretVal");
            if (
              unsecretVal == "" ||
              unsecretVal == "undefined" ||
              unsecretVal == null ||
              unsecretVal == "null"
            ) {
              continue;
            }
            secretCtrls[i].innerHTML = unsecretVal;
            secretCtrls[i].removeAttribute("unsecretVal");
          }
        }
        return 0;
      }
    },
    notNeedUndo: 1
  };
};

/**
 * 设置编辑器模式
 * @command setmodel
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'setmodel');
 * ```
 */
AX.plugins["setmodel"] = function () {
  var me = this,
    thePlugins = "setmodel";
  me.commands[thePlugins] = {
    execCommand: function (type, params) {
      //params目前只包含模式类型modelType，后续可能会扩展其他参数
      var model = params.modelType,
        showToolbar = params.showToolbar,
        noViewMenu = params.noViewMenu,
        diabledBtns = params.diabledBtns
      currModel = me.options.editorModel,
        models = {
          pure: true,
          dirty: true,
          secret: true,
          design: true,
          edit: true,
          mark: true,
          source: true,
          preview: true
        };
        // 此操作防止多次切换同一种模式时，会取消当前模式
      if(model === currModel) {
        me.options.editorModel = model + "1"
      }
      if (model !== "preview") {
        try{
          me.undoManger.disconnect();
        }catch(e){console.log(e)}
      }
      if (!model || !models[model]) {
        alert(me.getLang("ax.illegalModelTip"));
        return;
      }
      // if (model == currModel) {
      //   return;
      // }
      var editorBox = document.getElementById(me.key);
      if (!editorBox) return;
      var latestModel = editorBox.getAttribute("latestModel"),
        toolbar = axTools.getByClass("edui-editor-toolbarbox", editorBox),
        iframeholder = axTools.getByClass(
          "edui-editor-iframeholder",
          editorBox
        );
      try {
        //浏览模式下隐藏工具条
        if (
          (model == "pure" ||
            model == "dirty" ||
            model == "secret" ||
            model == "preview") &&
          !showToolbar
        ) {
          iframeholder[0].style.height = editorBox.parentElement.offsetHeight + "px";
          // parseInt(iframeholder[0].offsetHeight) +
          // parseInt(toolbar[0].offsetHeight) +
          // "px";
          toolbar[0].style.display = "none";
        } else {
          //浏览模式下其他按钮不可用，此处需再出发一次取消浏览模式，在切换其他模式
          if (
            currModel == "pure" ||
            currModel == "dirty" ||
            currModel == "secret" ||
            currModel == "preview" ||
            latestModel == "preview" ||
            latestModel == "pure" ||
            latestModel == "dirty" ||
            latestModel == "secret"
          ) {
            // me.execCommand(currModel); // 防止调用两次
            if (toolbar[0].style.display == "none") {
              toolbar[0].style.display = "block";
              iframeholder[0].style.height =
                parseInt(iframeholder[0].offsetHeight) -
                parseInt(toolbar[0].offsetHeight) +
                "px";
            }
          }
        }
        if ((model == 'pure' || model ==='dirty') && diabledBtns) {
          me.execCommand(model, diabledBtns);
        } else {
          me.execCommand(model);
        }
        if (model == 'edit') {
          toolbar[0].style.display = "block";
        }
        if (noViewMenu && (model == "design" || model == "edit")) {
          axTools.setBodyEditAttr(me, true);
          axTools.setEditable(true, me.document, model);
        }
        // 预览模板使用模式
        if (model == "preview") {
          this.options.editorModel = model;
          axTools.setBodyEditAttr(me, false);
          axTools.setEditable(false, me.document, model);
          // var axPage = axTools.getByClass('ax-page-wrapper', me.document);
          var axPageContent = axTools.getByClass(
            "ax-page-content",
            me.document
          );
          for (var j = 0; j < axPageContent.length; j++) {
            axPageContent[j].setAttribute("contenteditable", false);
          }
        }else{
          //此处可能会切换编辑器内容，导致纸张大小、页边距有改变，需重新设置纸张大小及页边距
          //设置纸张大小
          var size = me.queryCommandValue("papersize");
          me.execCommand("papersize", size);
        }
        // 编辑模式下 时间元素自动刷入服务器时间
        if (model == 'edit') { // 自动带入当前时间
          var dateCtrl = axTools.getByTagAttr("span", "axplugins", "datedomain", me.document);
          if (typeof me.options.getServerDate == 'function' && dateCtrl.length > 0) {
            me.options.getServerDate(function (time) {
              me.execCommand("setdate", time);
            });
          } else {
            this.execCommand("setdate", null); // 未配置获取服务器时间 时，调用本地时间
          }
        } else {
          axTools.clearValueChange(me);
        }
        // axTools.setStateLock(me);
        if(model == "pure") {
          // 浏览模式时， 移除段落的hover 边框
          // var parags = axTools.getByClass("paragraphele", me.document);
          $(me.document).find(".paragraphele").addClass("hidden-border");
        }else{
          $(me.document).find(".paragraphele").removeClass("hidden-border");
        }

        me.execCommand("sensitive"); // 敏感词校验
        //设置页边距
        var currVal = me.queryCommandValue("pagemargin");
        if (model != 'preview') {
          me.execCommand("pagemargin", currVal);
        }
      } catch (e) {
        console.log(e);
      }
      editorBox.setAttribute("latestModel", model);
      if (model !== "preview") {
        try{
          me.undoManger.reset(); // 清空撤回栈
          me.undoManger.reObserve(); // 切换模式重置撤回监听
        }catch(e){console.log(e)}
      }
    }
  };
};
/**
 * 文书内容锁定，元素编辑区外，全部禁止编辑
 */
AX.plugins["editlock"] = function () {
  var me = this,
    thePlugins = "editlock";
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var state = true;
      if (me.body.children[0].getAttribute("isLock") == "false") {
        state = true;
        me.body.children[0].setAttribute("isLock", "true");
      } else {
        state = false;
        me.body.children[0].setAttribute("isLock", "false");
      }

      if (me.options.editorModel == "edit" || me.options.editorModel == "mark") {
        axTools.setLockable(state, me, me.options.editorModel);
      }
      axTools.setStateLock(me, state);
    },
    queryCommandState: function (type) {
      // var state = params == false ? false : true;
      if (me.body.children[1] && me.body.children[1].getAttribute("isLock") == "false") {
        // if (
        //   me.options.editorModel == "edit" ||
        //   me.options.editorModel == "mark"
        // ) {
        //   axTools.setLockable(false, me, me.options.editorModel);
        // } else {
        //   axTools.setLockable(true, me, me.options.editorModel);
        // }
        return 1;
      } else {
        // axTools.setLockable(state, me, me.options.editorModel);
        // axTools.setBodyEditAttr(me, true);
        return 0;
      }
    }
  };
};
/**
 * 重置编辑器内容时需重新触发的事件
 * @command setmodel
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'restart');
 * ```
 */
AX.plugins["restart"] = function () {
  var me = this,
    thePlugins = "restart";
  me.commands[thePlugins] = {
    execCommand: function (type, params) {
      //为控件添加tabindex属性
      me.execCommand("resettabindex");

      //将留痕记录标识复位
      me.execCommand("resetmarkflag");

      // 测试环境或留痕模式下，初始化时记录原始值，作为留痕对比值
      axTools.recordInitMarkVal(me);


      //设置页边距
      var currVal = me.queryCommandValue("pagemargin");
      if (me.options.editorModel != 'preview') {
        me.execCommand("pagemargin", currVal);
        //设置纸张大小
        var size = me.queryCommandValue("papersize");
        me.execCommand("papersize", size);
      }
      var bk = me.document.getElementById("bookfr"); // 清空光标标记
      if(bk) {
        bk.parentElement.removeChild(bk);
      }
      // 书写病历时，需要在内容更新后触发的操作
      //书写模式替换内容，此处置为不可编辑
      var model = me.options.editorModel;
      if (model == 'pure' || model == 'dirty' || model == 'secret') {
        axTools.setEditable(false, me.document);
        axTools.setBodyEditAttr(me, false);
      }
      // 隐藏段落
      if (model == "design") {
        axTools.setCtrlShow(true, me.document, "design");
      } else {
        axTools.setCtrlShow(false, me.document);
      }
      // 向每个结构化元素后面增加  &#8203   方便光标定位
      var isCtrl = axTools.getByClass("ctrl-bg", me.document);
      for (var i = 0; i < isCtrl.length; i++) {
        var ctrlChild = isCtrl[i];
        // ax-update: 段落内容容器统一都增加paragraphContent类名
        var pluginName = ctrlChild.getAttribute("axplugins");
        if (pluginName == "paragraphele") {
          for (var j = 1; j < ctrlChild.children.length; j++) {
            var node = ctrlChild.children[j];
            if (ctrlChild.getAttribute("islock") == "true") {
              ctrlChild.setAttribute("contenteditable", false);
              node.setAttribute("contenteditable", false);
            }
            if (node.className.indexOf("paragraphContent") == -1) {
              axTools.addClass(node, "paragraphContent");
            }
            if(ctrlChild.children[0].className.indexOf("quoteBtn") == -1) {
              if(node.innerHTML === "" || node.innerText.replace(/\u200B/g,'') == ""){
                node.parentElement.removeChild(node);
                j--;
                continue;
              }
              ctrlChild.children[0].appendChild(node);
              j--;
            }
            // node.parentElement.removeChild(node);
          }
          // 防止段落标题无法编辑时，不能定位光标
          for(var s = 0; s < axTools.getByClass("ctrl-value", ctrlChild).length; s++) {
            var childItem = axTools.getByClass("ctrl-value", ctrlChild)[s];
            if(childItem.tagName === "STRONG") {
              childItem.parentNode && (childItem.outerHTML += '&#8203');
            }
          }
          continue
        }
        // ax-update: 增加可点击光标位置
        if (ctrlChild.getAttribute("axplugins") == 'haveornot') {
          var childs = axTools.getByClass("ctrl-value", ctrlChild);
          for (var m = 0; m < childs.length; m++) {
            childs[m].setAttribute("contenteditable", false);
          }
        }
        if(ctrlChild.getAttribute("axplugins") == 'diagnose' || ctrlChild.getAttribute("axplugins") == 'prescription') {
          continue;
        }
        ctrlChild.parentNode && (ctrlChild.outerHTML += '&#8203');
      }
      // 处理分页重置导致锁定文书后部分内容未锁定
      if (me.body.children[1] && me.body.children[1].getAttribute("isLock") == "false" && (me.options.editorModel == "edit" || me.options.editorModel == "mark")) {
        axTools.setBodyEditAttr(me, false);
        axTools.setStateLock(me, false);
      }

      // 记录初始值，用来判断是否修改过
      me.execCommand("recordinitcontent");

      var currVal = me.queryCommandValue("watermarksetting");
      me.execCommand("watermarksetting", currVal);
      // 预览病历时，fix遮挡问题
      if (this.options.editorModel == 'preview') {
        var pageArr = this.document.querySelectorAll(".ax-page-wrapper")
        for (var i = 0; i < pageArr.length; i++) {
          pageArr[i].style.width = ''
        }
      }
      if (this.options.editorModel != "edit") {
        axTools.clearValueChange(me);
      }
      if (typeof this.options.setContentReady == "function") {
        me.options.setContentReady()
      }

      me.undoManger.dom = me.document.querySelectorAll("body")[0];
      me.undoManger.observe(); // 撤回监听
      // me.undoManger.reset(); // 重置撤回栈
    },
    notNeedUndo: 1
  };
};


/**
 * 光标处插入检验结果
 * @command insertinspection
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'insertinspection');
 * ```
 */
AX.plugins["insertinspection"] = function () {
  var me = this,
    thePlugins = "insertinspection";
  me.commands[thePlugins] = {
    execCommand: function (type, data, item) {
      if (
        me.options.editorModel == "pure" ||
        me.options.editorModel == "dirty" ||
        me.options.editorModel == "secret"
      ) {
        alert(me.getLang("ax.viewNotEditTip"));
        return;
      }
      if (data.length === 0 || !data) {
        return;
      }
      // 查看是否有光标位置
      var range = me.selection.getRange();
      if (!range || !range.startContainer) {
        alert(me.getLang("ax.noneCursor"));
        return;
      }
      var oNode = document.createElement("span");
      // var html =
      //   '<span style="display: block;"><b>检验项目：' +
      //   item.assayApplyItemName +
      //   "</b></span>";
      var html = "";
      oNode.setAttribute("id", item.assayApplyItemCode);
      oNode.setAttribute("title", item.assayApplyItemName);
      oNode.setAttribute("isSecret", item.isSecret);
      oNode.setAttribute("attrs", JSON.stringify(data));
      // oNode.setAttribute("contenteditable", "false");
      // oNode.setAttribute("check", item.assayApplyItemCode);
      // oNode.setAttribute('class', 'ctrl-bg ctrl-field macro-ctrl checkres-'+item.assayApplyItemCode);
      oNode.setAttribute("axPlugins", "checkres");

      html +=  "<b>" +
        data[0].assayTime +
        "&nbsp;" +
        item.assayApplyItemName +
        "</b>：" ;
      for (var i = 0; i < data.length; i++) {
        html +=
          data[i].assayName +
          "&nbsp;" +
          data[i].assayResult +
          data[i].assayUnit;
        html += i == data.length - 1 ? "" : ", ";
      }
      oNode.innerHTML = html;
      me.execCommand("inserthtml", oNode.outerHTML);

      var selection = me.window.getSelection();
      selection.removeAllRanges();
    }
  };
};

/**
 * 光标处插入检查结果
 * @command insertcheckres
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'insertcheckres');
 * ```
 */
AX.plugins["insertcheckres"] = function () {
  var me = this,
    thePlugins = "insertcheckres";
  me.commands[thePlugins] = {
    execCommand: function (type, data) {
      if (
        me.options.editorModel == "pure" ||
        me.options.editorModel == "dirty" ||
        me.options.editorModel == "secret"
      ) {
        alert(me.getLang("ax.viewNotEditTip"));
        return;
      }
      if (!data) {
        return;
      }
      // 查看是否有光标位置
      var range = me.selection.getRange();
      if (!range || !range.startContainer) {
        alert(me.getLang("ax.noneCursor"));
        return;
      }
      var oNode = document.createElement("span");
      var html = "";
      oNode.setAttribute("id", data.itemCode);
      oNode.setAttribute("title", data.itemName);
      oNode.setAttribute("isSecret", data.isSecret);
      oNode.setAttribute("attrs", JSON.stringify(data));
      oNode.setAttribute("contenteditable", "true");
      oNode.setAttribute("check", data.itemCode);
      // oNode.setAttribute('class', 'ctrl-bg ctrl-field macro-ctrl checkres-'+item.assayApplyItemCode);
      oNode.setAttribute("axPlugins", "checkres");
      html +=
      "<b>"+
      data.itemTime +
      "&nbsp;" +
      data.itemName +
      "</b>：";
      if (data.selectItem.indexOf('表现') > -1) {
        html +="<br/>" +
          "&nbsp;&nbsp;检查表现: " +
          data.examDescription;
      }
      if (data.selectItem.indexOf('结论') > -1) {
        html += "<br/>" +
          "&nbsp;&nbsp;检查结论: " +
          data.examResult;
      }
      oNode.innerHTML = html;
      me.execCommand("inserthtml", oNode.outerHTML);

      var selection = me.window.getSelection();
      selection.removeAllRanges();
    }
  };
};

/**
 * 光标处插入检验结果
 * @command insertinspection
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'insertinspection');
 * ```
 */
// AX.plugins["insertinspection"] = function () {
//   var me = this,
//     thePlugins = "insertinspection";
//   me.commands[thePlugins] = {
//     execCommand: function (type, data, item) {
//       if (
//         me.options.editorModel == "pure" ||
//         me.options.editorModel == "dirty" ||
//         me.options.editorModel == "secret"
//       ) {
//         alert(me.getLang("ax.viewNotEditTip"));
//         return;
//       }
//       if (data.length === 0 || !data) {
//         return;
//       }
//       // 查看是否有光标位置
//       var range = me.selection.getRange();
//       if (!range || !range.startContainer) {
//         alert(me.getLang("ax.noneCursor"));
//         return;
//       }
//       var oNode = document.createElement("span");
//       // var html =
//       //   '<span style="display: block;"><b>检验项目：' +
//       //   item.assayApplyItemName +
//       //   "</b></span>";
//       var html = "";
//       oNode.setAttribute("id", item.assayApplyItemCode);
//       oNode.setAttribute("title", item.assayApplyItemName);
//       oNode.setAttribute("isSecret", item.isSecret);
//       oNode.setAttribute("attrs", JSON.stringify(data));
//       // oNode.setAttribute("contenteditable", "false");
//       // oNode.setAttribute("check", item.assayApplyItemCode);
//       // oNode.setAttribute('class', 'ctrl-bg ctrl-field macro-ctrl checkres-'+item.assayApplyItemCode);
//       oNode.setAttribute("axPlugins", "checkres");
//       for (var i = 0; i < data.length; i++) {
//         html +=
//           data[i].assayTime +
//           "<b>【" +
//           item.assayApplyItemName +
//           "】</b>&nbsp;&nbsp;&nbsp;&nbsp;" +
//           data[i].assayName +
//           "&nbsp;&nbsp;" +
//           data[i].assayResult +
//           "&nbsp;&nbsp;" +
//           data[i].assayUnit;
//         html += i == data.length - 1 ? "" : ", ";
//       }
//       oNode.innerHTML = html;
//       me.execCommand("inserthtml", "&nbsp;" + oNode.outerHTML + "&nbsp;");

//       var selection = me.window.getSelection();
//       selection.removeAllRanges();
//     }
//   };
// };

/**
 * 光标处插入检查结果
 * @command insertcheckres
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'insertcheckres');
 * ```
 */
// AX.plugins["insertcheckres"] = function () {
//   var me = this,
//     thePlugins = "insertcheckres";
//   me.commands[thePlugins] = {
//     execCommand: function (type, data) {
//       if (
//         me.options.editorModel == "pure" ||
//         me.options.editorModel == "dirty" ||
//         me.options.editorModel == "secret"
//       ) {
//         alert(me.getLang("ax.viewNotEditTip"));
//         return;
//       }
//       if (!data) {
//         return;
//       }
//       // 查看是否有光标位置
//       var range = me.selection.getRange();
//       if (!range || !range.startContainer) {
//         alert(me.getLang("ax.noneCursor"));
//         return;
//       }
//       var oNode = document.createElement("span");
//       var html = "";
//       oNode.setAttribute("id", data.itemCode);
//       oNode.setAttribute("title", data.itemName);
//       oNode.setAttribute("isSecret", data.isSecret);
//       oNode.setAttribute("attrs", JSON.stringify(data));
//       oNode.setAttribute("contenteditable", "true");
//       oNode.setAttribute("check", data.itemCode);
//       // oNode.setAttribute('class', 'ctrl-bg ctrl-field macro-ctrl checkres-'+item.assayApplyItemCode);
//       oNode.setAttribute("axPlugins", "checkres");
//       html +=
//       data.itemTime +
//       ": " +
//       data.itemName +
//       "：";
//       if (data.selectItem.indexOf('表现') > -1) {
//         html +="<br/>" +
//           "&nbsp;<b>&nbsp;【检查表现】</b>: <br/>" +
//           data.examDescription;
//       }
//       if (data.selectItem.indexOf('结论') > -1) {
//         html += "<br/>" +
//           "&nbsp;<b>&nbsp;【检查结论】</b>: <br/>" +
//           data.examResult;
//       }
//       oNode.innerHTML = html;
//       me.execCommand("inserthtml", "&nbsp;" + oNode.outerHTML + "&nbsp;");

//       var selection = me.window.getSelection();
//       selection.removeAllRanges();
//     }
//   };
// };
/**
 * 隐藏工具栏
 */
AX.plugins["hidetools"] = function () {
  var me = this,
    thePlugins = "hidetools";
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var editorBox = document.getElementById(me.key);
      if (!editorBox) return;
      var toolbar = axTools.getByClass("edui-editor-toolbarbox", editorBox),
        iframeholder = axTools.getByClass(
          "edui-editor-iframeholder",
          editorBox
        );
      //浏览模式下隐藏工具条

      iframeholder[0].style.height = editorBox.parentElement.offsetHeight + "px";
      // parseInt(iframeholder[0].offsetHeight) +
      // parseInt(toolbar[0].offsetHeight) +
      // "px";
      toolbar[0].style.display = "none";
      axTools.setStateLock(me, false);
    },
    notNeedUndo: 1
  }
}

/**
 * 校验文书是否含有未填写必填项
 */
AX.plugins["validrequired"] = function() {
  var me = this,
    thePlugins = "validrequired";
  me.commands[thePlugins] = {
    execCommand: function(){
      return axTools.validRequiredCtrls(me)
    },
    notNeedUndo: 1
  }
}

/* eslint-disable */

/**
 * 批注
 * @command note
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'note');
 * ```
 */
AX.plugins["note"] = function() {
  var me = this,
    thePlugins = "note";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      var rng = me.selection.getRange(),
        selectContent = rng.cloneContents();
      if ((!isEdit && selectContent == undefined) || selectContent == "") {
        alert(me.getLang("ax.nullNoteTip"));
        return;
      }
      var dialog = new AX.ui.Dialog({
        iframeUrl: this.options.AXEDITOR_HOME_URL + "dialogs/extends/note.html",
        name: thePlugins,
        editor: this,
        title: me.getLang("ax.addNote"),
        cssRules: "width:330px;height:140px;",
        buttons: [
          {
            className: "edui-okbutton",
            label: me.getLang("ax.confirm"),
            onclick: function() {
              dialog.close(true);
            }
          },
          {
            className: "edui-cancelbutton",
            label: me.getLang("ax.cancel"),
            onclick: function() {
              dialog.close(false);
            }
          }
        ]
      });
      dialog.render();
      dialog.open();
    }
  };

  //由于被批注的内容可能是纯文本，也可能是文本+控件，此处需重新构造被批注的内容
  me.commands["noteconstructor"] = {
    execCommand: function(type, data) {
      var rng = me.selection.getRange();
      var selectContent = rng.cloneContents();
      // var oNode = document.createElement('span');
      var oNode = AX.mh.note(data);

      if(rng.endContainer.tagName == "P") {
        rng.setStart(rng.startContainer, 0).setEnd(rng.startContainer, (rng.startContainer.nodeType == 3? rng.startContainer.textContent.length: rng.startContainer.childNodes.length));
        rng.select();
      }
      selectContent = rng.cloneContents();
      try {
        if(selectContent.childNodes.length > 0) {

        }
        oNode.appendChild(selectContent);
        selectContent = oNode.innerHTML || oNode.innerText || oNode.textContent;
      } catch (e) {
        alert(me.getLang("ax.nullNoteTip"));
        return;
      }
      // var history=[];
      // history.push(JSON.stringify({noteUserId:data.userId,noteUser:data.userName,noteText:data.val}));
      // oNode.setAttribute("noteText", data.val);
      // oNode.setAttribute("noteUser", data.userName);
      // oNode.setAttribute("noteTime", data.noteTime);
      // oNode.setAttribute("history", history);
      // oNode.setAttribute("contenteditable", 'true');
      // oNode.setAttribute('class', 'ax-editor-note');
      // oNode.setAttribute('axPlugins', thePlugins);
      oNode.innerHTML = selectContent;
      this.execCommand("insertHtml", oNode.outerHTML);
    }
  };

  var popup = axTools.makePopup({
    me: me,
    type: thePlugins,
    delFunc: function(that) {
      me.window.confirmMsg(me.getLang("ax.delNote"), function(rsl) {
        if (!rsl) {
          return;
        }
        that.anchorEl.outerHTML = that.anchorEl.innerHTML;
      });
      // if (window.confirm(me.getLang('ax.delNote'))) {
      // 	that.anchorEl.outerHTML = that.anchorEl.innerHTML;
      // }
      that.hide();
    }
  });
  // popup.render();

  me.addListener("mouseover", function(t, evt) {
    evt = evt || window.event;
    var el = evt.target || evt.srcElement,
      axPlugins = el.getAttribute("axplugins"),
      currModel = this.options.editorModel;
    if (
      axTools.hasClass(el, "ax-editor-note") &&
      axPlugins == thePlugins &&
      (currModel == "edit" || currModel == "mark" || currModel == "dirty")
    ) {
      var html = popup.formatHtml(
        "<nobr>" +
          el.getAttribute("noteUser") +
          " " +
          el.getAttribute("noteTime") +
          " " +
          (this.options.labelMap[thePlugins] ||
            this.getLang("ax." + thePlugins)) +
          ':<br><div class="ax-editor-note-content">' +
          el.getAttribute("noteText") +
          '</div><br> <span onclick=$$._edittext() class="edui-clickable">' +
          this.getLang("edit") +
          '</span>&nbsp;&nbsp;<span onclick=$$._delete() class="edui-clickable">' +
          this.getLang("delete") +
          "</span></nobr>"
      );
      if (html) {
        popup.getDom("content").innerHTML = html;
        popup.anchorEl = el;
        popup.showAnchor(popup.anchorEl);
      } else {
        popup.hide();
      }
    } else {
      popup.hide();
    }
  });
};

/* eslint-disable */

/**
 * 数字元素鼠标移入事件
 * @command numberelement
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'numberelement');
 * ```
 */
AX.plugins["numberelement"] = function() {
  var me = this,
    thePlugins = "numberelement";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        isEdit: isEdit,
        cssRules: "width:700px;height:560px;",
        dialogUrl: "dialogs/extends/text.html?element=numberelement"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();
  var menuTitle = me.getLang("labelMap.numberelement") || "",
    selectItems = new baidu.editor.ui.Menu({
      editor: me,
      className: "edui-for-editattr edui-list edui-num-drop",
      content:
        '<select name="1212" id="aaaa" class="number-drop-select"><option value="1">1</option><option value="2">2</option><option value="3">3</option></select>',
      title: menuTitle,
      initValue: menuTitle,
      indexByValue: function(value) {
        if (value) {
          for (var item, i = 0; (item = this.items[i]); i++) {
            if (item.value.indexOf(value) != -1) {
              return i;
            }
          }
        }
        return -1;
      },
      selectByValue: function() {
        console.log("selectByValue");
      }
    });
  selectItems.render();

  me.addListener("click", function(t, evt) {
    try {
      evt = evt || window.event;
      var el = evt.target || evt.srcElement;
      if (
        me.options.editorModel === "pure" ||
        me.options.editorModel === "dirty" ||
        me.options.editorModel === "secret" || me.options.editorModel === "preview"
      )
        return; //清洁模式与非清洁模式 保密模式下不触发点击事件
      if ("view" != me.options.editorModel) {
        // ax-update: ax-editor-number-select 为同级别的下拉元素，这里过滤掉，一面两个下拉冲突，例如：数字元素后面的单位
        if ("BODY" != el.tagName && "HTML" !== el.tagName && el.className && el.className.indexOf('ax-editor-number-select') == -1) {
          var thePluginsNode = AX.dom.domUtils.findParent(
            el,
            function(dom) {
              return (
                dom.getAttribute("axplugins") == thePlugins &&
                dom.getAttribute("attrs")
              );
            },
            true
          );
          if (thePluginsNode === null) return;
          var attrs = thePluginsNode.getAttribute("attrs");
          attrs = JSON.parse(attrs);
          if (!!!attrs.isPopuInput) {
            return;
          }
          renderSelect(
            [
              {
                text: 1,
                value: 1
              }
            ],
            {
              elemUnit: attrs.elemUnit,
              eleUnitContr: attrs.eleUnitContr
            }
          );
        }

        /**
         * 渲染下拉项
         * @param {Array} data option数据
         * @param unitRelate
         */
        function renderSelect(data, unitRelate) {
          var option,
            optionHtmls = [],
            textLen = 0,
            j = 0;
          var eleUnitNode = axTools.getByTagAttr(
            "span",
            "type",
            "eleUnitVal",
            thePluginsNode
          )[0]; //单位元素

          for (; j < data.length; j++) {
            option = data[j];
            textLen = option.text.length;
            optionHtmls.push({
              label: option.text,
              value: option.value,
              theme: me.options.theme,
              onclick: function(eventName, event) {
                var node = event.target;
                el = AX.dom.domUtils.findParent(
                  el,
                  function(dom) {
                    return (
                      dom.getAttribute("axplugins") == thePlugins &&
                      dom.getAttribute("attrs")
                    );
                  },
                  true
                );
                var attrs = el.getAttribute("attrs");
                attrsObj = JSON.parse(attrs);
                var wrapNode = AX.dom.domUtils.findParent(
                  node,
                  function(node) {
                    if (node.id === "wrapNode") {
                      return true;
                    }
                  },
                  true
                );

                if (node.tagName === "BUTTON") {
                  //确定取消按钮
                  var nodeType = node.getAttribute("type");
                  switch (nodeType) {
                    case "confirm":
                      var rootNode = AX.dom.domUtils.findParent(
                        node,
                        function(node) {
                          return AX.dom.domUtils.hasClass(
                            node,
                            "edui-listitem-label"
                          );
                        },
                        true
                      );
                      var numiptNode = AX.dom.domUtils.getElementsByTagName(
                        rootNode,
                        "input"
                      )[0];
                      var numValue = numiptNode.value;
                      var min = attrsObj.valMin - 0;
                      var max = attrsObj.valMax - 0;
                      if (attrsObj.valMin != '' && !isNaN(min) && numValue < min) {
                        numValue = min
                      } else if (attrsObj.valMax != '' && !isNaN(max) && numValue > max) {
                        numValue = max;
                      }

                      // attrsObj.defaultVal = numValue;
                      var numNode = axTools.getByTagAttr(
                        "span",
                        "type",
                        "numVal",
                        el
                      )[0];

                      if (eleUnitNode && numNode) {
                        //有单位时的赋值情况
                        numNode.innerText = numValue;
                        eleUnitNode.innerText = axTools.getByTagAttr(
                          "div",
                          "class",
                          "select",
                          rootNode
                        )[0].innerText;
                      } else {
                        // 没有单位的时候 只找到一层元素就好
                        var span = el.getElementsByTagName("span")[0];
                        span.innerText = numValue;
                      }

                      el.setAttribute("attrs", JSON.stringify(attrsObj));

                      setTimeout(function() {
                        if (me.options.editorModel == "mark") {
                          me.execCommand("insertHtml", "");
                        }
                      }, 100);
                      axTools.valueChange(el);
                      return true;
                      break;
                    case "cancel":
                      return true;
                      break;
                  }
                }

                if (wrapNode) {
                  //数字框逻辑
                  var numIptNode = node;
                  numIptNode.focus();
                  if(node.className.indexOf("input-number-input") > -1) {
                    var numValue1 = node.value;
                  }
                  var ctrlValue = axTools.getByClass("ctrl-value", el)[0].innerText;
                  var options = {
                    currentValue: attrsObj.defaultVal || numValue1 || ctrlValue || attrsObj.valMin,
                    precision: attrsObj.numAccuracy, //数字精度
                    max: attrsObj.valMax,
                    min: attrsObj.valMin
                  };
                  setTimeout(function() {
                    axTools.numberIptHandler(wrapNode, numIptNode, options);
                  }, 100);
                }
                return false;
              },
              renderLabelHtml: function() {
                var optionsList = [];
                var isShowUnit = unitRelate.eleUnitContr === "on";
                var elemUnit = unitRelate.elemUnit;
                optionsList = elemUnit? elemUnit.split("、"): [];
                var optionsHtml =
                  "<option>" + me.getLang("ax.selectOptionTip") + "</option>";
                for (var i = 0; i < optionsList.length; i++) {
                  optionsHtml +=
                    '<option value="' +
                    optionsList[i] +
                    '">' +
                    optionsList[i] +
                    "</option>";
                }

                var numberDrop =
                  '<div class="edui-listitem-body edui-default"><div class="edui-label edui-listitem-label edui-default"><div id="wrapNode" class="input-number">\n' +
                  '    <div class="number-handler-wrap">\n' +
                  '        <a href="javascript:;" class="input-number-handler" type="up">\n' +
                  '                <span class="input-number-handler-inner number-up"  type="up">\n' +
                  "                    \n" +
                  "                </span>\n" +
                  "        </a>\n" +
                  '        <a href="javascript:;" class="input-number-handler input-number-handler-down"  type="down">\n' +
                  '                <span class="input-number-handler-inner number-down input-number-handler-icon" type="down">\n' +
                  "                    \n" +
                  "                </span>\n" +
                  "        </a>\n" +
                  "    </div>\n" +
                  '    <div class="number-input-wrap">\n' +
                  '        <input type="text" autocomplete="off" id="input-number-input" class="input-number-input">\n' +
                  "    </div>\n" +
                  "</div>" +
                  '<div class="number-drop-confirm"><button type="confirm">确定</button><button type="cancel">取消</button></div>' +
                  "</div></div>";

                return numberDrop;
              }
            });
          }
          selectItems.items = optionHtmls;
          selectItems.initItems();
          selectItems.getDom(
            "content"
          ).innerHTML = selectItems.getContentHtmlTpl();
          setTimeout(function() {
            //菜单下拉获取焦点
            var numiptNode = AX.dom.domUtils.getElementsByTagName(
              selectItems.getDom("content"),
              "input"
            )[0];
            numiptNode.focus();
            numiptNode.click();
          }, 20);
          selectItems.anchorEl = el;
          selectItems.showAnchor(selectItems.anchorEl);
        }
      }
    } catch (e) {
      console.log(e);
    }
  });
  me.addListener("click", function (t, evt){
    var el = evt.target || evt.srcElement;
    if(el.tagName == "HTML") {
      var rangeDom = new AX.dom.Range(me.document);
      var child = axTools.getByClass("ax-page-content", el)[0].children.length > 0?axTools.getByClass("ax-page-content", el)[0].children[0]: axTools.getByClass("ax-page-content", el)[0];
      rangeDom.setStart(child, 0).setCursor(false, true);
      return;
    }
    var thePluginsNode = AX.dom.domUtils.findParent(
      el,
      function(dom) {
        return (
          dom.getAttribute("axplugins") == thePlugins &&
          dom.getAttribute("attrs")
        );
      },
      true
    );
    if (thePluginsNode === null) return;
    for(var i = 0; i < el.children.length; i++) {
      if (el.children[i].getAttribute("value") == el.value) {
        el.children[i].setAttribute("selected", "selected");
      }else{
        el.children[i].removeAttribute("selected");
      }
    }
  })
  // me.addListener("mouseover", function(t, evt) {
  //   axTools.commonEditTip(thePlugins, me, popup, evt);
  // });
};

/* eslint-disable */

/**
 * 字数统计弹窗
 * @command numcount
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'numcount');
 * ```
 */
AX.plugins['numcount'] = function () {
	var me = this,
		thePlugins = 'numcount';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			isEdit=true;
			axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:330px;height:160px;',
				dialogUrl: 'dialogs/extends/numcount.html'
			});
		}
	};
};
(function(window) {
  var oneLineContentHeight = 18;
  var my$ = window.$;
  var getComputedStyle = window.getComputedStyle;

  function getTopWithContentElem(parent, elem, nextNode) {
    if (!elem || !elem.parentNode || !parent || !parent.parentNode) {
      return {
        top: 0,
        offsetHeight: 0,
        marginBottom: 0
      };
    }
    // 兼容自由文本
    if (elem.nodeType == 3) {
      var tagBefore = document.createElement("span");
      tagBefore.id = "tempTagBefore";
      tagBefore.style.position = "absolute";
      var tagAfter = document.createElement("span");
      tagAfter.id = "tempTagAfter";
      tagAfter.style.position = "absolute";
      var nextElems = $(elem).next();
      var nextElem = nextNode ? nextNode : nextElems[0];
      elem.parentNode.insertBefore(tagBefore, elem);
      if (nextElem) {
        elem.parentNode.insertBefore(tagAfter, nextElem);
      } else {
        elem.parentNode.appendChild(tagAfter);
      }
      var offsetLeft = tagBefore.offsetLeft;
      var styles = getComputedStyle(elem.parentNode, null);
      var lh = isNaN(parseInt(styles.lineHeight, 10)) ? 16: parseInt(styles.lineHeight, 10);
      var offsetHeight =
        Math.abs(
          ((tagAfter.offsetTop - tagBefore.offsetTop).toFixed(2) / lh) * lh
        ) + lh;
      var top = (Math.abs(tagBefore.offsetTop - parent.offsetTop) / lh) * lh +
      offsetHeight;
      tagBefore.parentNode.removeChild(tagBefore);
      tagAfter.parentNode.removeChild(tagAfter);
      return {
        top: top,
        offsetHeight: offsetHeight,
        offsetLeft: offsetLeft,
        lh: lh,
        width: $(elem.parentNode).width(),
        marginBottom: 0
      };
    }
    // if(parent.className.indexOf("ax-page-content") > -1){
    //   var parentElemTop = ((axTools.getByClass("ax-page-pagenum", parent.parentElement)[0].innerText * 1 - 1) * parent.parentElement.offsetHeight) + parent.parentElement.style.paddingTop.replace("px", "") - 0 + parent.previousElementSibling.offsetHeight;
    // }else{
      var parentElemTop = my$(parent).offset()["top"] - parent.scrollTop;
    // }
    // 兼容margin带来影响
    var marginBottom =
      my$(elem)
        .css("marginBottom")
        .replace("px", "") - 0;
    //兼容border带来的影响
    var borderWidth =
      my$(elem)
        .css("borderWidth")
        .replace("px", "") - 0;
    return {
      top: my$(elem).offset()["top"] + elem.offsetHeight - parentElemTop,
      offsetHeight: elem.offsetHeight || 0,
      marginBottom: marginBottom || 0
    };
  }

  // 获取纯文本元素的行数
  function getElemRowNum(elem) {
    var styles = getComputedStyle(elem, null);
    var lh = parseInt(styles.lineHeight, 10);
    var h =
      styles.height == "auto" ? elem.offsetHeight : parseInt(styles.height, 10);
    var lc = Math.round(h / lh);
    return lc;
  }

  // 基础页面逻辑
  // 1. 检测内容变化
  // 2. 分割
  // 3. 合并
  // 4. 页头、页尾、页码的设置
  function AxPage(controler, elem, size, padding, pageNum, tags) {
    this.id = elem.id;
    this.elem = elem;
    this.pageNum = pageNum;
    this.controler = controler;
    this._refreshTimer = null;
    // 页面纸张大小
    this.size = size;
    // 纸张内边距
    this.padding = padding;
    // 标签
    this.tags = tags || [];
    // 缓存各个部分高度
    this._cacheHeights = {};

    this.init();
    this.updatePadding(
      padding.left,
      padding.right,
      padding.top,
      padding.bottom
    );
    this.updateSize(size.width, size.height);
  }

  AxPage.prototype.getDefaultPageNum = function() {
    var pageNum = document.createElement("div");
    pageNum.className = "ax-page-pagenum";
    pageNum.innerHTML = this.pageNum;
    return pageNum;
  };

  AxPage.prototype.init = function() {
    // 三个内容区
    if (this.elem.innerHTML == "") {
      this.header = this.getDefaultHeader();
      this.contentElem = this.getDefaultContent();
      this.footer = this.getDefaultFooter();
      this.pageElem = this.getDefaultPageNum();
      this.elem.appendChild(this.header);
      this.elem.appendChild(this.contentElem);
      this.elem.appendChild(this.footer);
      this.elem.appendChild(this.pageElem);
    } else {
      this.contentElem = this.elem.getElementsByClassName("ax-page-content")[0];
      if (!this.contentElem) {
        this.contentElem = this.getDefaultContent();
        this.contentElem.innerHTML = this.elem.innerHTML;
        this.elem.innerHTML = "";
        this.elem.appendChild(this.contentElem);
      }
      this.header = this.elem.getElementsByClassName("ax-page-header")[0];
      if (!this.header) {
        this.header = this.getDefaultHeader();
        this.elem.insertBefore(this.header, this.contentElem);
      }
      this.footer = this.elem.getElementsByClassName("ax-page-footer")[0];
      if (!this.footer) {
        this.footer = this.getDefaultFooter();
        this.elem.appendChild(this.footer);
      }
      this.pageElem = this.elem.getElementsByClassName("ax-page-pagenum")[0];
      if (!this.pageElem) {
        this.pageElem = this.getDefaultPageNum();
        this.elem.appendChild(this.pageElem);
      }
      this.pageElem.innerHTML = this.pageNum;
    }

    this.elem.setAttribute("contenteditable", false);
    this.header.setAttribute("contenteditable", false);
    var status = this.contentElem.getAttribute("contenteditable") || true;
    this.contentElem.setAttribute("contenteditable", status);
    this.footer.setAttribute("contenteditable", false);
    this.pageElem.setAttribute("contenteditable", false);

    this.bindEvts();

    // 刷新
    var self = this;
    if (this._refreshTimer) {
      clearTimeout(this._refreshTimer);
    }
    this._refreshTimer = setTimeout(function() {
      if (self.elem) {
        self.refresh();
      }
    }, 1);
  };

  // 计算判断当前页面状态
  // 是内容多了还是少了
  AxPage.prototype.calContentStatus = function() {
    var status = 0;
    var l = this.contentElem.children.length;
    if (l == 0) {
      status = -1;
    } else {
      var ch = getTopWithContentElem(
        this.contentElem,
        this.contentElem.children[l - 1]
      ).top;

      var pageContentHeight =
        this.contentElem.style.height.replace("px", "") - 0;
      // 内容超出
      if (pageContentHeight && ch > Math.ceil(pageContentHeight + 5)) {
        status = 1;
      }
      // 内容坍塌
      if (
        pageContentHeight &&
        ch < Math.ceil(pageContentHeight) - oneLineContentHeight
      ) {
        status = -1;
      }
    }

    return status;
  };

  // 获取某个节点的实际占位高度，包括内外边距
  AxPage.prototype.getElemHeight = function(elem) {
    var s = getComputedStyle(elem);
    return (
      parseInt(s.marginBottom, 10) +
      parseInt(s.marginTop, 10) +
      parseInt(s.paddingBottom, 10) +
      parseInt(s.paddingTop, 10) +
      parseInt(elem.offsetHeight, 10)
    );
  };

  // 获取当前页剩余空白空间
  AxPage.prototype.getLeftSpace = function() {
    var pageContentHeight = this.contentElem.style.height.replace("px", "") - 0;
    var l = this.contentElem.children.length;
    if (l == 0) {
      return pageContentHeight;
    }
    var ch = getTopWithContentElem(
      this.contentElem,
      this.contentElem.children[l - 1]
    ).top;
    return pageContentHeight - ch;
  };

  AxPage.prototype.getHFContent = function(classname) {
    var p = document.createElement("p");
    p.className = classname;
    p.setAttribute("contenteditable", true);
    return p;
  };

  AxPage.prototype._bindBlur = function(elem) {
    elem.onblur = function(evt) {
      // 创建
      var b = document.createEvent("HTMLEvents");
      // 初始化
      b.initEvent("blur", false, false);
      evt.target.parentNode.dispatchEvent(b);
    };
  };

  AxPage.prototype.bindEvts = function() {
    var self = this;
    this.header.addEventListener("click", function(evt) {
      if (
        evt.currentTarget &&
        evt.currentTarget.className.indexOf("ax-page-header") != -1
      ) {
        if (self.header.innerHTML.replace(/\u200B/g, "") == "") {
          self.header.innerHTML = "\u200B";
        }
        if (
          (self.controler.editor.options.editorModel == "edit" ||
          self.controler.editor.options.editorModel == "design") &&
          (self.controler.editor.body.children[1] && self.controler.editor.body.children[1].getAttribute("isLock") != "false")
        ) {
          self.header.setAttribute("contenteditable", true);
        }
      }
      axTools.stopDefault(evt);
      axTools.stopPropagation(evt);
    });
    this.header.addEventListener("blur", function(evt) {
      if (self.header.innerHTML.replace(/\u200B/g, "") == "") {
        self.header.innerHTML = "";
      }
      self.headerChangeHandler();
    });
    this.footer.addEventListener("click", function(evt) {
      if (
        evt.currentTarget &&
        evt.currentTarget.className.indexOf("ax-page-footer") != -1
      ) {
        if (self.footer.innerHTML.replace(/\u200B/g, "") == "") {
          self.footer.innerHTML = "\u200B";
        }
        if (
          (self.controler.editor.options.editorModel == "edit" ||
          self.controler.editor.options.editorModel == "design") &&
          (self.controler.editor.body.children[1] && self.controler.editor.body.children[1].getAttribute("isLock") != "false")
        ) {
          self.footer.setAttribute("contenteditable", true);
        }
      }
      axTools.stopDefault(evt);
      axTools.stopPropagation(evt);
    });
    this.footer.addEventListener("blur", function(evt) {
      if (self.footer.innerHTML.replace(/\u200B/g, "") == "") {
        self.footer.innerHTML = "";
      }
      self.footerChangeHandler();
    });
  };

  // 页头页尾变化，需要判断是否将变化后的内容同步到其他页面
  AxPage.prototype.headerChangeHandler = function() {
    this.updateStyle();
    this.controler.updateHeader(
      this.header.innerHTML,
      this.header.getAttribute("style"),
      this.id
    );
    // var auto = this.header.getAttribute("ax-page-header-auto-update");
    // if (auto == "true") {
    //   this.controler.updateHeader(this.header.innerHTML);
    // } else if (auto == null) {
    //   if (confirm("是否将修改同步到其他页?")) {
    //     this.header.setAttribute("ax-page-header-auto-update", true);
    //     this.controler.updateHeader(this.header.innerHTML);
    //   } else {
    //     this.header.setAttribute("ax-page-header-auto-update", false);
    //   }
    // }
  };

  AxPage.prototype.footerChangeHandler = function() {
    this.updateStyle();
    this.controler.updateFooter(
      this.footer.innerHTML,
      this.footer.getAttribute("style"),
      this.id
    );
    // var auto = this.footer.getAttribute("ax-page-footer-auto-update");
    // if (auto == "true") {
    //   this.controler.updateFooter(this.footer.innerHTML);
    // } else if (auto == null) {
    //   if (confirm("是否将修改同步到其他页?")) {
    //     this.footer.setAttribute("ax-page-footer-auto-update", true);
    //     this.controler.updateFooter(this.footer.innerHTML);
    //   } else {
    //     this.footer.setAttribute("ax-page-footer-auto-update", false);
    //   }
    // }
  };

  AxPage.prototype.getDefaultHeader = function() {
    var header = document.createElement("div");
    header.className = "ax-page-header";
    return header;
  };

  AxPage.prototype.getDefaultFooter = function() {
    var footer = document.createElement("div");
    footer.className = "ax-page-footer";
    return footer;
  };

  AxPage.prototype.getDefaultContent = function() {
    var content = document.createElement("div");
    var current = document.createElement("p");
    content.className = "ax-page-content";
    current.innerHTML = "&#8203";
    content.innerHTML = current.outerHTML;
    return content;
  };

  // 往内容前面增加节点
  AxPage.prototype.insertTop = function(elems) {
    var firstNode = this.contentElem.childNodes[0];
    var hasFirst = !!firstNode;
    var len = elems.childNodes.length;
    for (var i = 0; i < elems.childNodes.length; i++) {
      var elem = elems.childNodes[i];
      // TODO 为了追莫名顶部出现一个空行的bug
      if (elem.tagName === 'div' && !elem.className && elem.childNodes.children == 1 && elem.childNodes[0].tagName === 'span') {
        console.log("奇怪的空行出现了--->", new Error(), elem);
      }
      if (hasFirst) {
        // 判断是否要和插入的节点有合并操作
        var mergeRsl = false;
        if (i == len - 1) {
          mergeRsl = this.mergeContent(elem, firstNode);
        }
        if (!mergeRsl) {
          firstNode.parentNode.insertBefore(elem, firstNode);
          i--;
        }
      } else {
        this.contentElem.appendChild(elem);
        i--;
      }
    }
    this.refresh();
  };

  // 主要是向下分割
  AxPage.prototype.refresh = function() {
    if (this.controler.editor.selection) {
      var range = this.controler.editor.selection.getRange(),
        node = range.startContainer.parentNode,
        inHeader = this.getParentByClassName(node, "ax-page-header"),
        inFooter = this.getParentByClassName(node, "ax-page-footer");
      if (inHeader || inFooter) {
        this.updateStyle();
      }
    }
    var overflowWrapper = this.calcContent();
    console.log("overflow ----> ", this.id, overflowWrapper.childNodes.length);
    if (overflowWrapper && overflowWrapper.childNodes.length) {
      this.controler.overflow(this.id, overflowWrapper);
      // 切割后 设置光标位置
      this.setFocus()
    }
  };

  // 重置里面的内容, 只重置中部内容区域的
  // 这里主要是用于页面内容缩减带来的后续页面重排
  AxPage.prototype.appendContent = function(elems) {
    for (var i = 0; i < elems.length; i++) {
      this.contentElem.appendChild(elems[i]);
    }
    // 合并被分割的元素
    this.mergeAllContent(this.contentElem);
    // // 重新计算页面高度
    var wrapper = this.calcContent();
    var rsl = [];
    for (var i = 0; i < wrapper.childNodes.length; i++) {
      rsl.push(wrapper.childNodes[i]);
    }
    return rsl;
  };

  AxPage.prototype.getParentByClassName = function(elem, className) {
    var pelem = elem;
    var i = 0;
    while (!AX.dom.domUtils.isBody(pelem) && pelem) {
      i++;
      if (i > 5) {
        return null;
      }
      if (AX.dom.domUtils.isBody(pelem)) {
        return null;
      }
      if (pelem.className && pelem.className.indexOf(className) != -1) {
        return pelem;
      }
      pelem = elem.parentNode;
    }
    return null;
  };

  // 合并块级内容
  AxPage.prototype.mergeContent = function(preElem, nextElem) {
    // 元素合并
    var preSign = preElem.getAttribute("ax-split-sign");
    if (!preSign) {
      return false;
    }
    var nextSign = nextElem.getAttribute("ax-split-sign");
    if (!nextSign || preSign != nextSign) {
      return false;
    }
    var type = preElem.getAttribute("ax-split-type");

    // 段落、大段文本、表格
    if (
      type == "paragraphele" ||
      type == "paragraphContent" ||
      type == "contentLineWrapper"
    ) {
      var signElem = nextElem.childNodes[0];
      for (var i = 0; i < preElem.childNodes.length; i++) {
        nextElem.insertBefore(preElem.childNodes[i], signElem);
        i--;
      }
      // 兼容合并自由文本
      for (var i = 0; i < nextElem.childNodes.length; i++) {
        var child = nextElem.childNodes[i];
        var nextChild = nextElem.childNodes[i + 1];
        if (
          child &&
          child.nodeType == 3 &&
          nextChild &&
          nextChild.nodeType == 3
        ) {
          child.data = child.data + nextChild.data;
          nextElem.removeChild(nextChild);
          i--;
        }
      }
      this.mergeAllContent(nextElem);
    } else if (type == "table") {
      if (preElem.childNodes[0].tagName.toLowerCase() == "tbody") {
        nextElem.childNodes[0].innerHTML =
          preElem.childNodes[0].innerHTML + nextElem.childNodes[0].innerHTML;
      } else {
        nextElem.innerHTML = preElem.innerHTML + nextElem.innerHTML;
      }
    } else if (type == "text") {
      // 文本元素
      if (nextElem.getElementsByClassName("ctrl-value")[0]) {
        nextElem.getElementsByClassName("ctrl-value")[0].innerHTML =
          nextElem.getElementsByClassName("ctrl-value")[0].innerHTML +
          preElem.getElementsByClassName("ctrl-value")[0].innerHTML;
      } else {
        nextElem.innerHTML = preElem.innerHTML + nextElem.innerHTML;
      }
    } else if (type == "clearText") {
      // 纯文本
      nextElem.innerHTML = preElem.innerHTML + nextElem.innerHTML;
    } else {
      console.error("模式合并不支持", type);
      return false;
    }

    return true;
  };

  // 检查整个content内部是否有可以合并的
  // 如果有就直接合并
  AxPage.prototype.mergeAllContent = function(elems) {
    for (var i = 0; i < elems.children.length; i++) {
      var child = elems.children[i];
      var nextChild = elems.children[i + 1];
      if (child.getAttribute("ax-split-sign") && nextChild) {
        if (this.mergeContent(child, nextChild)) {
          child.parentNode.removeChild(child);
          this.mergeAllContent(elems);
          return;
        }
      }
    }
  };

  // 当前页整体是否没有装满
  AxPage.prototype.isNotEnough = function() {
    var pageContentHeight = this.contentElem.style.height.replace("px", "") - 0;
    var l = this.contentElem.children.length;
    if (l == 0) {
      return true;
    }
    var lastChildTop = getTopWithContentElem(
      this.contentElem,
      this.contentElem.children[l - 1]
    ).top;
    var leftHeight = pageContentHeight - lastChildTop;
    return {
      result: leftHeight >= oneLineContentHeight,
      leftHeight: leftHeight
    };
  };

  // 某个元素是否超出页面
  AxPage.prototype.isOverElem = function(elem) {
    var pageContentHeight = this.contentElem.style.height.replace("px", "") - 0;
    var top = getTopWithContentElem(this.contentElem, elem).top;
    return top > pageContentHeight;
  };

  AxPage.prototype.isClearTextElem = function(elem) {
    var clearTextNode = true;
    for (var i = 0; i < elem.childNodes.length; i++) {
      var node = elem.childNodes[i];
      if (node.tagName) {
        var tagName = node.tagName.toLowerCase();
        if (tagName != "span" && tagName != "strong" && tagName != "br") {
          clearTextNode = false;
        }
        if (node.className) {
          clearTextNode = false;
        }
      } else {
        if (node.nodeName != "#text") {
          clearTextNode = false;
        }
      }
    }
    return clearTextNode;
  };

  AxPage.prototype.isSplitElem = function(elem) {
    var splitPluginNames = ["paragraphele", "text"];
    if (elem && elem.className && elem.className.indexOf("ax-nosplit-elem") != -1) {
      return null;
    }

    if (elem.tagName) {
      var tagName = elem.tagName.toLowerCase();
      if (tagName == "img") {
        return tagName;
      }

      if (elem.childNodes && elem.childNodes.length) {
        var pluginName = elem.getAttribute("axplugins");
        if (tagName == "table" || tagName == "tbody") {
          return "table";
        }
        if (splitPluginNames.indexOf(pluginName) != -1) {
          return pluginName;
        }
        if (
          tagName == "p" &&
          elem.className.indexOf("paragraphContent") != -1
        ) {
          return "paragraphContent";
        }
        if (
          tagName == "p" &&
          elem.parentNode &&
          elem.parentNode.className &&
          elem.parentNode.className.indexOf("ax-page-content") != -1
        ) {
          return "contentLineWrapper";
        }
        if (tagName == "p") {
          // 判断该段文字是否为仅仅纯文字组成
          // 目前支持纯文字分割
          if (this.isClearTextElem(elem)) {
            return "clearText";
          }
        }
        // 留痕文本
        if (
          tagName == "span" &&
          (elem.className.indexOf("editor-free-text") != -1 ||
            elem.className.indexOf("editor-mark-text") != -1)
        ) {
          return "clearText";
        }

        // 行内元素不分割
        // TODO

        return "paragraphContent";
      } else {
        // 多行纯文本元素也可以分割
        if (tagName == "p" && getElemRowNum(elem) > 1) {
          return "clearText";
        }
      }
    } else {
      return "justText";
    }

    return null;
  };

  // 计算高度
  AxPage.prototype.calcContent = function() {
    if (!this.controler.editor.selection) {
      return;
    }
    var pageContentHeight = this.contentElem.style.height.replace("px", "") - 0;
    var range = this.controler.editor.selection.getRange();

    // 存放多余的节点，然后同意给管理器，管理器再再进行分配
    var moveWrapper = document.createElement("div");
    var self = this;

    // 过滤掉无用元素
    function isIgnoreElem(elem, preNode, nextNode) {
      // 文本节点
      if (elem.nodeType == 3) {
        // 过滤&#8203;
        // 由于部分8203会跟在文本的前后会导致文本重新获取光标后8203独占一行
        // 导致分页错误
        // 但是跟随在非文本元素后面的就先不处理了，有可能是结构化元素的光标符
        if (
          elem.data &&
          elem.data.length == 1 &&
          elem.data.charCodeAt(0) == "8203" &&
          (!preNode ||
            preNode.nodeType == 3 ||
            (!nextNode || nextNode.nodeType == 3))
        ) {
          return true;
        }
        return false;
      }
      if (elem.nodeType != 1) {
        return true;
      }
      // 兼容老的模板
      if (elem.className && elem.className.indexOf("divid-line") != -1) {
        return true;
      }

      //过滤掉填充元素及页眉页脚，页眉页脚在计算内容区高度时已去除，此处不参与计算
      var tagName = elem.tagName.toLowerCase();
      if (
        tagName == "header" ||
        tagName == "footer" ||
        tagName == "pagenum" ||
        (tagName == "object" && elem.getAttribute("id") == "WebBrowser")
      ) {
        return true;
      }
      return false;
    }

    function isConfigElem(elem) {
      if (!elem.tagName) {
        return false;
      }
      var tagName = elem.tagName.toLowerCase();
      return elem.getAttribute("type") == "hidden" && tagName == "input";
    }

    function setSplitedElemSign(preElem, nextElem, splitType) {
      var sign = preElem.getAttribute("ax-split-sign");
      if (sign) {
        nextElem.setAttribute("ax-split-sign", sign);
      } else {
        sign = self.controler.getSplitElemSign();
        preElem.setAttribute("ax-split-sign", sign);
        nextElem.setAttribute("ax-split-sign", sign);
      }
      preElem.setAttribute("ax-split-type", splitType);
      nextElem.setAttribute("ax-split-type", splitType);

      // 把原始id挂在到两个元素的class上
      if (preElem.id) {
        axTools.addClass(preElem, preElem.id);
        axTools.addClass(nextElem, preElem.id);
      }
    }

    function _getTableMaxRowspan(elems) {
      var val = 1;
      for (var i = 0; i < elems.children.length; i++) {
        var child = elems.children[i];
        var childRowspan = child.getAttribute("rowspan");
        if (childRowspan) {
          childRowspan = childRowspan - 0;
          if (childRowspan > 1) {
            val = childRowspan;
          }
        }
      }
      return val;
    }

    // 逐行分割，单行超长度不予支持
    function splitTable(elem, height) {
      var lineNum = 0;
      var children = [];
      var tbody = elem.getElementsByTagName("tbody")[0];
      if (!tbody) {
        children = elem.children;
      } else {
        children = tbody.children;
      }
      var ch = 0;
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        // feather : 兼容table多行情况
        var rowspan = _getTableMaxRowspan(child);
        if (rowspan > 1) {
          for (var j = 0; j < rowspan; j++) {
            if (children[i + j]) {
              ch += children[i + j].offsetHeight;
            }
          }
          if (ch > height) {
            break;
          }
          lineNum += rowspan;
          i += rowspan;
        } else {
          if (ch + child.offsetHeight > height) {
            break;
          }
          ch += child.offsetHeight;
          lineNum++;
        }
      }

      // 不用分割了，直接下一行
      if (lineNum == 0) {
        return elem;
      }

      return doSplitTable(elem, {
        lineNum: lineNum
      });
    }

    function doSplitTable(elem, attrs) {
      var lineNum = attrs.lineNum;
      var tbody = elem.getElementsByTagName("tbody")[0];
      var top = elem;
      var bottom = $(elem).clone(true)[0];
      if (!tbody) {
        for (var i = 0; i < elem.children.length; i++) {
          if (i < lineNum) {
            bottom.removeChild(bottom.children[0]);
          } else {
            top.removeChild(top.children[lineNum]);
            i--;
          }
        }
        if (top.childNodes.length == 0) {
          top.parentNode.removeChild(top);
        }
        if (bottom.childNodes.length == 0) {
          return null;
        }
      } else {
        for (var i = 0; i < tbody.children.length; i++) {
          if (i < lineNum) {
            bottom.children[0].removeChild(bottom.children[0].children[0]);
          } else {
            top.children[0].removeChild(top.children[0].children[lineNum]);
            i--;
          }
        }
        if (top.children[0].childNodes.length == 0) {
          top.parentNode.removeChild(top);
        }
        if (bottom.children[0].childNodes.length == 0) {
          return null;
        }
      }

      // 设置标记属性
      setSplitedElemSign(top, bottom, "table");

      return bottom;
    }

    // 计算纯文本元素分割的界限
    function splitBlockText(elem, height) {
      var lineNum = 0;
      var styles = getComputedStyle(elem, null);
      var lh = parseInt(styles.lineHeight, 10);
      var h =
        styles.height == "auto"
          ? elem.offsetHeight
          : parseInt(styles.height, 10);
      var lc = Math.round(h / lh);
      for (var i = 0; i < lc; i++) {
        if (height < lh * (i + 1)) {
          break;
        }
        lineNum++;
      }

      // 这里之所以多增加一行
      // 是因为处理部分首行半行的文字
      // 首行半行的话，第一行算作是上面的内容，所以切割时单独算这部分
      lineNum = lineNum; // + (elem.offsetLeft > 10 ? 1 : 0);

      // 不用分割了，直接下一行
      if (lineNum == 0) {
        return elem;
      }

      // 在这里为元素设置分割所需属性
      // 实际分割的操作是在预览模块中操作
      return doSplitText(elem, {
        lineNum: lineNum,
        width: my$(elem).width(),
        offsetLeft: 0//elem.offsetLeft || 0
      });
    }

    function doSplitText(elem, attrs) {
      var jqElem = $(elem);
      var copyElem = jqElem.clone(true)[0];
      var lineNum = attrs.lineNum;
      var width = attrs.width;
      var offsetLeft = attrs.offsetLeft ? attrs.offsetLeft : 0;

      // 分割文本元素的时候由于
      var elemText = jqElem.html();
      jqElem.html(elemText.replace(/<br>/g, "$"));
      elemText = jqElem.text();
      if (
        elem.nodeType == 1 &&
        elem.children.length == 1 &&
        elem.children[0].className.indexOf("ctrl-value") != -1
      ) {
        elemText = elem.getElementsByClassName("ctrl-value")[0].innerText;
        // 这里多增加了4px是因为文本后面有可能会出现空格字符，影响折行计算，所以增加4个像素
        width -= 4;
      }

      var canvas = document.createElement("canvas");
      var ctx = canvas.getContext("2d");
      ctx.font = jqElem.css("font");
      var curlineStr = "";
      var newStr = "";
      var mylineNum = 0;
      var ischanged = false;
      var strs = elemText.split("");
      for (var i = 0; i < strs.length; i++) {
        var w = ctx.measureText((curlineStr + strs[i]).replace(/<br>/g, "")).width;
        var lw = mylineNum === 0 ? width - offsetLeft : width;
        var isBr = strs[i] === "$";
        if (w > lw || isBr) {
          mylineNum++;
          if (mylineNum > lineNum && !ischanged) {
            if(isBr) newStr += strs[i];
            break;
          }
          newStr += curlineStr;
          if(isBr){
            newStr += strs[i];
            curlineStr = ""
          }else{
            curlineStr = strs[i];
          }
        } else {
          curlineStr += strs[i];
        }
      }

      // fix: 文本元素前面内容变化导致最后只有一个空字符换行到下一行，导致触发分页，这个时候就分出来一个字符
      var nnum = newStr.length == 0 ? curlineStr.length - 1 : newStr.length;

      // 兼容文本元素的分割
      if (elem.getElementsByClassName("ctrl-value")[0]) {
        elem.getElementsByClassName("ctrl-value")[0].innerHTML = elemText.slice(
          0,
          nnum
        ).replace(/\$/g, "<br>");
        copyElem.getElementsByClassName(
          "ctrl-value"
        )[0].innerHTML = elemText.slice(nnum).replace(/\$/g, "<br>");
      } else {
        elem.innerHTML = elemText.slice(0, nnum).replace(/\$/g, "<br>");
        copyElem.innerHTML = elemText.slice(nnum).replace(/\$/g, "<br>");
      }

      if (copyElem.innerHTML == "") {
        return null;
      }

      // 设置标记属性
      setSplitedElemSign(elem, copyElem, "text");

      return copyElem;
    }

    // 是否为纯文本节点
    // function isClearTextElem(elem) {
    //   var clearTextNode = true;
    //   for (var i = 0; i < elem.childNodes.length; i++) {
    //     var node = elem.childNodes[i];
    //     if (node.tagName) {
    //       var tagName = node.tagName.toLowerCase();
    //       if (tagName != "span" && tagName != "strong" && tagName != "br") {
    //         clearTextNode = false;
    //       }
    //       if (node.className) {
    //         clearTextNode = false;
    //       }
    //     } else {
    //       if (node.nodeName != "#text") {
    //         clearTextNode = false;
    //       }
    //     }
    //   }
    //   return clearTextNode;
    // }

    // 段落分割
    // ** 支持文本元素和自由文本的混排情况
    // ** 文本元素和自由文本混排的情况是需要特殊处理的
    // ** 因为自由文本是不能够获取到offset等属性，没办法走下面统一的splitElemt的
    // ** 这里的思路就是遇到文本元素和自由文本
    function splitParagrah(elem, height, type) {
      // 空段落
      if (elem.innerHTML == "" || elem.innerHTML == "<br>") {
        return elem;
      }
      // 单行内容已经超过剩余空间
      // 没必要再往下算，直接整个的切换
      var styles = getComputedStyle(elem, null);
      var lh = parseInt((styles.lineHeight == "normal"?oneLineContentHeight:styles.lineHeight), 10);
      if (lh > height) {
        return elem;
      }

      // 多行分割
      var copyElem = my$(elem).clone(true)[0];
      copyElem.innerHTML = "";

      splitElement(elem, height, copyElem);
      if (copyElem.innerHTML == "") {
        return null;
      }

      // 设置标记属性
      setSplitedElemSign(elem, copyElem, type || "paragraphele");

      return copyElem;
    }

    // 文本元素
    function splitTextElem(elem, height) {
      var valueElem = elem.getElementsByClassName("ctrl-value")[0];
      if (valueElem && valueElem.innerText == "") {
        return elem;
      }
      return splitBlockText(elem, height);
    }

    // 自由文本，nodeType=3的那种
    function splitJustText(elem, height, elemInfo) {
      var lineNum = 0;
      var width = elemInfo.width;
      var offsetLeft = elemInfo.offsetLeft;
      var lh = elemInfo.lh;
      for (var i = 0; i < 50; i++) {
        if (height < lh * (i + 1)) {
          break;
        }
        lineNum++;
      }

      // 这里之所以多增加一行
      // 是因为处理部分首行半行的文字
      // 首行半行的话，第一行算作是上面的内容，所以切割时单独算这部分
      lineNum = lineNum + (offsetLeft > 10 ? 1 : 0);

      // 不用分割了，直接下一行
      if (lineNum == 0) {
        return elem;
      }

      var elemText = elem.data;
      var canvas = document.createElement("canvas");
      var ctx = canvas.getContext("2d");
      ctx.font = $(elem.parentNode).css("font");

      var curlineStr = "";
      var newStr = "";
      var mylineNum = 0;
      var ischanged = false;
      var strs = elemText.split("");
      for (var i = 0; i < strs.length; i++) {
        var w = ctx.measureText(curlineStr + strs[i]).width;
        var lw = mylineNum === 0 ? width - offsetLeft : width;
        if (w > lw) {
          mylineNum++;
          if (mylineNum > lineNum && !ischanged) {
            break;
          }
          newStr += curlineStr;
          curlineStr = strs[i];
        } else {
          curlineStr += strs[i];
        }
      }

      // fix: 文本元素前面内容变化导致最后只有一个空字符换行到下一行，导致触发分页，这个时候就分出来一个字符
      var nnum = newStr.length == 0 ? curlineStr.length - 1 : newStr.length;

      var copyElem = $(elem).clone()[0];
      elem.data = elemText.slice(0, nnum);
      copyElem.data = elemText.slice(nnum);

      if (copyElem.data == "") {
        return null;
      }
      return copyElem;
    }

    // 判断节点是否可以分割
    // function isSplitElem(elem) {
    //   var splitPluginNames = ["paragraphele", "text"];
    //   if (elem.tagName) {
    //     var tagName = elem.tagName.toLowerCase();
    //     if (tagName == "img") {
    //       return tagName;
    //     }

    //     if (elem.childNodes && elem.childNodes.length) {
    //       var pluginName = elem.getAttribute("axplugins");
    //       if (tagName == "table" || tagName == "tbody") {
    //         return "table";
    //       }
    //       if (splitPluginNames.indexOf(pluginName) != -1) {
    //         return pluginName;
    //       }
    //       if (
    //         tagName == "p" &&
    //         elem.className.indexOf("paragraphContent") != -1
    //       ) {
    //         return "paragraphContent";
    //       }
    //       if (
    //         tagName == "p" &&
    //         elem.parentNode &&
    //         elem.parentNode.className &&
    //         elem.parentNode.className.indexOf("ax-page-content") != -1
    //       ) {
    //         return "contentLineWrapper";
    //       }
    //       if (tagName == "p") {
    //         // 判断该段文字是否为仅仅纯文字组成
    //         // 目前支持纯文字分割
    //         if (isClearTextElem(elem)) {
    //           return "clearText";
    //         }
    //       }
    //       // 留痕文本
    //       if (
    //         tagName == "span" &&
    //         (elem.className.indexOf("editor-free-text") != -1 ||
    //           elem.className.indexOf("editor-mark-text") != -1)
    //       ) {
    //         return "clearText";
    //       }
    //     } else {
    //       // 多行纯文本元素也可以分割
    //       if (tagName == "p" && getElemRowNum(elem) > 1) {
    //         return "clearText";
    //       }
    //     }
    //   } else {
    //     return "justText";
    //   }

    //   return null;
    // }

    function splitElement(elem, height, otherWrapper) {
      var isFull = false;
      for (var i = 0; i < elem.childNodes.length; i++) {
        var child = elem.childNodes[i];
        var nextChild = elem.childNodes[i + 1];
        if (isFull) {
          child.parentNode.removeChild(child);
          otherWrapper.appendChild(child);
          i--;
          continue;
        }
        if (
          isIgnoreElem(child, elem.childNodes[i - 1], elem.childNodes[i + 1])
        ) {
          child.parentNode.removeChild(child);
          i--;
          continue;
        }
        if (isConfigElem(child)) {
          i--;
          continue;
        }
        var elemInfo = getTopWithContentElem(elem, child, nextChild);
        // 这里之所以加上marginBottom, 是因为外部计算是否切割锁用的高度是包含内部子元素的marginBottom的
        // 这里不增加上就会出现无限循环问题
        var elemTop = elemInfo.top + elemInfo.marginBottom;
        if (elemTop > height) { //  + 1 处理某种段落末尾出现空格后分页情况
          // 这里的lheight计算 用的是 .top-offsetHeight，没有用 elemTop-offsetheight，是因为某些外层结构的顶部
          // 带了一些内外边距，影响剩余高度计算，这里尽可能保证不报错，效果会稍差些
          var lheight = height - (elemInfo.top - elemInfo.offsetHeight);
          var splitType = self.isSplitElem(child);
          if (lheight > oneLineContentHeight && splitType) {
            var lelem = null;
            if (splitType == "clearText") {
              // 纯文本，不包含文本和其他元素结合的那种
              lelem = splitBlockText(child, lheight);
            } else if (splitType == "text") {
              // 文本元素
              lelem = splitTextElem(child, lheight);
            } else if (splitType == "justText") {
              // 自由文本，nodeType == 3的文本元素
              lelem = splitJustText(child, lheight, elemInfo);
            } else if (splitType == "table") {
              lelem = splitTable(child, lheight);
            } else if (splitType == "paragraphele") {
              // if (
              //   child.children[0] &&
              //   child.children[0].offsetHeight > lheight
              // ) {
              //   child.parentNode.removeChild(child);
              //   lelem = child;
              // } else {
              //   lelem = splitParagrah(child, lheight);
              // }
              lelem = splitParagrah(child, lheight);
            } else if (splitType == "paragraphContent") {
              lelem = splitParagrah(child, lheight, "paragraphContent");
            } else if (splitType == "contentLineWrapper") {
              lelem = splitParagrah(child, lheight, "contentLineWrapper");
            } else if (splitType == "img") {
              child.parentNode.removeChild(child);
              lelem = child;
            } else {
              console.error("分割模式未匹配");
            }
            if (lelem) {
              // 分页时的光标处理
              // self.breakPageForCursor(range, child, lelem);

              // 添加到下一页
              otherWrapper.appendChild(lelem);
              if (lelem == child) {
                i--;
              }
              self.setFocus(range, child, lelem);
            }

          } else {
            child.parentNode.removeChild(child);
            otherWrapper.appendChild(child);
            i--;
          }
          isFull = true;
        }
      }
      return otherWrapper;
    }

    console.log(this.id, pageContentHeight);
    splitElement(this.contentElem, pageContentHeight, moveWrapper);

    return moveWrapper;
  };
  AxPage.prototype.setFocus = function(range, child, lelem){ // 设置光标位置
    var bk = AX.pageControler.editor.document.getElementById("bookfr");
    if(!bk && range) { // 文书内无书签 调用原有光标处理方法
      this.breakPageForCursor(range, child, lelem);
      return;
    }
    bk && axTools.focusDom(AX.pageControler.editor, bk);
    // setTimeout(function(){
    bk && bk.parentElement.removeChild(bk);
    // }, 150)
  }
  // 录入过程中遇到分页，光标的处理
  AxPage.prototype.breakPageForCursor = function(range, child, lelem) {
    var self = this;
    // 1. 正在录入最后一个元素的过程中超出分页(元素)
    var currange = this.controler.editor.selection.getRange();
    if (
      range.endContainer.nodeType == 3 &&
      lelem.children &&
      lelem.children.length &&
      lelem.children[0].className.indexOf("ctrl-value") != -1 &&
      currange.startContainer.id === lelem.children[0].id
    ) {
      // 然后光标应该跟随被分割内容进入下一页
      if (range.endOffset == range.endContainer.length) {
        this.focusNextElem(lelem.children[0]);
      } else {
        // 光标保留原来的位置
        var curChild = child.children[0].childNodes[0];
        if (range.startOffset >= curChild.data.length) {
          axTools.focusDomByIndex(
            self.controler.editor,
            curChild,
            curChild.data.length
          );
        } else {
          axTools.focusDomByIndex(
            self.controler.editor,
            curChild,
            range.startOffset
          );
        }
      }
      return;
    }
    // 2， 正在录入最后一个元素的过程中超出分页(纯文本)
    // TODO: 兼容留痕模式
    if (
      range.endContainer.nodeType == 3 &&
      range.endContainer == child &&
      (child.children && child.children.length == 0) &&
      child.childNodes.length == 1 &&
      (lelem.children && lelem.children.length == 0) &&
      lelem.childNodes.length == 1
    ) {
      if (range.endOffset - 1 == range.endContainer.length) {
        this.focusNextElem(lelem.childNodes[0]);
      } else {
        // 光标保留原来的位置
        var curChild = child.childNodes[0];
        if (range.startOffset >= curChild.data.length) {
          axTools.focusDomByIndex(
            self.controler.editor,
            curChild,
            curChild.data.length
          );
        } else {
          axTools.focusDomByIndex(
            self.controler.editor,
            curChild,
            range.startOffset
          );
        }
      }
    }
    // 2.2 正在录入最后一个元素的过程中超出分页(非段落内的纯文本)
    if (
      range.endContainer.nodeType == 3 &&
      range.endContainer == child &&
      child.parentNode.childNodes.length == 1
    ) {
      setTimeout(function() {
        if (range.startOffset >= child.data.length) {
          axTools.focusDomByIndex(
            self.controler.editor,
            child,
            child.data.length
          );
        } else {
          axTools.focusDomByIndex(
            self.controler.editor,
            child,
            range.startOffset
          );
        }
      }, 10);
      return;
    }
    // 3. 空行光标下移
    // 这种情况，光标直接定位到下一页的首个元素
    if (
      lelem.children &&
      lelem.children.length == 1 &&
      lelem.childNodes.length == 1 &&
      lelem.childNodes[0].tagName.toLowerCase() == "br" &&
      range.startContainer == lelem &&
      child == lelem
    ) {
      this.focusNextPageFirstElem();
      return;
    }
  };

  AxPage.prototype.focusNextPageFirstElem = function() {
    var self = this;
    setTimeout(function() {
      var nextPage = self.controler.getNextPage(self.id);
      if (nextPage && nextPage.contentElem.childNodes.length) {
        axTools.focusDomEnd(self.controler.editor, nextPage.contentElem.childNodes[0]);
      }
    }, 20);
  };

  AxPage.prototype.focusNextElem = function(elem) {
    var self = this;
    setTimeout(function() {
      axTools.focusDomEnd(self.controler.editor, elem);
    }, 20);
  };

  // 设置页头
  AxPage.prototype.updateHeader = function(content, style) {
    this.header.innerHTML = content;
    if (style) {
      this.header.setAttribute("style", style);
    }
    this.updateStyle();
  };

  // 设置页尾
  AxPage.prototype.updateFooter = function(content, style) {
    this.footer.innerHTML = content || "";
    if (style) {
      this.footer.setAttribute("style", style);
    }
    this.updateStyle();
  };

  // 释放自己
  AxPage.prototype.release = function() {
    if (this.elem.parentNode) {
      this.elem.parentNode.removeChild(this.elem);
    }
    this.elem = null;
    this.controler = null;
    this.contentElem = null;
    this.header = null;
    this.footer = null;
    if (this._refreshTimer) {
      clearTimeout(this._refreshTimer);
      this._refreshTimer = null;
    }
  };

  // 设置页面尺寸
  AxPage.prototype.updateSize = function(width, height) {
    this.size = {
      width: width,
      height: height
    };
    this.updateStyle();
  };

  // 设置页面边距
  AxPage.prototype.updatePadding = function(left, right, top, bottom) {
    this.elem.style.paddingLeft = left + "px";
    this.elem.style.paddingRight = right + "px";
    this.elem.style.paddingTop = top + "px";
    this.elem.style.paddingBottom = bottom + "px";
    this.padding = {
      left: left,
      right: right,
      top: top,
      bottom: bottom
    };
    this.updateStyle();
  };

  // 更新header、content、footer有变化的时候更新高度
  AxPage.prototype.updateStyle = function() {
    if (!this.size.height) {
      return;
    }
    var space = axTools.cm2px(AXEDITOR_CONFIG.printWhiteCm);
    var width =
      this.size.width - this.padding.left - this.padding.right - space * 2;
    var height =
      this.size.height - this.padding.top - this.padding.bottom - space * 2;
    this.elem.style.height = height + "px";
    this.elem.style.width = width + "px";
    // ax-update: 这里给footer一个定制高度是因为他如果是动态的会让每个页面高度有偏差
    // 无法保证所有页面的一致性
    this.contentElem.style.height =
      height -
      this.header.offsetHeight -
      (this.footer.offsetHeight) +
      "px";
  };

  // 显示隐藏页码
  AxPage.prototype.showPageNum = function(visibile) {
    this.pageElem.style.display = visibile ? "inline" : "none";
  };

  AxPage.prototype.updatePageNum = function(pageNum) {
    this.pageNum = pageNum;
    if (this.pageElem) {
      this.pageElem.innerHTML = pageNum;
    }
  };

  // 兼容特性，默认如果最后一个元素是段落元素
  // 这里将光标置于段落元素内部
  AxPage.prototype.focusEnd = function() {
    if (this.contentElem.children.length == 0) {
      this.contentElem.click();
      console.warn("需要兼容页面内无元素情况");
      return;
    }
    var lastElem = this.contentElem.children[
      this.contentElem.children.length - 1
    ];
    if (lastElem.getAttribute("axplugins") == "paragraphele") {
      axTools.focusDomEnd(
        this.controler.editor,
        lastElem.children[lastElem.children.length - 1]
      );
    } else {
      axTools.focusDomEnd(this.controler.editor, lastElem);
    }
  };

  AxPage.prototype.focusStart = function() {
    var self = this;
    setTimeout(function() {
      if (self.contentElem.children.length == 0) {
        self.contentElem.click();
        console.warn("需要兼容页面内无元素情况");
        return;
      }
      axTools.focusDom(self.controler.editor, self.contentElem.children[0]);
    }, 10);
  };

  //  续打隐藏不必要的部分
  AxPage.prototype.hiddenContinuePrintBlock = function() {
    if (this.contentElem.getElementsByClassName("split-elem-tag").length == 0) {
      return;
    }
    for (var i = 0; i < this.contentElem.children.length; i++) {
      var child = this.contentElem.children[i];
      if (child.className.indexOf("split-elem-tag") == -1) {
        continue;
      }
      var started = child.getAttribute("started");
      if (started == "true") {
        return;
      }
      child.style.visibility = "hidden";
    }
  };

  // 用于续打的隐藏
  // preHidden 是用于标记上一页遗留的是否隐藏属性，有可能当前页没有split-elem-tag,那就用上一页最后一个作为标识
  AxPage.prototype.updateContinueHidden = function(preHidden) {
    var tagElems = this.elem.getElementsByClassName("split-elem-tag");
    if (tagElems.length) {
      for (var i = 0; i < this.contentElem.childNodes.length; i++) {
        var child = this.contentElem.childNodes[i];
        if (
          child.className &&
          child.className.indexOf("split-elem-tag") != -1 &&
          child.getAttribute("started") == "true"
        ) {
          return;
        }
        // child.style.visibility = "hidden";
        child.className += " visibilityHidden"
      }
    } else if (preHidden) {
      // this.contentElem.style.visibility = "hidden";
      child.className += " visibilityHidden"
    }
  };

  // 清除莫名的占位符号
  AxPage.prototype.clear8203 = function(elem) {
    elem.innerHTML = elem.innerHTML.replace(/\u200B/g, "");
  };

  // ====================================================================================
  // ====================================================================================
  // ====================================================================================
  // ====================================================================================
  // ====================================================================================
  // ====================================================================================
  // ====================================================================================

  function PageControler(editor, size, margin) {
    // this.count = 0;
    this.pages = [];
    this.rootElem = editor.body;
    this.editor = editor;
    this.checker = null;
    // 缓存页面的基本配置
    this._size = size || {
      width: axTools.cm2px(21),
      height: axTools.cm2px(29.7)
    };
    this._margin = margin || {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this._split_elem_count = Date.now();
    this.init();
  }

  PageControler.prototype.count = 0;
  // 用于标记是否正在使用中文输入法录入中
  PageControler.prototype.chineseInputing = false;
  // 定位光标中,分页过程中可能会有异步的分页处理，会导致页面结构的变化
  // 比如：文本元素分割过程会增加标记结构，定位后再删除，这个阶段如果执行分页逻辑会有问题
  PageControler.prototype.cursorSetting = false;

  PageControler.prototype.init = function() {
    var self = this;
    this.createPage();
    this.startContentChangeChecker();
    setTimeout(function() {
      initListener(self.editor);
    }, 200);
  };

  PageControler.prototype.updateRoot = function(editor) {
    if (this.rootElem == editor.body) {
      return;
    }
    this.rootElem = editor.body;
    this.editor = editor;
    for (var i = 0; i < this.pages.length; i++) {
      var el = this.pages[i].elem;
      if (el.parentNode) {
        el.parentNode.removeChild(el);
      }
      this.rootElem.appendChild(el);
    }
  };

  // 清除8203带来的结构上的异常部分
  PageControler.prototype.clearAllBadStruct = function() {
    for (var i = 0; i < this.pages.length; i++) {
      var elem = this.pages[i].contentElem;
      for (var j = 0; j < elem.childNodes.length; j++) {
        var child = elem.childNodes[j];
        if (child && child.nodeType == 3 && child.data.length == 1 && child.data.charCodeAt(0) == "8203") {
          child.parentNode.removeChild(child);
          console.log("清除了异常8203结构");
          j--;
        }
      }
    }
  }

  PageControler.prototype.startContentChangeChecker = function() {
    if (this.checker) {
      clearInterval(this.checker);
      this.checker = null;
    }
    var self = this;
    this.checker = setInterval(function() {
      if (self.chineseInputing || self.cursorSetting) {
        return;
      }

      // 清除错误的页面结构
      self.clearAllBadStruct();

      for (var i = 0; i < self.pages.length; i++) {
        var page = self.pages[i];
        // 判断内容高度是否有变化
        // 有变化就检测一下是高度不够需要重绘还是内容超出需要重算
        if (i < self.pages.length - 1) {
          var wrapperDom = self.pages[i + 1].contentElem.childNodes[0]
          if (wrapperDom) {
            while(wrapperDom.childNodes.length > 0) {
              if (wrapperDom.tagName === 'TR') {
                oneLineContentHeight = wrapperDom.clientHeight
                break
              } else {
                oneLineContentHeight = 18
                wrapperDom = wrapperDom.childNodes[0]
              }
            }
          }
        }
        var pageStatus = page.calContentStatus();
        if (pageStatus === 1) {
          self.editor.undoManger && (self.editor.undoManger.isPage = true); // 分页时记录标识
          insertBooks(self.editor);
          page.refresh();
          removeBooks(self.editor);
        } else if (pageStatus === -1) {
          // 当前页内容不足是需要下一页的内容补充，但是也要下一个的首部内容可以补充才行
          // 如果顶部内容没法回补，就不用整体计算重绘了
          if (
            i < self.pages.length - 1 &&
            self.canFill(page, self.pages[i + 1])
          ) {
            self.editor.undoManger && (self.editor.undoManger.isPage = true);
            insertBooks(self.editor);
            self.updateContentByPageStartId(page.id);
            removeBooks(self.editor);
          }
        }
      }
    }, 200);
    function insertBooks (editor){ //
      if(!editor.document) return;
      var bk = editor.document.getElementById("bookfr");
      if(bk) { // 插入HTML时，光标位置插入书签，用于光标定位 -- zw
        bk.parentElement.removeChild(bk);
      }
      var newBk = document.createElement("span");
      newBk.id = "bookfr";
      // editor.execCommand("insertHtml", newBk.outerHTML);
      try{
        var range = editor.window.getSelection().getRangeAt(0);
        range.insertNode(newBk);
      }catch(e){
        return;
      }
    }
    function removeBooks (editor){
      if(!editor.document) return;
      var rangeLeft = document.createRange();
      if(!editor.document.getElementById("bookfr")) return;
      var box = editor.document.getElementById("bookfr").previousSibling ? editor.document.getElementById("bookfr").previousSibling : editor.document.getElementById("bookfr").parentElement.previousSibling;
      rangeLeft.selectNodeContents(box);
      rangeLeft.collapse(false);
      var selLeft = editor.window.getSelection();
      selLeft.removeAllRanges();
      selLeft.addRange(rangeLeft);
      var bk = editor.document.getElementById("bookfr");
      if(bk) { // 插入HTML时，光标位置插入书签，用于光标定位 -- zw
        bk.parentElement.removeChild(bk);
      }
    }
  };

  // 该函数用于检测下一页的首部元素是否能回补填充到上一页的空缺
  PageControler.prototype.canFill = function(page, nextPage) {
    // 如果连一行内容都不够，就不用回补了
    var leftSpace = page.getLeftSpace();
    if (leftSpace <= oneLineContentHeight) {
      return false;
    }

    // 下一页第一个节点
    var child = nextPage.contentElem.childNodes[0];
    if(!child) return false;
    while(child.childNodes.length > 0 && child.className.indexOf("ax-nosplit-elem") == -1){
      child = child.childNodes[0];
    }
    if(child.nodeType == 3) {
      var childHeight = getTopWithContentElem(child.parentElement, child).offsetHeight;
    }else if(child.nodeType != 8){
      var childHeight = nextPage.getElemHeight(child);
    }
    if ((childHeight || childHeight === 0) && childHeight < leftSpace) {
      return true;
    }

    var childPlugin = child.nodeType == 1 && child.getAttribute("axplugins");
    // 1. 如果第一个节点高度不超过上面的回补空间
    if (childPlugin == "paragraphele" && child.childNodes.length) {
      child = child.childNodes[0];
      if (child.childNodes.length && child.className && child.className.indexOf("paragraphContent") != -1) {
        child = child.childNodes[0];
      }
    }
    if (child.nodeType == 8) {
      child = child.parentElement;
    }
    if (child.nodeType == 3 || (child.tagName && child.tagName.toLowerCase() == "br")) {
      return true;
    }
    var childHeight = nextPage.getElemHeight(child);
    if (childHeight && childHeight < leftSpace) {
      return true;
    }
    // 2. 如果是不可分割的第一节点直接return
    if (child && child.className && child.className.indexOf("ax-nosplit-elem")) {
      return false;
    }

    // 3. 如果超过，但是可分割，并且第一行高度不超过
    var splitType = null;
    if (child.childNodes.length && (splitType === 'contentLineWrapper' || splitType === 'paragraphContent')) {
      splitType = nextPage.isSplitElem(child.childNodes[0]);
    } else {
      splitType = nextPage.isSplitElem(child);
    }
    if (splitType === 'clearText' && leftSpace > oneLineContentHeight) {
      return true;
    }

    return false;
  };

  // 提取用于配置的节点，一次插入到dom中
  PageControler.prototype.getConfigElem = function(wrapper) {
    var configRoot = document.createElement("div");
    configRoot.style.display = "none";
    var elems = wrapper.getElementsByTagName("input");
    for (var i = 0; i < elems.length; i++) {
      var child = elems[i];
      if (child.getAttribute("type") == "hidden") {
        child.parentNode.removeChild(child);
        i--;
        configRoot.appendChild(child);
      }
    }
    this.rootElem.appendChild(configRoot);
  };

  PageControler.prototype.setContent = function(content, isAppend) {
    if (!isAppend) {
      this.releaseAll();
    }
    if (content.indexOf("<div><header") == 0) {
      alert("模板数据异常，外层套了空div，请删除后重试");
      return;
    }
    if (content.indexOf("ax-page-wrapper") == -1) {
      return this.createPage(null, content);
    }
    var wrapper = document.createElement("div");
    wrapper.innerHTML = content;
    this.getConfigElem(wrapper);
    var pages = wrapper.getElementsByClassName("ax-page-wrapper");
    for (var i = 0; i < pages.length; i++) {
      this.createPage(pages[i]);
      i--;
    }
    // this.editor.queryCommandState("editlock");
  };

  // 用于续打
  PageControler.prototype.setContentByList = function(list, startIdx, cb) {
    // 处理printOption=02
    // 02标识独立打印，前后都不拼接
    // 先把当前页设定重启一页打印，再把下一页设定为同样
    // 就实现了前后都不关联
    if (list && list.length) {
      for (var i = 0; i < list.length; i++) {
        var item = list[i];
        if (item.printOption == "02" && list[i + 1]) {
          item.printOption = "01";
          list[i + 1].printOption == "01";
        }
      }
    }

    // 先把内容提取、合并、重新刷进去
    var allPages = [];
    for (var i = 0; i < list.length; i++) {
      var config = list[i];
      var wrapper = document.createElement("div");
      wrapper.innerHTML = config.content;
      var headerElem = wrapper.getElementsByClassName("ax-page-header");
      var contentElem = wrapper.getElementsByClassName("ax-page-content");
      var footerElem = wrapper.getElementsByClassName("ax-page-footer");
      var started = i >= startIdx;
      if (contentElem.length) {
        for (var j = 0; j < contentElem.length; j++) {
          allPages.push({
            tag: i + "-" + j,
            header: headerElem[j] ? headerElem[j].innerHTML : "",
            footer: footerElem[j] ? footerElem[j].innerHTML : "",
            content: contentElem[j] ? contentElem[j].innerHTML : config.content,
            started: started,
            printOption: config.printOption || "00"
          });
        }
      } else {
        allPages.push({
          tag: i,
          header: headerElem[0] ? headerElem[0].innerHTML : "",
          footer: footerElem[0] ? footerElem[0].innerHTML : "",
          content: config.content,
          started: started,
          printOption: config.printOption || "00"
        });
      }
    }

    var isAppend = false;
    var contentStr = "";
    for (var i = 0; i < allPages.length; i++) {
      var config = allPages[i];
      if (config.printOption == "01" && contentStr !== "") {
        this.setContent(contentStr, isAppend);
        isAppend = true;
        contentStr = "";
      }
      contentStr +=
        "<span class='split-elem-tag' style='display:none;' value='" +
        config.tag +
        "' started='" +
        config.started +
        "'></span>" +
        config.content;
    }
    if (contentStr.length > 0) {
      this.setContent(contentStr, isAppend);
    }

    function getPageConfig(tag) {
      for (var i = 0; i < allPages.length; i++) {
        if (allPages[i].tag == tag) {
          return allPages[i];
        }
      }
      return null;
    }

    function refreshHeaderFooter(idx, pages) {
      var preTagValue = null;
      for (var i = 0; i < pages.length; i++) {
        var page = pages[i];
        var tagElems = page.elem.getElementsByClassName("split-elem-tag");
        if (i == 0 && tagElems.length) {
          preTagValue = tagElems[0].getAttribute("value");
        }
        if (preTagValue && i == idx) {
          var config = getPageConfig(preTagValue);
          if (config) {
            page.updateHeader(config.header);
            page.updateFooter(config.footer);
          }
        }
        if (tagElems.length) {
          preTagValue = tagElems[tagElems.length - 1].getAttribute("value");
        }
      }
    }

    var self = this;
    // 主要是等上面的setContent完事
    setTimeout(function() {
      // 根据标签刷新header、footer的配置
      for (var i = 0; i < self.pages.length; i++) {
        refreshHeaderFooter(i, self.pages);
      }
      // 删除无需打印的页
      var started = "true";
      for (var i = 0; i < self.pages.length; i++) {
        var page = self.pages[i];
        var tagElems = page.elem.getElementsByClassName("split-elem-tag");
        for (var j = 0; j < tagElems.length; j++) {
          started = tagElems[j].getAttribute("started");
        }
        if (started == "false") {
          self.releasePage(page.id);
          i--;
          continue;
        }
        page.updateContinueHidden(started);
      }

      cb && cb();
    }, 500);
  };

  PageControler.prototype.createPage = function(elem, innerHtml) {
    this.count++;
    if (!elem) {
      elem = document.createElement("div");
      elem.id = "ax_page_" + this.count;
      elem.className = "ax-page-wrapper";
      if (innerHtml) {
        elem.innerHTML = innerHtml;
      }
    } else {
      elem.setAttribute('id', elem.id+"_"+this.count) ;
    }
    this.rootElem.appendChild(elem);

    var page = new AxPage(
      this,
      elem,
      this._size,
      this._margin,
      this.pages.length + 1
    );
    // 新增的页面需要和上面的页面的header一致
    if (this.pages.length >= 1) {
      var prePage = this.pages[this.pages.length - 1];
      page.updateHeader(
        prePage.header.innerHTML,
        prePage.header.getAttribute("style")
      );
    }
    this.pages.push(page);
    this.updatePageNum();
    // this.editor.queryCommandState("editlock");
  };

  PageControler.prototype.releasePage = function(id) {
    for (var i = 0; i < this.pages.length; i++) {
      var p = this.pages[i];
      if (p.id == id) {
        p.release();
        this.pages.splice(i, 1);
        return;
      }
    }
  };

  PageControler.prototype.releaseAll = function() {
    for (var i = 0; i < this.pages.length; i++) {
      var p = this.pages[i];
      p.release();
    }
    this.pages.length = 0;
    this.pages = [];
    this.rootElem.innerHTML = "";
  };

  PageControler.prototype.updateSize = function(width, height) {
    if (this._size.width == width && this._size.height == height) {
      return;
    }
    for (var i = 0; i < this.pages.length; i++) {
      this.pages[i].updateSize(width, height);
    }
    this._size = {
      width: width,
      height: height
    };
    for (var i = 0; i < this.pages.length; i++) {
      this.pages[i].refresh();
    }
  };

  PageControler.prototype.updateMargin = function(left, right, top, bottom) {
    for (var i = 0; i < this.pages.length; i++) {
      this.pages[i].updatePadding(left, right, top, bottom);
    }
    this._margin = {
      left: left,
      right: right,
      top: top,
      bottom: bottom
    };
    for (var i = 0; i < this.pages.length; i++) {
      this.pages[i].refresh();
    }
  };

  PageControler.prototype.updateHeader = function(content, style, excludeId) {
    for (var i = 0; i < this.pages.length; i++) {
      if (this.pages[i].id == excludeId) {
        continue;
      }
      this.pages[i].updateHeader(content, style);
    }
  };

  PageControler.prototype.updateFooter = function(content, style, excludeId) {
    for (var i = 0; i < this.pages.length; i++) {
      if (this.pages[i].id == excludeId) {
        continue;
      }
      this.pages[i].updateFooter(content, style);
    }
  };

  // 获取某个Page后面的一个页面
  PageControler.prototype.getNextPage = function(id) {
    for (var i = 0; i < this.pages.length; i++) {
      if (this.pages[i].id == id) {
        return this.pages[i + 1] || null;
      }
    }
    return null;
  }

  // 内容超出
  PageControler.prototype.overflow = function(pageId, wrapper) {
    if (wrapper.childNodes.length === 0) {
      return;
    }
    var same = false;
    var len = this.pages.length;
    for (var i = 0; i < len; i++) {
      if (this.pages[i].id == pageId && this.pages[i + 1]) {
        this.pages[i + 1].insertTop(wrapper);
        same = true;
        break;
      }
    }
    if (!same) {
      this.createPage(null, wrapper.innerHTML);
      axTools.setStateLock(this.editor);
    }
  };

  PageControler.prototype.getSplitElemSign = function() {
    return this._split_elem_count++;
  };

  // 页码
  PageControler.prototype.showPageNum = function(visibile) {
    for (var i = 0; i < this.pages.length; i++) {
      this.pages[i].showPageNum(visibile);
    }
  };

  // 页码
  PageControler.prototype.updatePageNum = function() {
    for (var i = 0; i < this.pages.length; i++) {
      this.pages[i].updatePageNum(i + 1);
    }
  };

  // 由于内容的变化，重新整理每一个页面的内容
  // 主要是为了页面内容缩减的时候，该页面以下的内容合并然后重新再次分布
  PageControler.prototype.updateContentByPageStartId = function(startId) {
    var elems = [];
    var startSign = false;
    for (var i = 0; i < this.pages.length; i++) {
      if (startSign) {
        var contents = this.pages[i].contentElem.childNodes;
        for (var j = 0; j < contents.length; j++) {
          elems.push(contents[j]);
          contents[j].parentNode.removeChild(contents[j]);
          j--;
        }
      }
      if (this.pages[i].id == startId) {
        startSign = true;
      }
    }
    startSign = false;
    var endSign = false;
    var ids = [];
    for (var i = 0; i < this.pages.length; i++) {
      if (this.pages[i].id == startId) {
        startSign = true;
      }
      if (startSign && !endSign) {
        elems = this.pages[i].appendContent(elems);
      }
      if (endSign) {
        ids.push(this.pages[i].id);
      }
      if (!elems.length) {
        endSign = true;
      }
    }
    console.log(ids);
    for (var i = 0; i < ids.length; i++) {
      this.releasePage(ids[i]);
    }
  };

  // 获取打印所需的配置
  PageControler.prototype.getPrints = function() {
    var list = [];
    for (var i = 0; i < this.pages.length; i++) {
      list.push(this.pages[i].elem);
    }
    return {
      paperSize: this._size,
      elems: list
    };
  };

  // 删除键处理
  // 兼容段落内的光标删除
  PageControler.prototype.backspaceHandler = function() {
    // 回退后产生行内内容不满，下一页需要有内容回补回来
    // 1. 检测当前操作的元素容器是页面最后一个，并且操作的是自由文本或者文本元素
    // 2. 当前容器的最后一个节点和下一页的第一个节点是可融合的节点
    // var wrapper;
    // var myelem = elem;
    // if (elem.parentNode.getAttribute("axplugins") == "paragraphele") {
    //   wrapper = elem.parentNode.parentNode;
    //   if (wrapper.className.indexOf("ax-page-content") == -1) {
    //     return;
    //   }
    //   // 必须是首个的节点
    //   if (wrapper.childNodes[0] != elem.parentNode) {
    //     return;
    //   }
    //   myelem = elem.parentNode;
    // } else if (elem.parentNode.className.indexOf("ax-page-content") != -1) {
    //   wrapper = elem.parentNode;
    // }
    // if (!wrapper) {
    //   return;
    // }
    // // 必须是首行的首个的节点
    // if (wrapper.childNodes[0] != myelem) {
    //   return;
    // }
  };

  PageControler.prototype.checkCursor = function(rang) {
    if (rang.startOffset != 0 || rang.endOffset != 0) {
      if (
        !(
          rang.startContainer.nodeType == 3 &&
          rang.startContainer.data.replace(/\u200B/g, "") == 0
        )
      ) {
        return;
      }
    }

    var pageContent =
      rang.startContainer.className === undefined
        ? rang.startContainer.parentNode
        : rang.startContainer;
    if (pageContent.className.indexOf("ax-page-content") == -1) {
      for (var i = 0; i < 10; i++) {
        if (pageContent.className === undefined) {
          return;
        }
        if (pageContent.className.indexOf("ax-page-content") == -1) {
          // 必须是首个子节点
          if (pageContent.parentNode.childNodes[0] != pageContent) {
            return;
          }
          pageContent = pageContent.parentNode;
          continue;
        }
        break;
      }
    }
    if (pageContent.className.indexOf("ax-page-content") == -1) {
      return;
    }

    // 开头空节点删除
    if((rang.startOffset == 0 || rang.startOffset == 1) && rang.startOffset == rang.endOffset) {
      if((rang.startContainer.nodeType == 3 && rang.startContainer.data.replace(/\u200B/g, "") == "") ||
      (rang.startContainer.nodeType == 1 && rang.startContainer.textContent.replace(/\u200B/g, "") == "")
      ) {
        if(rang.startContainer.nodeType == 3) {
          return;
        }
        if(rang.startContainer.nodeType == 1) {
          if(rang.startContainer.className.indexOf("paragraphContent") > -1) {
            var childs = rang.startContainer.parentElement.querySelectorAll(".paragraphContent");
            if(childs && childs.length > 1){
              rang.startContainer.parentElement.removeChild(rang.startContainer)
            }else{
              rang.startContainer.parentElement.parentElement.removeChild(rang.startContainer.parentElement)
            }
          }else{
            rang.startContainer.parentElement.removeChild(rang.startContainer)
          }
        }
      }else if(rang.startContainer != rang.startContainer.parentElement.childNodes[0]){
        return;
      }
    }
    return this.focusEnd(pageContent);
  };

  PageControler.prototype.focusEnd = function(contentElem) {
    for (var i = 0; i < this.pages.length; i++) {
      var page = this.pages[i];
      if (page.contentElem == contentElem) {
        if (i == 0) {
          return false;
        }
        this.pages[i - 1].focusEnd();
        return true;
      }
    }
    return false;
  };

  // 回车键处理
  // 如果回车后光标所在元素超出页面了，那就认为应该进行光标换位
  PageControler.prototype.enterHandler = function(rang) {
    var pageContent =
      rang.startContainer.className === undefined
        ? rang.startContainer.parentNode
        : rang.startContainer;
    if (pageContent.className.indexOf("ax-page-content") == -1) {
      for (var i = 0; i < 10; i++) {
        if (pageContent.className === undefined) {
          return;
        }
        if (pageContent.className.indexOf("ax-page-content") == -1) {
          pageContent = pageContent.parentNode;
          continue;
        }
        break;
      }
    }
    if (pageContent.className.indexOf("ax-page-content") == -1) {
      return;
    }
    for (var i = 0; i < this.pages.length; i++) {
      var page = this.pages[i];
      if (page.contentElem == pageContent) {
        if (i == this.pages.length - 1) {
          return;
        }
        if (page.isOverElem(rang.startContainer)) {
          this.pages[i + 1].focusStart();
        }
        return;
      }
    }
  };

  PageControler.prototype.clearDoc = function() {
    this.releaseAll();
    this.createPage();
  };

  // 释放了
  PageControler.prototype.release = function() {
    this.releaseAll();
    this.rootElem = null;
    this.editor = null;
    clearInterval(this.checker);
    this.checker = null;
    this.pages.length = 0;
    this.pages = null;
  };

  // 回退会覆盖整个HTML内容，这里需要重置所有pages
  PageControler.prototype.resetAllPageElems = function(html) {
    this.setContent(html);
  }

  // ===========================================================
  // ===========================================================
  // ===========================================================
  function initListener(editor) {
    // 中文输入
    AX.dom.domUtils.on(editor.body, "compositionstart", function() {
      PageControler.prototype.chineseInputing = true;
    });
    AX.dom.domUtils.on(editor.body, "compositionend", function() {
      PageControler.prototype.chineseInputing = false;
    });
  }

  window.PageControler = PageControler;
})(window);

/* eslint-disable */

/**
 * 插入页码
 * @command pages
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'pages');
 * ```
 */
AX.plugins["pages"] = function() {
  var me = this,
    thePlugins = "pages";
  me.commands[thePlugins] = {
    execCommand: function() {
      var pageDom = axTools.getByClass("ax-editor-init-page", me.document),
        body = me.document.getElementsByTagName("body")[0];
      if (pageDom.length > 0) {
        body.removeChild(pageDom[0]);
      } else {
        pageDom = document.createElement("pagenum");
        pageDom.setAttribute("class", "ax-editor-init-page");
        if (body.childNodes.length > 0) {
          body.insertBefore(pageDom, body.childNodes[0]);
        } else {
          body.appendChild(pageDom);
        }
      }
    },
    queryCommandState: function() {
      return axTools.getByClass("ax-editor-init-page", me.document).length == 0
        ? 0
        : 1;
    }
  };
};

/* eslint-disable */

/**
 *  段落元素
 */
AX.plugins["paragraphele"] = function () {
  var me = this,
    thePlugins = "paragraphele";
  me.commands[thePlugins] = {
    execCommand: function (type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        isEdit: isEdit,
        cssRules: "width:700px;height:400px;",
        dialogUrl: "dialogs/extends/paragraphElemnent.html"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();
  // me.addListener("mouseover", function(t, evt) {
  //   axTools.commonEditTip(thePlugins, me, popup, evt);
  // });
};

/**
 *  段落元素配置
 */
AX.plugins["parasetter"] = function () {
  var me = this,
    thePlugins = "parasetter";
  me.commands[thePlugins] = {
    execCommand: function (type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        isEdit: isEdit,
        cssRules: "width:700px;height:400px;",
        dialogUrl: "dialogs/extends/parasetter.html"
      });
    }
  };
};

/**
 *  执行段落元素配置
 */
AX.plugins["doparasetter"] = function () {
  var me = this,
    thePlugins = "doparasetter";
  me.commands[thePlugins] = {
    execCommand: function (type, params) {
      if (Object.keys(params).length == 0) {
        //未设置时，结束此方法的执行
        return;
      }
      var paragraphSettings = me.document.getElementById("paragraphSettings");
      if (!paragraphSettings) {
        paragraphSettings = document.createElement("input");
        paragraphSettings.setAttribute("id", "paragraphSettings");
        paragraphSettings.setAttribute("type", "hidden");
        // paragraphSettings.setAttribute("style", "display:none;");
        me.document.body.appendChild(paragraphSettings);
      }
      paragraphSettings.value = JSON.stringify(params);

      var paragraphs = axTools.getByClass("paragraphele", me.document);
      for (var i = 0; i < paragraphs.length; i++) {
        var children = paragraphs[i].childNodes;
        var attrs = JSON.parse(paragraphs[i].getAttribute("attrs"));
        paragraphs[i].style.marginTop = params.rowspacingTop + "px";
        paragraphs[i].style.marginBottom = params.rowspacingBottom + "px";
        var listStyle = axTools.getByClass("paragraphListStyle", paragraphs[i]),
          list = null;
        if (params.listType) {
          //有样式时增加ul包裹
          if (listStyle.length > 0) {
            //切换样式时触发
            list = listStyle[0];
          } else {
            //从无样式到有样式时触发
            list = document.createElement("ul");
            list.setAttribute("class", "paragraphListStyle");
          }
          list.style.listStyleType = params.listType;
        }
        // 处理颜色和缩进
        for (var j = 0; j < children.length; j++) {
          var className = children[j].getAttribute('class') || '';
          if (j == 0) {
            if (params.titleBg) {
              if(attrs.singleTitle == "on"){
                var ctrVal = axTools.getByClass("ctrl-value", children[j])[0];
              }else{
                var ctrVal = axTools.getByTagAttr("strong", "class", "ctrl-value", children[j])[0];
              }
              if (ctrVal) {
                //单个段落元素已设置的样式优先级更高
                ctrVal.style.background = "#" + params.titleBg;
              }
            }
            continue;
          }
          var style = children[j].getAttribute("style");
          style +=
            "text-indent:" +
            params.indentValue +
            "em;line-height:" +
            params.lineHeight +
            "em!important;";
          children[j].setAttribute("style", style);
          if (params.listType && listStyle.length == 0 && className.indexOf('paragraphContent') > -1) {
            //有样式时增加li包裹
            var li = document.createElement("li");
            li.innerHTML = children[j].outerHTML;
            list.appendChild(li);
          }
        }
        // 处理段落标题是否独占一行
        if(params.singleTitle == "on") { // 独占
          if(attrs.singleTitle == "") {
            var titles = axTools.getByTagAttr("strong", "class", "ctrl-value", paragraphs[i]);
            if(titles.length > 0) {
              titles[0].parentElement.removeChild(titles[0]);
              var html = '<p style="margin:0"><span class="ctrl-value" style="display:block;padding: 5px 10px;background:#' + (params.titleBg || attrs.titleBg) +
                  '"><strong>' +
                  attrs.name +
                  "</strong></span></p>";
                paragraphs[i].innerHTML = html + paragraphs[i].innerHTML;
              attrs.singleTitle = params.singleTitle;
              paragraphs[i].setAttribute("attrs", JSON.stringify(attrs));
            }
          }
        }else{ // 非独占
          if(attrs.singleTitle == "on") {
            var title = paragraphs[i].children[0];
            if(title && title.nodeType == 1 && title.tagName == "P") {
              title.parentElement.removeChild(title);
              var html = '<p class="paragraphContent" style="margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;" contenteditable="true"><strong class="ctrl-value" style="background:#' + params.titleBg + '" contenteditable="false">【' +
                  attrs.name +
                "】</strong>&nbsp;</p>"
              paragraphs[i].innerHTML = html + paragraphs[i].innerHTML;
              attrs.singleTitle = params.singleTitle;
              paragraphs[i].setAttribute("attrs", JSON.stringify(attrs));
            }
          }
        }
        if (params.listType) {
          //有样式时增加ul+li包裹
          if (listStyle.length == 0) {
            var contents = axTools.getByClass(
              "paragraphContent",
              paragraphs[i]
            );
            for (var k = 0; k < contents.length; k++) {
              if(contents[k].tagName == "DIV" && contents[k].getAttribute("attrs")) break;
              paragraphs[i].removeChild(contents[k]);
            }
            paragraphs[i].appendChild(list);
          }
        } else {
          //无样式时去掉ul+li，还原样式
          var newContents = "",
            ulObj = axTools.getByClass("paragraphListStyle", paragraphs[i]),
            liContents = ulObj.length > 0 ? ulObj[0].childNodes : [];
          for (var m = 0; m < liContents.length; m++) {
            newContents += liContents[m].innerHTML;
          }
          if (ulObj.length > 0) {
            paragraphs[i].removeChild(ulObj[0]);
            paragraphs[i].innerHTML = paragraphs[i].innerHTML + newContents;
          }
        }
      }
    }
  };
};

/**
 *  追加段落元素内容
 */
AX.plugins["appendparagraphcontent"] = function () {
  var me = this,
    thePlugins = "appendparagraphcontent";
  me.commands[thePlugins] = {
    execCommand: function (type, params) {
      if (
        me.options.editorModel == "pure" ||
        me.options.editorModel == "dirty" ||
        me.options.editorModel == "secret" || me.options.editorModel === "preview"
      ) {
        alert(me.getLang("ax.viewNotEditTip"));
        return;
      }
      if (
        params.content == undefined ||
        params.content == "" ||
        params.content == null
      ) {
        return;
      }
      var matchPs = axTools.getByClass(
        "paragraphele-" + params.type,
        me.document
      );

      //兼容旧模板
      if (matchPs.length == 0) {
        matchPs = axTools.getByTagAttr(
          "div",
          "paragraphtype",
          params.type,
          me.document
        );
      }
      //此处创建div模拟P标签效果，是为防止P标签嵌套P标签在预览及打印时会多出空白P标签，这是html标签本身的规则所致
      var newDom = document.createElement("div");
      newDom.setAttribute(
        "style",
        "line-height: 1.5em!important;"
      );
      newDom.setAttribute(
        "contenteditable",
        "true"
      )
      newDom.innerHTML = params.content;
      var ctrls = axTools.getByClass("ctrl-bg", newDom);
      var ctrls1 = []; // 除段落外的结构化元素
      var num = 0;
      for (var m = 0; m < ctrls.length; m++) {
        if (ctrls[m].getAttribute("axplugins") == "paragraphele") continue;
        num++;
        ctrls1.push(ctrls[m]);
      }
      var ctrlValues = axTools.getByClass("ctrl-value", newDom);
      for (var m = 0; m < ctrlValues.length; m++) {
        if(ctrlValues[m].tagName == "STRONG") { // 只删除第一个标题
          ctrlValues[m].parentElement.removeChild(ctrlValues[m]);
        }
      }
      // 判断是否包含诊断、处方
      var arrs = me.execCommand("verifyelement", me.document);
      if(arrs.prescription) { // 清除处方
        newDom = axTools.removeEleValue(newDom, "prescription");
        newDom = me.execCommand("removeelevalue", newDom, "prescription")
      }
      if(arrs.diagnose) {
        newDom = axTools.removeEleValue(newDom, "diagnose");
        newDom = me.execCommand("removeelevalue", newDom, "diagnose", arrs.arrs);
      }
      if (num !== 0) {
        axTools.getUUID(num, me, function (data) {
          if (data.code == 1) {
            for (var m = 0; m < ctrls1.length; m++) {
              var json = JSON.parse(ctrls1[m].getAttribute('attrs'));
              json.id = data.data[m];
              ctrls1[m].setAttribute('id', data.data[m]);
              ctrls1[m].setAttribute('attrs', JSON.stringify(json));
            }
          }
          make();
        })
      } else {
        make();
      }
      setTimeout(function() {
        if(axTools.getByTagAttr("span", "axplugins", "macro", newDom).length > 0) {
          me.execCommand("refreshmacros");
        }
        if(axTools.getByTagAttr("span", "axplugins", "diagnose", newDom).length > 0) {
          me.execCommand("refreshdiagnose")
        }
        if(axTools.getByTagAttr("span", "axplugins", "prescription", newDom).length > 0) {
          typeof me.options.refreshPrescriptionMethod == 'function' ? me.options.refreshPrescriptionMethod() : alert(me.getLang('ax.configRefreshPrescriptionMethod'));
        }
      }, 500)
      function make() {
        // 处理留痕
        if(me.options.editorModel === 'mark') {
          var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
          var name = me.options.userInfo.name;
          var paraContent = axTools.getByClass("paragraphContent", newDom);
          if(paraContent.length > 0) {
            for(var s = 0; s < paraContent.length; s++) {
              $(paraContent[s]).addClass("editor-new-add-text editor-free-text");
              paraContent[s].setAttribute("user", name);
              paraContent[s].setAttribute("time", time);
            }
          }else{
            newDom.innerHTML += '<span class="editor-new-add-text editor-free-text" user="' + name + '" time="' + time + '">' + newDom.innerHTML + '</span>';
          }
        }
        if (matchPs.length > 0) {
          //有匹配的段落类型
          var pDom = axTools.getByClass("paragraphele", newDom);
          var attrs = JSON.parse(matchPs[0].getAttribute("attrs"));
          if (pDom.length > 0) {
            var newDomContent = pDom[0].childNodes,
              newHtml = "";
            for (var i = 0; i < newDomContent.length; i++) {
              // if (axTools.hasClass(newDomContent[i], "paragraphContent") || newDomContent[i].tagName == "DIV") {
                if(attrs.isLock == "on") { // 锁定段落需要改为不可编辑
                  newDomContent[i].setAttribute("contenteditable", false);
                }
                newHtml += newDomContent[i].outerHTML;
              // }
            }// 追加到段落内的最后一个子节点内，防止无法全选
            matchPs[matchPs.length - 1].children[matchPs[matchPs.length - 1].children.length - 1].innerHTML = matchPs[matchPs.length - 1].children[matchPs[matchPs.length - 1].children.length - 1].innerHTML + newHtml;
          } else { // 追加到段落内的最后一个子节点内，防止无法全选
            matchPs[matchPs.length - 1].children[matchPs[matchPs.length - 1].children.length - 1].appendChild(newDom);
          }
        } else {
          //提取纯段落元素
          var pDom = axTools.getByClass("paragraphele", newDom);
          if (pDom.length > 0) {
            newDom = pDom[0];
          }

          var range = me.selection.getRange(),
            parentNode = range.startContainer.parentElement,
            isHeader = false,
            isFooter = false;
          if (parentNode.getAttribute("class").indexOf("ax-page-content") > -1) {
            parentNode = range.startContainer;
          }
          //判断光标是否在段落元素内
          var pNode = AX.dom.domUtils.findParent(
            parentNode,
            function (dom) {
              return (
                dom.tagName.toLowerCase() == "div" &&
                axTools.hasClass(dom, "paragraphele")
              );
            },
            true
          );

          // 光标不在段落元素内时，判断是否在P标签下，因为需要换行
          if (pNode == null) {
            pNode = AX.dom.domUtils.findParent(
              parentNode,
              function (dom) {
                return (
                  dom.tagName.toLowerCase() == "p" ||
                  dom.tagName.toLowerCase() == "div"
                );
              },
              true
            );
          }

          if (
            range.startContainer.nodeName.toLowerCase() == "p" &&
            parentNode.tagName.toLowerCase() == "body"
          ) {
            pNode = range.startContainer;
          }

          if (pNode) {
            isHeader = AX.dom.domUtils.findParent(
              parentNode,
              function (dom) {
                return dom.tagName.toLowerCase() == "header";
              },
              true
            );

            isFooter = AX.dom.domUtils.findParent(
              parentNode,
              function (dom) {
                return dom.tagName.toLowerCase() == "footer";
              },
              true
            );
          }

          if (
            pNode === null ||
            (isHeader && !axTools.hasClass(isHeader, "focus")) ||
            (isFooter && !axTools.hasClass(isFooter, "focus"))
          ) {
            var footer = axTools.getByClass("ax-editor-page-footer", me.document);
            // if(footer.length>0){
            // 	me.document.body.insertBefore(newDom,footer[0]);
            // }else{
            // 	me.document.body.appendChild(newDom);
            // }
            alert("请将光标置于需要添加的位置!");
            return;
          }

          //此处创建div模拟P标签效果，是为防止P标签嵌套P标签在预览及打印时会多出空白P标签，这是html标签本身的规则所致
          AX.dom.domUtils.insertAfter(pNode, newDom);
          range.selectNode(newDom);
          range.select();
          newDom.click();
          me.execCommand('sensitive')
        }
      }

    }
  };
};

/**
 *  替换段落元素
 */
AX.plugins["replaceparagraph"] = function () {
  var me = this,
    thePlugins = "replaceparagraph";
  me.commands[thePlugins] = {
    execCommand: function (type, params) {
      if (
        me.options.editorModel == "pure" ||
        me.options.editorModel == "dirty" ||
        me.options.editorModel == "secret" || me.options.editorModel === "preview"
      ) {
        alert(me.getLang("ax.viewNotEditTip"));
        return;
      }
      var matchPs = axTools.getByClass(
        "paragraphele-" + params.type,
        me.document
      );
      //兼容旧模板
      if (matchPs.length == 0) {
        matchPs = axTools.getByTagAttr(
          "div",
          "paragraphtype",
          params.type,
          me.document
        );
      }
      //此处创建div模拟P标签效果，是为防止P标签嵌套P标签在预览及打印时会多出空白P标签，这是html标签本身的规则所致
      var newDom = document.createElement("div");
      newDom.setAttribute(
        "style",
        "margin: 5px 0;line-height: 1.5em!important;"
      );
      newDom.innerHTML = params.content;
      //提取纯段落元素
      var pDom = axTools.getByClass("paragraphele", newDom);
      if (pDom.length > 0) {
        newDom = pDom[0];
      }
      if (matchPs.length > 0) { // 校验诊断和处方
        var arrsDoc = me.execCommand("verifyelement", me.document);
        if(arrsDoc.diagnose || arrsDoc.prescription) {
          var arrsNew = me.execCommand("verifyelement", matchPs[0]);
          if(arrsDoc.prescription) { // 清除处方
            newDom = axTools.removeEleValue(newDom, "prescription");
          }
          if(arrsDoc.diagnose) {
            var ar = []
            for(var i = 0; i < arrsDoc.arrs.length; i++) {
              if(arrsNew.arrs && arrsNew.arrs.indexOf(arrsDoc.arrs[i]) == -1) {
                ar.push(arrsDoc.arrs[i])
              }
            }
            if(ar.length > 0) {
              newDom = me.execCommand("removeelevalue", newDom, "diagnose", ar);
            }
            newDom = axTools.removeEleValue(newDom, "diagnose");
          }
        }
      }
      if (newDom.outerHTML.indexOf('paragraphele') == -1) {
        axTools.getUUID(1, me, function (data) {
          if (data.code == 1) {
            if (newDom.innerHTML.indexOf('ax-page-wrapper') > -1) {
              var contentArr = axTools.getByClass('ax-page-content', newDom);
              if (contentArr.length > 1) {
                for (var j = 0; j < contentArr.length; j++) {
                  newDom.innerHTML += contentArr[j].innerHTML;
                }
              } else {
                newDom.innerHTML = contentArr.innerHTML;
              }
            }
            var attrsOld
            if (matchPs.length > 0) {
              attrsOld = JSON.parse(matchPs[0].getAttribute("attrs"));
            }
            var attrs = '{"id":"' + data.data[0] + '","paratype":"' + params.type + '","name":"' + params.name + '","singleTitle":"' + (attrsOld.singleTitle || "") + '","titleBg":"F0F2F4","isPrint":"on","isEdit":"","isDel":"","isHide":"","isLock":""}'
            $(newDom).find('div').addClass('paragraphContent');
            newDom.setAttribute("attrs", attrs);
            if(attrsOld.singleTitle == "on" && params.type !== 'PT_tgjcnr') {
              newDom.innerHTML = '<p style="margin:0"><strong class="ctrl-value" style="display:block;padding: 5px 10px;background:#F0F2F4" tabindex="0" contenteditable="false">' + params.name + '</strong></p><div class="paragraphContent" style="margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;" contenteditable="true">' + newDom.innerHTML + '</div>';
            }else if(params.type === 'PT_tgjcnr'){
              newDom.innerHTML = '<div class="paragraphContent" style="margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;" contenteditable="true">' + newDom.innerHTML + '</div>';
            }else{
              newDom.innerHTML = '<div class="paragraphContent" style="margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;" contenteditable="true"><strong class="ctrl-value" contenteditable="false">【' +
                params.name +
                '】</strong>&nbsp;' + newDom.innerHTML + '</div>';
            }
            newDom.setAttribute('class', 'ctrl-bg ctrl-field paragraphele paragraphele-' + params.type + ' paragraph-border');
            newDom.setAttribute('paragraphtype', params.type);
            newDom.setAttribute('id', data.data[0]);
            newDom.setAttribute('axplugins', 'paragraphele')
            if(me.options.editorModel === 'mark') {
              var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
              var name = me.options.userInfo.name;
              var paraContent = axTools.getByClass("paragraphContent", newDom);
              // 处理新增内容
              if(paraContent.length > 0) {
                for(var s = 0; s < paraContent.length; s++) {
                  $(paraContent[s]).addClass("editor-new-add-text editor-free-text");
                  paraContent[s].setAttribute("user", name);
                  paraContent[s].setAttribute("time", time);
                }
              }else{
                newDom.innerHTML += '<span class="editor-new-add-text editor-free-text" user="' + name + '" time="' + time + '">' + newDom.innerHTML + '</span>';
              }
              // 替换内容增加删除线
              var oldcontent = ""; // 暂时存储待替换内容
              for(var l = 0; l < matchPs.length; l++) {
                for(var s = 0; s < matchPs[l].children.length; s++) {
                  if(axTools.hasClass(matchPs[l].children[s], "editor-new-add-text")) {
                    // 删除带有新增标识的节点
                    matchPs[l].children[s].parentElement.removeChild(matchPs[l].children[s]);
                    s--;
                  }else{
                    $(matchPs[l].children[s]).addClass("editor-mark-del-text editor-free-text");
                    $(matchPs[l].children[s]).find(".ctrl-value").attr("contenteditable", "false")
                    matchPs[l].children[s].setAttribute("contenteditable", "false");
                    matchPs[l].children[s].setAttribute("user", name);
                    matchPs[l].children[s].setAttribute("time", time);
                  }
                }
                oldcontent += matchPs[l].innerHTML;
              }
              newDom.innerHTML = oldcontent + newDom.innerHTML;
            }
            if (matchPs.length > 0) {
              //有匹配的段落类型
              for(var l = 1; l < matchPs.length; l++) {
                matchPs[l].parentElement.removeChild(matchPs[l]);
              }
              matchPs[0].parentNode.replaceChild(newDom, matchPs[0]);
            } else {
              //无匹配的段落类型
              var range = me.selection.getRange(),
                parentNode = range.startContainer.parentElement;
              if (
                parentNode.getAttribute("class") &&
                parentNode.getAttribute("class").indexOf("ax-page-content") > -1
              ) {
                parentNode = range.startContainer;
              }
              var thePluginsNode = AX.dom.domUtils.findParent(
                parentNode,
                function (dom) {
                  return (
                    dom.getAttribute("axplugins") == "paragraphele" &&
                    dom.getAttribute("paragraphType") == params.type
                  );
                },
                true
              );

              if (thePluginsNode === null) {
                var pNode = AX.dom.domUtils.findParent(
                  parentNode,
                  function (dom) {
                    return (
                      dom.tagName.toLowerCase() == "p" ||
                      dom.tagName.toLowerCase() == "div"
                    );
                  },
                  true
                );

                if (
                  range.startContainer.nodeName.toLowerCase() == "p" &&
                  parentNode.tagName.toLowerCase() == "body"
                ) {
                  pNode = range.startContainer;
                }
                var pNodes = AX.dom.domUtils.findParent(
                  pNode,
                  function (dom) {
                    return (
                      dom.className.indexOf("ax-page-content") > -1
                    );
                  },
                  true
                );
                if (!pNodes) {
                  var content = axTools.getByClass('ax-page-content', me.document)
                  // if(footer.length>0){
                  // 	me.document.body.insertBefore(newDom,footer[footer.length - 1]);
                  // }else{
                    content[content.length - 1].appendChild(newDom);
                  // }
                } else {
                  AX.dom.domUtils.insertAfter(pNode, newDom);
                }
              }
            }
          } else {
            alert("元素编码获取失败，请刷新重试！");
          }
        })
      } else {
        if(me.options.editorModel === 'mark') {
          var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
          var name = me.options.userInfo.name;
          var paraContent = axTools.getByClass("paragraphContent", newDom);
          // 处理新增内容
          if(paraContent.length > 0) {
            for(var s = 0; s < paraContent.length; s++) {
              $(paraContent[s]).addClass("editor-new-add-text editor-free-text");
              paraContent[s].setAttribute("user", name);
              paraContent[s].setAttribute("time", time);
            }
          }else{
            newDom.innerHTML += '<span class="editor-new-add-text editor-free-text" user="' + name + '" time="' + time + '">' + newDom.innerHTML + '</span>';
          }
          // 替换内容增加删除线
          var oldcontent = ""; // 暂时存储待替换内容
          for(var l = 0; l < matchPs.length; l++) {
            for(var s = 0; s < matchPs[l].children.length; s++) {
              // 出现新增时，先删除新增内容
              if(axTools.hasClass(matchPs[l].children[s], "editor-new-add-text")) {
                matchPs[l].children[s].parentElement.removeChild(matchPs[l].children[s]);
                s--;
              }else{
                $(matchPs[l].children[s]).addClass("editor-mark-del-text editor-free-text");
                $(matchPs[l].children[s]).find(".ctrl-value").attr("contenteditable", "false")
                matchPs[l].children[s].setAttribute("contenteditable", "false");
                matchPs[l].children[s].setAttribute("user", name);
                matchPs[l].children[s].setAttribute("time", time);
              }
            }
            oldcontent += matchPs[l].innerHTML;
          }
          newDom.innerHTML = oldcontent + newDom.innerHTML;
        }
        if (matchPs.length > 0) {
          //有匹配的段落类型
          var attrs = JSON.parse(matchPs[0].getAttribute("attrs"));
          if (pDom.length > 0) {
            var newDomContent = newDom.childNodes,
              newHtml = "";
            for (var i = 0; i < newDomContent.length; i++) {
              if(attrs.isLock == "on") { // 锁定段落需要改为不可编辑
                newDomContent[i].setAttribute("contenteditable", false);
              }
            }
          }
          for(var l = 1; l < matchPs.length; l++) {
            matchPs[l].parentElement.removeChild(matchPs[l]);
          }
          matchPs[0].parentNode.replaceChild(newDom, matchPs[0]);

        } else {
          //无匹配的段落类型
          var range = me.selection.getRange(),
            parentNode = range.startContainer.parentElement;
          if (
            parentNode.getAttribute("class") &&
            parentNode.getAttribute("class").indexOf("ax-page-content") > -1
          ) {
            parentNode = range.startContainer;
          }
          var thePluginsNode = AX.dom.domUtils.findParent(
            parentNode,
            function (dom) {
              return (
                dom.getAttribute("axplugins") == "paragraphele" &&
                dom.getAttribute("paragraphType") == params.type
              );
            },
            true
          );

          if (thePluginsNode === null) {
            var pNode = AX.dom.domUtils.findParent(
              parentNode,
              function (dom) {
                return (
                  dom.tagName.toLowerCase() == "p" ||
                  dom.tagName.toLowerCase() == "div"
                );
              },
              true
            );

            if (
              range.startContainer.nodeName.toLowerCase() == "p" &&
              parentNode.tagName.toLowerCase() == "body"
            ) {
              pNode = range.startContainer;
            }
            var pNodes = AX.dom.domUtils.findParent(
              pNode,
              function (dom) {
                return (
                  dom.className.indexOf("ax-page-content") > -1
                );
              },
              false
            );
            if (!pNodes) {
              var footer = axTools.getByClass('ax-page-content', me.document)
              // if(footer.length>0){
              // 	me.document.body.insertBefore(newDom,footer[footer.length - 1]);
              // }else{
              footer[footer.length - 1].appendChild(newDom);
              // }
            } else {
              AX.dom.domUtils.insertAfter(pNode, newDom);
            }

          }
        }
      }
      if(axTools.getByTagAttr("span", "axplugins","macro", newDom).length > 0) {
        me.execCommand("refreshmacros");
      }
      if(axTools.getByTagAttr("span", "axplugins", "diagnose", newDom).length > 0) {
        me.execCommand("refreshdiagnose")
      }
      if(axTools.getByTagAttr("span", "axplugins", "prescription", newDom).length > 0) {
        typeof me.options.refreshPrescriptionMethod == 'function' ? me.options.refreshPrescriptionMethod() : alert(me.getLang('ax.configRefreshPrescriptionMethod'));
      }

      me.execCommand('sensitive')
    }
  };
};

/**
 *  获取段落元素标题及文本
 */
AX.plugins["getparagraphtext"] = function () {
  var me = this,
    thePlugins = "getparagraphtext";
  me.commands[thePlugins] = {
    execCommand: function (type, params) {
      var pType = params.type,
        filterMarks = params.filterMarks;
      if (!!!pType) {
        return "";
      }
      var targetPs = axTools.getByTagAttr(
        "div",
        "paragraphtype",
        pType,
        me.document
      );
      if (targetPs.length > 0) {
        var targetElem = targetPs[0];
        // ax-update: 为了存片语能够存整个的元素，所以先进行元素的合并
        if (targetPs.length > 1 && targetPs[0].id === targetPs[1].id) {
          var preElem = $(targetPs[0]).clone(true)[0];
          var nextElem;
          for (var i = 1; i < targetPs.length; i++) {
            nextElem = $(targetPs[i]).clone(true)[0];
            AX.pageControler.pages[0].mergeContent(preElem, nextElem);
            preElem = nextElem;
          }
          targetElem = nextElem;
        }
        // 根据直接引用属性筛选元素
        var div = document.createElement("div");
        div.innerHTML = targetElem.outerHTML;
        var ctrls = axTools.getByClass("ctrl-bg", div);
        for(var i = 0; i < ctrls.length; i++) {
          var ctrl = ctrls[i];
          var json = JSON.parse(ctrl.getAttribute("attrs"));
          var axplugins = ctrl.getAttribute("axplugins");
          if(json.checkDirectCite == "" || ctrl.getAttribute("axplugins") == "macro"){
            if(axplugins == "select" || axplugins == "selectmulti") {
              var ctrlvalue = axTools.getByClass("ctrl-value", ctrl)[0];
              ctrl.setAttribute("selectval", "");
              ctrl.setAttribute("selectvaltext", "");
              ctrlvalue.innerHTML = "";
            }else if(axplugins == "radio" || axplugins == "checkbox") {
              ctrl.setAttribute("selectval", "");
              ctrl.setAttribute("selectvaltext", "");
              var inputs = ctrl.getElementsByTagName("input");
              for(var j = 0; j < inputs.length; j++) {
                inputs[j].removeAttribute("checked");
              }
            }else if(axplugins == "paragraphele") {
              var contents = axTools.getByClass("paragraphContent", ctrl);
              for(var j = 0 ; j < contents.length; j++) {
                contents[j].innerHTML = ""
              }
            }else if(axplugins == "diagnose"){
              var contents = axTools.getByClass("ctrl-value", ctrl)[0];
              ctrl.removeAttribute("diaginfo");
              contents.innerHTML = json.name;
            }else if(axplugins == "prescription"){
              var contents = axTools.getByClass("ctrl-value", ctrl)[0];
              contents.innerHTML = "处方内容";
            }else{
              var contents = axTools.getByClass("ctrl-value", ctrl)[0];
              contents.innerHTML = "";
            }
          }
        }
        targetElem = div;
        var pinfo = makePinfo(targetElem);

        /**
         * 构造段落信息
         * @param {DOM} appointp 段落节点
         * @returns {JSON} 段落信息
         */
        function makePinfo(appointp) {
          var pinfo = {};
          var titleDom = axTools.getByClass("ctrl-value", appointp);
          if (titleDom.length > 0) {
            pinfo.title = titleDom[0].tagName == "STRONG" && titleDom[0].innerText;
            pinfo.plainContent = appointp.innerHTML;
            // .replace(
            //   new RegExp(titleDom[0].innerHTML),
            //   ""
            // );
          } else {
            pinfo.title = "";
            pinfo.plainContent = appointp.innerHTML;
          }

          if (filterMarks) {
            var tempDiv = document.createElement("div");
            tempDiv.innerHTML = appointp.outerHTML;
            var marks = axTools.getByClass("editor-mark-text", tempDiv);
            for (var i = 0; i < marks.length; i++) {
              marks[i].parentNode.removeChild(marks[i]);
            }
            marks = axTools.getByClass("editor-mark-del-text", tempDiv);
            for (var i = 0; i < marks.length; i++) {
              marks[i].parentNode.removeChild(marks[i]);
            }
            var editMarks = axTools.getByClass("editor-new-add-text", tempDiv);
            for (var i = 0; i < editMarks.length; i++) {
              editMarks[i].setAttribute("class", "");
            }
            pinfo.phtml = tempDiv.innerHTML;
          } else {
            pinfo.phtml = appointp.outerHTML;
          }
          pinfo.content = getShowDomText(appointp.childNodes);
          return pinfo;
        }

        /**
         * 获取段落内显示元素的文本内容
         * @param {Array} pchilds 段落子节点集合
         * @returns {String} 过滤隐藏元素后的段落文本内容
         */
        function getShowDomText(pchilds) {
          var text = "";
          for (var j = 0; j < pchilds.length; j++) {
            var child = pchilds[j],
              tagName = child.tagName ? child.tagName.toLowerCase() : "";
            if (child.childNodes.length > 0 && tagName != "select") {
              if (
                child.getAttribute("axPlugins") == "radio" ||
                child.getAttribute("axPlugins") == "checkbox"
              ) {
                text += getBoxText(child).join(",");
              } else if (
                !axTools.hasClass(child, "editor-mark-del-text") &&
                !axTools.hasClass(child, "sensitiveWords") &&
                !(tagName == "strong" && axTools.hasClass(child, "ctrl-value"))
              ) {
                text += getShowDomText(child.childNodes);
              }
            } else {
              if (tagName == "select") {
                text += child.options[child.selectedIndex].text;
              } else {
                text += child.nodeValue || child.innerText;
              }
            }
          }
          return text;
        }

        /**
         * 获取单复选框内容
         * @param {DOM} ctrl 单复选控件DOM
         * @returns {Array} 选中选项文本内容数组
         */
        function getBoxText(ctrl) {
          var type = ctrl.getAttribute("type"),
            inputs = ctrl.getElementsByTagName("input"),
            checkVal = [];
          var k = 0; //用来作checkVal数组的下标
          for (var i = 0, len = inputs.length; i < len; i++) {
            if (inputs[i].checked) {
              checkVal[k] = inputs[i].getAttribute("valueStr");
              k++;
            }
          }
          return checkVal;
        }

        return pinfo;
      }
    }
  };
};

/**
 *  填充段落内容
 */
AX.plugins["addparagraphcontent"] = function () {
  var me = this,
    thePlugins = "addparagraphcontent";
  me.commands[thePlugins] = {
    execCommand: function (type, params) {
      var pType = params.type; //段落类型
      if (!!!pType) {
        alert(me.getLang("ax.missTypeTip"));
        return false;
      }
      var targetPs = axTools.getByClass("paragraphele-" + pType, me.document);
      //兼容旧模板
      if (targetPs.length == 0) {
        targetPs = axTools.getByTagAttr(
          "div",
          "paragraphtype",
          pType,
          me.document
        );
      }
      if (targetPs.length > 0) {
        var targetP = targetPs[0],
          titleDom = axTools.getByClass("ctrl-value", targetP);
        if (titleDom.length > 0) {
          var contentPs = axTools.getByClass("paragraphContent", targetP);
          for (var i = 0; i < contentPs.length; i++) {
            targetP.removeChild(contentPs[i]);
          }
          targetP.innerHTML = targetP.innerHTML + params.content;
        } else {
          targetP.innerHTML = params.content; //段落内容
        }
      } else {
        alert(me.getLang("ax.missPTip"));
      }

      return true;
    }
  };
};
/**
 * 插入
 * {ptype}  段落类型
 * {dom} dom节点string
 */
AX.plugins["insertappointparagraph"] = function () {
  var me = this,
    thePlugins = "insertappointparagraph";
  me.commands[thePlugins] = {
    execCommand: function (type, ptype, dom) {
      var div = me.document.createElement("p");
      if(me.options.editorModel === "mark") {
        var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
        var name = me.options.userInfo.name
        dom = '<span class="editor-new-add-text editor-free-text" style="display: block;" user="' + name + '" time="' + time + '">' + dom + '</span>'
      }
      div.innerHTML = dom;
      var paragraphs = axTools.getByTagAttr("div", "paragraphtype", ptype, me.document);
      // for (var j = 0; j < paragraphs.length; j++) {
        // for (var i = 0; i < div.children.length; i++) {
          // if (div.children[i].tagName == "P") {
      var node = axTools.getByClass("paragraphContent", paragraphs[paragraphs.length - 1]);
          // }
          if(node.length === 0){
            div.className = "paragraphContent";
            div.setAttribute("contenteditable", true);
            paragraphs[paragraphs.length - 1].appendChild(div);
          }else{
            for (var i = 0; i < div.children.length; i++) {
              node[node.length - 1].appendChild(div.children[i]);
            }
          }
        // }
      // }
    },
    notNeedUndo: 1
  };
};

/**
 * 删除指点健康管理段落
 * {deleteId}  删除ID
 */
AX.plugins["deletegl"] = function () {
  var me = this,
    thePlugins = "deletegl";
  me.commands[thePlugins] = {
    execCommand: function (type, deleteId) {
      var paragraphs = axTools.getByTagAttr("span", "deleteId", deleteId, me.document);
      for (var j = 0; j < paragraphs.length; j++) {
        paragraphs[j].parentElement.removeChild(paragraphs[j]);
      }
    },
    notNeedUndo: 1
  };
};

/**
 * 引入段落前校验诊断及处方
 *
 */
AX.plugins["verifyelement"] = function () {
  var me = this,
    thePlugins = "verifyelement";
  me.commands[thePlugins] = {
    execCommand: function (type, dom) {
      var obj ={};
      if(axTools.getByClass('prescription',dom).length>0){
        obj.prescription = true;
      }else obj.prescription = false;
      if(axTools.getByClass('diagnose',dom).length>0){
        var diagnoses = axTools.getByClass('diagnose',dom);
        var arrs = [];
        for(var i = 0; i < diagnoses.length; i++) {
          arrs.push(diagnoses[i].getAttribute("diagnosetype"));
        }
        obj.diagnose = true;
        obj.arrs = arrs;
      }else{
        obj.diagnose = false;
      }
      return obj;
    },
    notNeedUndo: 1
  };
};

/**
 * 清空包含的诊断和处方元素
 * {dom} 需要清空的dom节点
 * {eleType} 处方 ： prescription 、诊断 ： diagnose
 * {arrs} 诊断元素类型集合
 */
AX.plugins["removeelevalue"] = function() {
  var me = this,
    thePlugins = "removeelevalue";
  me.commands[thePlugins] = {
    execCommand: function(type, dom, eleType, arrs) {
      if($(dom).find("." + eleType).length != 0) {
        if(eleType === "diagnose") {
          var diagnose = $(dom).find(".diagnose"); // 诊断元素集合
          for(var i = 0; i < diagnose.length; i++) {
            var diagType = diagnose[i].getAttribute("diagnosetype");
            if(arrs.indexOf(diagType) > -1) {
              var parent = AX.dom.domUtils.findParent(diagnose[i], function(dom){
                return dom.className.indexOf("paragraphele")>-1;
              })
              $(diagnose[i]).remove();
              if(parent.innerText.replace(/\s+/g,"").replace(/\u200B/g,'') == "") { // 避免出现空段落
                $(parent).remove();
              }
            }
          }
        }else if(eleType === "prescription") {
          var prescription = $(dom).find(".prescription"); // 处方集合
          if(prescription.length > 0) {
            for(var i = 0; i < prescription.length; i++) {
              var parent = AX.dom.domUtils.findParent(prescription[i], function(dom){
                return dom.className.indexOf("paragraphele")>-1;
              })
              $(prescription[i]).remove();
              if(parent.innerText.replace(/\s+/g,"").replace(/\u200B/g,'') == "") {
                $(parent).remove();
              }
            }
          }
        }
      }
      return dom;
    },
    notNeedUndo: 1
  }
}


/**
 * 根据段落类型，引用段落内容
 * {quoteDom}  引入的内容集合
 * {paratype}  段落类型
 * {actionType} 引入方式  1 替换 other 追加
 */
AX.plugins["quoteparagraph"] = function () {
  var me = this,
    thePlugins = "quoteparagraph";
  me.commands[thePlugins] = {
    execCommand: function (type, quoteDom, paratype, actionType) {
      var outer = "";
      var cloneDom = [];
      var notEditEles = [
        "select", "checkbox", "radio", "haveornot", "datedomain", "paragraphele"
      ]
      for(var j = 0; j < quoteDom.length; j++) {
        cloneDom.push($(quoteDom[j]).clone()[0]);
      }
      quoteDom = cloneDom;
      for (var j = 0; j < quoteDom.length; j++) {
        // 清除引用按钮
        $(quoteDom[j]).find(".quoteBtn").remove();
        $(quoteDom[j]).find(".ctrl-bg").removeClass("stain-clear").removeClass("view-model");
        // 段落改为可编辑
        for (
          var i = 0;
          i < quoteDom[j].querySelectorAll(".paragraphContent").length;
          i++
        ) {
          var item = quoteDom[j].querySelectorAll(".paragraphContent")[i];
          item.setAttribute("contenteditable", true);

        }
        // 元素改为可编辑
        for (var i = 0;i < quoteDom[j].querySelectorAll(".ctrl-value").length;i++) {
          var item = quoteDom[j].querySelectorAll(".ctrl-value")[i];
          var parent = AX.dom.domUtils.findParent(
            item,
            function (dom) {
              return (
                axTools.hasClass(dom, "ctrl-bg")
              );
            },
            true
          );
          var axplugins = parent && parent.getAttribute("axplugins");
          if(notEditEles.indexOf(axplugins) > -1) {
            item.setAttribute("contenteditable", false);
          }else{
            item.setAttribute("contenteditable", true);
          }
        }
        if(j != 0) {
          quoteDom[0].innerHTML += quoteDom[j].innerHTML
        }
      }
      $(quoteDom[0]).find("input").removeAttr("disabled"); // input改为可编辑
      // for(var i = 1; i < quoteDom[0].querySelectorAll(".paragraphContent").length; i++) {
      //   quoteDom[0].querySelectorAll(".paragraphContent")[0].innerHTML += quoteDom[0].querySelectorAll(".paragraphContent")[i].innerHTML
      //   quoteDom[0].querySelectorAll(".paragraphContent")[i].parentElement.removeChild(quoteDom[0].querySelectorAll(".paragraphContent")[i])
      // }
      quoteDom[0] = axTools.mergeParagraphContent(quoteDom[0]);
      quoteDom[0] = axTools.clearBaseElem(quoteDom[0]);
      outer = quoteDom[0].outerHTML;
      var newDom = document.createElement("div");
      newDom.innerHTML = outer;//quoteDom[0].outerHTML;
      // newDom.children[0].innerHTML = outer;
      // outer = newDom.innerHTML;
      if (actionType == 1) {
        me.execCommand("replaceparagraph", {
          type: paratype,
          content: outer,
        });
      } else {
        me.execCommand("appendparagraphcontent", {
          type: paratype,
          content: outer,
        });
      }
    },
    notNeedUndo: 1
  };
};

/**
 * 添加 文书既往史内容
 * {deleteId}  删除ID
 */
AX.plugins["insertthirdpasthistory"] = function () {
  var me = this,
    thePlugins = "insertthirdpasthistory";
  me.commands[thePlugins] = {
    execCommand: function (type, list) {
      var isInerted = $(me.document).find('.my-third-history').length > 0
      isInerted && $(me.document).find('.my-third-history').remove()
      var html = "";
      for(var i = 0; i < list.length; i++) {
        html += "<span style='margin-right: 8px' class='third-pat'>" + list[i].name + " 确诊时间：" + list[i].confDate + "</span>"
        // if(i !== list.length - 1) html += "<br>"
      }
      // if (isInerted) {
      //   $(me.document).find('.my-third-history').html(html)
      //   return
      // }
      html = '<span class="my-third-history"><br />' + html + '</span>'
      var hisParagraph = axTools.getByTagAttr("div", "paragraphtype", "PT_jws", me.document);
      hisParagraph = hisParagraph[hisParagraph.length - 1];
      if (!hisParagraph) {
        return
      }
      var parContent = axTools.getByClass("paragraphContent", hisParagraph);
      var title = $(parContent).find("strong.ctrl-value").prop('outerHTML');
      var paraContentHtml = parContent[parContent.length - 1].innerHTML.replace(/(&nbsp;|\u200B)/g, '').trim()
      var isTitleOnly = paraContentHtml ==  title
      // parContent[parContent.length - 1].innerHTML = parContent[parContent.length - 1].innerHTML + (title.length > 0?title[0].outerHTML:"") + html;
      if (html) {
        parContent[parContent.length - 1].innerHTML += html
      }
    },
    notNeedUndo: 1
  };
};

/**
 * 更新第三方既往史
 */

AX.plugins['refreshhistory'] = function () {
  var me = this,
    thePlugins = 'refreshhistory';
  me.commands[thePlugins] = {
    execCommand: function () {
      typeof me.options.refreshHistoryMethod == 'function' ? me.options.refreshHistoryMethod() : alert(me.getLang('ax.configRrefreshHistoryMethod'));

    }
  };
};

/**
 * 更新第三方既往史
 */

AX.plugins['highbloodfollowup'] = function () {
  var me = this,
    thePlugins = 'highbloodfollowup';
  me.commands[thePlugins] = {
    execCommand: function () {
      typeof me.options.highBloodFollowUpMethod == 'function' ? me.options.highBloodFollowUpMethod() : alert(me.getLang('ax.configRrefreshHistoryMethod'));

    }
  };
};


/**
 * 插入健康教育, 主要为了兼容留痕模式
 */
AX.plugins["insertfreetext"] = function () {
  var me = this,
    thePlugins = "insertfreetext";
  me.commands[thePlugins] = {
    execCommand: function (type, str) {
      if(me.options.editorModel === "mark") {
        var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
        var name = me.options.userInfo.name;
        str = '<span class="editor-new-add-text editor-free-text" user="' + name + '" time="' + time + '">' + str + '</span>'
      }
      me.execCommand("inserthtml", str);
    },
    notNeedUndo: 1
  };
};

/* eslint-disable */

/**
 * 处方元素
 * @command prescription
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'prescription');
 * ```
 */
AX.plugins['prescription'] = function () {
	var me = this,
		thePlugins = 'prescription';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			if(axTools.getByClass('prescription',me.document).length>0){
				alert(me.getLang('ax.prescriptionRepeatTip'));
				return;
			}
			// var id=axTools.uuidv4();
			// var str='<span class="ctrl-bg ctrl-field prescription no-border" id="'+id+'" title="'+me.getLang('ax.prescriptionTitle')+'" style="display:block;float:left" attrs="{&quot;id&quot;:&quot;'+id+'&quot;,&quot;name&quot;:&quot;'+me.getLang('ax.prescriptionTitle')+'&quot;}" axPlugins="'+thePlugins+'">'
			// 	   +'	<span class="ctrl-value">'+me.getLang('ax.prescriptionContent')+'</span>'
			// 	   +'</span><span style="display:block;clear:both;"></span>'
			// me.execCommand('inserthtml',str)
			axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:700px;height:360px;',
				dialogUrl: 'dialogs/extends/prescription.html'
			});
		}
	};
	// var popup = axTools.makePopup({
	// 	me: me,
	// 	type: thePlugins,
	// 	editFunc: typeof me.options.prescriptionMethod == 'function' ? me.options.prescriptionMethod : function(){alert(me.getLang('ax.configPrescriptionMethod'));}
	// });
	// popup.render();

	// me.addListener('mouseover', function (t, evt) {
	// 	axTools.commonEditTip(thePlugins,me,popup,evt);
	// });
};

/**
 * 处方元素
 * @command showprescription
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'showprescription');
 * ```
 */
AX.plugins['showprescription'] = function () {
	var me = this,
		thePlugins = 'showprescription';
	me.commands[thePlugins] = {
		execCommand: function (type,str) {
			var elems = axTools.getByClass('prescription',me.document);
			try{
				me.undoManger.disconnect(); // 刷新宏元素时，暂停撤回监听
			}catch(e){console.log(e)}
			for (var i = 1;i < elems.length; i++) {
				elems[i].parentElement.removeChild(elems[i]);
			}
			var prescriptionCtrlVal=axTools.getByClass('ctrl-value',elems[0])[0];
			// 刷新处方留痕处理
			if(me.options.editorModel === "mark") {
				var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
				var name = me.options.userInfo.name;
				var oldVal = elems[0].getAttribute("oldval");
				oldVal = oldVal.replace(/&nbsp;/g, ' ');
				str = str.replace(/&nbsp;/g, ' ');
				if(oldVal === str) {
					return;
				}else if(oldVal === "" && oldVal !== null) {
					str = '<span class="editor-new-add-text editor-free-text show-block" user="' + name + '" time="' + time + '">' + str + '</span>';
				}else if(oldVal !== str && oldVal !== "" && oldVal !== null) {
					str = '<span class="editor-mark-del-text editor-free-text show-block" contenteditable="false" user="' + name + '" time="' + time + '">' + oldVal + '</span><span class="editor-new-add-text editor-free-text">' + str + '</span>';
				}
			}
			prescriptionCtrlVal.innerHTML=str;
			axTools.valueChange(prescriptionCtrlVal)
			try{
				me.undoManger.reset();
				me.undoManger.reObserve(); // 宏元素更新后，重新监听撤回
			}catch(e){console.log(e)}
		}
	};
};

/**
 * 刷新处方元素
 * @command refreshprescription_out
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'refreshprescription_out');
 * ```
 */
AX.plugins['refreshprescription_out'] = function () {
	var me = this,
		thePlugins = 'refreshprescription_out';
	me.commands[thePlugins] = {
		execCommand: function () {
			if(axTools.getByClass('prescription',me.document).length>0){
        // var str = '<table cellspacing="0" cellpadding="0"><tbody><tr class="firstRow"><td width="20"><span class="cirleNum">1</span></td><td width="230">葡萄糖注射液</td><td width="160" align="right">5% 500.0ml/袋</td><td width="100" align="right">1.0袋</td><td width="20" class="topCombine"></td><td width="150" rowspan="3">静滴 qdx1天</td></tr><tr><td></td><td>丹参注射液</td><td align="right">10ml/支</td><td align="right">1.0袋</td><td class="middleCombine"></td></tr><tr><td></td><td>乳糖酸阿奇霉素注射液</td><td align="right">0.125g 2.5ml/支</td><td align="right">1.0支</td><td class="bottomCombine"></td></tr><tr><td><span class="cirleNum">2</span></td><td>葡萄糖氯化钠注射液</td><td align="right">5% 500.0ml/袋</td><td align="right">1.0袋</td><td class="topCombine"></td><td rowspan="2">静滴 qdx1天</td></tr><tr><td></td><td>注射用头孢曲松钠粉针剂</td><td align="right">2g/瓶</td><td align="right">2.0瓶</td><td class="bottomCombine"></td></tr><tr><td><span class="cirleNum">3</span></td><td>23价肺炎球菌多糖疫苗(进口)</td><td align="right">0.5ml/支</td><td align="right">1.0支</td><td class="singleCombine"></td><td>肌注 alwaysx1天</td></tr><tr><td width="20"><span class="cirleNum">4</span></td><td width="231">三金片(薄衣片)</td><td colspan="4">3.5gx72片/盒x1盒</td></tr><tr><td></td><td align="right">用法：</td><td colspan="4">10.5g tidx1天 口服</td></tr><tr><td><span class="cirleNum">5</span></td><td>云南白药胶囊</td><td colspan="4">0.25gx16粒/盒x1盒</td></tr><tr><td></td><td align="right">用法：</td><td colspan="4">0.25g qidx1天 口服</td></tr></tbody></table>';
        // var str = '<table cellspacing="0" cellpadding="0"><thead><tr><th width="20"></th><th width="230">药瓶名称</th width="230"><th width="160">规格</th><th width="100">用量</th><th width="20"></th><th width="150">用法</th><th width="150">频次</th width="150"></tr></thead><tbody><tr class="firstRow"><td width="20"><span class="cirleNum">1</span></td><td width="230">葡萄糖注射液</td><td width="160" align="right">5% 500.0ml/袋</td><td width="100" align="right">1.0袋</td><td width="20" class="topCombine"></td><td width="150" rowspan="3" align="center">静滴</td><td width="150" rowspan="3" align="center">每日两次</td></tr><tr><td></td><td>丹参注射液</td><td align="right">10ml/支</td><td align="right">1.0袋</td><td class="middleCombine"></td></tr><tr><td></td><td>乳糖酸阿奇霉素注射液</td><td align="right">0.125g 2.5ml/支</td><td align="right">1.0支</td><td class="bottomCombine"></td></tr><tr><td><span class="cirleNum">2</span></td><td>葡萄糖氯化钠注射液</td><td align="right">5% 500.0ml/袋</td><td align="right">1.0袋</td><td class="topCombine"></td><td rowspan="2" align="center">静滴</td><td rowspan="2" align="center">每日两次</td></tr><tr><td></td><td>注射用头孢曲松钠粉针剂</td><td align="right">2g/瓶</td><td align="right">2.0瓶</td><td class="bottomCombine"></td></tr><tr><td><span class="cirleNum">3</span></td><td>23价肺炎球菌多糖疫苗(进口)</td><td align="right">0.5ml/支</td><td align="right">1.0支</td><td class="singleCombine"></td><td align="center">肌注</td><td align="center">每日一次</td></tr><tr><td width="20"><span class="cirleNum">4</span></td><td width="231">云南白药胶囊</td><td align="right">3.5gx72片/盒x1盒</td><td align="right">3片</td><td class="singleCombine"></td><td align="center">口服</td><td align="center">每日三次</td></tr></tbody></table>';
        // var str = '<table cellspacing="0" cellpadding="0"><tr><td width="20"><span class="cirleNum">1</span><td width="230">厄贝沙坦片</td><td width="160" align="right">150mg*7片/盒</td><td width="100" align="right">10003</td><td width="20" class=""></td><td width="150" rowspan="1">口服 x 一日一剂，早晚分服</td></tr></table>';
        // me.execCommand('showprescription', str);
        typeof me.options.refreshPrescriptionMethod == 'function' ? me.options.refreshPrescriptionMethod() : alert(me.getLang('ax.configRefreshPrescriptionMethod'));
      } else {
        if (me.execCommand('isselforders')) {
          typeof me.options.refreshPrescriptionMethod == 'function' ? me.options.refreshPrescriptionMethod() : alert(me.getLang('ax.configRefreshPrescriptionMethod'));
        } else {
          alert(me.getLang('ax.noPrescription'));
        }
      }
		}
	};
};


/**
 * 刷新医嘱元素
 * @command refreshprescription_in
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'refreshprescription_in');
 * ```
 */
AX.plugins['refreshprescription_in'] = function () {
	var me = this,
		thePlugins = 'refreshprescription_in';
	me.commands[thePlugins] = {
		execCommand: function () {
			if(axTools.getByClass('prescription',me.document).length>0){
				typeof me.options.refreshPrescriptionMethod == 'function' ? me.options.refreshPrescriptionMethod() : alert(me.getLang('ax.configRefreshPrescriptionMethod'));
			}else{
				alert(me.getLang('ax.noPrescription'));
			}
		}
	};
};
/* eslint-disable */

function printHandler(me, model, controler) {
  if (!LODOP) {
    alert(me.getLang("ax.noLodop"));
    return;
  }
  if(!(LODOP.SocketEnable && LODOP.SocketOpened)) {
    alert(me.getLang("ax.noLodop"));
    return;
  }
  controler = controler || AX.pageControler;

  setTimeout(function() {
    // 打印 start
    // ===============================

    var timer;
    var count;

    var config = controler.getPrints();
    var hiddenElems = [];
    for (var i = 0; i < config.elems.length; i++) {
      hiddenElems = hiddenElems.concat(preprocessHandler(config.elems[i]));
    }
    function WaitForPrintResult(pid) {
      count = count + 1;
      timer = setTimeout("WaitForPrintResult(" + pid + ")", 1000);
      if (LODOP.GET_VALUE("PRINT_STATUS_OK", pid)) {
        clearTimeout(timer);
        console.log("打印成功！");
        me.options.printResult && me.options.printResult(1);
      } else if (!LODOP.GET_VALUE("PRINT_STATUS_EXIST", pid) && count > 0) {
        clearTimeout(timer);
        console.log("打印任务被删除！");
        me.options.printResult && me.options.printResult(2);
      } else if (count > 30) {
        clearTimeout(timer);
        console.log("打印超过30秒没捕获到成功状态！");
        me.options.printResult && me.options.printResult(3);
      }
    }

    function lodopPrint(contentHtml, header, footer, papersize, pagemargin) {
      var printWhite = axTools.cm2px(me.options.printWhiteCm), // 打印预留上下左右空白
        paperWidth = axTools.cm2px(papersize[0]),
        paperHeight = axTools.cm2px(papersize[1]),
        marginTop = axTools.cm2px(pagemargin[0]),
        marginBottom = axTools.cm2px(pagemargin[2]),
        marginLeft = axTools.cm2px(pagemargin[3]),
        marginRight = axTools.cm2px(pagemargin[1]),
        contentWidth = paperWidth - marginLeft - marginRight - printWhite,
        left = printWhite + marginLeft;

      var headerHeight = 0,
        footerHeight = 0;
      LODOP.SET_LICENSES(
        "北京联想智慧医疗信息技术有限公司",
        "BEBE8A01D6D982EB566A294D4D199065",
        "",
        ""
      );
      LODOP.PRINT_INITA(
        0, //header.length > 0 ? 0 : marginTop,
        0,
        paperWidth,
        paperHeight,
        "病历打印"
      );

      // 以纸张的边缘为计算起点
      // 注：通常情况打印机都有一个可打印区域，这个区域为打印机的走墨边界
      // 打印机之间的的这个区域是有差异的，所以使用纸张边界作为打印区域
      // 默认增加内容区域的padding值保证所有打印机的一致性
      LODOP.SET_PRINT_MODE("POS_BASEON_PAPER", true);

      //设置页眉
      if (header) {
        header.style.fontSize = "12px";
        header.style.borderBottom = "1px solid #ccc";
        headerHeight = header.offsetHeight;
        LODOP.ADD_PRINT_HTML(
          printWhite,
          left,
          contentWidth,
          headerHeight,
          header.outerHTML
        );
        LODOP.SET_PRINT_STYLEA(0, "ItemType", 1); //0--普通项 1--页眉页脚 2--页号项 3--页数项 4--多页项
      }
      if (footer) {
        footerHeight = footer.offsetHeight;
      }

      //设置正文内容
      var contentHeight =
        paperHeight -
        (headerHeight > 0 ? headerHeight : marginTop) -
        (footerHeight > 0 ? footerHeight : marginBottom) -
        printWhite * 2;
      LODOP.ADD_PRINT_HTML(
        headerHeight > 0 ? headerHeight + printWhite : printWhite,
        left,
        contentWidth,
        contentHeight,
        contentHtml
      );
      LODOP.SET_PRINT_STYLEA(0, "ItemType", 4);
      LODOP.SET_PRINT_STYLEA(0, "Vorient", 3);
      LODOP.SET_PRINT_STYLEA(0, "TextNeatRow", true);

      //设置页脚
      if (footer) {
        var footerTop =
          paperHeight - (footerHeight > 0 ? footerHeight : marginBottom);
        footer.style.fontSize = "12px";
        footer.style.borderTop = "1px solid #ccc";
        LODOP.ADD_PRINT_HTML(
          footerTop,
          left,
          contentWidth,
          footerHeight,
          footer.outerHTML
        );
        LODOP.SET_PRINT_STYLEA(0, "ItemType", 1);
        LODOP.SET_PRINT_STYLEA(0, "Vorient", 1); //0--上边距锁定 1--下边距锁定 2--垂直方向居中 3--上边距和下边距同时锁定（中间拉伸），缺省值是0
      }

      //设置页码
      LODOP.ADD_PRINT_TEXT(paperHeight - 16, paperWidth / 2, 180, 20, "#/&");
      LODOP.SET_PRINT_STYLEA(0, "ItemType", 2);
      LODOP.SET_PRINT_STYLEA(0, "Vorient", 1);

      if (model == "preview") {
        // 预览
        LODOP.PREVIEW();
      } else {
        // 直接打印
        LODOP.SET_PRINT_MODE("CATCH_PRINT_STATUS", true);
        var job = LODOP.PRINT();
        WaitForPrintResult(job);
      }
    }

    function start() {
      var config = window._printRuntime(
        $,
        me.options,
        me.document.getElementsByTagName("body")[0]
      );
      var content = config.content;
      var header = config.header;
      var footer = config.footer;
      var papersize = config.papersize;
      var pagemargin = config.pagemargin;
      var contentHtml =
        "<!DOCTYPE html>" +
        "<html>" +
        "	<head>" +
        '		<meta charset="utf-8"/>' +
        '		<link rel="stylesheet" href="' +
        me.options.AXEDITOR_HOME_URL +
        'themes/default/css/ax.ctrl.css" >' +
        '		<link rel="stylesheet" href="' +
        me.options.AXEDITOR_HOME_URL +
        'themes/default/css/axeditor.css" >' +
        '		<style type="text/css">span.ctrl-field{padding:0;}input[type="checkbox"],input[type="radio"]{vertical-align: -4px;}.error{color:#666;background:none!important;}.noprint{display:none;}.view{padding:0;word-wrap:break-word;cursor:text;}body{font-family:sans-serif;font-size:14px;}p{margin:5px 0;}.selectTdClass{background-color:#edf5fa !important}table.noBorderTable td,table.noBorderTable th,table.noBorderTable caption{border:1px dashed #ddd !important}table{margin-bottom:10px;border-collapse:collapse;display:table;}td,th{padding: 5px 10px;border: 1px solid #DDD;}caption{border:1px dashed #DDD;border-bottom:0;padding:3px;text-align:center;}th{border-top:1px solid #BBB;background-color:#F7F7F7;}table tr.firstRow th{border-top-width:2px;}.ue-table-interlace-color-single{ background-color: #fcfcfc; } .ue-table-interlace-color-double{ background-color: #f7faff; }td p{margin:0;padding:0;}.ax-editor-print-page .ctrl-field:after,.ax-editor-print-page .ctrl-field:before,.ax-editor-print-page .text-mark:before,.ax-editor-print-page .text-mark:after{content:\'\'!important;}.ax-editor-print-page .ctrl-value>span{background-color:transparent!important}.ax-editor-print-page .ctrl-value:empty:before{content:none}.ax-editor-print-page .ctrl-field:hover{background-color:transparent}.ax-editor-print-page .fill-page-num-node{z-index:999}.ax-editor-fill-node1{border-bottom: none;}.ax-editor-break-table{overflow: hidden;}</style>' +
        '		<script src="' +
        me.options.AXEDITOR_HOME_URL +
        'axeditor.parse.min.js"></script>' +
        "	</head>" +
        '	<body class="ax-editor-print-page" style="padding: 0;margin:0;">' +
        content.innerHTML +
        "		<script type=\"text/javascript\">var ctrls=document.getElementsByClassName('ctrl-value');for(var i=0;i<ctrls.length;i++){ctrls[i].setAttribute('contenteditable',false);}</script>" +
        "	</body>" +
        "</html>";

      lodopPrint(contentHtml, header, footer, papersize, pagemargin);
    }
    function preprocessHandler(node) {
      var clearElems = [];
      // 1. 清除focus样式
      var elems = node.getElementsByClassName("plugins-bg-foucs");
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        axTools.removeClass(elem, "plugins-bg-foucs");
      }
      // 2. 根据标签上的isPrint属性来过滤不可打印的内容
      var elems = $("span[attrs*='isPrint']", node);
      var elems1 = $("div[attrs*='isPrint']", node);
      clearElems = hiddenElem(elems);
      clearElems = clearElems.concat(hiddenElem(elems1));
      return clearElems;
    }

    function hiddenElem(elems) {
      var clearElems = [];
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) {
          continue;
        }
        var isprint = elem.getAttribute("isprint");
        if (isprint === "false") {
          // elem.style.visibility = "hidden";
          elem.style.display = "none";
          clearElems.push(elem);
        }
      }
      return clearElems;
    }
    function newPrint(controler) {
      var copyBody = $(me.document.body.parentElement).clone(true)[0];
      if(copyBody.querySelectorAll("body").length > 1) {
        copyBody.querySelectorAll("body")[0].innerHTML = copyBody.querySelectorAll("body")[1].innerHTML;
        copyBody.querySelectorAll("body")[1].parentElement.removeChild(copyBody.querySelectorAll("body")[1]);
      }
      function getSpace(str) {
        var ret = "";
        for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
            ret += "&#32;";
          } else {
            ret += "&#12288;";
          }
        }
        return ret;
      }

      function replacePlaceholder(str) {
        var wrapper = me.document.createElement("div");
        wrapper.innerHTML = str;
        var elems = $("*[placeholder]", wrapper);
        for (var i = 0; i < elems.length; i++) {
          var elem = elems[i];
          var placeholder = elem.getAttribute("placeholder");
          if (placeholder && !elem.innerHTML) {
            elem.innerHTML = getSpace(placeholder);
          }
        }
        return wrapper.innerHTML;
      }

      function mergePrintClass() {
        var str = '<style>'+
            '.ax-page-wrapper {border: none;} '+
            '::-webkit-scrollbar {display: none;} '+
          '</style>';
        return str;
      }

      function mergePrintStyle(contentStr) {
        copyBody.children[1].innerHTML = '<div>' + mergePrintClass() + replacePlaceholder(contentStr) + '</div>';
        // var parContent = axTools.getByClass("paragraphContent", copyBody);
        // var regx = /div/gm;
        // for(var i = 0; i < parContent.length; i++) {
        //   if(parContent[i].tagName === "DIV" && parContent[i].className.indexOf("paragraphele") == -1 && parContent[i].parentElement) {
        //     var inhtml = parContent[i].innerHTML;
        //     parContent[i].outerHTML = parContent[i].outerHTML.replace(regx, "p")
        //     parContent[i].innerHTML = inhtml;
        //   }
        // }
        // if(copyBody.querySelectorAll("body").length > 1) {
        //   copyBody.querySelectorAll("body")[0].innerHTML = copyBody.querySelectorAll("body")[1].innerHTML;
        //   copyBody.querySelectorAll("body")[1].parentElement.removeChild(copyBody.querySelectorAll("body")[1]);
        // }
        return copyBody.outerHTML;
        // return (
        //   "<!DOCTYPE html>" +
        //   "<html>" +
        //   "	<head>" +
        //   '		<meta charset="utf-8"/>' +
        //   '		<link rel="stylesheet" href="' +
        //   me.options.AXEDITOR_HOME_URL +
        //   'themes/default/css/ax.ctrl.css" >' +
        //   '		<link rel="stylesheet" href="' +
        //   me.options.AXEDITOR_HOME_URL +
        //   'themes/default/css/axeditor.css" >' +
        //   '		<script src="' +
        //   me.options.AXEDITOR_HOME_URL +
        //   'axeditor.parse.min.js"></script>' +
        //   '	<body class="ax-editor-print-page" style="padding: 0;margin:0;">' +
        //   contentStr +
        //   "		<script type=\"text/javascript\">var ctrls=document.getElementsByClassName('ctrl-value');for(var i=0;i<ctrls.length;i++){ctrls[i].setAttribute('contenteditable',false);}</script>" +
        //   "	</body>" +
        //   "</html>"
        // );
      }

      // 打印对于元素的属性支持
      // 某些元素打印时不需要打印出来
      // ===============================


      function pushOne(elem) {
        // 处理元素
        // 设置为不可打印的进行隐藏处理
        // 添加后进行还原


        LODOP.NewPage();
        LODOP.ADD_PRINT_HTM(
          0,
          0,
          "100%",
          "100%",
          mergePrintStyle(elem.outerHTML)
        );
        var paperSize = "";
        var sizeArr = me.options.papersize;
        for(var l = 0; l < sizeArr.length; l++) {
          if(sizeArr[l].value.toString() === me.queryCommandValue("papersize").toString()) {
            paperSize = sizeArr[l].name;
            break;
          }
        }

        (paperSize === 'A4' || paperSize === 'A5') && LODOP.SET_PRINT_PAGESIZE(0, 0, 0, paperSize||'');
        LODOP.SET_PRINT_STYLEA(0, "ItemType", 4);
        LODOP.SET_PRINT_STYLEA(0, "Vorient", 3);
        LODOP.SET_PRINT_STYLEA(0, "TextNeatRow", true);
        LODOP.SET_PRINT_STYLEA(0, "FontSize", 14);
        LODOP.SET_PRINT_STYLEA(0, "FontName", "sans-serif");


      }

      LODOP.SET_LICENSES(
        "北京联想智慧医疗信息技术有限公司",
        "BEBE8A01D6D982EB566A294D4D199065",
        "",
        ""
      );
      LODOP.PRINT_INITA(
        0,
        0,
        config.paperSize.width,
        config.paperSize.height,
        "病历打印"
      );

      for (var i = 0; i < config.elems.length; i++) {
        var content = config.elems[i].querySelectorAll(".ax-page-content")[0];
        if(content.innerHTML === "" || content.innerHTML === "<br>" || content.innerHTML.replace(/\u200B/g, "") === "") continue;
        pushOne(config.elems[i]);
      }
      // 恢复隐藏元素
      if (hiddenElems && hiddenElems.length) {
        for (var i = 0; i < hiddenElems.length; i++) {
          var elem = hiddenElems[i];
          // elem.style.visibility = "visible";
          if(elem.tagName == "DIV") {
            elem.style.display = "block";
          }else{
            elem.style.display = "inline";
          }
        }
      }
      if (model == "preview") {
        // 预览
        LODOP.PREVIEW();
        // LODOP.PRINT_DESIGN();
      } else {
        me.options.printStatus && me.options.printStatus('start');
        // 直接打印
        var printRsl = LODOP.PRINT();
        console.log("直接打印结果：", printRsl);
        if (!printRsl) {
          me.options.printStatus && me.options.printStatus('timeout');
        }
      }
      if (LODOP.CVERSION) {
        CLODOP.On_Return = function(taskId, value) {
          console.log('打印结果', value);
          me.options.printStatus && me.options.printStatus('end');
          if (value != "0" && value) {
            me.options.printResult && me.options.printResult(1);
          } else {
            me.options.printResult && me.options.printResult(0);
          }
        };
      }
    }
    // 留出时间保证分页
    setTimeout(function (){
      newPrint(controler);
    }, 200)
  }, 50);
}

function printHandler(me) {
  var $style = '<style>*:focus{outline:0}html{-webkit-print-color-adjust:exact;color-adjust:exact;font-size:14px;background:#f0f0f0}body{position:relative;margin:0;background-repeat:repeat}body.view{overflow-x:hidden;background:#fff;overflow-y:scroll}table tr td{word-break:break-word}td,th,p,p>span{line-height:1.5rem!important;color:#000}input[type="checkbox"],input[type="radio"]{vertical-align:-1px}strike{text-decoration:none}.noMarginTop{margin-top:0!important}.noMarginBottom{margin-bottom:0!important}.focusCtrl input[type="radio"].focusBox:after,.focusCtrl input[type="checkbox"].focusBox:after{content:"";display:block;width:15px;height:15px;margin-left:-3px;margin-top:-2px;border:1px dashed blue}.no-border{border:none!important}.ax-editor-hidden-block,.sensitiveWords{display:none!important}.show-block{display:block}.hide-mark{display:none}.editor-new-add-text.hide-mark,.ax-editor-print-page .editor-new-add-text{display:inline;text-decoration:none}.editor-free-text-hide{display:none!important}.ax-editor-number-select{padding:0 10px;border:0;font-size:14px;background:transparent;appearance:none;-moz-appearance:none;-webkit-appearance:none}.ax-editor-number-select::-ms-expand{display:none}.ax-editor-init-page,.ax-editor-init-page-header,.ax-editor-init-page-footer{visibility:hidden;position:absolute!important;left:-10000px;top:-10000px}.ax-editor-page-header,.ax-editor-page-footer{position:relative;border-bottom:1px solid #ccc;font-size:12px;color:#808080}.ax-editor-page-footer{border-top:1px solid #ccc;border-bottom:0}.ax-editor-page-header.focus,.ax-editor-page-footer.focus{color:#333!important;border:1px solid #aaa}.ax-editor-page-header.focus span,.ax-editor-page-footer.focus span{color:#333!important}.ax-editor-header-record,.ax-editor-footer-record{display:none}.fill-page-num-node{position:absolute;bottom:20px;width:100%;height:20px;line-height:20px;font-size:12px;color:#333;text-align:center;z-index:-1}.ax-editor-print-page .fill-page-num-node{z-index:999}.ax-editor-break-table{overflow:hidden}.ax-editor-break-table table{width:100%;margin-bottom:0}.ax-editor-fill-node{position:relative;margin:0;border-bottom:1px solid #e6c239}.ax-editor-print-page .ax-editor-fill-node{border-bottom:0}.ax-editor-fill-node.top{border-bottom:0}.ax-editor-last-fill-node{position:absolute;bottom:1px}.ax-editor-last-fill-node .ax-editor-page-footer{top:auto!important}.error{color:#fff;background:#fec16e!important}.error .plugins-bg-foucs{color:#fff;background:#fec16e!important}.plugins-bg-foucs{color:#000;background:yellow!important}.combine-bg{background:#eff8ff!important;border:1px dotted #00f}.combine-bg:hover{background:#d9eafd!important}.combine-bg.plugins-bg-foucs{background:#59eee8!important}.ctrl-bg .ctrl-value{padding:0 5px;display:inline}.diagnose .ctrl-value{display:inline-block}span.ctrl-field{border-bottom:1px solid #525252;text-indent:0}span.ctrl-field:before{color:#00f;padding-right:3px}.ctrl-value .checkbox-underline-wrapper:first-child{position:relative;left:-4px}.checkbox-bg .ctrl-value{display:inline}span.diagnose.ctrl-field:before{padding:0}span.prescription.ctrl-field:before{padding:0}span.ctrl-field:after{color:#00f;padding-left:3px}.ctrl-field.view-model{border:0}.text-mark:before{color:#00f;padding-right:3px;content:"("}.text-mark:after{color:#00f;padding-right:3px;content:")"}span.diagnose.ctrl-field:after{padding:0}span.prescription.ctrl-field:after{padding:0}.view-model.stain-clear:before{content:""!important}.view-model.stain-clear:after{content:""!important}.view-model.stain-hide:before{visibility:hidden}.view-model.stain-hide:after{visibility:hidden}.stain0:before{content:"[";color:#00f}.stain0:after{content:"]";color:#00f}.stain1:before{content:"{";color:#00f}.stain1:after{content:"}";color:#00f}.stain2:before{content:"“";color:#00f}.stain2:after{content:"”";color:#00f}.stain0 .checkbox-underline-wrapper{border-bottom:0}.stain1 .checkbox-underline-wrapper{border-bottom:0}.stain2 .checkbox-underline-wrapper{border-bottom:0}.ax-editor-print-page .ctrl-field:after,.ax-editor-print-page .ctrl-field:before,.ax-editor-print-page .text-mark:before,.ax-editor-print-page .text-mark:after{content:""!important}.ax-editor-print-page .ctrl-value>span{background-color:transparent!important}.ax-editor-print-page td,.ax-editor-print-page th,.ax-editor-print-page p,.ax-editor-print-page p>span{color:#000}.ax-editor-print-page span.ctrl-field{border-bottom:0}.ax-editor-print-page .ctrl-value[placeWidth="true"]{visibility:hidden}.ax-editor-print-page .ctrl-value:before{content:""!important}.ax-editor-print-page .ax-editor-print-mask{filter:opacity(100)!important;opacity:1!important;background:#fff!important}.ax-editor-print-page .focusCtrl input[type="radio"].focusBox:after,.ax-editor-print-page .focusCtrl input[type="checkbox"].focusBox:after{border:0}.editor-mark-text{display:none}.editor-mark-text.on,.text-mark.on{display:inline-block}.ctrl-delete.on,.editor-mark-del-text{text-decoration:line-through;text-decoration-color:#f00;text-decoration-style:double}.ctrl-value.ctrl-modify.on,.editor-mark-modify-text,.editor-new-add-text{text-decoration:underline;text-decoration-color:#00f;text-decoration-style:double}.ax-editor-print-page .ctrl-delete.on,.ax-editor-print-page .editor-mark-del-text,.ax-editor-print-page .ctrl-value.ctrl-modify.on,.ax-editor-print-page .editor-mark-modify-text{text-decoration:none}.ax-editor-print-page .ctrl-delete.on,.ax-editor-print-page .editor-mark-del-text{display:none}.paragraphele{border-style:solid;border-width:1px;border-color:transparent;clear:both}.paragraphele p,.paragraphele div.paragraphContent{margin:0}.paragraphele div.paragraphContent{line-height:20px;position:relative}.notBorderCls:before{display:none}.notBorderCls:after{display:none}.ctrl-value{display:inline-block;min-width:16px;min-height:20px;word-break:break-all}.ctrl-value:empty{text-align:left}.ctrl-value:empty:before{content:attr(placeholder);font-size:14px;color:#999}.focusCtrlParent{background-color:#e4e4e4}.error .ctrl-value:empty:before{color:#fff}.view-model.error,.ax-editor-print-page .view-model.error{color:#666;background:transparent!important}.view-model.error .ctrl-value:empty:before,.ax-editor-print-page .view-model.error .ctrl-value:empty:before{color:#666}.ax-editor-print-page .error{color:#000;background:transparent!important}.ax-editor-print-page .ctrl-value:empty:before{content:none}span[axplugins="select"] p,span[axplugins="selectmule"] p,span[axplugins="datedomain"] p{display:inline-block}.ele-add-bgc,.ax-editor-note,.ctrl-field:hover,.stain0:hover,.stain1:hover,.stain2:hover{background-color:#efefef}.warning{background-color:yellow}.ctrl-field.prescription:hover,.ctrl-field.diagnose:hover{background:0}.ax-editor-print-page .ax-editor-note,.view-model.ax-editor-note{background:transparent}.paragraphele.ctrl-field{border:1px dashed transparent;margin:0!important}.paragraphele.ctrl-field:hover{border:1px dashed #ccc!important;background:0}div.paragraphele.ctrl-field.hidden-border{border:1px dashed transparent!important}.paragraph-border{border:1px dashed #ccc!important}.view-model.paragraphele.ctrl-field:hover,.ax-editor-print-page .paragraphele.ctrl-field:hover{border:1px dashed transparent!important}.view-model.ctrl-field:hover,.ax-editor-print-page .ctrl-field:hover{background-color:transparent}.tb-solid td,.tb-solid th{border-left:1px solid black!important;border-top:1px solid black!important}.tb-solid tr td{border-right:1px solid black!important;border-bottom:1px solid black!important}.tb-dotted td,.tb-dotted th{border-left:1px dotted black!important;border-top:1px dotted black!important}.tb-dotted tr td{border-right:1px dotted black!important;border-bottom:1px dotted black!important}.tb-hide td,.tb-hide th{border-left:none!important;border-top:none!important}.tb-hide tr td{border-right:none!important;border-bottom:none!important}.prescription table{width:auto;border-bottom:1px solid #ccc;border-left:1px solid #ccc}.prescription td{padding:8px;border-top:1px solid #ccc;border-right:1px solid #ccc}.prescription .td.topCombine::after{content:"┓";display:inline-block;color:#000}.prescription .td.middleCombine::after{content:"┫";display:inline-block;color:#000}.prescription .td.bottomCombine::after{content:"┛";display:inline-block;color:#000}.prescription .td.singleCombine{background:url(../images/singleCombine.png) no-repeat 10px center!important}.diagnoseTable td,.diagnoseTable th{border:0}.diagnose,.prescription{display:block;moz-user-select:-moz-none;-moz-user-select:none;-o-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.diagnose>.ctrl-value,.prescription>.ctrl-value{display:block}.table{border-collapse:collapse;display:block;-webkit-border-horizontal-spacing:0;-webkit-border-vertical-spacing:0;box-sizing:border-box;page-break-inside:avoid}.table .tr{display:table-row;vertical-align:inherit;border-color:inherit}.prescription{float:none!important}.prescription .tr{border-left:1px solid #ccc}.prescription .tr:last-child{border-bottom:1px solid #ccc}.prescription .th{border-top:1px solid #BBB;background-color:#f7f7f7}.prescription .table{display:table;width:100%}.th{display:table-cell;vertical-align:inherit;font-weight:bold;text-align:-internal-center;padding:5px 10px;border:1px solid #DDD;border-top:1px solid #BBB;background-color:#f7f7f7}.first .th{border-top-width:2px}.tr .td{display:table-cell;vertical-align:inherit;word-break:break-word;padding:5px 10px;border:0}.tr .td:nth-child(1){width:16px}.tr .td:nth-child(2){width:100px}.tr .td:nth-child(3){width:80px}.tr .td:nth-child(4){width:70px}.tr .td:nth-child(5){width:16px}.tr .td:nth-child(6){width:30px}.prescription .td{padding:8px;border-top:1px solid #ccc;border-right:1px solid #ccc}.ax-editor-page-dom{position:relative}.ax-editor-page-dom .ax-editor-page-footer{position:absolute;left:0;bottom:0;width:100%}p{page-break-before:avoid;page-break-after:avoid}table,figure{page-break-inside:avoid}.visibilityHidden{visibility:hidden;color:#fff;opacity:0}@media print{td,th,p,p>span{color:#000}.error{color:#000;background:transparent!important}.editor-new-add-text{text-decoration:none}.editor-mark-del-text{display:none}.ctrl-field:after,.ctrl-field:before,.text-mark:before,.text-mark:after{content:""!important}.ctrl-field:hover{background-color:transparent}.ctrl-value>span{background-color:transparent!important}.ctrl-value[placeWidth="true"]{visibility:hidden}.ax-editor-note{background:transparent}.ctrl-value:empty:before{content:none}span.ctrl-field{border-bottom:0}.ax-editor-print-mask{filter:opacity(200)!important;opacity:2!important;background:#fff!important}.ax-editor-fill-node{border-bottom:0}.paragraph-border{border:none!important}.focusCtrl input[type="radio"].focusBox:after,.focusCtrl input[type="checkbox"].focusBox:after{border:0}@page{size:A4 portrait!important;margin:0}p{orphans:3;widows:2}}.divid-after::after{content:"";position:absolute;left:0;right:0;border-bottom:1px dashed #999}.divid-before::before{content:"";position:absolute;left:0;right:0;border-bottom:1px dashed #999}.divid-line{position:absolute;left:0;right:0;border-bottom:1px dashed #999}.line-text{position:absolute}.break-separator{height:1px;line-height:1px;width:100%;position:relative;page-break-after:always!important;background:red}ul,ol{list-style-position:inside}ul li,ol li{display:block}ul li>p{display:list-item}ul li>div{display:list-item}ol li>p{display:list-item}ol li>div{display:list-item}.ctrl-value{position:relative}.invisible-wrapper{visibility:hidden;z-index:0;position:absolute;top:0}.ax-page-continue-print-wrapper{z-index:0;position:absolute;top:0;width:100%}.ax-page-wrapper{position:relative;height:auto!important;margin-bottom:20px;border:1px solid #ccc}.ax-page-header{position:relative;min-height:2px;border-bottom:1px solid #ccc;margin-bottom:1px}.ax-page-header:focus{border-style:dashed dashed solid dashed;border-width:1px;border-color:#ccc}.ax-page-header::after{content:"";position:absolute;top:-40px;right:0;height:40px;left:0}.ax-page-content{position:relative;height:auto!important}.ax-page-content>p{margin:0}.ax-page-footer{position:relative;min-height:2px;border-top:1px solid #ccc}.ax-page-footer:focus{border-style:solid dashed dashed dashed;border-width:1px;border-color:#ccc}.ax-page-footer::after{content:"";position:absolute;top:0;right:0;bottom:-20px;left:0}.ax-page-footer>p{line-height:1!important}.ax-page-pagenum{height:20px;line-height:20px;text-align:center;bottom:5px;left:0;position:absolute;width:100%}.paragraphContent{word-break:break-all}.quoteBtn{right:5px;float:left;margin:0;line-height:16px;cursor:pointer;padding:0 8px;border:1px solid #aaa;color:#aaa;transition:all .3s}.quoteBtn:hover{color:#2b4583;border:1px solid #2b4583;border-radius:4px}svg{max-width:100%}img{max-width:100%;max-height:900px}table{border-collapse:collapse}td,th{padding:5px 10px;border:1px solid #DDD}</style>'

  var $originBody = $(me.document.body.parentElement).find('body');
  var $copyBody = $(me.document.body.parentElement).clone().find('body');

  var $pageHeader = $originBody.find('.ax-page-header').eq(0);
  var $pageContent = $copyBody.find('.ax-page-content').eq(0);

  $pageContent.append($style)
  $pageHeader.append($style)
  $pageHeader.css({border: 'none', 'font-size': '12px'});
  $pageContent.css({'font-size': '12px'});
  var $paragrapheles = $pageContent.find('.paragraphele');
  for(var i = 0; i < $paragrapheles.length; i++) {
    var attrs = JSON.parse($paragrapheles.eq(i).attr('attrs'));
    if (!attrs.isPrint) {
      $paragrapheles.eq(i).css({'display': 'none'});
    }
  }

  var pageSizeMap = {
    'A4': {
      width: 794,
      height: 1123
    },
    'A5': {
      width: 561,
      height: 794
    }
  }
  var pageSize = $(me.document).find('#paperSizeHidden').val().split(',')[2] || 'A5';
  var xGap = 10;
  var yGap = 0;
  var pageWidth = pageSizeMap[pageSize].width;
  var pageHeight = pageSizeMap[pageSize].height;

  var printWidth = pageWidth - xGap * 2;
  var printHeight = pageHeight + 20

  var headerStartX = 0;
  var headerStartY = yGap;
  var headerHeight = $pageHeader.height();
  var headerWidth = printWidth;

  var headerLineStartX = 0;
  var headerLineStartY = headerHeight + 5;
  var headerLineEndX = printWidth - xGap * 3;
  var headerLineEndY = headerHeight + 5;
  var headerLineHeight = 1;

  var footerHeight = 30;
  var footerStartX = 0;
  var footerStartY = printHeight - footerHeight - 45; // 这里45本来应该是footer高度30，但是30不够高
  var footerWidth = printWidth - xGap * 2;

  var footerLineStartX = 0;
  var footerLineStartY = footerStartY - 5;
  var footerLineEndX = printWidth - xGap * 3;
  var footerLineEndY = footerStartY - 5;
  var footerLineHeight = 1

  var bodyStartX = 5;
  var bodyStartY = headerLineStartY + 10;
  var bodyHeight = printHeight - bodyStartY - (footerHeight + 3) - 30; // 最后30为留出来的富裕部分
  var bodyWidth = printWidth;

  LODOP.PRINT_INITA(10,10,561,794,"打印控件功能演示_Lodop功能_多页文档");
  LODOP.SET_PRINT_PAGESIZE(0, 0, 0, pageSize);

  LODOP.ADD_PRINT_HTM(headerStartY, headerStartX, headerWidth, headerHeight, $pageHeader.prop("outerHTML"));
  LODOP.SET_PRINT_STYLEA(0,"ItemType",1);

  LODOP.ADD_PRINT_LINE(headerLineStartY, headerLineStartX, headerLineEndY, headerLineEndX, 2, headerLineHeight);
  LODOP.SET_PRINT_STYLEA(0,"ItemType",1);

  LODOP.ADD_PRINT_HTM(bodyStartY, bodyStartX, bodyWidth, bodyHeight, $pageContent.prop("outerHTML"));
  LODOP.SET_PRINT_STYLEA(0,"FontSize",1);
  LODOP.SET_PRINT_STYLEA(0,"ItemType",4);
  LODOP.SET_PRINT_STYLEA(0,"Horient",3);
  LODOP.SET_PRINT_STYLEA(0,"Vorient",3);

  LODOP.ADD_PRINT_LINE(footerLineStartY, footerLineStartX, footerLineEndY,footerLineEndX, 2, footerLineHeight);
  LODOP.SET_PRINT_STYLEA(0,"ItemType",1);

  LODOP.ADD_PRINT_TEXT(footerStartY, footerStartX, footerWidth, footerHeight, "#");
  LODOP.SET_PRINT_STYLEA(0,"ItemType",2);
  LODOP.SET_PRINT_STYLEA(0,"Alignment",2);

  LODOP.PREVIEW();
}

/**
 * 预览
 * @command preview
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'preview' );
 * ```
 */
AX.commands["printpreview"] = {
  execCommand: function(model, controler) {
    if (!axTools.beforeSaveCheck(this, true)) {
      return false;
    }
    if (typeof this.options.printPreviewMethod == "function") {
      this.options.printPreviewMethod();
    }else{
      printHandler(this, "preview", controler);
    }
  },
  notNeedUndo: 1
};
//  续打用
AX.commands["printpreview1"] = {
  execCommand: function(model, controler) {
    if (!axTools.beforeSaveCheck(this, true)) {
      return false;
    }
    printHandler(this, "preview", controler);
  },
  notNeedUndo: 1
};

/**
 * 打印
 * @command print
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'print' );
 * ```
 */
AX.commands["print"] = {
  execCommand: function(model, controler) {
    controler = controler || AX.pageControler;
    if (!axTools.beforeSaveCheck(this, true)) {
      return false;
    }
    if (typeof this.options.printMethod == "function") {
      this.options.printMethod();
    } else {
      this.execCommand("doprint", controler);
    }
  },
  notNeedUndo: 1
};

AX.plugins["doprint"] = function() {
  var me = this;
  this.commands["doprint"] = {
    execCommand: function(model, controler) {
      controler = controler || AX.pageControler;
      if(controler === "printHistory") { // 单独处理历史诊断打印问题
        var papersize = me.queryCommandValue("papersize"),
        paperWidth = axTools.cm2px(papersize[0]),
        paperHeight = axTools.cm2px(papersize[1]),
        pagemargin = me.queryCommandValue("pagemargin"),
        marginTop = axTools.cm2px(pagemargin[0]),
        marginBottom = axTools.cm2px(pagemargin[2]),
        marginLeft = axTools.cm2px(pagemargin[3]),
        marginRight = axTools.cm2px(pagemargin[1])
        var copyElem = $(me.body).clone()[0];
        me.body.innerHTML = "";
        controler = new PageControler(me, {height: paperHeight, width: paperWidth}, {bottom: marginBottom,
          left: marginLeft,
          right: marginRight,
          top: marginTop});
        controler.setContent(copyElem.innerHTML);
        $(me.document).find(".ax-page-wrapper").css("width", "auto");
      }
      printHandler(this, "print", controler);
    },
    notNeedUndo: 1
  };
};

/**
 * 打印
 * @command doprint
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'doprint' );
 * ```
 */
AX.plugins["doprint1"] = function() {
  this.commands["doprint1"] = {
    execCommand: function() {
      var me = this,
        printWhite = axTools.cm2px(0.45), // 打印预留上下左右空白
        papersize = me.queryCommandValue("papersize"),
        paperWidth = axTools.cm2px(papersize[0]),
        paperHeight = axTools.cm2px(papersize[1]),
        pagemargin = me.queryCommandValue("pagemargin"),
        marginTop = axTools.cm2px(pagemargin[0]),
        marginBottom = axTools.cm2px(pagemargin[2]),
        marginLeft = axTools.cm2px(pagemargin[3]),
        marginRight = axTools.cm2px(pagemargin[1]),
        contentWidth = paperWidth - marginLeft - marginRight - printWhite * 2,
        left = printWhite + marginLeft;
      setTimeout(function() {
        var htmlStr =
          "<!DOCTYPE html>" +
          "<html>" +
          "	<head>" +
          '		<meta charset="utf-8"/>' +
          '		<link rel="stylesheet" href="' +
          me.options.AXEDITOR_HOME_URL +
          'themes/default/css/ax.ctrl.css" >' +
          '		<link rel="stylesheet" href="' +
          me.options.AXEDITOR_HOME_URL +
          'themes/default/css/axeditor.css" >' +
          '		<style type="text/css">span.ctrl-field{padding:0;}input[type="checkbox"],input[type="radio"]{vertical-align: -4px;}.error{color:#666;background:none!important;}.noprint{display:none;}.view{padding:0;word-wrap:break-word;cursor:text;}body{font-family:sans-serif;font-size:14px;}p{margin:5px 0;}.selectTdClass{background-color:#edf5fa !important}table.noBorderTable td,table.noBorderTable th,table.noBorderTable caption{border:1px dashed #ddd !important}table{margin-bottom:10px;border-collapse:collapse;display:table;}td,th{padding: 5px 10px;border: 1px solid #DDD;}caption{border:1px dashed #DDD;border-bottom:0;padding:3px;text-align:center;}th{border-top:1px solid #BBB;background-color:#F7F7F7;}table tr.firstRow th{border-top-width:2px;}.ue-table-interlace-color-single{ background-color: #fcfcfc; } .ue-table-interlace-color-double{ background-color: #f7faff; }td p{margin:0;padding:0;}.ax-editor-print-page .ctrl-field:after,.ax-editor-print-page .ctrl-field:before,.ax-editor-print-page .text-mark:before,.ax-editor-print-page .text-mark:after{content:\'\'!important;}.ax-editor-print-page .ctrl-value>span{background-color:transparent!important}.ax-editor-print-page .ctrl-value:empty:before{content:none}.ax-editor-print-page .ctrl-field:hover{background-color:transparent}.ax-editor-print-page .fill-page-num-node{z-index:999}.ax-editor-fill-node1{border-bottom: none;}.ax-editor-break-table{overflow: hidden;}</style>' +
          '		<script src="' +
          me.options.AXEDITOR_HOME_URL +
          'axeditor.parse.min.js"></script>' +
          "	</head>" +
          '	<body class="ax-editor-print-page" style="padding: 0;margin:0;">' +
          me.getContent(null, null, true) +
          "		<script type=\"text/javascript\">var ctrls=document.getElementsByClassName('ctrl-value');for(var i=0;i<ctrls.length;i++){ctrls[i].setAttribute('contenteditable',false);}</script>" +
          "	</body>" +
          "</html>";

        var header = axTools.getByClass("ax-editor-page-header", me.document),
          footer = axTools.getByClass("ax-editor-page-footer", me.document);

        // 清除之前的样式
        function clearDividLine() {
          var dividLineElems = me.document.getElementsByClassName("divid-line");
          for (var i = 0; i < dividLineElems.length; i++) {
            $(dividLineElems[i]).remove();
            i--;
          }
        }
        clearDividLine();

        if (!LODOP) {
          // splitPageDom(); //原生切割计算打印
          console.log("----本地未安装lodop----");
          return;
        } else {
          lodopPrint(); //lodop插件打印
        }
        // splitPageDom();//原生切割计算打印
        // me.window.print();

        var timer;
        var count;
        function WaitForPrintResult(pid) {
          count = count + 1;
          timer = setTimeout("WaitForPrintResult(" + pid + ")", 1000);
          if (LODOP.GET_VALUE("PRINT_STATUS_OK", pid)) {
            clearTimeout(timer);
            console.log("打印成功！");
            me.options.printResult && me.options.printResult(1);
          } else if (!LODOP.GET_VALUE("PRINT_STATUS_EXIST", pid) && count > 0) {
            clearTimeout(timer);
            console.log("打印任务被删除！");
            me.options.printResult && me.options.printResult(2);
          } else if (count > 30) {
            clearTimeout(timer);
            console.log("打印超过30秒没捕获到成功状态！");
            me.options.printResult && me.options.printResult(3);
          }
        }

        function splitPageDom() {
          var headerHeight =
              header.length > 0 ? axTools.getDomHeight(header[0]) : marginTop,
            footerHeight =
              footer.length > 0
                ? axTools.getDomHeight(footer[0])
                : marginBottom;
          // me.document.body.style.width=paperWidth-marginLeft-marginRight+'px';
          paperHeight =
            paperHeight - (header.length > 0 || footer.length > 0 ? 16 : 46);
          contentHeight = paperHeight - headerHeight - footerHeight;
          var childArr = me.document.body.children,
            countHeight = 0,
            pageDomArr = [],
            pageDomStr = "",
            body = me.document.body,
            oldStr = body.innerHTML,
            oldMT = body.style.marginTop,
            oldMB = body.style.marginBottom;

          contentHeight = parseInt(contentHeight);
          for (var i = 0; i < childArr.length; i++) {
            var childHeight = axTools.getDomHeight(childArr[i]);
            //单个元素高度超过一页纸高度需拆分
            if (childHeight > contentHeight) {
              splitDom(childArr[i]);
            } else {
              countHeight += header.length > 0 && i == 0 ? 0 : childHeight;
              if (countHeight <= contentHeight) {
                pageDomStr += childArr[i].outerHTML;
              }
              if (
                !axTools.hasClass(childArr[i], "ax-editor-page-footer") &&
                (countHeight + footerHeight >= contentHeight ||
                  (i < childArr.length - 1 &&
                    countHeight + axTools.getDomHeight(childArr[i + 1]) >=
                      contentHeight))
              ) {
                if (axTools.getDomHeight(childArr[i + 1]) <= contentHeight) {
                  if (footer.length > 0) {
                    pageDomStr += footer[0].outerHTML;
                  }
                  addPageDom();
                  if (header.length > 0) {
                    pageDomStr += header[0].outerHTML;
                  }
                }
              } else if (i == childArr.length - 1) {
                addPageDom();
              }
            }
          }

          body.innerHTML = "";
          for (var j = 0; j < pageDomArr.length; j++) {
            body.appendChild(pageDomArr[j]);
          }
          body.innerHTML =
            body.innerHTML +
            '<style printstyle="">@media print{.paragraph-border{border:none!important}}@page{size:A4;}</style>';
          body.style.marginTop = "0";
          body.style.marginBottom = "0";
          me.window.print();
          body.innerHTML = oldStr;
          body.style.marginTop = oldMT;
          body.style.marginBottom = oldMB;

          function addPageDom() {
            var pageDom = document.createElement("div");
            pageDom.setAttribute("class", "ax-editor-page-dom");
            pageDom.style.pageBreakAfter = "always";
            pageDom.style.height = paperHeight + "px";
            if (header.length == 0) {
              pageDom.style.paddingTop = header > 0 ? 0 : marginTop + "px";
            }
            if (footer.length == 0) {
              pageDom.style.paddingBottom =
                footer > 0 ? 0 : marginBottom + "px";
            }
            pageDom.innerHTML = pageDomStr;
            pageDomArr.push(pageDom);
            pageDomStr = "";
            countHeight = 0;
          }

          function splitDom(dom) {
            var childs = dom.children,
              tagName = dom.tagName.toLowerCase(),
              startTag = dom.outerHTML.split(childs[0].outerHTML)[0];
            pageDomStr += startTag;
            for (var j = 0; j < childs.length; j++) {
              if (
                countHeight + axTools.getDomHeight(childs[j]) <
                contentHeight
              ) {
                countHeight += axTools.getDomHeight(childs[j]);
                pageDomStr += childs[j].outerHTML;
              } else {
                if (childs[j].tagName.toLowerCase() == "tbody") {
                  var trs = childs[j].children;
                  pageDomStr += dom.outerHTML.split(trs[0].outerHTML)[0];
                  for (var k = 0; k < trs.length; k++) {
                    if (
                      countHeight + axTools.getDomHeight(trs[k]) <
                      contentHeight
                    ) {
                      countHeight += axTools.getDomHeight(trs[k]);
                      pageDomStr += trs[k].outerHTML;
                    } else {
                      //此处实现每页都有相同的表格尾部--待实现
                      pageDomStr += "</tbody></table>";
                      if (footer.length > 0) {
                        pageDomStr += footer[0].outerHTML;
                      }
                      addPageDom();
                      if (header.length > 0) {
                        pageDomStr += header[0].outerHTML;
                      }
                      if (k != trs.length - 1) {
                        //此处实现每页都有相同的表格标题--待实现
                        pageDomStr += startTag + "<tbody>" + trs[k].outerHTML;
                        countHeight += axTools.getDomHeight(trs[k]);
                      }
                    }
                  }
                  pageDomStr += "</tbody>";
                } else {
                  pageDomStr += "</" + tagName + ">";
                  if (footer.length > 0) {
                    pageDomStr += footer[0].outerHTML;
                  }
                  addPageDom();
                  if (header.length > 0) {
                    pageDomStr += header[0].outerHTML;
                  }
                  if (j != childs.length - 1) {
                    pageDomStr += "<" + tagName + ">" + childs[j].outerHTML;
                    countHeight += axTools.getDomHeight(childs[j]);
                  }
                }
              }
            }
            pageDomStr += "<" + tagName + ">";
          }
        }

        function lodopPrint() {
          var headerHeight = 0,
            footerHeight = 0;
          LODOP.SET_LICENSES(
            "北京联想智慧医疗信息技术有限公司",
            "BEBE8A01D6D982EB566A294D4D199065",
            "",
            ""
          );
          LODOP.PRINT_INITA(
            0, //header.length > 0 ? 0 : marginTop,
            0,
            paperWidth,
            paperHeight,
            "病历打印"
          );

          // 以纸张的边缘为计算起点
          // 注：通常情况打印机都有一个可打印区域，这个区域为打印机的走墨边界
          // 打印机之间的的这个区域是有差异的，所以使用纸张边界作为打印区域
          // 默认增加内容区域的padding值保证所有打印机的一致性
          LODOP.SET_PRINT_MODE("POS_BASEON_PAPER", true);

          //设置页眉
          if (header) {
            header.style.fontSize = "12px";
            header.style.borderBottom = "1px solid #ccc";
            headerHeight = header.offsetHeight;
            LODOP.ADD_PRINT_HTML(
              printWhite,
              left,
              contentWidth,
              headerHeight,
              header[0].outerHTML
            );
            LODOP.SET_PRINT_STYLEA(0, "ItemType", 1); //0--普通项 1--页眉页脚 2--页号项 3--页数项 4--多页项
          }
          if (footer) {
            footerHeight = footer.offsetHeight;
          }

          //设置正文内容
          var contentHeight =
            paperHeight -
            (headerHeight > 0 ? headerHeight + 20 : marginTop) -
            (footerHeight > 0 ? footerHeight + 20 : marginBottom);
          LODOP.ADD_PRINT_HTML(
            headerHeight > 0 ? headerHeight + printWhite : printWhite,
            left,
            contentWidth,
            contentHeight,
            htmlStr
          );
          LODOP.SET_PRINT_STYLEA(0, "ItemType", 4);
          LODOP.SET_PRINT_STYLEA(0, "Vorient", 3);
          LODOP.SET_PRINT_STYLEA(0, "TextNeatRow", true);

          //设置页脚
          if (footer) {
            var footerTop =
              paperHeight - (footerHeight > 0 ? footerHeight : marginBottom);
            footer.style.fontSize = "12px";
            footer.style.borderTop = "1px solid #ccc";
            LODOP.ADD_PRINT_HTML(
              footerTop,
              left,
              contentWidth,
              footerHeight,
              footer[0].outerHTML
            );
            LODOP.SET_PRINT_STYLEA(0, "ItemType", 1);
            LODOP.SET_PRINT_STYLEA(0, "Vorient", 1); //0--上边距锁定 1--下边距锁定 2--垂直方向居中 3--上边距和下边距同时锁定（中间拉伸），缺省值是0
          }

          //设置页码
          LODOP.ADD_PRINT_TEXT(
            paperHeight - (footer.length > 0 ? 0 : marginBottom) - 16,
            paperWidth / 2,
            180,
            20,
            "#/&"
          );
          LODOP.SET_PRINT_STYLEA(0, "ItemType", 2);
          // LODOP.SET_PRINT_STYLEA(0, "Horient", 2); //0--左边距锁定 1--右边距锁定 2--水平方向居中 3--左边距和右边距同时锁定（中间拉伸），缺省值是0
          LODOP.SET_PRINT_STYLEA(0, "Vorient", 1);

          // LODOP.GET_VALUE("ItemContent", 0);

          // 预览
          LODOP.PREVIEW();

          // // 直接打印
          // LODOP.SET_PRINT_MODE("CATCH_PRINT_STATUS", true);
          // var job = LODOP.PRINT();
          // WaitForPrintResult(job);
        }
      }, 100);
    },
    notNeedUndo: 1
  };
};

/**
 * 显示续打窗口
 * @command continueprint
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'continueprint' );
 * ```
 */
AX.plugins["continueprint"] = function() {
  var me = this,
    thePlugins = "continueprint";
  AX.commands[thePlugins] = {
    execCommand: function() {
      // var startIdx = 3;
      // var config = [
      //   {
      //     "bizTime":"2020-03-19 19:12:35",
      //     "content":"<header contenteditable=\"false\" class=\"ax-editor-page-header noprint\" style=\"font-size: 12px; border-bottom: 1px solid rgb(204, 204, 204);\"><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px; text-align: center;\"><strong><span style=\"font-size: 24px;\">首次病程记录</span></strong></p><p style=\"margin-top: 10px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px;\">姓名：&nbsp;<span id=\"297e36f56cf50c4b016cf50c4bbe0000\" title=\"姓名\" issecret=\"false\" attrs=\"{&quot;id&quot;:&quot;297e36f56cf50c4b016cf50c4bbe0000&quot;,&quot;code&quot;:&quot;M0001&quot;,&quot;name&quot;:&quot;姓名&quot;,&quot;isSecret&quot;:false}\" contenteditable=\"false\" macrocode=\"M0001\" class=\"ctrl-bg ctrl-field macro-ctrl macro-297e36f56cf50c4b016cf50c4bbe0000\" axplugins=\"macro\" style=\"color: #666666; display: inline;\" oldval=\"\"><span title=\"姓名\" placeholder=\"姓名\" secret-value=\"false\" contenteditable=\"false\" class=\"ctrl-value\" tabindex=\"0\">许方</span></span>&nbsp;&nbsp; &nbsp; &nbsp; 性别：&nbsp;&nbsp;<span id=\"297e36f56cf50c4b016cf50c531f0001\" title=\"性别\" issecret=\"false\" attrs=\"{&quot;id&quot;:&quot;297e36f56cf50c4b016cf50c531f0001&quot;,&quot;code&quot;:&quot;M0002&quot;,&quot;name&quot;:&quot;性别&quot;,&quot;isSecret&quot;:false}\" contenteditable=\"false\" macrocode=\"M0002\" class=\"ctrl-bg ctrl-field macro-ctrl macro-297e36f56cf50c4b016cf50c531f0001\" axplugins=\"macro\" style=\"color: #666666; display: inline;\" oldval=\"\"><span title=\"性别\" placeholder=\"性别\" secret-value=\"false\" contenteditable=\"false\" class=\"ctrl-value\" tabindex=\"1\">男</span></span>&nbsp;&nbsp; &nbsp; 年龄： &nbsp;&nbsp;<span id=\"297e36f56cf50c4b016cf50c57730002\" title=\"年龄\" issecret=\"false\" attrs=\"{&quot;id&quot;:&quot;297e36f56cf50c4b016cf50c57730002&quot;,&quot;code&quot;:&quot;M0003&quot;,&quot;name&quot;:&quot;年龄&quot;,&quot;isSecret&quot;:false}\" contenteditable=\"false\" macrocode=\"M0003\" class=\"ctrl-bg ctrl-field macro-ctrl macro-297e36f56cf50c4b016cf50c57730002\" axplugins=\"macro\" style=\"color: #666666; display: inline;\" oldval=\"\"><span title=\"年龄\" placeholder=\"年龄\" secret-value=\"false\" contenteditable=\"false\" class=\"ctrl-value\" tabindex=\"2\">20岁</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;科室：&nbsp;&nbsp;&nbsp;<span id=\"297e36f56cf50c4b016cf50cb3960012\" title=\"科室\" issecret=\"false\" attrs=\"{&quot;id&quot;:&quot;297e36f56cf50c4b016cf50cb3960012&quot;,&quot;code&quot;:&quot;M0019&quot;,&quot;name&quot;:&quot;科室&quot;,&quot;isSecret&quot;:false}\" contenteditable=\"false\" macrocode=\"M0019\" class=\"ctrl-bg ctrl-field macro-ctrl macro-297e36f56cf50c4b016cf50cb3960012\" axplugins=\"macro\" style=\"color: #666666; display: inline;\" oldval=\"\"><span title=\"科室\" placeholder=\"科室\" secret-value=\"false\" contenteditable=\"false\" class=\"ctrl-value\" tabindex=\"3\">呼吸内科</span></span>&nbsp; &nbsp; &nbsp;记录时间：&nbsp;<span id=\"4028467b6d7be868016d7c0b66c00007\" axplugins=\"datedomain\" title=\"记录时间\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;4028467b6d7be868016d7c0b66c00007&quot;,&quot;name&quot;:&quot;记录时间&quot;,&quot;placeholderText&quot;:&quot;记录时间&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;inserCurDate&quot;:&quot;on&quot;,&quot;dateFormat&quot;:&quot;yyyy-MM-dd HH:mm&quot;,&quot;dateFormatType&quot;:&quot;datetime&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" contenteditable=\"false\" style=\"color: #666666; display: inline;\" oldval=\"2019-09-29 00:00\"><span tabindex=\"4\" title=\"记录时间\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"记录时间\" contenteditable=\"true\"></span></span>&nbsp;</p></header><div id=\"4028467b6d7be868016d7bfc5d490002\" title=\"病例特点\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;4028467b6d7be868016d7bfc5d490002&quot;,&quot;paratype&quot;:&quot;PT_bltd&quot;,&quot;name&quot;:&quot;病例特点&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_bltd\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_bltd\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"病例特点\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" contenteditable=\"false\" title=\"病例特点\">病例特点</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;<span id=\"4028467b6d7be868016d7bfc957c0003\" axplugins=\"text\" title=\"病例特点\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;4028467b6d7be868016d7bfc957c0003&quot;,&quot;name&quot;:&quot;病例特点&quot;,&quot;placeholderText&quot;:&quot;病例特点&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"6\" title=\"病例特点\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"病例特点\" contenteditable=\"true\"></span></span>&nbsp;</p></div><p><br/></p><div id=\"4028467b6d7be868016d7bff0a8e0005\" title=\"拟诊讨论（诊断依据及鉴别诊断）\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;4028467b6d7be868016d7bff0a8e0005&quot;,&quot;paratype&quot;:&quot;PT_nztl&quot;,&quot;name&quot;:&quot;拟诊讨论（诊断依据及鉴别诊断）&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_nztl\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_nztl\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"拟诊讨论（诊断依据及鉴别诊断）\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" contenteditable=\"false\" title=\"拟诊讨论（诊断依据及鉴别诊断）\">拟诊讨论（诊断依据及鉴别诊断）</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;&nbsp;<span id=\"4028467b6d7be868016d7bff3f470006\" axplugins=\"text\" title=\"拟诊讨论\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;4028467b6d7be868016d7bff3f470006&quot;,&quot;name&quot;:&quot;拟诊讨论&quot;,&quot;placeholderText&quot;:&quot;请输入拟诊讨论（诊断依据及鉴别诊断）&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"拟诊讨论\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"请输入拟诊讨论（诊断依据及鉴别诊断）\" contenteditable=\"true\" tabindex=\"8\"></span></span>&nbsp;</p></div><p><br/></p><div id=\"4028467b6d7be868016d7c0e72000009\" title=\"诊疗计划\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;4028467b6d7be868016d7c0e72000009&quot;,&quot;paratype&quot;:&quot;PT_zljh&quot;,&quot;name&quot;:&quot;诊疗计划&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_zljh\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_zljh\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"诊疗计划\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" contenteditable=\"false\" title=\"诊疗计划\">诊疗计划</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;&nbsp;<span id=\"4028467b6d7be868016d7c0ea498000a\" axplugins=\"text\" title=\"诊疗计划\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;4028467b6d7be868016d7c0ea498000a&quot;,&quot;name&quot;:&quot;诊疗计划&quot;,&quot;placeholderText&quot;:&quot;请输入诊疗计划&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"诊疗计划\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"请输入诊疗计划\" contenteditable=\"true\" tabindex=\"10\"></span></span>&nbsp;</p></div><p><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\">主治医师签名：&nbsp;<span id=\"4028467b6d720402016d722b57f90005\" axplugins=\"signature\" title=\"\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field signature\" isrequired=\"true\" cascadeid=\"undefined\" showcondition=\"undefined\" attrs=\"{&quot;id&quot;:&quot;4028467b6d720402016d722b57f90005&quot;,&quot;placeholderText&quot;:&quot;医师签名&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;isCurrDoctor&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;&quot;,&quot;readonly&quot;:true}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"医师签名\" contenteditable=\"false\" tabindex=\"11\">李想</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p><input id=\"pageMarginHidden\" type=\"hidden\" value=\"1,3.18,1,3.18\"/></p><p><input id=\"paperSizeHidden\" type=\"hidden\" value=\"21,29.7\"/></p><p><br/></p><p><br/></p><footer contenteditable=\"false\" class=\"ax-editor-page-footer noprint\" style=\"font-size: 12px; border-top: 1px solid rgb(204, 204, 204);\"><p>版权所有@安想智慧医疗</p></footer>",
      //     "createdAt":"2020-03-19 19:12:36",
      //     "createdBy":"000002",
      //     "createdByName":"lixiang",
      //     "dataVersion":3,
      //     "deletedStatus":"0",
      //     "enId":"VC19121000002",
      //     "hosCode":"KGYY",
      //     "hosId":"91",
      //     "mixData":"5e7353bb6c545b2514c02401",
      //     "mrId":"4028448770f27eb80170f27eb8970000",
      //     "mrMainId":"ff80808170a509650170a509654b0000",
      //     "mrStaCd":"02",
      //     "mrTpCd":"T_qy_scbcjl_001",
      //     "mrTplCd":"MT_SCBCJL",
      //     "nm":"首次病程记录",
      //     "orgCode":"TJAXJT",
      //     "orgId":"66",
      //     "pastEnId":"",
      //     "pastMrF":"0",
      //     "pastMrId":"",
      //     "patientId":"402846036eeee563016eeee61ba2001b",
      //     "printNo":0,
      //     "printOption":"01",
      //     "submitCd":"000002",
      //     "submitDate":"2020-04-09 14:39:43",
      //     "submitDeptCd":"92",
      //     "submitRoleCd":"R0009",
      //     "supDctId":"",
      //     "templateVersion":"1",
      //     "updatedAt":"2020-04-09 14:39:43",
      //     "updatedBy":"000002",
      //     "updatedByName":"lixiang"
      //   },
      //   {
      //     "bizTime":"2020-03-19 19:12:44",
      //     "content":"<header contenteditable=\"false\" class=\"ax-editor-page-header noprint\" style=\"font-size: 12px; border-bottom: 1px solid rgb(204, 204, 204);\"><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px; text-align: center;\"><strong><span style=\"font-size: 24px;\">日常病程记录</span></strong></p><p style=\"margin-top: 10px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px;\">姓名：&nbsp;<span id=\"297e36f56cf50c4b016cf50c4bbe0000\" title=\"姓名\" issecret=\"false\" attrs=\"{&quot;id&quot;:&quot;297e36f56cf50c4b016cf50c4bbe0000&quot;,&quot;code&quot;:&quot;M0001&quot;,&quot;name&quot;:&quot;姓名&quot;,&quot;isSecret&quot;:false}\" contenteditable=\"false\" macrocode=\"M0001\" class=\"ctrl-bg ctrl-field macro-ctrl macro-297e36f56cf50c4b016cf50c4bbe0000\" axplugins=\"macro\" oldval=\"\" style=\"color: #666666; display: inline;\"><span title=\"姓名\" placeholder=\"姓名\" secret-value=\"false\" contenteditable=\"false\" class=\"ctrl-value\" tabindex=\"0\">许方</span></span>&nbsp;&nbsp; &nbsp; &nbsp; 性别：&nbsp;&nbsp;<span id=\"297e36f56cf50c4b016cf50c531f0001\" title=\"性别\" issecret=\"false\" attrs=\"{&quot;id&quot;:&quot;297e36f56cf50c4b016cf50c531f0001&quot;,&quot;code&quot;:&quot;M0002&quot;,&quot;name&quot;:&quot;性别&quot;,&quot;isSecret&quot;:false}\" contenteditable=\"false\" macrocode=\"M0002\" class=\"ctrl-bg ctrl-field macro-ctrl macro-297e36f56cf50c4b016cf50c531f0001\" axplugins=\"macro\" oldval=\"\" style=\"color: #666666; display: inline;\"><span title=\"性别\" placeholder=\"性别\" secret-value=\"false\" contenteditable=\"false\" class=\"ctrl-value\" tabindex=\"1\">男</span></span>&nbsp;&nbsp; &nbsp; 年龄： &nbsp;&nbsp;<span id=\"297e36f56cf50c4b016cf50c57730002\" title=\"年龄\" issecret=\"false\" attrs=\"{&quot;id&quot;:&quot;297e36f56cf50c4b016cf50c57730002&quot;,&quot;code&quot;:&quot;M0003&quot;,&quot;name&quot;:&quot;年龄&quot;,&quot;isSecret&quot;:false}\" contenteditable=\"false\" macrocode=\"M0003\" class=\"ctrl-bg ctrl-field macro-ctrl macro-297e36f56cf50c4b016cf50c57730002\" axplugins=\"macro\" oldval=\"\" style=\"color: #666666; display: inline;\"><span title=\"年龄\" placeholder=\"年龄\" secret-value=\"false\" contenteditable=\"false\" class=\"ctrl-value\" tabindex=\"2\">20岁</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;科室：&nbsp;&nbsp;&nbsp;<span id=\"297e36f56cf50c4b016cf50cb3960012\" title=\"科室\" issecret=\"false\" attrs=\"{&quot;id&quot;:&quot;297e36f56cf50c4b016cf50cb3960012&quot;,&quot;code&quot;:&quot;M0019&quot;,&quot;name&quot;:&quot;科室&quot;,&quot;isSecret&quot;:false}\" contenteditable=\"false\" macrocode=\"M0019\" class=\"ctrl-bg ctrl-field macro-ctrl macro-297e36f56cf50c4b016cf50cb3960012\" axplugins=\"macro\" oldval=\"\" style=\"color: #666666; display: inline;\"><span title=\"科室\" placeholder=\"科室\" secret-value=\"false\" contenteditable=\"false\" class=\"ctrl-value\" tabindex=\"3\">92</span></span>&nbsp; &nbsp; &nbsp;</p></header><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\"><br/></p><div id=\"2c9180836dfd4060016dfd40606d0000\" title=\"日常病程记录\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;2c9180836dfd4060016dfd40606d0000&quot;,&quot;paratype&quot;:&quot;PT_rcbcjl&quot;,&quot;name&quot;:&quot;日常病程记录&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_rcbcjl\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_rcbcjl\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"日常病程记录\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" contenteditable=\"false\" title=\"日常病程记录\">日常病程记录</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;<span id=\"2c9180836dfd4060016dfd40d8500001\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"日常病程记录\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4060016dfd40d8500001&quot;,&quot;name&quot;:&quot;日常病程记录&quot;,&quot;placeholderText&quot;:&quot;请输入日常病程记录内容&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span title=\"日常病程记录\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"请输入日常病程记录内容\" contenteditable=\"true\" tabindex=\"5\"></span></span>&nbsp;</p></div><p><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\">主治医师签名：&nbsp;<span id=\"4028467b6d720402016d722b57f90005\" axplugins=\"signature\" title=\"\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field signature\" isrequired=\"true\" cascadeid=\"undefined\" showcondition=\"undefined\" attrs=\"{&quot;id&quot;:&quot;4028467b6d720402016d722b57f90005&quot;,&quot;placeholderText&quot;:&quot;医师签名&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;isCurrDoctor&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;&quot;,&quot;readonly&quot;:true}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"医师签名\" contenteditable=\"false\" tabindex=\"6\">李想</span></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p><p><br/></p><footer contenteditable=\"false\" class=\"ax-editor-page-footer noprint\" style=\"font-size: 12px; border-top: 1px solid rgb(204, 204, 204);\"><p>版权所有@安想智慧医疗</p></footer><p><input id=\"paperSizeHidden\" type=\"hidden\" value=\"21,29.7\"/><input id=\"pageMarginHidden\" type=\"hidden\" value=\"1,3.18,1,3.18\"/><input id=\"paperScaleHidden\" type=\"hidden\" value=\"1\"/></p>",
      //     "createdAt":"2020-03-19 19:12:45",
      //     "createdBy":"000002",
      //     "createdByName":"lixiang",
      //     "dataVersion":1,
      //     "deletedStatus":"0",
      //     "enId":"VC19121000002",
      //     "hosCode":"KGYY",
      //     "hosId":"91",
      //     "mixData":"5e7353c56c545b2514c02402",
      //     "mrId":"4028448770f27eb80170f27eddb70002",
      //     "mrMainId":"ff80808170a509650170a509654b0000",
      //     "mrStaCd":"02",
      //     "mrTpCd":"T_qy_rcbcjl_001",
      //     "mrTplCd":"MT_rcbcjl",
      //     "nm":"日常病程记录",
      //     "orgCode":"TJAXJT",
      //     "orgId":"66",
      //     "pastEnId":"",
      //     "pastMrF":"0",
      //     "pastMrId":"",
      //     "patientId":"402846036eeee563016eeee61ba2001b",
      //     "printNo":0,
      //     "printOption":"01",
      //     "submitCd":"000002",
      //     "submitDate":"2020-03-19 19:13:09",
      //     "submitDeptCd":"92",
      //     "submitRoleCd":"R0002",
      //     "supDctId":"",
      //     "templateVersion":"1",
      //     "updatedAt":"2020-03-19 19:13:10",
      //     "updatedBy":"000002",
      //     "updatedByName":"lixiang"
      //   },
      //   {
      //     "bizTime":"2020-03-19 19:12:48",
      //     "content":"<header contenteditable=\"false\" class=\"ax-editor-page-header noprint\" style=\"font-size: 12px; border-bottom: 1px solid rgb(204, 204, 204);\"><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px; text-align: center;\"><strong><span style=\"font-size: 24px;\">上级医师查房记录1</span></strong><span style=\"color: #666666;\">&nbsp; &nbsp;&nbsp;</span></p></header><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd7c4f8601c5\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"datedomain\" title=\"查房时间\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd7c4f8601c5&quot;,&quot;name&quot;:&quot;查房时间&quot;,&quot;placeholderText&quot;:&quot;查房时间&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;inserCurDate&quot;:&quot;on&quot;,&quot;dateFormat&quot;:&quot;yyyy年MM月dd日HH时mm分&quot;,&quot;dateFormatType&quot;:&quot;datetime&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"0\" title=\"查房时间\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"查房时间\" contenteditable=\"true\" lay-key=\"2\"></span></span>&nbsp;&nbsp; 随&nbsp;<span id=\"2c9180836dfd4e45016dfd82d2ee01e0\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师姓名\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd82d2ee01e0&quot;,&quot;name&quot;:&quot;上级医师姓名&quot;,&quot;placeholderText&quot;:&quot;&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;3&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"1\" title=\"上级医师姓名\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"\" contenteditable=\"true\"></span></span>&nbsp;主任（副主任）（主治）医师查房&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br/></p><div id=\"2c9180836dfd4e45016dfd844d0301e1\" title=\"上级医师查房记录\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;2c9180836dfd4e45016dfd844d0301e1&quot;,&quot;paratype&quot;:&quot;PT_sjyscfjl&quot;,&quot;name&quot;:&quot;上级医师查房记录&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_sjyscfjl\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_sjyscfjl\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"上级医师查房记录\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" tabindex=\"2\" contenteditable=\"false\" title=\"上级医师查房记录\">上级医师查房记录</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd848ba701e2\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师查房记录内容\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd848ba701e2&quot;,&quot;name&quot;:&quot;上级医师查房记录内容&quot;,&quot;placeholderText&quot;:&quot;上级医师查房内容记录&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"3\" title=\"上级医师查房记录内容\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"上级医师查房内容记录\" contenteditable=\"true\"></span></span>&nbsp;</p></div><p><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\">医师签名：&nbsp;<span id=\"4028467b6d720402016d722b57f90005\" axplugins=\"signature\" title=\"\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field signature\" isrequired=\"true\" cascadeid=\"undefined\" showcondition=\"undefined\" attrs=\"{&quot;id&quot;:&quot;4028467b6d720402016d722b57f90005&quot;,&quot;placeholderText&quot;:&quot;医师签名&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;isCurrDoctor&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;&quot;,&quot;readonly&quot;:true}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"医师签名\" contenteditable=\"false\" tabindex=\"4\">李想</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p><input id=\"pageMarginHidden\" type=\"hidden\" value=\"2.54,3.18,2.54,3.18\"/></p><p><input id=\"paperSizeHidden\" type=\"hidden\" value=\"21,29.7\"/></p><p><br/></p><p><br/></p><footer contenteditable=\"false\" class=\"ax-editor-page-footer noprint\" style=\"font-size: 12px; border-top: 1px solid rgb(204, 204, 204);\"><p>版权所有@安想智慧医疗</p></footer><p><input id=\"paperScaleHidden\" type=\"hidden\" value=\"1\"/></p>",
      //   },
      //   {
      //     "bizTime":"2020-03-19 19:12:48",
      //     "content":"<header contenteditable=\"false\" class=\"ax-editor-page-header noprint\" style=\"font-size: 12px; border-bottom: 1px solid rgb(204, 204, 204);\"><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px; text-align: center;\"><strong><span style=\"font-size: 24px;\">上级医师查房记录2</span></strong><span style=\"color: #666666;\">&nbsp; &nbsp;&nbsp;</span></p></header><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd7c4f8601c5\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"datedomain\" title=\"查房时间\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd7c4f8601c5&quot;,&quot;name&quot;:&quot;查房时间&quot;,&quot;placeholderText&quot;:&quot;查房时间&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;inserCurDate&quot;:&quot;on&quot;,&quot;dateFormat&quot;:&quot;yyyy年MM月dd日HH时mm分&quot;,&quot;dateFormatType&quot;:&quot;datetime&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"0\" title=\"查房时间\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"查房时间\" contenteditable=\"true\" lay-key=\"2\"></span></span>&nbsp;&nbsp; 随&nbsp;<span id=\"2c9180836dfd4e45016dfd82d2ee01e0\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师姓名\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd82d2ee01e0&quot;,&quot;name&quot;:&quot;上级医师姓名&quot;,&quot;placeholderText&quot;:&quot;&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;3&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"1\" title=\"上级医师姓名\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"\" contenteditable=\"true\"></span></span>&nbsp;主任（副主任）（主治）医师查房&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br/></p><div id=\"2c9180836dfd4e45016dfd844d0301e1\" title=\"上级医师查房记录\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;2c9180836dfd4e45016dfd844d0301e1&quot;,&quot;paratype&quot;:&quot;PT_sjyscfjl&quot;,&quot;name&quot;:&quot;上级医师查房记录&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_sjyscfjl\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_sjyscfjl\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"上级医师查房记录\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" tabindex=\"2\" contenteditable=\"false\" title=\"上级医师查房记录\">上级医师查房记录</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd848ba701e2\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师查房记录内容\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd848ba701e2&quot;,&quot;name&quot;:&quot;上级医师查房记录内容&quot;,&quot;placeholderText&quot;:&quot;上级医师查房内容记录&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"3\" title=\"上级医师查房记录内容\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"上级医师查房内容记录\" contenteditable=\"true\"></span></span>&nbsp;</p></div><p><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\">医师签名：&nbsp;<span id=\"4028467b6d720402016d722b57f90005\" axplugins=\"signature\" title=\"\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field signature\" isrequired=\"true\" cascadeid=\"undefined\" showcondition=\"undefined\" attrs=\"{&quot;id&quot;:&quot;4028467b6d720402016d722b57f90005&quot;,&quot;placeholderText&quot;:&quot;医师签名&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;isCurrDoctor&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;&quot;,&quot;readonly&quot;:true}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"医师签名\" contenteditable=\"false\" tabindex=\"4\">李想</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p><input id=\"pageMarginHidden\" type=\"hidden\" value=\"2.54,3.18,2.54,3.18\"/></p><p><input id=\"paperSizeHidden\" type=\"hidden\" value=\"21,29.7\"/></p><p><br/></p><p><br/></p><footer contenteditable=\"false\" class=\"ax-editor-page-footer noprint\" style=\"font-size: 12px; border-top: 1px solid rgb(204, 204, 204);\"><p>版权所有@安想智慧医疗</p></footer><p><input id=\"paperScaleHidden\" type=\"hidden\" value=\"1\"/></p>",
      //   },
      //   {
      //     "bizTime":"2020-03-19 19:12:48",
      //     "content":"<header contenteditable=\"false\" class=\"ax-editor-page-header noprint\" style=\"font-size: 12px; border-bottom: 1px solid rgb(204, 204, 204);\"><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px; text-align: center;\"><strong><span style=\"font-size: 24px;\">上级医师查房记录3</span></strong><span style=\"color: #666666;\">&nbsp; &nbsp;&nbsp;</span></p></header><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd7c4f8601c5\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"datedomain\" title=\"查房时间\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd7c4f8601c5&quot;,&quot;name&quot;:&quot;查房时间&quot;,&quot;placeholderText&quot;:&quot;查房时间&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;inserCurDate&quot;:&quot;on&quot;,&quot;dateFormat&quot;:&quot;yyyy年MM月dd日HH时mm分&quot;,&quot;dateFormatType&quot;:&quot;datetime&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"0\" title=\"查房时间\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"查房时间\" contenteditable=\"true\" lay-key=\"2\"></span></span>&nbsp;&nbsp; 随&nbsp;<span id=\"2c9180836dfd4e45016dfd82d2ee01e0\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师姓名\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd82d2ee01e0&quot;,&quot;name&quot;:&quot;上级医师姓名&quot;,&quot;placeholderText&quot;:&quot;&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;3&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"1\" title=\"上级医师姓名\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"\" contenteditable=\"true\"></span></span>&nbsp;主任（副主任）（主治）医师查房&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br/></p><div id=\"2c9180836dfd4e45016dfd844d0301e1\" title=\"上级医师查房记录\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;2c9180836dfd4e45016dfd844d0301e1&quot;,&quot;paratype&quot;:&quot;PT_sjyscfjl&quot;,&quot;name&quot;:&quot;上级医师查房记录&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_sjyscfjl\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_sjyscfjl\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"上级医师查房记录\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" tabindex=\"2\" contenteditable=\"false\" title=\"上级医师查房记录\">上级医师查房记录</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd848ba701e2\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师查房记录内容\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd848ba701e2&quot;,&quot;name&quot;:&quot;上级医师查房记录内容&quot;,&quot;placeholderText&quot;:&quot;上级医师查房内容记录&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"3\" title=\"上级医师查房记录内容\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"上级医师查房内容记录\" contenteditable=\"true\"></span></span>&nbsp;</p></div><p><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\">医师签名：&nbsp;<span id=\"4028467b6d720402016d722b57f90005\" axplugins=\"signature\" title=\"\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field signature\" isrequired=\"true\" cascadeid=\"undefined\" showcondition=\"undefined\" attrs=\"{&quot;id&quot;:&quot;4028467b6d720402016d722b57f90005&quot;,&quot;placeholderText&quot;:&quot;医师签名&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;isCurrDoctor&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;&quot;,&quot;readonly&quot;:true}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"医师签名\" contenteditable=\"false\" tabindex=\"4\">李想</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p><input id=\"pageMarginHidden\" type=\"hidden\" value=\"2.54,3.18,2.54,3.18\"/></p><p><input id=\"paperSizeHidden\" type=\"hidden\" value=\"21,29.7\"/></p><p><br/></p><p><br/></p><footer contenteditable=\"false\" class=\"ax-editor-page-footer noprint\" style=\"font-size: 12px; border-top: 1px solid rgb(204, 204, 204);\"><p>版权所有@安想智慧医疗</p></footer><p><input id=\"paperScaleHidden\" type=\"hidden\" value=\"1\"/></p>",
      //   },
      //   {
      //     "bizTime":"2020-03-19 19:12:48",
      //     "content":"<header contenteditable=\"false\" class=\"ax-editor-page-header noprint\" style=\"font-size: 12px; border-bottom: 1px solid rgb(204, 204, 204);\"><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px; text-align: center;\"><strong><span style=\"font-size: 24px;\">上级医师查房记录4</span></strong><span style=\"color: #666666;\">&nbsp; &nbsp;&nbsp;</span></p></header><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd7c4f8601c5\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"datedomain\" title=\"查房时间\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd7c4f8601c5&quot;,&quot;name&quot;:&quot;查房时间&quot;,&quot;placeholderText&quot;:&quot;查房时间&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;inserCurDate&quot;:&quot;on&quot;,&quot;dateFormat&quot;:&quot;yyyy年MM月dd日HH时mm分&quot;,&quot;dateFormatType&quot;:&quot;datetime&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"0\" title=\"查房时间\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"查房时间\" contenteditable=\"true\" lay-key=\"2\"></span></span>&nbsp;&nbsp; 随&nbsp;<span id=\"2c9180836dfd4e45016dfd82d2ee01e0\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师姓名\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd82d2ee01e0&quot;,&quot;name&quot;:&quot;上级医师姓名&quot;,&quot;placeholderText&quot;:&quot;&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;3&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"1\" title=\"上级医师姓名\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"\" contenteditable=\"true\"></span></span>&nbsp;主任（副主任）（主治）医师查房&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br/></p><div id=\"2c9180836dfd4e45016dfd844d0301e1\" title=\"上级医师查房记录\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;2c9180836dfd4e45016dfd844d0301e1&quot;,&quot;paratype&quot;:&quot;PT_sjyscfjl&quot;,&quot;name&quot;:&quot;上级医师查房记录&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_sjyscfjl\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_sjyscfjl\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"上级医师查房记录\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" tabindex=\"2\" contenteditable=\"false\" title=\"上级医师查房记录\">上级医师查房记录</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd848ba701e2\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师查房记录内容\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd848ba701e2&quot;,&quot;name&quot;:&quot;上级医师查房记录内容&quot;,&quot;placeholderText&quot;:&quot;上级医师查房内容记录&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"3\" title=\"上级医师查房记录内容\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"上级医师查房内容记录\" contenteditable=\"true\"></span></span>&nbsp;</p></div><p><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\">医师签名：&nbsp;<span id=\"4028467b6d720402016d722b57f90005\" axplugins=\"signature\" title=\"\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field signature\" isrequired=\"true\" cascadeid=\"undefined\" showcondition=\"undefined\" attrs=\"{&quot;id&quot;:&quot;4028467b6d720402016d722b57f90005&quot;,&quot;placeholderText&quot;:&quot;医师签名&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;isCurrDoctor&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;&quot;,&quot;readonly&quot;:true}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"医师签名\" contenteditable=\"false\" tabindex=\"4\">李想</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p><input id=\"pageMarginHidden\" type=\"hidden\" value=\"2.54,3.18,2.54,3.18\"/></p><p><input id=\"paperSizeHidden\" type=\"hidden\" value=\"21,29.7\"/></p><p><br/></p><p><br/></p><footer contenteditable=\"false\" class=\"ax-editor-page-footer noprint\" style=\"font-size: 12px; border-top: 1px solid rgb(204, 204, 204);\"><p>版权所有@安想智慧医疗</p></footer><p><input id=\"paperScaleHidden\" type=\"hidden\" value=\"1\"/></p>",
      //   },
      //   {
      //     "bizTime":"2020-03-19 19:12:48",
      //     "content":"<header contenteditable=\"false\" class=\"ax-editor-page-header noprint\" style=\"font-size: 12px; border-bottom: 1px solid rgb(204, 204, 204);\"><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px; text-align: center;\"><strong><span style=\"font-size: 24px;\">上级医师查房记录5</span></strong><span style=\"color: #666666;\">&nbsp; &nbsp;&nbsp;</span></p></header><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd7c4f8601c5\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"datedomain\" title=\"查房时间\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd7c4f8601c5&quot;,&quot;name&quot;:&quot;查房时间&quot;,&quot;placeholderText&quot;:&quot;查房时间&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;inserCurDate&quot;:&quot;on&quot;,&quot;dateFormat&quot;:&quot;yyyy年MM月dd日HH时mm分&quot;,&quot;dateFormatType&quot;:&quot;datetime&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"0\" title=\"查房时间\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"查房时间\" contenteditable=\"true\" lay-key=\"2\"></span></span>&nbsp;&nbsp; 随&nbsp;<span id=\"2c9180836dfd4e45016dfd82d2ee01e0\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师姓名\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd82d2ee01e0&quot;,&quot;name&quot;:&quot;上级医师姓名&quot;,&quot;placeholderText&quot;:&quot;&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;3&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"1\" title=\"上级医师姓名\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"\" contenteditable=\"true\"></span></span>&nbsp;主任（副主任）（主治）医师查房&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br/></p><div id=\"2c9180836dfd4e45016dfd844d0301e1\" title=\"上级医师查房记录\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;2c9180836dfd4e45016dfd844d0301e1&quot;,&quot;paratype&quot;:&quot;PT_sjyscfjl&quot;,&quot;name&quot;:&quot;上级医师查房记录&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_sjyscfjl\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_sjyscfjl\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"上级医师查房记录\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" tabindex=\"2\" contenteditable=\"false\" title=\"上级医师查房记录\">上级医师查房记录</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd848ba701e2\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师查房记录内容\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd848ba701e2&quot;,&quot;name&quot;:&quot;上级医师查房记录内容&quot;,&quot;placeholderText&quot;:&quot;上级医师查房内容记录&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"3\" title=\"上级医师查房记录内容\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"上级医师查房内容记录\" contenteditable=\"true\"></span></span>&nbsp;</p></div><p><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\">医师签名：&nbsp;<span id=\"4028467b6d720402016d722b57f90005\" axplugins=\"signature\" title=\"\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field signature\" isrequired=\"true\" cascadeid=\"undefined\" showcondition=\"undefined\" attrs=\"{&quot;id&quot;:&quot;4028467b6d720402016d722b57f90005&quot;,&quot;placeholderText&quot;:&quot;医师签名&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;isCurrDoctor&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;&quot;,&quot;readonly&quot;:true}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"医师签名\" contenteditable=\"false\" tabindex=\"4\">李想</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p><input id=\"pageMarginHidden\" type=\"hidden\" value=\"2.54,3.18,2.54,3.18\"/></p><p><input id=\"paperSizeHidden\" type=\"hidden\" value=\"21,29.7\"/></p><p><br/></p><p><br/></p><footer contenteditable=\"false\" class=\"ax-editor-page-footer noprint\" style=\"font-size: 12px; border-top: 1px solid rgb(204, 204, 204);\"><p>版权所有@安想智慧医疗</p></footer><p><input id=\"paperScaleHidden\" type=\"hidden\" value=\"1\"/></p>",
      //   },
      //   {
      //     "bizTime":"2020-03-19 19:12:48",
      //     "content":"<header contenteditable=\"false\" class=\"ax-editor-page-header noprint\" style=\"font-size: 12px; border-bottom: 1px solid rgb(204, 204, 204);\"><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; font-size: 14px; text-align: center;\"><strong><span style=\"font-size: 24px;\">上级医师查房记录6</span></strong><span style=\"color: #666666;\">&nbsp; &nbsp;&nbsp;</span></p></header><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd7c4f8601c5\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"datedomain\" title=\"查房时间\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd7c4f8601c5&quot;,&quot;name&quot;:&quot;查房时间&quot;,&quot;placeholderText&quot;:&quot;查房时间&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;inserCurDate&quot;:&quot;on&quot;,&quot;dateFormat&quot;:&quot;yyyy年MM月dd日HH时mm分&quot;,&quot;dateFormatType&quot;:&quot;datetime&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"0\" title=\"查房时间\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"查房时间\" contenteditable=\"true\" lay-key=\"2\"></span></span>&nbsp;&nbsp; 随&nbsp;<span id=\"2c9180836dfd4e45016dfd82d2ee01e0\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师姓名\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd82d2ee01e0&quot;,&quot;name&quot;:&quot;上级医师姓名&quot;,&quot;placeholderText&quot;:&quot;&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;3&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"1\" title=\"上级医师姓名\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"\" contenteditable=\"true\"></span></span>&nbsp;主任（副主任）（主治）医师查房&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: left;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br/></p><div id=\"2c9180836dfd4e45016dfd844d0301e1\" title=\"上级医师查房记录\" issecret=\"false\" start-stain=\"\" end-stain=\"\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;id&quot;:&quot;2c9180836dfd4e45016dfd844d0301e1&quot;,&quot;paratype&quot;:&quot;PT_sjyscfjl&quot;,&quot;name&quot;:&quot;上级医师查房记录&quot;,&quot;singleTitle&quot;:&quot;on&quot;,&quot;titleBg&quot;:&quot;F0F2F4&quot;}\" paragraphtype=\"PT_sjyscfjl\" class=\"ctrl-bg ctrl-field paragraphele paragraphele-PT_sjyscfjl\" style=\"margin-top: 0px; text-indent: 0em; display: block;\" axplugins=\"paragraphele\" oldval=\"上级医师查房记录\"><p style=\"margin:0\"><strong class=\"ctrl-value\" style=\"display:block;padding: 5px 10px;background:#F0F2F4\" tabindex=\"2\" contenteditable=\"false\" title=\"上级医师查房记录\">上级医师查房记录</strong></p><p class=\"paragraphContent\" style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal;\" contenteditable=\"true\">&nbsp;&nbsp;<span id=\"2c9180836dfd4e45016dfd848ba701e2\" contenteditable=\"false\" class=\"ctrl-bg ctrl-field\" axplugins=\"text\" title=\"上级医师查房记录内容\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" isrequired=\"false\" cascadeid=\"\" showcondition=\"\" attrs=\"{&quot;metaData&quot;:&quot;&quot;,&quot;id&quot;:&quot;2c9180836dfd4e45016dfd848ba701e2&quot;,&quot;name&quot;:&quot;上级医师查房记录内容&quot;,&quot;placeholderText&quot;:&quot;上级医师查房内容记录&quot;,&quot;tipText&quot;:&quot;&quot;,&quot;defaultVal&quot;:&quot;&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;minLen&quot;:&quot;&quot;,&quot;maxLen&quot;:&quot;&quot;,&quot;cascadeId&quot;:&quot;&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;showCondition&quot;:&quot;&quot;,&quot;readonly&quot;:&quot;&quot;,&quot;isSecret&quot;:&quot;&quot;,&quot;isHide&quot;:&quot;&quot;,&quot;quot&quot;:&quot;&quot;,&quot;source&quot;:&quot;&quot;}\" style=\"display: inline;\" oldval=\"\"><span tabindex=\"3\" title=\"上级医师查房记录内容\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"上级医师查房内容记录\" contenteditable=\"true\"></span></span>&nbsp;</p></div><p><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\">医师签名：&nbsp;<span id=\"4028467b6d720402016d722b57f90005\" axplugins=\"signature\" title=\"\" issecret=\"false\" start-stain=\"[\" end-stain=\"]\" class=\"ctrl-bg ctrl-field signature\" isrequired=\"true\" cascadeid=\"undefined\" showcondition=\"undefined\" attrs=\"{&quot;id&quot;:&quot;4028467b6d720402016d722b57f90005&quot;,&quot;placeholderText&quot;:&quot;医师签名&quot;,&quot;isDel&quot;:&quot;on&quot;,&quot;showBorder&quot;:&quot;on&quot;,&quot;isPrint&quot;:&quot;on&quot;,&quot;isCurrDoctor&quot;:&quot;on&quot;,&quot;isEmpty&quot;:&quot;&quot;,&quot;readonly&quot;:true}\" contenteditable=\"false\" style=\"display: inline;\" oldval=\"\"><span title=\"\" secret-value=\"false\" class=\"ctrl-value\" placeholder=\"医师签名\" contenteditable=\"false\" tabindex=\"4\">李想</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; line-height: 1.5em; white-space: normal; text-align: right;\"><br/></p><p><input id=\"pageMarginHidden\" type=\"hidden\" value=\"2.54,3.18,2.54,3.18\"/></p><p><input id=\"paperSizeHidden\" type=\"hidden\" value=\"21,29.7\"/></p><p><br/></p><p><br/></p><footer contenteditable=\"false\" class=\"ax-editor-page-footer noprint\" style=\"font-size: 12px; border-top: 1px solid rgb(204, 204, 204);\"><p>版权所有@安想智慧医疗</p></footer><p><input id=\"paperScaleHidden\" type=\"hidden\" value=\"1\"/></p>",
      //   }
      // ]
      // console.log(_ax_continue_print(me, config, startIdx));

      if (me.options.showContinuePrint) {
        me.options.showContinuePrint();
      }
    }
  };
};

/**
 * 续打
 * @command docontinueprint
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'docontinueprint' );
 * ```
 */
AX.plugins["docontinueprint"] = function() {
  var me = this,
    thePlugins = "docontinueprint";
  AX.commands[thePlugins] = {
    execCommand: function(task, data) {
      if (!axTools.beforeSaveCheck(me, true)) {
        return false;
      }
      // if (!flag) {
      //   var printMask = me.document.getElementById("edui_jumplayer");
      //   if (printMask) {
      //     printMask.parentNode.removeChild(printMask);
      //   }
      // }
      _ax_continue_print(me, data.config, data.startIdx);
    }
  };
};

/**
 * 续打
 * @command docontinueprint1
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'docontinueprint1' );
 * ```
 */
AX.plugins["docontinueprint1"] = function() {
  var me = this,
    thePlugins = "docontinueprint1",
    flag = false;
  AX.commands[thePlugins] = {
    execCommand: function(data) {},
    queryCommandState: function() {
      return flag;
    }
  };

  //点击编辑区，改变续打区域
  me.addListener("click", function(t, evt) {
    try {
      evt = evt || window.event;
      var theme = me.options.theme,
        c = void 0;
      if (me.queryCommandState("continueprint") == 1) {
        var f =
          evt.clientY +
          me.document.getElementsByTagName("html")[0].scrollTop +
          10;
        void 0 == c &&
          ((c = new window.AX.ui.JumpMask({
            className: "edui-jumpmask",
            theme: theme,
            getHtmlTpl: function() {
              var papersize = me.queryCommandValue("papersize"),
                pageMargin = me.queryCommandValue("pagemargin"),
                pageMarginLeft = axTools.cm2px(parseInt(pageMargin[3])),
                pageMarginTop = axTools.cm2px(parseInt(pageMargin[0])),
                paperWidth = me.document.getElementsByTagName("html")[0]
                  .offsetWidth;
              return (
                '<div id="##" class="ax-editor-print-mask" contenteditable="false" style="position: absolute;background-color: white;filter: opacity(80);opacity: 0.8;z-index: 11000;left: -' +
                pageMarginLeft +
                "px;top: -" +
                pageMarginTop +
                "px;width: " +
                paperWidth +
                'px;" class="edui-mask %%" onclick="setHight"></div>'
              );
            },
            onclick: function(a, b) {
              this.setHight(f + "px");
            }
          })),
          c.render()),
          c.show(),
          c.setHight(f + "px");
      } else {
        c && c.hide();
      }
    } catch (e) {
      console.log(e);
    }
  });
};

/* eslint-disable */

/**
 * 插入页眉
 * @command pageheader
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'pageheader');
 * ```
 */
AX.plugins["pageheader"] = function() {
  var me = this,
    thePlugins = "pageheader";
  me.commands[thePlugins] = {
    execCommand: function() {
      // var header = axTools.getByClass('ax-editor-init-page-header',me.document),
      var header = axTools.getByClass("ax-editor-page-header", me.document),
        recordHeader = axTools.getByClass(
          "ax-editor-header-record",
          me.document
        ),
        body = me.document.getElementsByTagName("body")[0];
      if (header && header.length > 0) {
        if (confirm(me.getLang("ax.delHeaderTip"))) {
          // //删除前，先记录上次页眉内容，下次从此处提取
          // if (recordHeader.length == 0) {
          //   recordHeader = document.createElement("div");
          //   axTools.addClass(recordHeader, "ax-editor-header-record");
          // } else {
          //   recordHeader = recordHeader[0];
          // }
          // recordHeader.innerHTML = header[0].innerHTML;
          // body.appendChild(recordHeader);

          // body.removeChild(header[0]);
          // //由于存在页脚时，选区定位到页脚内了，此时内容变化不会引起分页重排，此时触发编辑器获取焦点，以触发分页重排
          // var range = me.selection.getRange();
          // range.setStartAtFirst(body);
          // me.focus();
          // axTools.removeClass(body, "noMarginTop");
          if (AX.pageControle) {
            AX.pageControler.updateHeader(null);
          }
        }
      } else {
        var headerTip = me.getLang("ax.headerTip");
        header = document.createElement("header");
        // header.setAttribute('class','ax-editor-page-header ax-editor-init-page-header');
        // header.setAttribute('class','ax-editor-page-header noprint');
        header.setAttribute("class", "ax-editor-page-header");
        if (recordHeader.length > 0 && recordHeader[0].innerText != headerTip) {
          if (confirm(me.getLang("ax.recoverHeaderTip"))) {
            header.innerHTML = recordHeader[0].innerHTML;
          } else {
            header.innerHTML = '<p class="ctrl-value">' + headerTip + "</p>";
          }
        } else {
          header.innerHTML = '<p class="ctrl-value">' + headerTip + "</p>";
        }
        if (AX.pageControle) {
          AX.pageControler.updateHeader(header);
        }

        // if (body.childNodes.length > 0) {
        //   body.insertBefore(header, body.childNodes[0]);
        // } else {
        //   body.appendChild(header);
        // }
        // axTools.addClass(body, "noMarginTop");
      }
    },
    queryCommandState: function() {
      // return axTools.getByClass('ax-editor-init-page-header',me.document).length>0?1:0;
      return axTools.getByClass("ax-editor-page-header", me.document).length > 0
        ? 1
        : 0;
    }
  };
};

/**
 * 插入页脚
 * @command pagefooter
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'pagefooter');
 * ```
 */
AX.plugins["pagefooter"] = function() {
  var me = this,
    thePlugins = "pagefooter";
  me.commands[thePlugins] = {
    execCommand: function() {
      // var footer = axTools.getByClass('ax-editor-init-page-footer',me.document),
      var footer = axTools.getByClass("ax-editor-page-footer", me.document),
        recordFooter = axTools.getByClass(
          "ax-editor-footer-record",
          me.document
        ),
        body = me.document.getElementsByTagName("body")[0];
      if (footer && footer.length > 0) {
        if (confirm(me.getLang("ax.delFooterTip"))) {
          // //删除前，先记录上次页脚内容，下次从此处提取
          // if (recordFooter.length == 0) {
          //   recordFooter = document.createElement("div");
          //   axTools.addClass(recordFooter, "ax-editor-footer-record");
          // } else {
          //   recordFooter = recordFooter[0];
          // }
          // recordFooter.innerHTML = footer[0].innerHTML;
          // body.appendChild(recordFooter);

          // body.removeChild(footer[0]);

          // axTools.removeClass(body, "noMarginBottom");
          if (AX.pageControler) {
            AX.pageControler.updateFooter(null);
          }
        }
      } else {
        var footerTip = me.getLang("ax.footerTip");
        footer = document.createElement("footer");
        // footer.setAttribute('class','ax-editor-page-footer ax-editor-init-page-footer');
        // footer.setAttribute('class','ax-editor-page-footer noprint');
        footer.setAttribute("class", "ax-editor-page-footer");
        if (recordFooter.length > 0 && recordFooter[0].innerText != footerTip) {
          if (confirm(me.getLang("ax.recoverFooterTip"))) {
            footer.innerHTML = recordFooter[0].innerHTML;
          } else {
            footer.innerHTML = '<p class="ctrl-value">' + footerTip + "</p>";
          }
        } else {
          footer.innerHTML = '<p class="ctrl-value">' + footerTip + "</p>";
        }
        // // if(body.childNodes.length>0){
        // // 	body.insertBefore(footer,body.childNodes[0]);
        // // }else{
        // body.appendChild(footer);
        // // }
        // axTools.addClass(body, "noMarginBottom");
        if (AX.pageControler) {
          AX.pageControler.updateFooter(footer);
        }
      }
    },
    queryCommandState: function() {
      // return axTools.getByClass('ax-editor-init-page-footer',me.document).length>0?1:0;
      return axTools.getByClass("ax-editor-page-footer", me.document).length > 0
        ? 1
        : 0;
    }
  };
};

/**
 * 页边距设置
 * @command pagemargin
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'pagemargin');
 * ```
 */
AX.plugins["pagemargin"] = function() {
  var me = this,
    thePlugins = "pagemargin";
  me.commands[thePlugins] = {
    execCommand: function(type, value) {
      if (value == "custom") {
        axTools.commandDialog({
          me: me,
          type: thePlugins,
          hideBtns: true,
          isEdit: false,
          cssRules: "width:700px;height:200px;",
          dialogUrl: "dialogs/extends/pagemargin.html"
        });
        return;
      } else if (value && value.length > 0) {
        var body = me.document.getElementsByTagName("body")[0],
          hiddenBox = me.document.getElementById("pageMarginHidden");
        // body.style.paddingLeft = axTools.cm2px(value[3]) + "px";
        // body.style.paddingRight = axTools.cm2px(value[1]) + "px";
        // body.style.paddingTop = axTools.cm2px(value[0]) + "px";
        // body.style.paddingBottom = axTools.cm2px(value[2]) + "px";
        if (hiddenBox) {
          hiddenBox.value = value;
        } else {
          var hiddenInput = document.createElement("input");
          hiddenInput.setAttribute("id", "pageMarginHidden");
          hiddenInput.setAttribute("type", "hidden");
          hiddenInput.value = value;
          body.appendChild(hiddenInput);
        }
        if (AX.pageControler) {
          AX.pageControler.updateMargin(
            axTools.cm2px(value[3]),
            axTools.cm2px(value[1]),
            axTools.cm2px(value[0]),
            axTools.cm2px(value[2])
          );
        } else {
          AX._pageMargin = {
            left: axTools.cm2px(value[3]),
            right: axTools.cm2px(value[1]),
            top: axTools.cm2px(value[0]),
            bottom: axTools.cm2px(value[2])
          };
        }
      }
    },
    queryCommandValue: function(type) {
      var hiddenBox = me.document.getElementById("pageMarginHidden");
      if (hiddenBox) {
        return hiddenBox.value.split(",");
      } else {
        return me.options.pagemargin[0].value;
      }
    }
  };
};

/**
 * 纸张大小设置
 * @command papersize
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'papersize');
 * ```
 */
AX.plugins["papersize"] = function() {
  var me = this,
    thePlugins = "papersize";
  me.commands[thePlugins] = {
    execCommand: function(type, value) {
      var currVal = me.queryCommandValue("pagemargin");
      if (value && value.length > 0 && me.document) {
        var body = me.document.getElementsByTagName("body")[0],
          ediotrBox = axTools.getByClass(
            "edui-editor-iframeholder",
            document.getElementById(me.key)
          )[0],
          hiddenBox = me.document.getElementById("paperSizeHidden");
        console.log('body=====', body)
        if (AXEDITOR_CONFIG.fixedWidth) {
          body.style.width = axTools.cm2px(value[0]) - axTools.cm2px(currVal[0]) + "px";
          body.style.margin = "0 auto";
          ediotrBox.style.border = "1px dotted #ccc";
        } else {
          ediotrBox.style.width = "auto";
        }
        if (hiddenBox) {
          hiddenBox.value = value;
        } else {
          var hiddenInput = document.createElement("input");
          hiddenInput.setAttribute("id", "paperSizeHidden");
          hiddenInput.setAttribute("type", "hidden");
          hiddenInput.value = value;
          body.appendChild(hiddenInput);
        }
        if (AX.pageControler) {
          AX.pageControler.updateSize(
            axTools.cm2px(value[0]),
            axTools.cm2px(value[1])
          );
          // $(me.document).find('.ax-page-wrapper').style.width = axTools.cm2px(value[0])
        } else {
          var sapce = axTools.cm2px(AXEDITOR_CONFIG.printWhiteCm)
          $(me.document).find('.ax-page-wrapper').css({width: axTools.cm2px(value[0]) - sapce + 'px', 'box-sizing': 'border-box'});
          AX._pageSize = {
            width: axTools.cm2px(value[0]),
            height: axTools.cm2px(value[1])
          };
        }
      }
    },
    queryCommandValue: function(type) {
      var hiddenBox = me.document.getElementById("paperSizeHidden");
      if (hiddenBox) {
        return hiddenBox.value.split(",");
      } else {
        return me.options.papersize[0].value;
      }
    }
  };
};

/**
 * 页面的缩放
 * @command paperscale
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'paperscale');
 * ```
 */
AX.plugins["paperscale"] = function() {
  var me = this,
    thePlugins = "paperscale";
  me.commands[thePlugins] = {
    execCommand: function(type, value) {
      if (value) {
        var body = me.document.getElementsByTagName("body")[0],
          hiddenBox = me.document.getElementById("paperScaleHidden");

        var htmlNode = document.querySelectorAll('.' + me.key + "-contentiframe")[0];
        if (!htmlNode || !htmlNode.contentDocument) {
          return;
        }
        // var ediotrBox = htmlNode.contentDocument.getElementsByTagName(
        //   "html"
        // )[0];
        htmlNode.style.transform = "scale(" + value + ")";
        // htmlNode.style.padding = ((value - 1) * 20) + "% 0";
        if (hiddenBox) {
          hiddenBox.value = value;
        } else {
          var hiddenInput = document.createElement("input");
          hiddenInput.setAttribute("id", "paperScaleHidden");
          hiddenInput.setAttribute("type", "hidden");
          hiddenInput.value = value;
          body.appendChild(hiddenInput);
        }
      }
    },
    queryCommandValue: function(type) {
      var hiddenBox = me.document.getElementById("paperScaleHidden");
      if (hiddenBox) {
        return hiddenBox.value - 0;
      } else {
        return me.options.paperscale[0].value;
      }
    }
  };
};

/**
 * 分页功能
 * @command cpagebreak
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'cpagebreak');
 * ```
 */
var myselfChange = false;
function cpagebreakHandler(me, my$) {
  // 测试
  window._testRun(
    me,
    my$,
    me.options,
    me.document.getElementsByTagName("body")[0]
  );

  var printWhite = axTools.cm2px(me.options.printWhiteCm);
  var body = me.document.getElementsByTagName("body")[0], //body对象
    header = axTools.getByClass("ax-editor-page-header", me.document), //页眉
    footer = axTools.getByClass("ax-editor-page-footer", me.document), //页脚
    initPage = axTools.getByClass("ax-editor-init-page", me.document), //页码
    childrens = body.childNodes, //body下的所有子元素
    countHeight = 0, //叠加子元素高度，与页面内容高度对比，进行分页
    totalHeight = 0, //所有子元素的高度，用来计算分页减少时，重置页面高度
    bodyHeight = body.scrollHeight, //body高度
    bodyWidth =
      axTools.getDomStyle(body).width == "auto"
        ? body.offsetWidth
        : axTools.getDomStyle(body).width, //body宽度
    papersize = me.queryCommandValue("papersize"), //纸张大小
    headerHeight = header.length > 0 ? header[0].offsetHeight : 0, //页眉高度
    headermt = parseInt(axTools.getDomStyle(header[0]).marginTop), //页眉下边距
    footerHeight = footer.length > 0 ? footer[0].offsetHeight : 0, //页脚高度
    footermb = parseInt(axTools.getDomStyle(footer[0]).marginBottom), //页脚上边距
    pageNumHeight = initPage.length > 0 ? initPage[0].offsetHeight : 0, //页码高度
    pageNumMb = parseInt(axTools.getDomStyle(initPage[0]).marginBottom), //页码上边距
    pagemargin = me.queryCommandValue("pagemargin"), //页边距
    mt = parseInt(axTools.cm2px(pagemargin[0])), //上边距
    mb = parseInt(axTools.cm2px(pagemargin[2])), //下边距
    pageHeight =
      parseInt(axTools.cm2px(papersize[1])) -
      parseInt(axTools.cm2px(pagemargin[2])) / 2, //每页纸张高度
    pageContentHeight = 0, //每页内容区高度
    pageNum = 0; //页码
  headermt = isNaN(headermt) ? 0 : headermt; //没有页眉时，边距为0
  footermb = isNaN(footermb) ? 0 : footermb; //没有页脚时，边距为0
  pageNumMb = isNaN(pageNumMb) ? 0 : pageNumMb; //没有页码时，边距为0
  pageContentHeight = parseInt(
    pageHeight -
      (mt > headerHeight + headermt ? mt : headerHeight + headermt) -
      (mb > footerHeight + footermb ? mb : footerHeight + footermb) -
      printWhite * 2
  );
  console.log(
    "---papersize---",
    papersize,
    pageHeight,
    pageContentHeight,
    mt,
    mb,
    headerHeight,
    headermt
  );

  function insertHeader() {
    var newHeader = document.createElement("header");
    axTools.addClass(newHeader, "fill-header-node");
    axTools.addClass(newHeader, "ax-editor-page-header");
    newHeader.setAttribute("contenteditable", false);
    newHeader.innerHTML = headerStr;
    newHeader.style.marginBottom =
      (mt > headerHeight + headermt ? mt - headerHeight - headermt : 0) + "px";
    body.insertBefore(newHeader, childrens[i]);
  }

  // 插入分割线
  function inserLine(top) {
    var line = me.document.createElement("div");
    var pageText = me.document.createElement("span");
    axTools.addClass(pageText, "line-text");
    pageText.innerText = "第" + ++pageNum + "页";
    line.appendChild(pageText);
    axTools.addClass(line, "divid-line");
    line.style.top = top + "px";
    body.appendChild(line);
  }

  // 设置正常的分页标记，这个标记通常都是设置在分页的元素上
  // 代表着从这个元素上面开始分割
  function setCommonBreakAttrs(elem) {
    axTools.addClass(elem, "break-elem");
    elem.setAttribute(
      "break-elem-attrs",
      JSON.stringify({
        type: "top"
      })
    );
  }

  // 分割长文本的属性
  // 设置分别在该文本的第几行分割
  function setSplitLongTextAttrs(elem, lineNum) {
    elem.setAttribute(
      "break-elem-attrs",
      JSON.stringify({
        type: "my",
        lineNum: lineNum,
        tag: "text",
        width: my$(elem).width()
      })
    );
    axTools.addClass(elem, "break-elem");
  }

  // 分割table的属性
  // 设置分别在表格的第几行分割
  function setSplitTableAttrs(elem, lineNum) {
    elem.setAttribute(
      "break-elem-attrs",
      JSON.stringify({
        type: "my",
        lineNum: lineNum,
        tag: "table"
      })
    );
    axTools.addClass(elem, "break-elem");
  }

  // 获取元素距离编辑区顶部的距离
  function getElementToPageTop(elem) {
    return my$(elem).offset().top;
  }

  // 清除之前的样式
  function clearDividLine() {
    var dividLineElems = me.document.getElementsByClassName("divid-line");
    for (var i = 0; i < dividLineElems.length; i++) {
      my$(dividLineElems[i]).remove();
      i--;
    }
  }
  // 清除之前用于分页的数据
  function clearBreakAttrs() {
    var elems = me.document.getElementsByClassName("break-elem");
    for (var i = 0; i < elems.length; i++) {
      var elem = elems[i];
      axTools.removeClass(elem, "break-elem");
      elem.removeAttribute("break-elem-attrs");
    }
  }

  // 过滤掉无用元素
  function isIgnoreElem(elem) {
    //过滤掉填充元素及页眉页脚，页眉页脚在计算内容区高度时已去除，此处不参与计算
    var tagName = elem.tagName.toLowerCase();
    if (
      elem.getAttribute("type") == "hidden" ||
      tagName == "header" ||
      tagName == "footer" ||
      tagName == "pagenum" ||
      (tagName == "object" && elem.getAttribute("id") == "WebBrowser")
    ) {
      return true;
    }
    return false;
  }

  // 逐行分割，单行超长度不予支持
  function splitTable(elem, height) {
    var topVal = getElementToPageTop(elem);
    var lineNum = 0;
    var children = [];
    var tbody = elem.getElementsByTagName("tbody")[0];
    if (!tbody) {
      children = elem.children;
    } else {
      children = tbody.children;
    }
    var ch = 0;
    for (var i = 0; i < children.length; i++) {
      var child = children[i];
      if (ch + child.offsetHeight > height) {
        break;
      }
      ch += child.offsetHeight;
      lineNum++;
    }
    topVal += ch;
    var leftHeight = 0;
    for (var i = lineNum; i < children.length; i++) {
      var child = children[i];
      leftHeight += child.offsetHeight;
    }

    // 在这里为元素设置分割所需属性
    // 实际分割的操作是在预览模块中操作
    // TODO
    setSplitTableAttrs(elem, lineNum);

    return {
      topVal: topVal,
      lineNum: lineNum,
      leftHeight: leftHeight
    };
  }

  // 获取纯文本元素的行数
  function getElemRowNum(elem) {
    var styles = getComputedStyle(elem, null);
    var lh = parseInt(styles.lineHeight, 10);
    var h = parseInt(styles.height, 10);
    var lc = Math.round(h / lh);
    return lc;
  }

  // 计算纯文本元素分割的界限
  function splitBlockText(elem, height) {
    var topVal = getElementToPageTop(elem);
    var lineNum = 0;
    var styles = getComputedStyle(elem, null);
    var lh = parseInt(styles.lineHeight, 10);
    var h = parseInt(styles.height, 10);
    var lc = Math.round(h / lh);
    for (var i = 0; i < lc; i++) {
      if (height < lh * (i + 1)) {
        break;
      }
      lineNum++;
      topVal += lh;
    }

    // 在这里为元素设置分割所需属性
    // 实际分割的操作是在预览模块中操作
    // TODO
    setSplitLongTextAttrs(elem, lineNum);

    return {
      topVal: topVal,
      lineNum: lineNum,
      leftHeight: (lc - lineNum) * lh
    };
  }

  // 是否为纯文本节点
  function isClearTextElem(elem) {
    var clearTextNode = true;
    for (var i = 0; i < elem.childNodes.length; i++) {
      var node = elem.childNodes[i];
      if (node.tagName) {
        var tagName = node.tagName.toLowerCase();
        if (tagName != "span" && tagName != "strong" && tagName != "br") {
          clearTextNode = false;
        }
      } else {
        if (node.nodeName != "#text") {
          clearTextNode = false;
        }
      }
    }
    return clearTextNode;
  }

  // 判断节点是否可以分割
  function isSplitElem(elem) {
    var splitPluginNames = ["paragraphele"];
    var tagName = elem.tagName.toLowerCase();
    if (elem.childNodes && elem.childNodes.length) {
      var pluginName = elem.getAttribute("axplugins");
      if (
        tagName == "table" ||
        tagName == "tbody" ||
        splitPluginNames.indexOf(pluginName) != -1
      ) {
        return true;
      }
      if (tagName == "p") {
        // 判断该段文字是否为仅仅纯文字组成
        // TODO 目前支持纯文字分割
        if (isClearTextElem(elem)) {
          return true;
        }
      }
    } else {
      // 多行纯文本元素也可以分割
      if (tagName == "p" && getElemRowNum(elem) > 1) {
        return true;
      }
    }
    return false;
  }

  // 重置页面的基础高度
  function resetCountHeight() {
    if (pageNum === 0) {
      countHeight = 0;
    } else {
      countHeight = 0;
    }
  }
  resetCountHeight();

  // 根据当前页面的剩余高度判断元素是
  // 放入下一页
  // 切割开
  function splitElement(elem) {
    if (isIgnoreElem(elem)) {
      return;
    }
    var isTextElem = isClearTextElem(elem);
    var isTableElem = elem.tagName.toLowerCase() == "table";
    if (isTextElem && getElemRowNum(elem) > 1) {
      var p = splitBlockText(elem, pageContentHeight - countHeight);
      inserLine(p.topVal);
      resetCountHeight();
      countHeight += p.leftHeight;
    } else if (isTableElem) {
      var p = splitTable(elem, pageContentHeight - countHeight);
      inserLine(p.topVal);
      resetCountHeight();
      countHeight += p.leftHeight;
    } else if (elem.children && elem.children.length) {
      for (var i = 0; i < elem.children.length; i++) {
        var child = elem.children[i];
        if (child.tagName.toLowerCase() == "table") {
        }
        if (countHeight + child.offsetHeight > pageContentHeight) {
          if (isSplitElem(child)) {
            splitElement(child);
          } else {
            inserLine(getElementToPageTop(child));
            setCommonBreakAttrs(elem);
            resetCountHeight();
            countHeight += child.offsetHeight;
          }
        } else {
          countHeight += child.offsetHeight;
        }
      }
    } else {
      inserLine(getElementToPageTop(elem));
      setCommonBreakAttrs(elem);
      resetCountHeight();
    }
  }

  myselfChange = true;
  clearDividLine();
  clearBreakAttrs();
  splitElement(body);
  setTimeout(function() {
    myselfChange = false;
  }, 50);
}

AX.plugins.cpagebreak = function(win) {
  var me = this;
  var my$ = window.$ || win.$ || me.options.$;

  var timer = null;
  function changeHandler() {
    if (myselfChange) {
      return;
    }
    if (timer) {
      clearTimeout(timer);
    }
    timer = setTimeout(function() {
      // me.execCommand("cpagebreak");
      myselfChange = true;
      setTimeout(function() {
        myselfChange = false;
      }, 200);
      // me.document.getElementsByTagName("body")[0].innerHTML = window._testRun(me, my$, me.options, me.document.getElementsByTagName("body")[0])
      // cpagebreakHandler(me, my$);
      // window._pageBreakRuntime(my$, me.options, me.document.getElementsByTagName("body")[0])
    }, 500);
  }
  // me.removeListener("contentchange", changeHandler);
  // me.addListener("contentchange", changeHandler);
  me.commands.cpagebreak = {
    execCommand1: function() {
      var range = me.selection.getRange(),
        node = range.startContainer.parentNode,
        inHeader = AX.dom.domUtils.findParentByTagName(node, ["header"], true),
        inFooter = AX.dom.domUtils.findParentByTagName(node, ["footer"], true),
        fillHeaderNodes = axTools.getByClass("fill-header-node", me.document),
        fillFooterNodes = axTools.getByClass("fill-footer-node", me.document),
        header = axTools.getByClass("ax-editor-init-page-header", me.document), //页眉
        footer = axTools.getByClass("ax-editor-init-page-footer", me.document), //页脚
        initPage = axTools.getByClass("ax-editor-init-page", me.document), //页码
        headerStr =
          header.length > 0
            ? header[0].innerHTML.replace(/\u200B/g, "")
            : "<p>" + me.getLang("ax.headerTip") + "</p>";

      //编辑页眉时不触发此处contentchange监听，只改变所有页眉的值，失去焦点是主动触发一次
      if (
        fillHeaderNodes.length > 0 &&
        inHeader &&
        axTools.getByClass("ax-editor-page-header focus", me.document).length >
          0
      ) {
        for (var i = 0; i < fillHeaderNodes.length; i++) {
          if (inHeader != fillHeaderNodes[i]) {
            //自身不需要重复赋值，否则会导致光标定位到第一个字符前
            fillHeaderNodes[i].innerHTML = inHeader.innerHTML.replace(
              /\u200B/g,
              ""
            );
          }
        }
        header[0].innerHTML = inHeader.innerHTML.replace(/\u200B/g, ""); //将初始化header的值改变，为后续初始化做准备
      } else if (
        fillFooterNodes.length > 0 &&
        inFooter /*  && axTools.getByClass('ax-editor-page-footer focus',me.document).length>0 */
      ) {
        for (var i = 0; i < fillFooterNodes.length; i++) {
          if (inFooter != fillFooterNodes[i]) {
            //自身不需要重复赋值，否则会导致光标定位到第一个字符前
            fillFooterNodes[i].innerHTML = inFooter.innerHTML.replace(
              /\u200B/g,
              ""
            );
          }
        }
        footer[0].innerHTML = inFooter.innerHTML.replace(/\u200B/g, ""); //将初始化footer的值改变，为后续初始化做准备
      } else {
        var body = me.document.getElementsByTagName("body")[0], //body对象
          childrens = body.childNodes, //body下的所有子元素
          countHeight = 0, //叠加子元素高度，与页面内容高度对比，进行分页
          totalHeight = 0, //所有子元素的高度，用来计算分页减少时，重置页面高度
          bodyHeight = body.scrollHeight, //body高度
          bodyWidth =
            axTools.getDomStyle(body).width == "auto"
              ? body.offsetWidth
              : axTools.getDomStyle(body).width, //body宽度
          papersize = me.queryCommandValue("papersize"), //纸张大小
          headerHeight = header.length > 0 ? header[0].offsetHeight : 0, //页眉高度
          headermt = parseInt(axTools.getDomStyle(header[0]).marginTop), //页眉下边距
          footerHeight = footer.length > 0 ? footer[0].offsetHeight : 0, //页脚高度
          footermb = parseInt(axTools.getDomStyle(footer[0]).marginBottom), //页脚上边距
          pageNumHeight = initPage.length > 0 ? initPage[0].offsetHeight : 0, //页码高度
          pageNumMb = parseInt(axTools.getDomStyle(initPage[0]).marginBottom), //页码上边距
          pagemargin = me.queryCommandValue("pagemargin"), //页边距
          mt = parseInt(axTools.cm2px(pagemargin[0])), //上边距
          mb = parseInt(axTools.cm2px(pagemargin[2])), //下边距
          pageHeight =
            parseInt(axTools.cm2px(papersize[1])) -
            parseInt(axTools.cm2px(pagemargin[2])) / 2, //每页纸张高度
          pageContentHeight = 0, //每页内容区高度
          pageNum = 0; //页码
        headermt = isNaN(headermt) ? 0 : headermt; //没有页眉时，边距为0
        footermb = isNaN(footermb) ? 0 : footermb; //没有页脚时，边距为0
        pageNumMb = isNaN(pageNumMb) ? 0 : pageNumMb; //没有页码时，边距为0
        // pageContentHeight=parseInt(pageHeight-axTools.cm2px(pagemargin[0])-axTools.cm2px(pagemargin[2])-footermb);//每页内容区高度，去除页眉页脚页边距的纯内容区域高度
        pageContentHeight = parseInt(
          pageHeight -
            (mt > headerHeight + headermt ? mt : headerHeight + headermt) -
            (mb > footerHeight + footermb ? mb : footerHeight + footermb)
        ); //每页内容区高度，去除页眉页脚页边距的纯内容区域高度
        // pageContentHeight=parseInt(pageHeight-(mt>headerHeight+headermt?mt:(headerHeight+headermt))-(mb>footerHeight+footermb?mb:(footerHeight+footermb))-axTools.cm2px(0.8)*(pageNum+1));//每页内容区高度，去除页眉页脚页边距的纯内容区域高度,0.8为LODOP插件打印预览空白，其他插件可视情况修订

        //随页数增加，重新计算body的高度
        var pages =
          axTools.getByClass("ax-editor-fill-node bottom", me.document).length +
            1 ||
          /* fillHeaderNodes.length || fillFooterNodes.length ||  */ Math.ceil(
            bodyHeight / pageHeight
          ); //总页数
        // body.style.height=pages*pageHeight+'px';
        //计算每页的内容区，并设置页眉页脚
        //思路：通过每页子元素叠加，计算高度，进行填充

        // 1 ==================================================
        // 清除之前的分页样式
        // 重新计算分割内容
        // ==================================================
        function clearCacheElems() {
          //先删除所有页面填充符，再重新计算
          var fillNodes = axTools.getByClass(
            "ax-editor-fill-node",
            me.document
          );
          for (var i = 0; i < fillNodes.length; i++) {
            fillNodes[i].parentNode.removeChild(fillNodes[i]);
          }

          //先删除所有填充页眉，再重新计算
          if (fillHeaderNodes.length > 0) {
            headerStr = fillHeaderNodes[0].innerHTML;
            for (var i = 0; i < fillHeaderNodes.length; i++) {
              if (fillHeaderNodes[i].parentNode) {
                fillHeaderNodes[i].parentNode.removeChild(fillHeaderNodes[i]);
              }
            }
          }

          //先删除页码，再重新渲染
          var pageDoms = axTools.getByClass("fill-page-num-node", me.document);
          for (var i = 0; i < pageDoms.length; i++) {
            pageDoms[i].parentNode.removeChild(pageDoms[i]);
          }
        }
        clearCacheElems();

        var lastFlag = false,
          lFillNode = axTools.getByClass(
            "ax-editor-last-fill-node",
            me.document
          ); //最后一个填充块
        for (var i = 0; i < childrens.length; i++) {
          //由于i的增减可能会导致，元素为undefined，此处统一过滤
          if (!childrens[i] || !childrens[i].tagName) {
            break;
          }
          //过滤掉填充元素及页眉页脚，页眉页脚在计算内容区高度时已去除，此处不参与计算
          var tagName = childrens[i].tagName.toLowerCase();
          if (
            axTools.hasClass(childrens[i], "ax-editor-fill-node") ||
            axTools.hasClass(childrens[i], "ax-editor-last-fill-node") ||
            axTools.hasClass(childrens[i], "ax-editor-continue-print-mask") ||
            childrens[i].getAttribute("type") == "hidden" ||
            tagName == "header" ||
            tagName == "footer" ||
            tagName == "pagenum" ||
            (tagName == "object" &&
              childrens[i].getAttribute("id") == "WebBrowser")
          ) {
            continue;
          }

          if (/* !inHeader &&  */ countHeight == 0 && header.length > 0) {
            var newHeader = document.createElement("header");
            axTools.addClass(newHeader, "fill-header-node");
            axTools.addClass(newHeader, "ax-editor-page-header");
            newHeader.setAttribute("contenteditable", false);
            newHeader.innerHTML = headerStr;
            newHeader.style.marginBottom =
              (mt > headerHeight + headermt
                ? mt - headerHeight - headermt
                : 0) + "px";
            body.insertBefore(newHeader, childrens[i]);
            i++;
            countHeight +=
              mt > headerHeight + headermt ? 0 : headerHeight + headermt - mt; //页眉出现后会有一个上边距，此处加上
          } else if (countHeight == 0) {
            var fillTopNode = document.createElement("div"); //上边距填充元素
            fillTopNode.setAttribute("class", "ax-editor-fill-node top");
            fillTopNode.setAttribute("contenteditable", false);
            fillTopNode.innerHTML = " ";
            fillTopNode.style.height =
              parseInt(axTools.cm2px(pagemargin[0])) + "px";
            body.insertBefore(fillTopNode, childrens[i]);
            i++;
          }
          if (!childrens[i] || !childrens[i].tagName) {
            break;
          }

          //叠加子元素样式
          var oStyle = axTools.getDomStyle(childrens[i]),
            currChildHeight =
              oStyle.height == "auto"
                ? childrens[i].offsetHeight + "px"
                : oStyle.height;
          totalHeight +=
            Math.ceil(
              currChildHeight.substring(0, currChildHeight.length - 2)
            ) +
            parseInt(oStyle.marginTop) +
            parseInt(oStyle.marginBottom) +
            parseInt(oStyle.paddingTop) +
            parseInt(oStyle.paddingBottom);

          /**
           * 拆分td子元素
           * @param {Number} tdHeights td内元素累计高度
           * @param {Array} tdPs td子元素数组
           * @param {String} tableAttrs table的属性
           * @returns {String} 拆分后的表格字符串
           */
          function splitTdP(tdHeights, tdPs, tableAttrs) {
            if (!tdPs) {
              return "";
            }
            var tdAttrs = axTools.getNodeAttrs(tdPs[0].parentNode);
            var newTableStr = "<tr><td " + tdAttrs + ">",
              tdPStr = "";
            for (var n = 0; n < tdPs.length; n++) {
              var tdStyle = axTools.getDomStyle(tdPs[n]);
              if (isNaN(parseInt(tdStyle.height))) {
                continue;
              }
              var currTdPHeight =
                Math.ceil(tdStyle.height.substr(0, tdStyle.height.length - 2)) +
                axTools.getAttrNumVal(tdStyle.marginTop) +
                axTools.getAttrNumVal(tdStyle.marginBottom) +
                axTools.getAttrNumVal(tdStyle.paddingTop) +
                axTools.getAttrNumVal(tdStyle.paddingBottom);
              if (isNaN(currTdPHeight)) {
                continue;
              }
              tdHeights = tdHeights + currTdPHeight;
              if (tdHeights >= pageContentHeight) {
                tdPStr +=
                  '</td></tr></tbody></table></div><div class="ax-editor-break-table"><table ' +
                  tableAttrs +
                  "><tbody><tr><td " +
                  tdAttrs.replace(
                    "border-top: none;",
                    "border-top-width: 1px; border-top-color: windowtext;"
                  ) +
                  ">";
                n--;
                tdHeights = 0;
              } else {
                tdPStr += tdPs[n].outerHTML;
              }
            }
            if (tdPStr == "") {
              return "";
            }
            newTableStr += tdPStr + "</td></tr>";

            //此处处理掉切割过程中产生的多余空白行，空白行产生的原因是td中第一个元素加上本页其他元素已经大于页高，会产生一行空白
            var blankTr = "<tr><td " + tdAttrs + "></td></tr>";
            return newTableStr.replace(new RegExp(blankTr, "g"), "");
          }

          var tableTop =
            countHeight +
            parseInt(currChildHeight) +
            parseInt(oStyle.marginTop == "auto" ? "0px" : oStyle.marginTop) +
            parseInt(
              oStyle.marginBottom == "auto" ? "0px" : oStyle.marginBottom
            ) +
            parseInt(oStyle.paddingTop == "auto" ? "0px" : oStyle.paddingTop) +
            parseInt(
              oStyle.paddingBottom == "auto" ? "0px" : oStyle.paddingBottom
            );
          if (
            tagName == "table" &&
            (tableTop > pageContentHeight ||
              parseInt(currChildHeight) > pageContentHeight)
          ) {
            var trs = childrens[i].childNodes[0].childNodes,
              breakTrIndex = trs.length - 1,
              tableAttrs = axTools.getNodeAttrs(childrens[i], ["width"]),
              newTableStr =
                '<div class="ax-editor-break-table"><table ' +
                tableAttrs +
                "><tbody>",
              copyCountHeight = countHeight;
            for (var k = 0; k < trs.length; k++) {
              var trStyle = axTools.getDomStyle(trs[k]),
                tds = trs[k].childNodes,
                currTrHeight =
                  parseInt(trStyle.height) +
                  axTools.getAttrNumVal(trStyle.marginTop); //+axTools.getAttrNumVal(trStyle.marginBottom)+axTools.getAttrNumVal(trStyle.paddingTop)+axTools.getAttrNumVal(trStyle.paddingBottom);
              if (
                tds.length == 1 &&
                copyCountHeight + currTrHeight >= pageContentHeight
              ) {
                var tdPs = tds[0].childNodes,
                  tdHeights = copyCountHeight;
                if (tdPs.length > 0) {
                  newTableStr += splitTdP(tdHeights, tdPs, tableAttrs);
                } else {
                  alert(me.getLang("ax.tdOverflowPage"));
                  return;
                }
              } else {
                copyCountHeight += currTrHeight;
                if (copyCountHeight > pageContentHeight) {
                  breakTrIndex = k;
                  break;
                } else {
                  newTableStr += trs[k].outerHTML;
                }
              }
            }

            if (breakTrIndex < trs.length - 1) {
              newTableStr +=
                '</tbody></table></div><div class="ax-editor-break-table"><table ' +
                tableAttrs +
                "><tbody>";
            }
            for (var m = breakTrIndex; m < trs.length - 1; m++) {
              newTableStr += trs[m].outerHTML;
            }
            newTableStr += "</tbody></table></div>";

            childrens[i].outerHTML = newTableStr;
          }

          //单个元素超出一页纸范围，若此节点内容是纯文本暂不处理，提示用户手动分割，若此节点下有子节点，则程序自动分割
          if (
            parseInt(currChildHeight) > pageContentHeight &&
            tagName != "table"
          ) {
            var cutChildrens = childrens[i].childNodes,
              // firstCutChildName=cutChildrens[0].tagName.toLowerCase();
              elAttrs = axTools.getNodeAttrs(childrens[i]),
              cutHeight = countHeight,
              newContent =
                "<" +
                tagName +
                " " +
                elAttrs +
                ' class="ax-editor-split-text-container">';

            if (cutChildrens.length > 0) {
              if (cutChildrens[0].tagName.toLowerCase() == "table") {
                // var tableAttrs=axTools.getNodeAttrs(cutChildrens[0],['width']),
                // 	cutTrs=cutChildrens[0].childNodes[0].childNodes;
                // for(var r=0;r<cutTrs.length;r++){
                // 	var cutTrStyle=axTools.getDomStyle(cutTrs[r]),
                // 		tds=cutTrs[r].childNodes,
                // 		currTrHeight=parseInt(cutTrStyle.height)+axTools.getAttrNumVal(cutTrStyle.marginTop);
                // 	console.log(tds.length==1,cutHeight+currTrHeight,pageContentHeight)
                // 	if(tds.length==1 && cutHeight+currTrHeight>pageContentHeight){
                // 		newContent='<div class="ax-editor-break-table"><table '+tableAttrs+'><tbody>'
                // 		newContent+=splitTdP(countHeight+Math.ceil(cutTrStyle.height.substr(0,cutTrStyle.height.length-2)),cutTrs[r].childNodes[0].childNodes,tableAttrs);
                // 		newContent+='</tbody></table></div>';
                // 		childrens[i].outerHTML=newContent;
                // 	}/* else{
                // 		alert('表格单格文本超出一页纸范围，请分段书写！');
                // 		return;
                // 	} */
                // }
                // var cutTrStyle=axTools.getDomStyle(cutTrs[0])
                // newContent='<div class="ax-editor-break-table"><table '+tableAttrs+'><tbody>'
                // newContent+=splitTdP(countHeight+Math.ceil(cutTrStyle.height.substr(0,cutTrStyle.height.length-2)),cutTrs[0].childNodes[0].childNodes,tableAttrs);
                // newContent+='</tbody></table></div>';
              } else {
                for (var q = 0; q < cutChildrens.length; q++) {
                  var currEleStyle = axTools.getDomStyle(cutChildrens[q]),
                    currElHeight =
                      parseInt(currEleStyle.height) +
                      axTools.getAttrNumVal(currEleStyle.marginTop); //+axTools.getAttrNumVal(currEleStyle.marginBottom)+axTools.getAttrNumVal(currEleStyle.paddingTop)+axTools.getAttrNumVal(currEleStyle.paddingBottom);
                  cutHeight += currElHeight;
                  if (cutHeight > pageContentHeight) {
                    newContent +=
                      "</" +
                      tagName +
                      "><" +
                      tagName +
                      " " +
                      elAttrs +
                      ' class="ax-editor-split-text-container">';
                    cutHeight = 0;
                    q--;
                  } else {
                    newContent += cutChildrens[q].outerHTML;
                  }
                }
                newContent += "</" + tagName + ">";
              }
              childrens[i].outerHTML = newContent;
            } else {
              if (errTipNum == 0) {
                alert(me.getLang("ax.pOverflowPage"));
                errTipNum++;
                setTimeout(function() {
                  errTipNum = 0;
                }, 1000);
              }
              return;
            }
          }

          var childHeight = Math.ceil(
              currChildHeight.substring(0, currChildHeight.length - 2)
            ),
            offsetTop = childrens[i].offsetTop + childHeight;
          countHeight +=
            childHeight +
            axTools.getAttrNumVal(oStyle.marginTop) +
            axTools.getAttrNumVal(oStyle.marginBottom) +
            axTools.getAttrNumVal(oStyle.paddingTop) +
            axTools.getAttrNumVal(oStyle.paddingBottom);

          //页码DOM
          var pageNode = document.createElement("div");
          axTools.addClass(pageNode, "fill-page-num-node");
          if (initPage.length == 0) {
            axTools.addClass(pageNode, "ax-editor-hidden-block");
          }

          // 子元素高度大于每页内容区高度，则用填充元素填充
          if (
            countHeight >
            pageContentHeight /*  || (offsetTop)>(pageNum+1)*pageHeight */
          ) {
            //计算过程：
            // 		1、子元素叠加高度，减去当前子元素的高度，得出本页应显示的子元素叠加高度
            // 		2、内容区高度减去本页应显示的子元素叠加高度，得出需要填充的高度
            // 		3、填充的高度加上页脚高度，再加上下页边距，得出最终的填充高度
            // 		4、插入页脚
            var fillNode = document.createElement("div"), //填充元素
              blankFillHeight =
                pageContentHeight -
                (countHeight -
                  parseInt(currChildHeight) -
                  parseInt(oStyle.marginTop) -
                  parseInt(oStyle.marginBottom) -
                  parseInt(oStyle.paddingTop) -
                  parseInt(oStyle.paddingBottom));
            fillHeight = blankFillHeight; //需填充高度
            if (mb < footerHeight + footermb) {
              fillHeight += footerHeight + footermb;
            } else {
              fillHeight += parseInt(mb);
            }

            fillNode.setAttribute(
              "style",
              "page-break-after:always;overflow:hidden;height:" +
                fillHeight +
                "px;"
            );
            // fillNode.setAttribute('style','overflow:hidden;height:'+fillHeight+'px;');
            fillNode.setAttribute("class", "ax-editor-fill-node bottom");
            fillNode.setAttribute("contenteditable", false);
            fillNode.innerHTML = " ";
            body.insertBefore(fillNode, childrens[i]);

            var newFooter = null;
            //设置页脚的情况下，将页脚加入每页底部
            if (footer && footer.length > 0) {
              newFooter = createFooterNode();
              fillNode.appendChild(newFooter);
              var newFooterHeight = axTools.getDomStyle(newFooter).height,
                fillNodeHeight = axTools.getDomStyle(fillNode).height;
              newFooterHeight = parseInt(
                newFooterHeight == "auto"
                  ? newFooter.offsetHeight
                  : newFooterHeight
              );
              fillNodeHeight = parseInt(
                fillNodeHeight == "auto"
                  ? fillNode.offsetHeight
                  : fillNodeHeight
              );
              if (fillNodeHeight > newFooterHeight + footermb) {
                newFooter.style.top =
                  fillNodeHeight - newFooterHeight - footermb + "px";
              } else {
                fillNode.style.height =
                  newFooterHeight + footermb + blankFillHeight + "px";
              }
            }

            //加入页码
            pageNode.innerHTML = ++pageNum;
            fillNode.appendChild(pageNode);

            //修复计算误差，保证底部填充在每页最下面
            var fillNodeTop = fillNode.offsetTop + fillNode.offsetHeight;
            if (fillNodeTop != pageHeight * pageNum) {
              fillNode.style.height =
                parseInt(fillNode.style.height) +
                (pageHeight * pageNum -
                  fillNodeTop) /* -8*pageNum-headerHeight-headermt */ +
                "px";
              if (newFooter) {
                newFooter.style.top =
                  parseInt(newFooter.style.top) +
                  (pageHeight * pageNum -
                    fillNodeTop) /* -8*pageNum-headerHeight-headermt */ +
                  "px";
                //页脚超出容器高度会隐藏，此处自动提升容器高度，撑开内容区
                if (parseInt(newFooter.style.top) < 0) {
                  fillNode.style.height =
                    parseInt(fillNode.style.height) +
                    Math.abs(parseInt(newFooter.style.top)) +
                    blankFillHeight +
                    "px";
                  newFooter.style.top = blankFillHeight + "px";
                }
              }
            }
            countHeight = 0;
            i--; //当前元素需放入下一页，因此将计数器i减1，作为下一页的第一个元素计算
            continue;
          }

          if (!lastFlag) {
            //设置最后一页的页脚
            if (
              pageNum + 1 == pages &&
              countHeight <= pageContentHeight &&
              lFillNode.length == 0
            ) {
              var lastFillNode = document.createElement("div"); //填充元素
              lastFillNode.setAttribute("class", "ax-editor-last-fill-node");
              lastFillNode.setAttribute("contenteditable", false);

              if (footer.length > 0) {
                //设置页脚的情况下，将页脚加入每页底部
                var lastFooter = createFooterNode();
                lastFillNode.style.width = bodyWidth;
                lastFillNode.appendChild(lastFooter);
              }

              //加入页码
              pageNode.innerHTML = ++pageNum;
              lastFillNode.appendChild(pageNode);

              body.appendChild(lastFillNode);
              lastFlag = true;
            } else if (pageNum + 1 == pages && lFillNode.length > 0) {
              var lfillNode = lFillNode[0];
              lfillNode.style.width = bodyWidth;
              //清除页脚时，删除最后一个
              if (footer.length == 0) {
                var lfooter = lfillNode.getElementsByTagName("footer");
                if (lfooter.length > 0) {
                  lfooter[0].parentNode.removeChild(lfooter[0]);
                }
              } else if (lfillNode.getElementsByTagName("footer").length == 0) {
                //设置页脚的情况下，将页脚加入每页底部
                var lastFooter = createFooterNode();
                lfillNode.style.width = bodyWidth;
                lfillNode.appendChild(lastFooter);
              }
              lastFlag = true;
            }
          }
        }

        if (
          pageNode &&
          lFillNode.length > 0 &&
          pageNum == pages - 1 &&
          axTools.getByClass("fill-page-num-node", lFillNode[0]).length == 0
        ) {
          //加入页码
          pageNode.innerHTML = ++pageNum;
          lFillNode[0].appendChild(pageNode);
        }

        //计算body高度
        if (
          totalHeight <
          pageContentHeight * (pageNum == 0 ? 1 : pageNum - 1)
        ) {
          //内容缩短，减少页码数
          var headerNodes = axTools.getByClass("fill-header-node", me.document),
            footerNodes = axTools.getByClass("fillfooter-node", me.document);
          if (headerNodes.length > 0) {
            body.removeChild(headerNodes[headerNodes.length - 1]);
          }
          if (footerNodes.length > 0) {
            body.removeChild(footerNodes[footerNodes.length - 1].parentNode);
          }
          body.style.height =
            pageHeight * (pageNum == 0 ? 1 : pageNum - 1) + "px";
        } else {
          if (me.getContent() == "") {
            //清空后，重置内容区高度
            body.style.height = pageHeight + "px";
          } else if (parseInt(body.style.height) != pages * pageHeight) {
            //内容增长，增加页码数
            body.style.height = pages * pageHeight + "px";
          }
        }

        //只有一页的情况
        if (pages == 1) {
          body.style.height = pageHeight + "px";
          if (
            lFillNode.length > 0 &&
            footer.length > 0 &&
            axTools.getByClass("fill-footer-node", lFillNode[0]).length == 0
          ) {
            var lastFooter = createFooterNode();
            lFillNode[0].style.width = bodyWidth;
            lFillNode[0].appendChild(lastFooter);
          }
        }
      }

      //重置编辑区父元素高度，避免出现双层滚动条，即编辑区与body均出现滚动条
      axTools.getByClass(
        "edui-editor-iframeholder",
        document.getElementById(me.key).document
      )[0].style.height = body.style.height;

      /**
       * 创建页脚
       * @returns {DOM} 页脚节点
       */
      function createFooterNode() {
        var lastFooter = footer[0].cloneNode();
        axTools.addClass(lastFooter, "fill-footer-node");
        axTools.removeClass(lastFooter, "ax-editor-init-page-footer");
        // lastFooter.style.top=parseInt(axTools.cm2px(pagemargin[2]))+'px';
        lastFooter.innerHTML = footer[0].innerHTML;

        return lastFooter;
      }
    }
  };
};

/* eslint-disable */

/**
 * 二维码
 * @command qrcode
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'qrcode');
 * ```
 */
AX.plugins['qrcode'] = function () {
	var me = this,
		thePlugins = 'qrcode';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:700px;height:500px;',
				dialogUrl: 'dialogs/extends/qrcode.html'
			});
		}
	};
	var popup = axTools.makePopup({
		me: me,
		type: thePlugins
	});
	// popup.render();
	me.addListener('mouseover', function (t, evt) {
		evt = evt || window.event;
		var el = evt.target || evt.srcElement;
		var axPlugins = el.getAttribute('axplugins');
		if (/img/ig.test(el.tagName) && axPlugins == thePlugins) {
			axTools.setPopupContent(popup, el, '<nobr>' + me.getLang('ax.' + thePlugins) + ': <span onclick=$$._edittext() class="edui-clickable">' + this.getLang('edit') + '</span>&nbsp;&nbsp;<span onclick=$$._delete() class="edui-clickable">' + this.getLang('delete') + '</span></nobr>');
		}
	});
};
/* eslint-disable */

/**
 * 单选框组
 * @command radio
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'radio');
 * ```
 */
AX.plugins["radio"] = function() {
  var me = this,
    thePlugins = "radio";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        isEdit: isEdit,
        cssRules: "width:700px;height:560px;",
        dialogUrl:
          "dialogs/extends/checkbox.html?formName=radioForm&thePlugins=radio&pluginCode=04"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins,
    delFunc: function(that) {
      me.window.confirmMsg(me.getLang("ax.delCtrlTip") + 1, function(rsl) {
        if (!rsl) {
          return;
        }
        var targetDom = that.anchorEl; //获取根节点元素，并删除
        if (targetDom.getAttribute("axplugins") === null) {
          targetDom = targetDom.parentNode;
        }
        baidu.editor.dom.domUtils.remove(targetDom, false);
      });
      // if (window.confirm(me.getLang('ax.delCtrlTip') + 1)) {
      // 	var targetDom = that.anchorEl; //获取根节点元素，并删除
      // 	if (targetDom.getAttribute('axplugins') === null) {
      // 		targetDom = targetDom.parentNode;
      // 	}
      // 	baidu.editor.dom.domUtils.remove(targetDom, false);
      // }
      that.hide();
    }
  });
  // popup.render();
  // me.addListener("mouseover", function(t, evt) {
  //   axTools.commonEditTip(thePlugins, me, popup, evt);
  // });

  me.addListener("click", function(t, evt) {
    var rang = me.selection.getRange(),
      parentNode = rang.startContainer.parentElement;
    var axPluginsNode = AX.dom.domUtils.findParent(
      parentNode,
      function(dom) {
        return (
          dom.tagName === "SPAN" && dom.getAttribute("axplugins") == "radio"
        );
      },
      true
    );
    //tab选中单独选控件时，默认选中第一项
    if (axPluginsNode) {
      var focusChild = axTools.getByClass("focusBox", axPluginsNode);
      if (focusChild.length == 0) {
        var firstChild = axTools.getByTagAttr(
          "input",
          "type",
          axPluginsNode.getAttribute("axPlugins"),
          axPluginsNode
        )[0];
        axTools.addClass(firstChild, "focusBox");
      }
      me.fireEvent('contentchange');
    }
  });
  me.addListener("change", function(t, evt) {
    alert(1);
  });
};

/**
 * 复选框组
 * @command checkbox
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'checkbox');
 * ```
 */
AX.plugins["checkbox"] = function() {
  var me = this,
    thePlugins = "checkbox";
  me.commands[thePlugins] = {
    execCommand: function(type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        isEdit: isEdit,
        cssRules: "width:700px;height:560px;",
        dialogUrl:
          "dialogs/extends/checkbox.html?formName=checkboxForm&thePlugins=checkbox&pluginCode=05"
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();
  // me.addListener("mouseover", function(t, evt) {
  //   axTools.commonEditTip(thePlugins, me, popup, evt);
  // });

  me.addListener("click", function(t, evt) {
    var rang = me.selection.getRange(),
      parentNode = rang.startContainer.parentElement;
    var axPluginsNode = AX.dom.domUtils.findParent(
      parentNode,
      function(dom) {
        return (
          dom.tagName === "SPAN" && dom.getAttribute("axplugins") == "checkbox"
        );
      },
      true
    );
    //tab选中单独选控件时，默认选中第一项
    if (axPluginsNode) {
      var focusChild = axTools.getByClass("focusBox", axPluginsNode);
      if (focusChild.length == 0) {
        var firstChild = axTools.getByTagAttr(
          "input",
          "type",
          axPluginsNode.getAttribute("axPlugins"),
          axPluginsNode
        )[0];
        axTools.addClass(firstChild, "focusBox");
      }
      me.fireEvent('contentchange');
    }
  });
};

// plugins/undo.js
/**
 * undo redo
 * @file
 * @since 1.2.6.1
 */

/**
 * 撤销上一次执行的命令
 * @command undo
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'undo' );
 * ```
 */

/**
 * 重做上一次执行的命令
 * @command redo
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'redo' );
 * ```
 */

AX.plugins['undo'] = function () {
    var saveSceneTimer;
    var me = this,
        maxUndoCount = me.options.maxUndoCount || 20,
        maxInputCount = me.options.maxInputCount || 20;
    // fillchar = new RegExp(domUtils.fillChar + '|<\/hr>', 'gi');// ie会产生多余的</hr>
    var noNeedFillCharTags = {
        ol: 1, ul: 1, table: 1, tbody: 1, tr: 1, body: 1
    };
    var orgState = me.options.autoClearEmptyNode;

    function UndoManager() {
        this.isInput = false;
        this.index = 0;
        this.hasUndo = false;
        this.hasRedo = false;
        //统一兼容问题
        this.MutationObserver = window.MutationObserver ||
            window.WebKitMutationObserver ||
            window.MozMutationObserver;
        var rangeDom = new AX.dom.Range(me.document)
        //判断浏览器是或否支持MutationObserver;
        this.mutationObserverSupport = !!this.MutationObserver;

        //默认监听子元素， 子元素的属性， 属性值的改变;
        this.options = {
            'childList': true,
            'subtree': true,
            'attributes': false,
            'characterData': true,
            'attributeOldValue': false,
            'characterDataOldValue': true,
            // 'attributeFilter': ["contenteditable", "class", "tabindex"]
        };
        this.pinyinText = "";

        // 记录当前变动是否为分页
        this.isPage = false;

        //这个保存了MutationObserve的实例;
        this.muta = {};

        //list这个变量保存了用户的操作;
        this.list = [];

        //当前回退的索引
        this.index = 0;

        //如果没有dom的话，就默认监听body;
        this.dom = null;

        // 忽略的元素
        this.ignoreDom = [
            "paperScaleHidden",
            "ax-page-wrapper",
            "tempTagBefore",
            "tempTagAfter"
        ];

        //马上开始监听;
        // this.observe();
        this.checkEmpty = function (node) {
            return (node.nodeType == 3 || !node.parentElement) && node.textContent.replace(/\u200B/g, '') == "";
        }

        this.callback = function (records, instance) {
            // AX.pageControler.startContentChangeChecker()
            var isPass = true;
            if (this.isInput) { // 校验输入法
                this.isPage = false;
                return;
            }
            if(!me.document) this.disconnect();
            for (var a = 0; a < records.length; a++) {
                if (records[a].removedNodes.length !== 0) {
                    if (!this.checkEmpty(records[a].removedNodes[0])) {
                        // return; // 屏蔽无占位字符处理
                        isPass = false;
                        break;
                    }
                    // 过滤不需要撤回的操作
                    if (this.ignoreDom.indexOf(records[a].removedNodes[0].id) == -1 || this.ignoreDom.indexOf(records[a].removedNodes[0].className) == -1) {
                        isPass = false;
                        break;
                    };
                    if (!(records[a].removedNodes[0].nodeType != 3 && (records[a].removedNodes[0].id.indexOf("_baidu_bookmark_end_") > -1 || records[a].removedNodes[0].id.indexOf("_baidu_bookmark_start_") > -1))) {
                        isPass = false;
                        break;
                    };
                }
                if (records[a].addedNodes.length !== 0) {
                    if (!this.checkEmpty(records[a].addedNodes[0])) {
                        // return; // 屏蔽无占位字符处理
                        isPass = false;
                        break;
                    }
                    if (this.ignoreDom.indexOf(records[a].addedNodes[0].id) == -1 || this.ignoreDom.indexOf(records[a].addedNodes[0].className) == -1) {
                        isPass = false;
                        break;
                    };
                    if (!(records[a].addedNodes[0].nodeType != 3 && (records[a].addedNodes[0].id.indexOf("_baidu_bookmark_end_") > -1 || records[a].addedNodes[0].id.indexOf("_baidu_bookmark_start_") > -1))) {
                        isPass = false;
                        break;
                    };
                }
                if(records[a].type == 'characterData') {
                    isPass = false;
                    break;
                }
            }
            if(isPass) {
                this.isPage = false;
                return;
            }
            // 清空当前操作后的步骤
            this.list.splice(this.index + 1);
            if(this.isPage) { // 分页时，只记录最后一步操作，防止分页导致多个撤回步骤
                this.list[this.list.length - 1] = me.document.body.innerHTML;
            }else{
                me.document && this.list.push(me.document.body.innerHTML);
            }
            this.isPage = false;
            // 最大记录数，超出后删除
            if (this.list.length > maxUndoCount) {
                this.list.shift();
            }
            //重新设置索引;
            this.index = this.list.length - 1;
            this.update();
            return;
            var _this = this;
            for (var i = 0; i < records.length; i++) {
                // console.log(records);
                // if(i > 2) break;
                var record = records[i];
                var target = record.target;
                var nextNode = record.nextSibling;
                //删除元素或者是添加元素;
                if (record.type === "childList") {
                    var undoId = target.getAttribute("undoId") ? target.getAttribute("undoId") : (+new Date()); // 关联ID，防止target节点被删除后撤回失败；
                    target.setAttribute("undoId", undoId);
                    //如果是删除元素;
                    if (record.removedNodes.length !== 0) {

                        //获取元素的相对索引;
                        var indexs = nextNode ? _this.getIndexs(target.childNodes, [nextNode]) : [-1];
                        _this.list.push({
                            "undo": function () {
                                _this.disconnect();
                                _this.addChildren(this.target); //(this.undoId, this.changeVal, this.tagName, indexs);
                                _this.reObserve();
                            },
                            "redo": function () {
                                _this.disconnect();
                                _this.removeChildren(this.undoId, this.changeVal, this.tagName);
                                _this.reObserve();
                            },
                            "target": target,
                            "changeVal": record.removedNodes,
                            "undoId": undoId,
                            "tagName": target.tagName
                        });
                        //如果是添加元素;
                    };

                    if (record.addedNodes.length !== 0) {
                        if (this.checkEmpty(record.addedNodes[0])) {
                            continue; // 屏蔽无占位字符处理
                        }
                        if (this.ignoreDom.indexOf(record.addedNodes[0].id) > -1 || this.ignoreDom.indexOf(record.addedNodes[0].className) > -1) continue;
                        if (record.addedNodes[0].nodeType != 3 && (record.addedNodes[0].id.indexOf("_baidu_bookmark_end_") > -1 || record.addedNodes[0].id.indexOf("_baidu_bookmark_start_") > -1)) continue;

                        for (var j = 0; j < record.addedNodes.length; j++) {
                            if (record.addedNodes[j].nodeType !== 3 && record.addedNodes[j].getAttribute("undoId")) {
                                record.addedNodes[j].removeAttribute("undoId");
                            }
                        }
                        //获取元素的相对索引;
                        var indexs = nextNode ? _this.getIndexs(target.childNodes, [nextNode]) : [-1];
                        _this.list.push({
                            "undo": function () {
                                _this.disconnect();
                                _this.removeChildren(this.undoId, this.changeVal, this.tagName);
                                _this.reObserve();
                            },
                            "redo": function () {
                                _this.disconnect();
                                _this.addChildren(this.undoId, this.changeVal, this.tagName, indexs);
                                _this.reObserve();
                            },
                            "target": target,
                            "changeVal": record.addedNodes,
                            "undoId": undoId,
                            "tagName": target.tagName
                        });
                    };
                    //@desc characterData是什么鬼;
                    //ref :  http://baike.baidu.com/link?url=Z3Xr2y7zIF50bjXDFpSlQ0PiaUPVZhQJO7SaMCJXWHxD6loRcf_TVx1vsG74WUSZ_0-7wq4_oq0Ci-8ghUAG8a
                } else if (record.type === "characterData") {
                    var oldValue = record.oldValue;
                    var newValue = record.target.textContent //|| record.target.innerText, 不准备处理IE789的兼容，所以不用innerText了;
                    if (this.pinyinText != "") {
                        var index = newValue.lastIndexOf(this.pinyinText);
                        oldValue = newValue.substring(0, index) + "" + newValue.substring(index * 1 + this.pinyinText.length * 1, newValue.length);
                    }
                    this.pinyinText = ""; // 置为空
                    _this.list.push({
                        "undo": function () {
                            rangeDom = new AX.dom.Range(me.document)
                            _this.disconnect();
                            target.textContent = this.oldValue;
                            rangeDom.setEnd(target, -1).setCursor(false, true);
                            _this.reObserve();
                        },
                        "redo": function () {
                            rangeDom = new AX.dom.Range(me.document)
                            _this.disconnect();
                            target.textContent = this.newValue;
                            rangeDom.setEnd(target, -1).setCursor(false, true);
                            _this.reObserve();
                        },
                        "oldValue": oldValue,
                        "newValue": newValue
                    });
                    //如果是属性变化的话style, dataset, attribute都是属于attributes发生改变, 可以统一处理;
                }
                // else if (record.type === "attributes") {
                //     return; // 暂时屏蔽
                //     var oldValue = record.oldValue;
                //     var newValue = record.target.getAttribute(record.attributeName);
                //     var attributeName = record.attributeName;
                //     _this.list.push({
                //         "undo": function () {
                //             _this.disconnect();
                //             target.setAttribute(attributeName, oldValue);
                //             _this.reObserve();
                //         },
                //         "redo": function () {
                //             _this.disconnect();
                //             target.setAttribute(attributeName, newValue);
                //             _this.reObserve();
                //         },
                //         "target": target
                //     });
                // };
            };

            //重新设置索引;
            this.index = this.list.length - 1;
            this.update();
        }

        this.removeChildren = function (undoId, nodes, tagName) {

            for (var i = 0, len = nodes.length; i < len; i++) {
                var target = nodes[i].parentElement || axTools.getByTagAttr(tagName, "undoId", undoId, me.document)[0];
                if (!target) return; // 未找到目标元素，返回。
                if (nodes[i].id == "tempTagBefore" || nodes[i].id == "tempTagAfter") {
                    continue;
                }
                if (nodes[i].nodeType == 3) {
                    if (!nodes[i].parentElement) {
                        target.textContent = target.textContent.replace(nodes[i].textContent, "");
                    } else {
                        nodes[i].textContent = "";
                    }
                    continue;
                };
                if (nodes[i].parentElement) {
                    target.removeChild(nodes[i]);
                }
                if (target.childNodes.length == 0) {
                    target.innerHTML = "<br>"
                }
            };
        }

        this.addChildren = function (undoId, nodes, tagName, indexs) {
            rangeDom = new AX.dom.Range(me.document)
            var target = axTools.getByTagAttr(tagName, "undoId", undoId, me.document)[0];
            if (!target) return; // 未找到目标元素，返回。
            for (var i = 0, len = nodes.length; i < len; i++) {
                if (target.childNodes.length > 0 && target.childNodes[target.childNodes.length - 1].tagName == "BR") {
                    target.removeChild(target.childNodes[target.childNodes.length - 1])
                }
                if (target.children[indexs[i]]) {
                    target.insertBefore(nodes[i], target.children[indexs[i]]);
                } else {
                    target.appendChild(nodes[i]);
                    target.innerHTML = target.innerHTML + "&#8203;";
                };
                if (nodes[i].tagName == "BR") return;
                rangeDom.setEnd(nodes[i], 0).setCursor(false, true);
            };
        }
        //快捷方法,用来判断child在父元素的哪个节点上;
        this.indexOf = function (target, obj) {
            return Array.prototype.indexOf.call(target, obj)
        }

        this.getIndexs = function (target, objs) {
            var result = [];
            for (var i = 0; i < objs.length; i++) {
                result.push(this.indexOf(target, objs[i]));
            };
            return result;
        }
        /**
         * @desc 重新开始监听;
         * */
        this.reObserve = function () {
            this.muta && this.muta.observe && this.muta.observe(this.dom, this.options);
        }
        /**
         * @desc 指定监听的对象
         * */
        this.observe = function () {
            if (!this.dom && this.dom.nodeType !== 1) return;
            if(this.muta.observe) {
                this.disconnect()
            }
            this.reset();
            this.muta = new this.MutationObserver(this.callback.bind(this));
            //马上开始监听;
            this.muta.observe(this.dom, this.options);
        }

        /**
        *@desc 不记录dom操作， 所有在这个函数内部的操作不会记录到undo和redo的列表中;
        * */
        this.without = function (fn) {
            this.disconnect();
            fn & fn();
            this.reObserve();
        }

        /**
         * @desc 取消监听;
         * */
        this.disconnect = function () {
            console.log("取消监听")
            return this.muta && this.muta.disconnect && this.muta.disconnect();
        }

        /**
         * @desc 把指定index后面的操作删除;
         * */
        this.splice = function (index) {

            this.list.splice(index);

        }

        this.updateAxPageControler = function (html) {
            AX.pageControler.resetAllPageElems && AX.pageControler.resetAllPageElems(html);
        }

        this.undo = function () {
            if (this.canUndo()) {
                // this.list[this.index].undo();
                this.disconnect();
                me.body.innerHTML = this.list[this.index - 1];
                this.updateAxPageControler(me.body.innerHTML);
                this.index--;
                this.reObserve();
            };
            this.update();
        };
        this.redo = function () {
            // if (this.hasRedo) {
            //     while (this.list[this.index].content == this.list[this.index + 1].content) {
            //         this.index++;
            //         if (this.index == this.list.length - 1) {
            //             return this.restore(this.index);
            //         }
            //     }
            //     this.restore(++this.index);
            // }
            if (this.canRedo()) {
                this.disconnect();
                this.index++;
                // this.list[this.index].redo();
                me.body.innerHTML = this.list[this.index];
                this.updateAxPageControler(me.body.innerHTML);
                this.reObserve();
            };
            this.update();
        };

        this.restore = function () {
            // var me = this.editor;
            // var scene = this.list[this.index];
            // var root = UE.htmlparser(scene.content.replace(fillchar, ''));
            // me.options.autoClearEmptyNode = false;
            // me.filterInputRule(root);
            // me.options.autoClearEmptyNode = orgState;
            // //trace:873
            // //去掉展位符
            // me.document.body.innerHTML = root.toHtml();
            // me.fireEvent('afterscencerestore');
            // //处理undo后空格不展位的问题
            // if (browser.ie) {
            //     utils.each(domUtils.getElementsByTagName(me.document,'td th caption p'),function(node){
            //         if(domUtils.isEmptyNode(node)){
            //             domUtils.fillNode(me.document, node);
            //         }
            //     })
            // }

            // try{
            //     var rng = new dom.Range(me.document).moveToAddress(scene.address);
            //     rng.select(noNeedFillCharTags[rng.startContainer.nodeName.toLowerCase()]);
            // }catch(e){}

            // this.update();
            // this.clearKey();
            // //不能把自己reset了
            // me.fireEvent('reset', true);
        };

        this.getScene = function () {
            //             var me = this.editor;
            //             var rng = me.selection.getRange(),
            //                 rngAddress = rng.createAddress(false,true);
            //             me.fireEvent('beforegetscene');
            //             var root = UE.htmlparser(me.body.innerHTML);
            //             me.options.autoClearEmptyNode = false;
            //             me.filterOutputRule(root);
            //             me.options.autoClearEmptyNode = orgState;
            //             var cont = root.toHtml();
            //             //trace:3461
            //             //这个会引起回退时导致空格丢失的情况
            // //            browser.ie && (cont = cont.replace(/>&nbsp;</g, '><').replace(/\s*</g, '<').replace(/>\s*/g, '>'));
            //             me.fireEvent('aftergetscene');

            //             return {
            //                 address:rngAddress,
            //                 content:cont
            //             }
        };
        /**
         * @desc 保存Mutation操作到list;
         * */
        this.save = function (notCompareRange, notSetCursor) {
            // clearTimeout(saveSceneTimer);
            // return;
            // var currentScene = this.getScene(notSetCursor),
            //     lastScene = this.list[this.index];

            // if(lastScene && lastScene.content != currentScene.content){
            //     me.trigger('contentchange')
            // }
            // //内容相同位置相同不存
            // if (lastScene && lastScene.content == currentScene.content &&
            //     ( notCompareRange ? 1 : compareRangeAddress(lastScene.address, currentScene.address) )
            //     ) {
            //     return;
            // }
            // this.list = this.list.slice(0, this.index + 1);
            // this.list.push(currentScene);
            // //如果大于最大数量了，就把最前的剔除
            // if (this.list.length > maxUndoCount) {
            //     this.list.shift();
            // }
            // this.index = this.list.length - 1;
            // this.clearKey();
            // //跟新undo/redo状态
            // this.update();

        };

        /**
         * @desc 判断是否可以撤销操作
         * */
        this.canUndo = function () {

            return this.index !== -1;

        },

            /**
             * @desc 判断是否可以重新操作;
             * */
            this.canRedo = function () {

                return this.list.length - 1 !== this.index;

            }

        this.update = function () {
            this.hasRedo = !!this.list[this.index + 1];
            this.hasUndo = this.index == 0 ? false : !!this.list[this.index];
        };
        this.reset = function () {
            this.list = [];
            this.index = 0;
            this.hasUndo = false;
            this.hasRedo = false;
            // 初始化时记录文书初始值
            this.list.push(me.body.innerHTML);
            // this.clearKey();
        };
        this.clearKey = function () {
            // keycont = 0;
            // lastKeyCode = null;
        };
    }


    function saveScene() {
        // this.undoManger.save();
    }

    me.addListener('saveScene', function () {
        var args = Array.prototype.splice.call(arguments, 1);
        // this.undoManger.save.apply(this.undoManger,args);
    });

    //    me.addListener('beforeexeccommand', saveScene);
    //    me.addListener('afterexeccommand', saveScene);

    me.addListener('reset', function (type, exclude) {
        if (!exclude) {
            this.undoManger.reset();
        }
    });

    me.undoManger = new UndoManager();
    me.undoManger.editor = me;

    me.commands['redo'] = me.commands['undo'] = {
        execCommand: function (cmdName) {
            this.undoManger[cmdName]();
        },
        queryCommandState: function (cmdName) {
            return this.undoManger['has' + (cmdName.toLowerCase() == 'undo' ? 'Undo' : 'Redo')] ? 0 : -1;
        },
        notNeedUndo: 1
    };

    var keys = {
            //  /*Backspace*/ 8:1, /*Delete*/ 46:1,
            /*Shift*/ 16: 1, /*Ctrl*/ 17: 1, /*Alt*/ 18: 1,
        37: 1, 38: 1, 39: 1, 40: 1

    },
        keycont = 0,
        lastKeyCode;
    //输入法状态下不计算字符数
    var inputType = false;
    me.addListener('ready', function () {
        AX.dom.domUtils.on(this.body, 'compositionstart', function (e) { // 输入法开始，断开监听
            me.undoManger.isInput = true;
            // me.undoManger.disconnect();
        });
        AX.dom.domUtils.on(this.body, 'compositionend', function (e) { // 输入文字时，重新监听
            me.undoManger.pinyinText = e.data;
            me.undoManger.isInput = false;
            // me.undoManger.reObserve();
        })
    });
    //快捷键
    me.addshortcutkey({
        "Undo": "ctrl+90", //undo
        "Redo": "ctrl+89" //redo

    });
    //扩展实例，添加关闭和开启命令undo
    me.stopCmdUndo = function () {
        me.__hasEnterExecCommand = true;
    };
    me.startCmdUndo = function () {
        me.__hasEnterExecCommand = false;
    }
};
/* eslint-disable */

/**
 * 下拉元素
 * @command select
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'select');
 * ```
 */
AX.plugins['select'] = function () {
	var me = this,
		thePlugins = 'select';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			axTools.commandDialog({
				me: me,
				type: type,
				isEdit: isEdit,
				cssRules: 'width:700px;height:560px;',
				dialogUrl: 'dialogs/extends/checkbox.html?formName=selectForm&thePlugins=select&pluginCode=12'
			});
		}
	};
	var menuTitle = me.getLang("labelMap." + thePlugins) || "",
		selectItems = new baidu.editor.ui.Menu({
			editor: me,
			className: "edui-for-editattr edui-list",
			content: "",
			title: menuTitle,
			initValue: menuTitle,
			indexByValue: function (value) {
				if (value) {
					for (var item, i = 0; item = this.items[i]; i++) {
						if (item.value.indexOf(value) != -1) {
							return i;
						}
					}
				}
				return -1;
			},
			selectByValue: function () {

			}
		});
	selectItems.render();
	var popup = axTools.makePopup({
		me: me,
		type: thePlugins,
		editFunc: function (that) {
			var axplugins = that.anchorEl.getAttribute("axplugins"); //判断是多选 还是单选
			baidu.editor.plugins[axplugins].editdom = popup.anchorEl;
			me.execCommand(axplugins, true);
			that.hide();
		}
	});
	// popup.render();
	// me.addListener('mouseover', function (t, evt) {
	// 	axTools.commonEditTip(thePlugins, me, popup, evt);
	// });
	me.addListener("click", function (t, evt) {
		try {
			evt = evt || window.event;
			var el = evt.target || evt.srcElement;
			if (me.options.editorModel === "pure" || me.options.editorModel === "dirty" || me.options.editorModel === "secret" || me.options.editorModel === "preview") return; //清洁模式与非清洁模式 保密模式下不触发点击事件
			if ("view" != me.options.editorModel) {
				if (axTools.hasClass(el, 'ctrl-value')) {
					var ctrlType = el.parentNode.getAttribute('axplugins');
					if (ctrlType != 'combine') {//组合元素 内部文本 禁止点击选中
						var range = me.selection.getRange();
						if (range.collapsed || range.startContainer != el) {
							//修复连续点击（点击元素，再点击桌面，再再点击元素 元素不获取焦点的问题出现）   yang
							//ctrl-value 元素 如果为空的时候 不需要需要选中全部节点  (  ) selectNodeContents 解决上面的bug yang
							if (el.innerHTML !== '') {
								range.selectNodeContents(el);
							}
							range.select();
						}
					}
				}

				/**
				 * 渲染下拉项
				 * @param {Array} data option数据
				 * @param {String} id   select控件id
				 */
				var renderSelect = function (data, id) {
					var option, optionHtmls = [],
						textLen = 0,
						j = 0;

					var thePluginsNode = AX.dom.domUtils.findParent(el, function (dom) {
						return dom.getAttribute('axplugins') == thePlugins && dom.getAttribute('attrs');
					}, true);
					if (thePluginsNode === null) return;
					attrs = thePluginsNode.getAttribute("attrs");
					attrsObj = JSON.parse(attrs);

					if (axTools.hasClass(el, 'ctrl-bg')) {
						el = axTools.getByClass('ctrl-value', el)[0];
					} else {
						el = axTools.getByClass('ctrl-value', thePluginsNode)[0];
					}
					for (; j < data.length; j++) {
						option = data[j];
						textLen = option.value.length;
						optionHtmls.push({
							label: option.value,
							value: option.key,
							isSelect: option.isSelect,
							theme: me.options.theme,
							onclick: function (eventName, event) {
								el.innerHTML = this.label;
								thePluginsNode.setAttribute("selectvaltext", this.label);
								thePluginsNode.setAttribute("selectval", this.value);
								var range = new AX.dom.Range(me.document);
								range.setStart(thePluginsNode.children[0], 0).setCursor(false, true);
								// if (me.options.editorModel == 'mark') {
								me.execCommand('insertHtml', '');
								// }
								me.fireEvent("contentchange");
								axTools.setCascade(thePluginsNode.getAttribute('selectvaltext'), attrsObj.id, me);
								var thePluginsNodeCombine = AX.dom.domUtils.findParent(el, function (dom) {
									return dom.getAttribute('axplugins') == 'combine';
								}, true);
								if (thePluginsNodeCombine == null) {
									thePluginsNodeCombine = me;
									axTools.setCascadeMore(thePluginsNode.getAttribute('selectval'), thePluginsNode, me, thePluginsNodeCombine);
								}
							},
							renderLabelHtml: function () {
								var selectMenu = this.isSelect ? "selectedMenu" : "";
								return '<div class="edui-listitem-body edui-default"><div class="edui-label edui-listitem-label edui-default ' + selectMenu + '">' + (this.label || "") + "</div></div>"
							}
						})
					}
					selectItems.items = optionHtmls;
					selectItems.initItems();
					selectItems.autoSize = 13 * textLen + 20;
					selectItems.getDom("content").innerHTML = selectItems.getContentHtmlTpl();
					selectItems.anchorEl = el;
					selectItems.showAnchor(selectItems.anchorEl);
				};
				if ("BODY" != el.tagName && "HTML" !== el.tagName) {
					var thePluginsNode = AX.dom.domUtils.findParent(el, function (dom) {
						var axValidate = dom.getAttribute('axplugins') == thePlugins;
						return axValidate && dom.getAttribute('attrs');
					}, true);
					if (thePluginsNode === null) return;
					var attrs = thePluginsNode.getAttribute("attrs");
					attrs = JSON.parse(attrs);

					if (me.options.editorModel === 'edit' && !!attrs.readonly) return; // 编辑模式下，校验只读属性

					var selectId = attrs.id;
					if (attrs.options) {
						var list = JSON.parse(attrs.options);
						var selectKeys = thePluginsNode.getAttribute("selectVal");
						var keyList;
						if (selectKeys !== null && selectKeys != "") {
							keyList = selectKeys.split(",");
						}
						AX.utils.each(list, function (item) {
							item.isSelect = false;
							AX.utils.each(keyList, function (sunItem) {
								if (sunItem === item.key) {
									item.isSelect = true;
								}
							});
						});

						renderSelect(list, selectId);
					}
				}
			}
		} catch (e) {
			console.log(e);
		}
	});
};

/**
 * 下拉多选
 * @command selectmulti
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'selectmulti');
 * ```
 */
AX.plugins['selectmulti'] = function () {
	var me = this,
		thePlugins = 'selectmulti';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			axTools.commandDialog({
				me: me,
				type: type,
				isEdit: isEdit,
				cssRules: 'width:700px;height:560px;',
				dialogUrl: 'dialogs/extends/checkbox.html?formName=selectMultiForm&thePlugins=selectmulti&pluginCode=13'
			});
		}
	};
	var menuTitle = me.getLang("labelMap." + thePlugins) || "",
		selectItems = new baidu.editor.ui.Menu({
			editor: me,
			className: "edui-for-editattr edui-list",
			content: "",
			title: menuTitle,
			initValue: menuTitle,
			indexByValue: function (value) {
				if (value) {
					for (var item, i = 0; item = this.items[i]; i++) {
						if (item.value.indexOf(value) != -1) {
							return i;
						}
					}
				}
				return -1;
			},
			selectByValue: function () {

			}
		});
	selectItems.render();
	var popup = axTools.makePopup({
		me: me,
		type: thePlugins,
		editFunc: function (that) {
			var axplugins = that.anchorEl.getAttribute("axplugins"); //判断是多选 还是单选
			baidu.editor.plugins[axplugins].editdom = popup.anchorEl;
			me.execCommand(axplugins, true);
			that.hide();
		}
	});
	// popup.render();
	// me.addListener('mouseover', function (t, evt) {
	// 	axTools.commonEditTip(thePlugins, me, popup, evt);
	// });
	me.addListener("click", function (t, evt) {
		try {
			evt = evt || window.event;
			var el = evt.target || evt.srcElement;
			if (me.options.editorModel === "pure" || me.options.editorModel === "dirty" || me.options.editorModel === "secret" || me.options.editorModel === "preview") return; //清洁模式与非清洁模式 保密模式下不触发点击事件
			if ("view" != me.options.editorModel) {
				if (axTools.hasClass(el, 'ctrl-value')) {
					var ctrlType = el.parentNode.getAttribute('axplugins');
					if (ctrlType != 'combine') {//组合元素 内部文本 禁止点击选中
						var range = me.selection.getRange();
						if (range.collapsed || range.startContainer != el) {
							//修复连续点击（点击元素，再点击桌面，再再点击元素 元素不获取焦点的问题出现）   yang
							//ctrl-value 元素 如果为空的时候 不需要需要选中全部节点  (  ) selectNodeContents 解决上面的bug yang
							if (el.innerHTML !== '') {
								range.selectNodeContents(el);
							}
							range.select();
						}
					}
				}

				/**
				 * 渲染下拉项
				 * @param {Array} data option数据
				 * @param {String} id   select控件id
				 */
				var renderSelect = function (data, id) {
					var option, optionHtmls = [],
						textLen = 0,
						j = 0
					for (; j < data.length; j++) {
						option = data[j];
						textLen = option.value.length;
						optionHtmls.push({
							label: option.value,
							value: option.key,
							isSelect: option.isSelect,
							theme: me.options.theme,
							onclick: function (eventName, event) {
								var thePluginsNode = AX.dom.domUtils.findParent(el, function (dom) {
									return dom.getAttribute('axplugins') == thePlugins && dom.getAttribute('attrs');
								}, true);
								if (thePluginsNode === null) return;
								attrs = thePluginsNode.getAttribute("attrs");
								attrsObj = JSON.parse(attrs);
								if (axTools.hasClass(el, 'ctrl-bg')) {
									el = axTools.getByClass('ctrl-value', el)[0];
								} else {
									el = axTools.getByClass('ctrl-value', thePluginsNode)[0];
								}

								//如果为多选的情况下 点击不关闭menu
								var itemObj = {
									value: this.label,
									key: this.value
								};
								var allData = JSON.parse(attrsObj.options);
								var selectOptions = [];
								var selectKey = thePluginsNode.getAttribute("selectval");
								if (selectKey !== null && selectKey !== "") {
									selectOptions = selectKey.split(",");
								}
								var selectedVals = [];
								if (AX.dom.domUtils.hasClass(event.target, "selectedMenu")) {
									AX.dom.domUtils.removeClasses(event.target, "selectedMenu");
								} else {
									AX.dom.domUtils.addClass(event.target, "selectedMenu");
								}
								selectedObj = axTools.getKeyValueListHandle(selectOptions, itemObj, allData);
								selectedVals = selectedObj.valueList.join(",");
								el.innerHTML = selectedVals;

								thePluginsNode.setAttribute("selectValText", selectedVals);
								thePluginsNode.setAttribute("selectVal", selectedObj.keyList.join(",")); //插入key值

								var range = new AX.dom.Range(me.document);
								range.setStart(thePluginsNode.children[0], 0).setCursor(false, true);
								// if (me.options.editorModel == 'mark') {
								me.execCommand('insertHtml', '');
								// }
								axTools.setCascade(thePluginsNode.getAttribute('selectValText'), attrsObj.id, me);
								var thePluginsNodeCombine = AX.dom.domUtils.findParent(el, function (dom) {
									return dom.getAttribute('axplugins') == 'combine';
								}, true);
								if (thePluginsNodeCombine == null) {
									thePluginsNodeCombine = me
								}
								axTools.setCascadeMore(thePluginsNode.getAttribute('selectVal'), thePluginsNode, me, thePluginsNodeCombine);
								axTools.stopDefault(event);
								axTools.stopPropagation(event);
								return false;
							},
							renderLabelHtml: function () {
								var selectMenu = this.isSelect ? "selectedMenu" : "";
								return '<div class="edui-listitem-body edui-default"><div class="edui-label edui-listitem-label edui-default ' + selectMenu + '">' + (this.label || "") + "</div></div>"
							}
						})
					}
					selectItems.items = optionHtmls;
					selectItems.initItems();
					selectItems.autoSize = 13 * textLen + 20;
					selectItems.getDom("content").innerHTML = selectItems.getContentHtmlTpl();
					selectItems.anchorEl = el;
					selectItems.showAnchor(selectItems.anchorEl);
				};
				if ("BODY" != el.tagName && "HTML" !== el.tagName) {
					var thePluginsNode = AX.dom.domUtils.findParent(el, function (dom) {
						var axValidate = dom.getAttribute('axplugins') == thePlugins;
						return axValidate && dom.getAttribute('attrs');
					}, true);
					if (thePluginsNode === null) return;
					var attrs = thePluginsNode.getAttribute("attrs");
					attrs = JSON.parse(attrs);
					if (me.options.editorModel === 'edit' && !!attrs.readonly) return; // 编辑模式下，校验只读属性
					var selectId = attrs.id;
					if (attrs.options) {
						var list = JSON.parse(attrs.options);
						var selectKeys = thePluginsNode.getAttribute("selectVal");
						var keyList;
						if (selectKeys !== null && selectKeys != "") {
							keyList = selectKeys.split(",");
						}
						AX.utils.each(list, function (item) {
							item.isSelect = false;
							AX.utils.each(keyList, function (sunItem) {
								if (sunItem === item.key) {
									item.isSelect = true;
								}
							});
						});

						renderSelect(list, selectId);
					}
				}
			}
		} catch (e) {
			console.log(e);
		}
	});
};
/**
 * 敏感词校验 -- 禁用类型
 *
 */

AX.plugins['sensitive'] = function () {
    var me = this,
        thePlugins = 'sensitive';
    me.commands[thePlugins] = {
        execCommand: function (type) {
            // 获取当期患者性别，判断所属敏感词
            var sexCtrl = axTools.getByTagAttr("span", "macroCode", "M0002", me.document);
            var content = me.getContent();
            var innerTexts = me.document.body.innerText;
            /**
             * 校验前还原已经隐藏的敏感词
             */
            var sensitiveWords = axTools.getByClass("sensitiveWords", me.document)
            for (var i = 0; i < sensitiveWords.length; i++) {
                var key = sensitiveWords[i];
                var regExp = new RegExp(
                    '<span class="sensitiveWords">' + key.innerText + "</span>",
                    "g"
                ); //正则表达式方法，完全匹配对应的关键字，且声明全局
                content = content.replace(regExp, key.innerText);
            }
            // me.setContent(content);

            if (sexCtrl.length != 0) { // 无性别则跳过校验
                // 根据性别获取不同的敏感词信息
                var maleFlag =
                    sexCtrl[0].innerText.indexOf(me.getLang("ax.male")) > -1 ||
                    sexCtrl[0].innerText == 1;
                // meNums = 0,
                var mensesExpArr = axTools.getByClass("menses", me.document);
                // if (maleFlag) {
                //     for (var i = 0; i < mensesExpArr.length; i++) {
                //         meNums++;
                //     }
                // }
                // // me.setContent(content);
                // if (maleFlag && meNums > 0) {
                //     mensesExpArr = axTools.getByClass("menses", me.document);
                //     for (var i = 0; i < mensesExpArr.length; i++) {
                //         mensesExpArr[i].style.display = "none";
                //     }
                // }
                // //还原非敏感词，如性别为男时，过滤女性敏感词，刷新后为女时，需将女性敏感词还原，将男性敏感词过滤，反之同理
                // content = me.getContent(); //获取最新的内容


                //恢复月经表达式
                if (!maleFlag && mensesExpArr.length > 0) {
                    mensesExpArr = axTools.getByClass("menses", me.document);
                    for (var i = 0; i < mensesExpArr.length; i++) {
                        mensesExpArr[i].style.display = "inline";
                    }
                }

            }
            var keywords = me.options.sensitiveSetting;
            var allSensitiveSetting = me.options.allSensitiveSetting || [];
            for (var i = 0; i < allSensitiveSetting.length; i++) {
                var key = allSensitiveSetting[i];
                // 校验元素 内是否包含敏感词
                var ctrls = axTools.getByClass("ctrl-bg", me.document);
                for(var j = 0; j < ctrls.length; j++) {
                    if(ctrls[j].getAttribute("axPlugins") == "paragraphele") continue;
                    var attrs = JSON.parse(ctrls[j].getAttribute("attrs"));
                    if(attrs.name.indexOf(key.sensitiveWord) > -1 && key.prompt == 1) {
                        // ctrls[j].parentElement.removeChild(ctrls[j]);
                        ctrls[j].style.display = 'inline'
                    }
                }

            }
            if (keywords == null || keywords.length == 0) {
                return
            }

            /**
             * unkeywords = maleFlag
                    ? me.options.maleSensitiveWords
                    : me.options.femaleSensitiveWords,
             */

            var includeSensitiveWord = [];
            var needDelElement = []; // 需要删除的元素
            //获取病历包含的敏感字数组
            for (var i = 0; i < keywords.length; i++) {
                var key = keywords[i];
                //已隐藏的关键字不在放入过滤关键字中
                if (
                    innerTexts.indexOf(key.sensitiveWord) != -1 &&
                    content.indexOf('<span class="sensitiveWords">' + key.sensitiveWord + "</span>") == -1
                ) {
                    includeSensitiveWord.push(key);
                }
            }



            //想还原敏感词可以直接取消sensitiveWords样式，细致点可以将标签一起去掉
            /**
             * confirm(
                        "包含" +
                        includeSensitiveWord.length +
                        "个体征敏感词:【" +
                        includeSensitiveWord.join("、") +
                        "】" +
                        (maleFlag && meNums > 0 ? "及" + meNums + "个月经表达式" : "") +
                        "，是否自动隐藏？"
                    )
             */
            // if (includeSensitiveWord.length > 0) {

                // for (var i = 0; i < includeSensitiveWord.length; i++) {

                //     var key = includeSensitiveWord[i];
                //     var regExp = new RegExp(key.sensitiveWord + "(?!([^<]*>)|([^<]*</a>))", "g"); //正则表达式方法，完全匹配对应的关键字，且声明全局
                //     var result = content.match(regExp)
                //     if (key.prompt == 1) {
                //         content = content.replace(
                //             regExp,
                //             ""//'<span class="sensitiveWords">' + key.sensitiveWord + "</span>"
                //         );
                //     }
                // }
                // me.body.innerHTML = content;
                // me.setContent(content);
                for (var i = 0; i < keywords.length; i++) {
                    var key = keywords[i];
                    // 校验元素 内是否包含敏感词
                    var ctrls = axTools.getByClass("ctrl-bg", me.document);
                    for(var j = 0; j < ctrls.length; j++) {
                        if(ctrls[j].getAttribute("axPlugins") == "paragraphele") continue;
                        var attrs = JSON.parse(ctrls[j].getAttribute("attrs"));
                        if(attrs.name.indexOf(key.sensitiveWord) > -1 && key.prompt == 1) {
                            // ctrls[j].parentElement.removeChild(ctrls[j]);
                            ctrls[j].style.display = 'none'
                        }
                    }

                }

                // var swBlocks = this.getByClass("sensitiveWords", me.document);
                // for (var i = 0; i < swBlocks.length; i++) {
                //     var axPluginsNode = AX.dom.domUtils.findParent(
                //         swBlocks[i],
                //         function (dom) {
                //             return (
                //                 dom.getAttribute("axplugins") != null &&
                //                 dom.getAttribute("attrs")
                //             );
                //         },
                //         true
                //     );

                //     if (axPluginsNode) {
                //         //段落元素标题若含有敏感词，则将段落隐藏
                //         if (axPluginsNode.getAttribute("axPlugins") == "paragraphele") {
                //             var ctrlVal = axPluginsNode.childNodes[0];
                //             if (this.getByClass("sensitiveWords", ctrlVal).length > 0) {
                //                 this.addClass(axPluginsNode, "sensitiveWords");
                //             }
                //         }
                //     }
                // }
            // }


             // 包含在段落内 隐藏整个段落
            var swBlocks = axTools.getByClass("sensitiveWords", me.document);
            for (var m = 0; m < swBlocks.length; m++) {
                var axPluginsNode = AX.dom.domUtils.findParent(
                    swBlocks[m],
                    function (dom) {
                        return (
                            dom.getAttribute("axplugins") != null &&
                            dom.getAttribute("attrs")
                        );
                    },
                    true
                );

                if (axPluginsNode) {
                    //段落元素标题若含有敏感词，则将段落隐藏
                    if (axPluginsNode.getAttribute("axPlugins") == "paragraphele") {
                        var ctrlVal = axPluginsNode.childNodes[0];
                        if (axTools.getByClass("sensitiveWords", ctrlVal).length > 0) {
                            axTools.addClass(axPluginsNode, "sensitiveWords");
                        }
                    }
                }
            }

            return true;
        }
    };
}

/**
 * 校验敏感词 -- 警告类型
 */
AX.plugins['sensitivewarning'] = function () {
    var me = this,
        thePlugins = 'sensitivewarning';
    me.commands[thePlugins] = {
        execCommand: function (type) {
            // 获取当期患者性别，判断所属敏感词
            // var sexCtrl = axTools.getByTagAttr("span", "macroCode", "M0002", me.document),
            var content = me.getContent();

            // if (sexCtrl.length == 0) { // 无性别则跳过校验
            //     return true;
            // }

            // 根据性别获取不同的敏感词信息
            // var maleFlag =
            //     sexCtrl[0].innerText.indexOf(me.getLang("ax.male")) > -1 ||
            //     sexCtrl[0].innerText == 1;
            var keywords = me.options.sensitiveSetting;
            if (keywords == null || keywords.length == 0) {
                return
            }
            /**
             * unkeywords = maleFlag
                    ? me.options.maleSensitiveWords
                    : me.options.femaleSensitiveWords,
             */

            var includeSensitiveWord = [];

            //获取病历包含的敏感字数组
            for (var i = 0; i < keywords.length; i++) {
                var key = keywords[i];
                //已隐藏的关键字不在放入过滤关键字中
                if (
                    content.indexOf(key.sensitiveWord) != -1 &&
                    content.indexOf('<span class="sensitiveWords">' + key.sensitiveWord + "</span>") == -1
                ) {
                    includeSensitiveWord.push(key);
                }
            }
            if (includeSensitiveWord.length > 0) {
                var alertWords = [];
                for (var i = 0; i < includeSensitiveWord.length; i++) {

                    var key = includeSensitiveWord[i];
                    var regExp = new RegExp(key.sensitiveWord + "(?!([^<]*>)|([^<]*</a>))", "g"); //正则表达式方法，完全匹配对应的关键字，且声明全局
                    if (key.prompt == 2 && !key.isshow) {
                        alertWords.push(key.sensitiveWord);
                        key['isshow'] = true
                    }
                }
                if (alertWords.length > 0) {
                    alert('包含敏感词 ' + alertWords.join("，"))
                }
            }
            return true;
        }
    };
}

/* eslint-disable */

/**
 * 签名元素
 * @command signature
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'signature');
 * ```
 */
AX.plugins['signature'] = function () {
  var me = this,
    thePlugins = 'signature';
  me.commands[thePlugins] = {
    execCommand: function (type, isEdit) {
      axTools.commandDialog({
        me: me,
        type: thePlugins,
        isEdit: isEdit,
        cssRules: 'width:700px;height:508px;',
        dialogUrl: 'dialogs/extends/signature.html'
      });
    }
  };
  var popup = axTools.makePopup({
    me: me,
    type: thePlugins
  });
  // popup.render();
  // me.addListener('mouseover', function (t, evt) {
  //  axTools.commonEditTip(thePlugins, me, popup, evt);
  // });
};


/**
 * 通过账号密码验证， 插入签名
 */
AX.plugins["insertsignature"] = function () {
  var me = this,
    thePlugins = "insertsignature";
  me.commands[thePlugins] = {
    execCommand: function (type, data, level, userId) {
      var ctrl = me.selection.getRange().startContainer;
      var ctrls = axTools.getByClass("plugins-bg-foucs", me.document);
      try{
        me.undoManger.disconnect(); // 刷新宏元素时，暂停撤回监听
      }catch(e){console.log(e)}
      for (var k = 0; k < ctrls.length; k++) {
        if (ctrls[k].className.indexOf('signature') > -1 && ctrls[k].className.indexOf('plugins-bg-foucs') > -1) {
          ctrl = ctrls[k];
          break;
        }
      }
      // if (ctrls.length === 0) {
        ctrl = me.document;
      // }
      // var ctrls = AX.dom.domUtils.findParent(ctrl, function (dom) {
      //  return dom.tagName === "SPAN" && axTools.hasClass(dom,'signature') && axTools.hasClass(dom, 'plugins-bg-foucs');
      // }, true, true);
      var cursign = axTools
        .getByTagAttr("span", "itemsignture", level, ctrl)[0]
        .getAttribute("itemsignture");
      var isok = true;
      for (var i = 0; i < ctrl.children.length; i++) {
        if (ctrl.children[i].tagName !== "SPAN") {
          continue;
        }
        if (
          ctrl.children[i].innerText === "" &&
          ctrl.children[i].getAttribute("itemsignture") != cursign
        ) {
          isok = false;
          break;
        } else if (ctrl.children[i].getAttribute("itemsignture") == cursign) {
          isok = true;
          break;
        }
      }
      if (isok) {
        axTools
          .getByTagAttr("span", "itemsignture", level, ctrl)[0]
          .setAttribute("isNewSign", 1);
        axTools
          .getByTagAttr("span", "itemsignture", level, ctrl)[0]
          .setAttribute("userId", userId);
        axTools.getByTagAttr(
          "span",
          "itemsignture",
          level,
          ctrl
        )[0].innerHTML = data;
        axTools.valueChange(axTools.getByTagAttr(
          "span",
          "itemsignture",
          level,
          ctrl
        )[0])
      } else {
        alert("请先填写低级别签名！");
        // return;
      }
      try{
        me.undoManger.reset();
        me.undoManger.reObserve(); // 宏元素更新后，重新监听撤回
      }catch(e){console.log(e)}
    },
    notNeedUndo: 1
  };
};
/**
 * 获取审签 等级
 */
AX.plugins["getsigninfo"] = function () {
  var me = this,
    thePlugins = "getsigninfo";
  me.commands[thePlugins] = {
    execCommand: function () {
      return axTools.getSignatureInfo(me);
    }
  };
};
/**
 * 完成审签 删除 isNewSign 属性
 */
AX.plugins["signfinish"] = function () {
  var me = this,
    thePlugins = "signfinish";
  me.commands[thePlugins] = {
    execCommand: function () {
      var signCtrls = axTools.getByClass("signature", me);
      for (var j = 0; j < signCtrls.length; j++) {
        var signCtrlVals = this.getByClass("ctrl-value", signCtrls[j]);
        for (var m = 0; m < signCtrlVals.length; m++) {
          signCtrlVals[m].removeAttribute("isNewSign");
        }
      }
    }
  };
};


/**
 * 点击签名元素 触发
 */
AX.plugins["getsignature"] = function () {
  var me = this,
    thePlugins = "getsignature";
  me.commands[thePlugins] = {
    execCommand: function (type, level) {
      if (typeof this.options.clickSignature == "function") {
        this.options.clickSignature(level ? level : "normal");
      } else {
        alert(me.getLang("ax.noclickSignature"));
      }
    }
  };
};
/**
 * 清除指定等级的审签签名
 * {level} -- oneLevel 1级   -- twoLevel 2级  -- threeLevel 3级
 */
AX.plugins["clearsign"] = function () {
  var me = this,
    thePlugins = "clearsign";
  me.commands[thePlugins] = {
    execCommand: function (type, level) {
      var levelArr = [];
      var ctrl = me.selection.getRange().startContainer;
      var ctrls = axTools.getByClass("plugins-bg-foucs", me.document);
      try{
        me.undoManger.disconnect(); // 刷新宏元素时，暂停撤回监听
      }catch(e){console.log(e)}
      for (var k = 0; k < ctrls.length; k++) {
        if (ctrls[k].className.indexOf('signature') > -1 && ctrls[k].className.indexOf('plugins-bg-foucs') > -1) {
          ctrl = ctrls[k];
          break;
        }
      }
      // if (ctrls.length === 0) {
        ctrl = me.document;
      // }
      if (level == "oneLevel") {
        levelArr = ["oneLevel", "twoLevel", "threeLevel"];
      } else if (level == "twoLevel") {
        levelArr = ["twoLevel", "threeLevel"];
      } else if (level == "threeLevel"){
        levelArr = ["threeLevel"];
      } else {
        levelArr = ["normal"];
      }
      for (var j = 0; j < levelArr.length; j++) {
        var targetDom = axTools.getByTagAttr(
          "span",
          "itemsignture",
          levelArr[j],
          ctrl
        );
        for (var i = 0; i < targetDom.length; i++) {
          targetDom[i].innerHTML = "";
        }
      }
      try{
        me.undoManger.reset();
        me.undoManger.reObserve(); // 宏元素更新后，重新监听撤回
      }catch(e){console.log(e)}
    },
    notNeedUndo: 1
  };
};

/**
 * 返回文书所有签名元素 状态
 */
AX.plugins["checksign"] = function () {
  var me = this,
    thePlugins = "checksign";
  me.commands[thePlugins] = {
    execCommand: function (type) {
      // 保存前先确保不可为空的签名都已签名
      var signatures = axTools.getByClass("signature", me.document);
      var signArr = [];
      for (var i = 0; i < signatures.length; i++) {
        var attrs = JSON.parse(signatures[i].getAttribute("attrs"));
        for (
          var j = 0;
          j < axTools.getByClass("ctrl-value", signatures[i]).length;
          j++
        ) {
          var ctrl = axTools.getByClass("ctrl-value", signatures[i])[j];
          var signatureVal = ctrl.innerText.replace(/u200B/g, "");
          var obj = {};
          if (
            (ctrl.getAttribute("itemsignture") == "normal" ||
              !ctrl.getAttribute("itemsignture")) &&
            ctrl.tagName == "SPAN"
          ) {
            // if (!!attrs.isCurrDoctor) {
            //   if (me.options.signatureType == "text") {
            //     ctrl.innerHTML = me.options.userInfo.name;
            //   } else if (me.options.signatureType == "img") {
            //     ctrl.innerHTML =
            //       '<img src="' +
            //       me.options.signatureUrl +
            //       me.options.userInfo.name +
            //       '" alt="签名">';
            //   }
            // }

            // if (!!!attrs.isEmpty && signatureVal == "") {
            //   me.window.confirmMsg(
            //     me.getLang("ax.confirmSignatureTip"),
            //     function(rsl) {
            //       if (!rsl) {
            //         return;
            //       }
            //       axTools.selectRange(me);
            //     }
            //   );
            //   // if (confirm(me.getLang("ax.confirmSignatureTip"))) {
            //   //   axTools.selectRange(me);
            //   // }
            // }

            // 签名后去掉为空校验样式
            if (ctrl.innerHTML.replace(/u200B/g, "") != "") {
              axTools.removeClass(ctrl.parentNode, "error");
            }
            obj = {
              type: "normal",
              isEmpty: attrs.isEmpty,
              value: signatureVal
            };
          } else if (
            ctrl.getAttribute("itemsignture") != "normal" &&
            ctrl.tagName == "SPAN"
          ) {
            obj = {
              type: ctrl.getAttribute("itemsignture"),
              isEmpty: attrs.isEmpty,
              value: signatureVal
            };
          }
          signArr.push(obj);
        }
      }
      return signArr;
    },
    notNeedUndo: 1
  };
};

/**
 * 插入图片签名
 */
AX.plugins["insertimgsign"] = function () {
  var me = this,
    thePlugins = "insertimgsign";
  me.commands[thePlugins] = {
    execCommand: function (type, baseUrl, name, level, w, h) {
      var width = w || "100px",
        height = h || "100px";
      var ctrl = me.selection.getRange().startContainer;
      var signatures = axTools.getByClass("signature", me.document);
      if (level) {
        ctrl = axTools.getByTagAttr("span", 'itemsignture', level, me.document)[0];
      }

      var img =
        '<img src="' +
        baseUrl +
        '" level="' +
        ctrl.getAttribute("itemsignture") +
        '" width="' +
        width +
        '" doctorName="' +
        name +
        '" height="' +
        height +
        '"></img>';
      ctrl.innerHTML = img;

      // for (var i = 0; i < signatures.length; i++) {
      //   var attrs = JSON.parse(signatures[i].getAttribute("attrs"));
      //   for(var j = 0; j < axTools.getByClass("ctrl-value", signatures[i]).length; j++) {
      //     var ctrl = axTools.getByClass("ctrl-value", signatures[i])[j];
      //     var signatureVal = ctrl.innerText.replace(/u200B/g, "");
      //     if (ctrl.getAttribute('itemsignture') != 'normal' && ctrl.tagName == 'SPAN'){
      //       if (doctorName == signatureVal) {

      //       }
      //     }
      //   }
      // }
    }
  };
};

/**
 * 删除对应图章签名
 */
AX.plugins["delimgsign"] = function () {
  var me = this,
    thePlugins = "delimgsign";
  me.commands[thePlugins] = {
    execCommand: function (type, level) {
      var signatures = axTools.getByClass("signature", me.document);
      var signArr = [];
      for (var i = 0; i < signatures.length; i++) {
        var attrs = JSON.parse(signatures[i].getAttribute("attrs"));
        for (
          var j = 0;
          j < axTools.getByClass("ctrl-value", signatures[i]).length;
          j++
        ) {
          var ctrl = axTools.getByClass("ctrl-value", signatures[i])[j];
          var signatureVal = ctrl.innerText.replace(/u200B/g, "");
          if (ctrl.getAttribute("itemsignture") == level) {
            ctrl.innerHTML = "";
          }
        }
      }
    }
  };
};

// 设置签名时间
AX.plugins['setsigntime'] = function () {
    var me = this, thePlugins = 'setsigntime';
    me.commands[thePlugins] = {
        execCommand: function (type, time, dateFormat) {
          dateFormat = dateFormat || 'yyyy-MM-dd'
          var signTimeBgDom = $(me.document).find('[title*="签名时间"].ctrl-bg');
          for(var m = 0; m < signTimeBgDom.length; m++) {
            var attrs = JSON.parse(signTimeBgDom[m].getAttribute('attrs'))
            var inserCurDate = attrs.inserCurDate
            if (inserCurDate) {
              var dateValue = $(signTimeBgDom[m]).find('[title*="签名时间"].ctrl-value')[0];
              dateValue.innerText = axTools.formatCurDate(time, dateFormat)
            }
          }
        }
    };
};


// 设置五免一减评估人员
AX.plugins['setevalutename'] = function () {
    var me = this, thePlugins = 'setevalutename';
    me.commands[thePlugins] = {
        execCommand: function (type, name) {
          var $doms = $(me.document).find('[title="评估人员"].ctrl-value');
          var $doms2 = $(me.document).find('[title="评估人"].ctrl-value');
          for(var m = 0; m < $doms.length; m++) {
            $doms.eq(m).text(name)
          }
          for(var n = 0; n < $doms2.length; n++) {
            $doms2.eq(n).text(name)
          }
        }
    };
};

// 设置五免一减签约团队/或者慢病签约医生
AX.plugins['setsignteam'] = function () {
    var me = this, thePlugins = 'setsignteam';
    me.commands[thePlugins] = {
        execCommand: function (type, teamName) {
          var $doms = $(me.document).find('[title="团队（改）"].ctrl-value');
          var $doms2 = $(me.document).find('[title="签约医生"].ctrl-value');
          for(var m = 0; m < $doms.length; m++) {
            $doms.eq(m).text(teamName)
          }
          for(var n = 0; n < $doms2.length; n++) {
            $doms2.eq(n).text(teamName)
          }
        }
    };
};


(function(window) {
  var my$;

  function getPaperMargin(elem, options) {
    var hiddenBox = my$("#pageMarginHidden", elem)[0]; // elem.getElementById("pageMarginHidden");
    if (hiddenBox) {
      return hiddenBox.value.split(",");
    }
    return options.pagemargin[0].value;
  }

  function setPaperMargin(elem, value) {
    elem.style.paddingLeft = axTools.cm2px(value[3]) + "px";
    elem.style.paddingRight = axTools.cm2px(value[1]) + "px";
    elem.style.paddingTop = axTools.cm2px(value[0]) + "px";
    elem.style.paddingBottom = axTools.cm2px(value[2]) + "px";
  }

  function getPaperSize(elem, options) {
    var hiddenBox = my$("#paperSizeHidden", elem)[0]; // elem.getElementById("paperSizeHidden");
    if (hiddenBox) {
      return hiddenBox.value.split(",");
    }
    return options.papersize[0].value;
  }

  function setPaperSize(elem, value) {
    elem.style.width = axTools.cm2px(value[0]) + "px";
    elem.style.margin = "0 auto";
    elem.style.border = "1px dotted #ccc";
  }

  // 计算单页分割属性
  function calcHandler(options, rootElement) {
    var header = axTools.getByClass("ax-editor-page-header", rootElement);
    var footer = axTools.getByClass("ax-editor-page-footer", rootElement);
    var initPage = axTools.getByClass("ax-editor-init-page", rootElement);
    var body = rootElement;

    var pagemargin = getPaperMargin(rootElement, options);
    var papersize = getPaperSize(rootElement, options);

    var printWhite = axTools.cm2px(options.printWhiteCm);
    var countHeight = 0, //叠加子元素高度，与页面内容高度对比，进行分页
      headerHeight = header.length > 0 ? header[0].offsetHeight : 0, //页眉高度
      headermt = parseInt(axTools.getDomStyle(header[0]).marginTop), //页眉下边距
      footerHeight = footer.length > 0 ? footer[0].offsetHeight : 0, //页脚高度
      footermb = parseInt(axTools.getDomStyle(footer[0]).marginBottom), //页脚上边距
      mt = parseInt(axTools.cm2px(pagemargin[0])), //上边距
      mb = parseInt(axTools.cm2px(pagemargin[2])), //下边距
      pageHeight = parseInt(axTools.cm2px(papersize[1])), //每页纸张高度
      pageContentHeight = 0, //每页内容区高度
      pageNum = 0; //页码
    headermt = isNaN(headermt) ? 0 : headermt; //没有页眉时，边距为0
    footermb = isNaN(footermb) ? 0 : footermb; //没有页脚时，边距为0
    pageContentHeight = parseInt(
      pageHeight -
        (mt > headerHeight + headermt ? mt : headerHeight + headermt) -
        (mb > footerHeight + footermb ? mb : footerHeight + footermb) -
        printWhite * 2
    );

    console.log(
      "---papersize-new---",
      papersize,
      pageHeight,
      pageContentHeight,
      mt,
      mb,
      headerHeight,
      headermt
    );

    // 插入分割线
    function drawDividLine(top) {
      var line = document.createElement("div");
      var pageText = document.createElement("span");
      axTools.addClass(pageText, "line-text");
      pageText.innerText = "第" + ++pageNum + "页";
      line.appendChild(pageText);
      axTools.addClass(line, "divid-line");
      line.style.top = top + "px";
      body.appendChild(line);
    }

    // 设置正常的分页标记，这个标记通常都是设置在分页的元素上
    // 代表着从这个元素上面开始分割
    function setCommonBreakAttrs(elem) {
      axTools.addClass(elem, "break-elem");
      elem.setAttribute(
        "break-elem-attrs",
        JSON.stringify({
          type: "top"
        })
      );
    }

    // 分割长文本的属性
    // 设置分别在该文本的第几行分割
    function setSplitLongTextAttrs(elem, lineNum) {
      elem.setAttribute(
        "break-elem-attrs",
        JSON.stringify({
          type: "my",
          lineNum: lineNum,
          tag: "text",
          width: my$(elem).width()
        })
      );
      axTools.addClass(elem, "break-elem");
    }

    // 分割table的属性
    // 设置分别在表格的第几行分割
    function setSplitTableAttrs(elem, lineNum) {
      elem.setAttribute(
        "break-elem-attrs",
        JSON.stringify({
          type: "my",
          lineNum: lineNum,
          tag: "table"
        })
      );
      axTools.addClass(elem, "break-elem");
    }

    // 获取元素距离编辑区顶部的距离
    function getElementToPageTop(elem) {
      return my$(elem).offset().top;
    }

    // 过滤掉无用元素
    function isIgnoreElem(elem) {
      //过滤掉填充元素及页眉页脚，页眉页脚在计算内容区高度时已去除，此处不参与计算
      var tagName = elem.tagName.toLowerCase();
      if (
        elem.getAttribute("type") == "hidden" ||
        tagName == "header" ||
        tagName == "footer" ||
        tagName == "pagenum" ||
        (tagName == "object" && elem.getAttribute("id") == "WebBrowser")
      ) {
        return true;
      }
      return false;
    }

    // 逐行分割，单行超长度不予支持
    function splitTable(elem, height) {
      var topVal = getElementToPageTop(elem);
      var lineNum = 0;
      var children = [];
      var tbody = elem.getElementsByTagName("tbody")[0];
      if (!tbody) {
        children = elem.children;
      } else {
        children = tbody.children;
      }
      var ch = 0;
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        if (ch + child.offsetHeight > height) {
          break;
        }
        ch += child.offsetHeight;
        lineNum++;
      }
      topVal += ch;
      var leftHeight = 0;
      for (var i = lineNum; i < children.length; i++) {
        var child = children[i];
        leftHeight += child.offsetHeight;
      }

      // 在这里为元素设置分割所需属性
      // 实际分割的操作是在预览模块中操作
      setSplitTableAttrs(elem, lineNum);

      return {
        topVal: topVal,
        lineNum: lineNum,
        leftHeight: leftHeight
      };
    }

    // 获取纯文本元素的行数
    function getElemRowNum(elem) {
      var styles = getComputedStyle(elem, null);
      var lh = parseInt(styles.lineHeight, 10);
      var h = parseInt(styles.height, 10);
      var lc = Math.round(h / lh);
      return lc;
    }

    // 计算纯文本元素分割的界限
    function splitBlockText(elem, height) {
      var topVal = getElementToPageTop(elem);
      var lineNum = 0;
      var styles = getComputedStyle(elem, null);
      var lh = parseInt(styles.lineHeight, 10);
      var h = parseInt(styles.height, 10);
      var lc = Math.round(h / lh);
      for (var i = 0; i < lc; i++) {
        if (height < lh * (i + 1)) {
          break;
        }
        lineNum++;
        topVal += lh;
      }

      // 在这里为元素设置分割所需属性
      // 实际分割的操作是在预览模块中操作
      setSplitLongTextAttrs(elem, lineNum);

      return {
        topVal: topVal,
        lineNum: lineNum,
        leftHeight: (lc - lineNum) * lh
      };
    }

    // 是否为纯文本节点
    function isClearTextElem(elem) {
      var clearTextNode = true;
      for (var i = 0; i < elem.childNodes.length; i++) {
        var node = elem.childNodes[i];
        if (node.tagName) {
          var tagName = node.tagName.toLowerCase();
          if (tagName != "span" && tagName != "strong" && tagName != "br") {
            clearTextNode = false;
          }
        } else {
          if (node.nodeName != "#text") {
            clearTextNode = false;
          }
        }
      }
      return clearTextNode;
    }

    // 判断节点是否可以分割
    function isSplitElem(elem) {
      var splitPluginNames = ["paragraphele"];
      var tagName = elem.tagName.toLowerCase();
      if (elem.childNodes && elem.childNodes.length) {
        var pluginName = elem.getAttribute("axplugins");
        if (
          tagName == "table" ||
          tagName == "tbody" ||
          splitPluginNames.indexOf(pluginName) != -1
        ) {
          return true;
        }
        if (tagName == "p") {
          // 判断该段文字是否为仅仅纯文字组成
          // TODO 目前支持纯文字分割
          if (isClearTextElem(elem)) {
            return true;
          }
        }
      } else {
        // 多行纯文本元素也可以分割
        if (tagName == "p" && getElemRowNum(elem) > 1) {
          return true;
        }
      }
      return false;
    }

    // 重置页面的基础高度
    function resetCountHeight() {
      countHeight = 0;
    }
    resetCountHeight();

    // 根据当前页面的剩余高度判断元素是
    // 放入下一页
    // 切割开
    function splitElement(elem) {
      if (isIgnoreElem(elem)) {
        return;
      }
      var isTextElem = isClearTextElem(elem);
      var isTableElem = elem.tagName.toLowerCase() == "table";
      if (isTextElem && getElemRowNum(elem) > 1) {
        var p = splitBlockText(elem, pageContentHeight - countHeight);
        drawDividLine(p.topVal);
        resetCountHeight();
        countHeight += p.leftHeight;
      } else if (isTableElem) {
        var p = splitTable(elem, pageContentHeight - countHeight);
        drawDividLine(p.topVal);
        resetCountHeight();
        countHeight += p.leftHeight;
      } else if (elem.children && elem.children.length) {
        for (var i = 0; i < elem.children.length; i++) {
          var child = elem.children[i];
          if (countHeight + child.offsetHeight > pageContentHeight) {
            if (isSplitElem(child)) {
              splitElement(child);
            } else {
              drawDividLine(getElementToPageTop(child));
              setCommonBreakAttrs(elem);
              resetCountHeight();
              countHeight += child.offsetHeight;
            }
          } else {
            countHeight += child.offsetHeight;
          }
        }
      } else {
        drawDividLine(getElementToPageTop(elem));
        setCommonBreakAttrs(elem);
        resetCountHeight();
      }
    }

    splitElement(body);

    return {
      lastX: 0,
      lastY: 0,
      lastHeight: pageContentHeight - countHeight
    };
  }

  // 进行分割
  function splitHandler(rootElement) {
    // 打印对于元素的属性支持
    // 某些元素打印时不需要打印出来
    // ===============================
    function preprocessHandler(node) {
      // 1. 清除focus样式
      var elems = node.getElementsByClassName("plugins-bg-foucs");
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        axTools.removeClass(elem, "plugins-bg-foucs");
      }
      // 2. 根据标签上的isPrint属性来过滤不可打印的内容
      var elems = $("span[attrs*='isPrint']");
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) {
          continue;
        }
        var attrs = elem.getAttribute("attrs");
        if (!attrs) {
          continue;
        }
        attrs = JSON.stringify(attrs);
        if (attrs.isPrint == "off") {
          elem.style.visibility = "hidden";
        }
      }
    }

    // 打印
    // ===============================

    function splitText(elem, attrs) {
      var jqElem = $(elem);
      var copyElem = jqElem.clone(true)[0];
      var lineNum = attrs.lineNum;
      var width = attrs.width;
      var elemText = jqElem.text();

      var canvas = document.createElement("canvas");
      canvas.font = jqElem.css("font");
      var ctx = canvas.getContext("2d");

      var curlineStr = "";
      var newStr = "";
      var mylineNum = 0;
      var ischanged = false;
      var strs = elemText.split("");
      for (var i = 0; i < strs.length; i++) {
        var w = ctx.measureText(curlineStr + strs[i]).width * 1.4;
        if (w > width) {
          mylineNum++;
          if (mylineNum > lineNum && !ischanged) {
            break;
          }
          newStr += curlineStr;
          curlineStr = strs[i];
        } else {
          curlineStr += strs[i];
        }
      }
      elem.innerHTML = elemText.slice(newStr.length);
      newStr;
      copyElem.innerHTML = newStr;
      elem.parentNode.insertBefore(copyElem, elem);
      var sep = getBreakSepElem();
      elem.parentNode.insertBefore(sep, elem);
    }

    function splitTable(elem, attrs) {
      var lineNum = attrs.lineNum;
      var tbody = elem.getElementsByTagName("tbody")[0];
      var top = $(elem).clone()[0];
      var bottom = $(elem).clone()[0];
      if (!tbody) {
        for (var i = 0; i < elem.children.length; i++) {
          if (i < lineNum) {
            bottom.removeChild(bottom.children[0]);
          } else {
            top.removeChild(top.children[lineNum]);
          }
        }
      } else {
        for (var i = 0; i < tbody.children.length; i++) {
          if (i < lineNum) {
            bottom.children[0].removeChild(bottom.children[0].children[0]);
          } else {
            top.children[0].removeChild(top.children[0].children[lineNum]);
          }
        }
      }
      elem.parentNode.insertBefore(top, elem);
      var sep = getBreakSepElem();
      elem.parentNode.insertBefore(sep, elem);
      elem.parentNode.insertBefore(bottom, elem);
      elem.parentNode.removeChild(elem);
    }

    function insertBreakElemToTop(elem) {
      var sep = getBreakSepElem();
      elem.parentNode.insertBefore(sep, elem);
    }

    function getBreakSepElem(isstr) {
      var sep = document.createElement("div");
      axTools.addClass(sep, "break-separator");
      sep.innerHTML = "&nbsp;";
      return !!isstr ? sep.outerHTML : sep;
    }

    function justDoIt(elem) {
      preprocessHandler(elem);
      var elems = elem.getElementsByClassName("break-elem");
      for (var i = 0; i < elems.length; i++) {
        var ele = elems[i];
        var attrs = ele.getAttribute("break-elem-attrs");
        if (!attrs) {
          continue;
        }
        axTools.removeClass(ele, "break-elem");
        i--;

        attrs = JSON.parse(attrs);
        if (attrs.type == "my") {
          if (attrs.tag == "text") {
            splitText(ele, attrs);
          } else if (attrs.tag == "table") {
            splitTable(ele, attrs);
          }
        } else if (attrs.type == "top") {
          insertBreakElemToTop(ele);
        }
      }
    }

    justDoIt(rootElement);
    return rootElement;
  }

  // 解除分割，还原拼接
  function recover(options, rootElement) {
    // 清除分割部分代码
    function clearSplitSep() {
      var elems = rootElement.getElementsByClassName("break-separator");
      for (var i = 0; i < elems.length; i++) {
        console.log(i);
        var el = elems[i];
        if (el) {
          var attrs = my$(el)
            .prev()
            .attr("break-elem-attrs");
          if (attrs) {
            attrs = JSON.parse(attrs);
            if (attrs && attrs.tag == "text") {
              backTextBlock(my$(el).prev()[0], my$(el).next()[0]);
            } else if (attrs && attrs.tag == "table") {
              backTableBlock(my$(el).prev()[0], my$(el).next()[0]);
            }
          }
          el.parentNode.removeChild(el);
        }
      }

      // if (elems && elems.length) {
      //   elems.forEach(function(el) {
      //     if (el) {
      //       var attrs = my$(el)
      //         .prev()
      //         .attr("break-elem-attrs");
      //       if (attrs) {
      //         attrs = JSON.parse(attrs);
      //         if (attrs && attrs.tag == "text") {
      //           backTextBlock(my$(el).prev(), my$(el).next());
      //         } else if (attrs && attrs.tag == "table") {
      //           backTableBlock(my$(el).prev(), my$(el).next());
      //         }
      //       }
      //       el.parentNode.removeChild(el);
      //     }
      //   });
      // }
    }

    // 还原被分割的大段文本
    function backTextBlock(prev, next) {
      prev.innerHTML += next.innerHTML;
      next.parentNode.removeChild(next);
    }

    // 还原被分割的表格
    function backTableBlock(prev, next) {
      prev.innerHTML += next.innerHTML;
      next.parentNode.removeChild(next);
    }

    // 清除之前用于分页的数据
    function clearBreakAttrs() {
      var elems = rootElement.getElementsByClassName("break-elem");
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        axTools.removeClass(elem, "break-elem");
        elem.removeAttribute("break-elem-attrs");
      }
    }

    clearSplitSep();
    clearDividLine(rootElement);
    clearBreakAttrs();
  }

  // 清除之前的样式
  function clearDividLine(rootElement) {
    var dividLineElems = rootElement.getElementsByClassName("divid-line");
    for (var i = 0; i < dividLineElems.length; i++) {
      my$(dividLineElems[i]).remove();
      i--;
    }
  }

  // 整套流程
  // 1. 开辟一个空间（iframe），把当前页面文档输入进去
  // 2. 还原为未分割状态，计算分割属性
  // 3. 计算好的iframe中的文本拿出来进行物理切割，增加页头页尾页码
  // 4. 一次性的替换当前编辑区的文本

  function initWrapper(doc, elem) {
    var wrapper = document.getElementById("invisibleWrapper");
    if (!wrapper) {
      wrapper = document.createElement("div");
      wrapper.className = "invisible-wrapper";
      wrapper.id = "invisibleWrapper";
      my$(wrapper).attr(
        "style",
        my$(elem).attr("style") + ("width:" + $(elem).width() + "px;")
      );
      doc.getElementsByTagName("html")[0].append(wrapper);
    }

    wrapper.innerHTML = elem.innerHTML;
    return wrapper;
  }

  // =============================================
  function run(doc, jq, options, elem) {
    my$ = jq;
    // 开辟独立计算控件
    var rootElement = initWrapper(doc.document, elem);

    // 还原
    recover(options, rootElement);
    // 计算分割
    calcHandler(options, rootElement);
    // 分割
    splitHandler(rootElement);
    // 输入出去
    return rootElement.innerHTML;
  }

  // 运行时，实时输入页面的计算，以及插入分割线
  // =============================================
  function pageBreakRuntime(jq, options, rootElement) {
    my$ = jq;
    clearDividLine(rootElement);
    calcHandler(options, rootElement);
  }

  // 打印的处理行数
  // =============================================
  function printRuntime(jq, options, rootElement) {
    my$ = jq;
    clearDividLine(rootElement);

    var header = axTools.getByClass("ax-editor-page-header", rootElement);
    var footer = axTools.getByClass("ax-editor-page-footer", rootElement);

    return {
      content: splitHandler(rootElement),
      header: header[0],
      footer: footer[0],
      papersize: getPaperSize(rootElement, options),
      pagemargin: getPaperMargin(rootElement, options)
    };
  }

  // 续打
  // 计算前面的空余空间，以及起点的x、y值
  // 起一个空白页，根据上面的空间截取出内容画在空白页上
  // 后面的按后续的正规打印即可
  // =============================================
  function continuePrint(jq, options, firstElem, secondElem) {
    my$ = jq;
    var rsl = [];
    calcHandler(options, firstElem);
  }

  window._testRun = run;
  window._pageBreakRuntime = pageBreakRuntime;
  window._continuePrint = continuePrint;
  window._printRuntime = printRuntime;
})(window);

/* eslint-disable */

/**
 * 文档结构树
 * @command structuretree
 * @method execCommand
 * @param { String } structuretree 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'structuretree');
 * ```
 */
AX.plugins["structuretree"] = function() {
  var me = this,
    thePlugins = "structuretree";
  me.commands[thePlugins] = {
    execCommand: function() {
      var structureTreeData = [
        {
          id: 1,
          pId: 0,
          name: me.getLang("labelMap.structureTree"),
          open: true
        }
      ];
      // 过滤有相同的元素
      // 页面编写过程中可能某个元素被页面分割
      // 导致出现两个相同元素
      var ids = [];

      /**
       *获取dom子元素
       * @param {*} dom
       */
      function getChildren(dom) {
        try {
          var children = dom.children,
            pId = dom.getAttribute("id");
          pId = pId && dom.getAttribute("axplugins") ? pId : 1;
          //段落和组合元素，内部子元素可能会包含控件，此处找到段落或组合元素的id，作为pId
          if (pId == 1) {
            var thePluginsNode = AX.dom.domUtils.findParent(
              dom,
              function(dom) {
                return (
                  dom.getAttribute("axplugins") && dom.getAttribute("attrs")
                );
              },
              true
            );
            if (thePluginsNode != null) {
              pId = thePluginsNode.getAttribute("id");
            }
          }
          for (var i = 0; i < children.length; i++) {
            var child = children[i],
              isCtrl = axTools.hasClass(child, "ctrl-bg"),
              ctrlType = child.getAttribute("axPlugins");
            if (
              isCtrl &&
              ctrlType != "note" &&
              child.style.display != "none" &&
              child.getAttribute("axplugins") != "macro"
            ) {
              //
              var attrs = JSON.parse(child.getAttribute("attrs"));
              if (ids.indexOf(attrs.id) == -1) {
                structureTreeData.push({
                  id: attrs.id,
                  pId: pId,
                  isCtrl: true,
                  name:
                    attrs.name == undefined || attrs.name == ""
                      ? "未命名"
                      : attrs.name,
                  open: false,
                  attrs: attrs,
                  axplugins: child.getAttribute("axplugins")
                });
                ids.push(attrs.id);
              }

              if (ctrlType == "paragraphele") {
                getChildren(child);
              }
              if (ctrlType == "combine") {
                getChildren(child.childNodes[0]);
              }
            } else if (!isCtrl) {
              //控件内部html自动生成
              getChildren(child);
            }
          }
        } catch (e) {
          console.log(e);
        }
      }
      getChildren(me.document.body);

      return structureTreeData;
    }
  };
};

/**
 * 文档结构树节点点击事件
 * @command structuretreeclick
 * @method execCommand
 * @param { String } structuretreeclick 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'structuretreeclick');
 * ```
 */
AX.plugins["structuretreeclick"] = function() {
  var me = this,
    thePlugins = "structuretreeclick";
  me.commands[thePlugins] = {
    execCommand: function(type, id) {
      var ctrl = me.document.getElementById(id),
        ctrlVal = axTools.getByClass("ctrl-value", ctrl)[0];
      var json = JSON.parse(ctrl.getAttribute("attrs")),
        axplugins = ctrl.getAttribute("axplugins");
      if(axplugins == "paragraphele" && json.singleTitle == "") {
        ctrlVal = ctrl.querySelectorAll("strong")[0];
        ctrlVal.className = "ctrl-value"; // 兼容无class的旧模板
      }
      // if (me.options.editorModel !== "edit" && me.options.editorModel !== "mark" && me.options.editorModel !== "design") return;
      ctrlVal.focus();
      ctrlVal.click();
      // ctrlVal.scrollIntoView();
      scrolltoView(ctrlVal)
    }
  };
  function scrolltoView (target) {
    var tagPar = AX.dom.domUtils.findParent(target, function (dom) {
      return dom.tagName === "DIV" && dom.className.indexOf('ax-page-wrapper') > -1;
    }, true)
    var targetTop = 0;
    while(tagPar.previousElementSibling.className.indexOf('ax-page-wrapper') > -1){
      targetTop += tagPar.previousElementSibling.offsetHeight;
      tagPar = tagPar.previousElementSibling;
    }
    var top = target.offsetTop + targetTop;
    $(me.document).scrollTop(top);
  }
};

/**
 * 文档结构树节点编辑事件
 * @command structuretreeedit
 * @method execCommand
 * @param { String } structuretreeedit 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'structuretreeedit');
 * ```
 */
AX.plugins["structuretreeedit"] = function() {
  var me = this,
    thePlugins = "structuretreeedit";
  me.commands[thePlugins] = {
    execCommand: function(etype, id) {
      if (
        me.options.editorModel == "pure" ||
        me.options.editorModel == "dirty" ||
        me.options.editorModel == "secret" || me.options.editorModel === "preview"
      ) {
        alert(me.getLang("ax.viewNotEditTip"));
        return;
      }
      var ctrl = me.document.getElementById(id),
        type = ctrl.getAttribute("axPlugins");

      baidu.editor.plugins[type].editdom = ctrl;
      me.execCommand(type, true);
    }
  };
};

/**
 * 文档结构树节点删除事件
 * @command structuretreedel
 * @method execCommand
 * @param { String } structuretreedel 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'structuretreedel');
 * ```
 */
AX.plugins["structuretreedel"] = function() {
  var me = this,
    thePlugins = "structuretreedel";
  me.commands[thePlugins] = {
    execCommand: function(etype, id) {
      if (
        me.options.editorModel == "pure" ||
        me.options.editorModel == "dirty" ||
        me.options.editorModel == "secret" || me.options.editorModel === "preview"
      ) {
        alert(me.getLang("ax.viewNotEditTip"));
        return;
      }
      var ctrl = me.document.getElementById(id);

      me.window.confirmMsg(me.getLang("ax.delCtrlTip"), function(rsl) {
        if (!rsl) {
          return;
        }
        AX.dom.domUtils.remove(ctrl, false);
      });
      // if (window.confirm(me.getLang("ax.delCtrlTip"))) {
      //   AX.dom.domUtils.remove(ctrl, false);
      // }
    }
  };
};

AX.plugins['svgedit'] = function () {
	var me = this,
		thePlugins = 'svgedit';
	me.commands[thePlugins] = {
		execCommand: function (type) {
			if(typeof me.options.svgeditorMethod == 'function') {
                me.options.svgeditorMethod()
            }else{
                alert(me.getLang("ax.nosvgeditorMethod"));
            }
		}
	};
};

AX.plugins['insertsvg'] = function () {
    var me = this,
        thePlugins = 'insertsvg';
    me.commands[thePlugins] = {
        execCommand: function (type, data){
            var span = document.createElement('span');
            span.setAttribute('axplugins', 'svgImg')
            span.setAttribute('attrs', '1')
            span.innerHTML = data + '&nbsp;';
            span.style.display = 'inline-block';
            // TODO 后续增加SVG结构化元素
            this.execCommand('insertHtml', span.outerHTML)
        }
    }
    var popup = axTools.makePopup({
		me: me,
		type: 'svgImg'
	});
	// popup.render();
	// me.addListener('mouseover', function (t, evt) {
	// 	axTools.commonEditTip('svgImg',me,popup,evt);
	// });
}
/* eslint-disable */

/**
 * 设置控件tabindex，便于tab键切换控件
 * @command resettabindex
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'resettabindex');
 * ```
 */
AX.plugins['resettabindex'] = function () {
	var me = this,
		thePlugins = 'resettabindex';
	me.commands[thePlugins] = {
		execCommand: function () {
			axTools.getByClass('ctrl-value', me.document).forEach(function (ctrl, index) {
				ctrl.tabIndex = index;
			})
		}
	};
};

/* eslint-disable */

//表格
var border = '1px solid black',
moveBorder = function (e, t, n, r, i) {
    var a = {};
    AX.utils.clone(e.getCellInfo(t), a);
    if (a) try {
        a[n] = a[n] + r, a[n] < 0 && (a[n] = 0, "border-bottom" in i && (i["border-top"] = i["border-bottom"], delete i["border-bottom"]), "border-right" in i && (i["border-left"] = i["border-right"], delete i["border-right"])), "rowIndex" === n && a[n] > e.rowsNum - 1 ? (a[n] = e.rowsNum - 1, "border-bottom" in i && (i["border-top"] = i["border-bottom"], delete i["border-bottom"])) : "cellIndex" === n && a[n] > e.colsNum - 1 && (a[n] = e.colsNum - 1, "border-right" in i && (i["border-left"] = i["border-right"], delete i["border-right"]));
        var s = e.getCell(a.rowIndex, a.cellIndex);
        if (s && i)
            for (var l in i) axTools.setStyleByAttr(s, l, i[l])
    } catch (d) {

    }
};

/**
 *
 * @param  {Node}  table table的元素
 */
function  initTableCls (table) {
    AX.dom.domUtils.removeClasses(table, "tb-hide tb-solid tb-dotted");
}

/**
 *  设置表格下框线
 */
AX.plugins['tablelowerframeline'] = function () {
    var me = this,thePlugins = 'tablelowerframeline';
    me.commands[thePlugins] = {
        execCommand: function () {
            var table = AX.UETable.getUETableBySelected(me);
            table && AX.utils.each(table.selectedTds || [], function (item) {
                item.style.borderBottom.length > 0
                    ? axTools.setStyleByAttr(item, "border-bottom", null)
                    : axTools.setStyleByAttr(item, "border-bottom", border)
            });
            initTableCls(table.table);
        }
    };
};

/**
 *  设置表格上框线
 */
AX.plugins['tableupperframeline'] = function () {
    var me = this,thePlugins = 'tableupperframeline';
    me.commands[thePlugins] = {
        execCommand: function () {
            var table = AX.UETable.getUETableBySelected(me);
            table && AX.utils.each(table.selectedTds || [], function (item) {
                item.style.borderTop.length > 0 ? moveBorder(table, item, "rowIndex", -1, {
                    "border-bottom": null
                }) : moveBorder(table, item, "rowIndex", -1, {
                    "border-bottom": border
                })
            });
            initTableCls(table.table);
        }
    };
};

/**
 *  设置表格左框线
 */
AX.plugins['tableleftframeline'] = function () {
    var me = this,thePlugins = 'tableleftframeline';
    me.commands[thePlugins] = {
        execCommand: function () {
            var table = AX.UETable.getUETableBySelected(me);
            table && AX.utils.each(table.selectedTds || [], function (item) {
                item.style.borderLeft.length > 0 ? moveBorder(table, item, "cellIndex", -1, {
                    "border-right": null
                }) : moveBorder(table, item, "cellIndex", -1, {
                    "border-right": border
                })
            });
            initTableCls(table.table);
        }
    };
};

/**
 *  设置表格右框线
 */
AX.plugins['tablerightframeline'] = function () {
    var me = this,thePlugins = 'tablerightframeline';
    me.commands[thePlugins] = {
        execCommand: function () {
            var table = AX.UETable.getUETableBySelected(me);
            table && AX.utils.each(table.selectedTds || [], function (item) {
                item.style.borderRight.length > 0 ? axTools.setStyleByAttr(item, "border-right", null)
                    : axTools.setStyleByAttr(item, "border-right", border)
            })
            initTableCls(table.table);
        }
    };
};

/**
 *  设置表格无框线
 */
AX.plugins['tablenoborder'] = function () {
    var me = this,thePlugins = 'tablenoborder';
    me.commands[thePlugins] = {
        execCommand: function () {
            var table = AX.UETable.getUETableBySelected(me);
            table && AX.utils.each(table.selectedTds || [], function (item) {
                moveBorder(table, item,  "cellIndex", -1, {
                    "border-right": "none"
                });
                axTools.setStyleByAttr(item, "border-right", "none");
                moveBorder (table, item, "rowIndex", -1, {
                    "border-bottom": "none"
                });
                axTools.setStyleByAttr(item, "border-bottom", "none");
            });
            initTableCls(table.table);
        }
    };
};

/**
 *  设置表格全框线
 */
AX.plugins['tableallborder'] = function () {
    var me = this,thePlugins = 'tableallborder';
    me.commands[thePlugins] = {
        execCommand: function () {
            var table = AX.UETable.getUETableBySelected(me);
            table && AX.utils.each(table.selectedTds || [], function (item) {
                moveBorder(table, item,  "cellIndex", -1, {
                    "border-right": border
                });
                axTools.setStyleByAttr(item, "border-right", border);
                moveBorder (table, item, "rowIndex", -1, {
                    "border-bottom": border
                });
                axTools.setStyleByAttr(item, "border-bottom", border);
            });
            initTableCls(table.table);
        }
    };
};

/**
 *  设置隐藏表格线
 */
AX.plugins['tb-hide'] = function () {
    var me = this,thePlugins = 'tb-hide';
    me.commands[thePlugins] = {
        execCommand: function () {
            var node = me.selection.getStart();
            if (node) {
                var parentNode = AX.dom.domUtils.findParent(node, function (node) {
                    return "TABLE" === node.nodeName
                }, true);
                if (!parentNode) return;
                initTableCls(parentNode);
                AX.dom.domUtils.addClass(parentNode, thePlugins)
            }
        }
    };
};

/**
 *  设置虚线表格线
 */
AX.plugins['tb-dotted'] = function () {
    var me = this,thePlugins = 'tb-dotted';
    me.commands[thePlugins] = {
        execCommand: function () {
            var node = me.selection.getStart();
            if (node) {
                var parentNode = AX.dom.domUtils.findParent(node, function (node) {
                    return "TABLE" === node.nodeName
                }, true);
                if (!parentNode) return;
                initTableCls(parentNode);
                AX.dom.domUtils.addClass(parentNode, thePlugins)
            }
        }
    };
};

/**
 *  设置实线表格线
 */
AX.plugins['tb-solid'] = function () {
    var me = this,thePlugins = 'tb-solid';
    me.commands[thePlugins] = {
        execCommand: function () {
            var node = me.selection.getStart();
            if (node) {
                var parentNode = AX.dom.domUtils.findParent(node, function (node) {
                    return "TABLE" === node.nodeName
                }, true);
                if (!parentNode) return;
                initTableCls(parentNode);
                AX.dom.domUtils.addClass(parentNode, thePlugins)
            }
        }
    };
};

/* eslint-disable */
/**
 * 标签元素鼠标移入事件
 * @command tagelement
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'tagelement');
 * ```
 */
AX.plugins['tagelement'] = function () {
	var me = this,
		thePlugins = 'tagelement';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:700px;height:360px;',
				dialogUrl: 'dialogs/extends/tagelement.html'
			});
		}
	};
	var popup = axTools.makePopup({
		me: me,
		type: thePlugins
	});
	// popup.render();
	// me.addListener('mouseover', function (t, evt) {
	// 	axTools.commonEditTip(thePlugins,me,popup,evt);
	// });
};
/* eslint-disable */

/**
 * 单行文本域鼠标移入事件
 * @command text
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'text');
 * ```
 */
AX.plugins['text'] = function () {
	var me = this,
		thePlugins = 'text';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:700px;height:630px;',
				dialogUrl: 'dialogs/extends/text.html'
			});
		}
	};
	var popup = axTools.makePopup({
		me: me,
		type: thePlugins
	});
	// popup.render();
	// me.addListener('mouseover', function (t, evt) {
	// 	axTools.commonEditTip(thePlugins,me,popup,evt);
	// });
};
/**
 * 插入特殊字符，做留痕处理
 */
AX.plugins['insertspecialsymbol'] = function () {
	var me = this,
		thePlugins = 'insertspecialsymbol';
	me.commands[thePlugins] = {
		execCommand: function (type, val) {
			var model = me.options.editorModel;
			if(model == "mark") {
				// 留痕模式时，插入特殊字符留痕处理
				var rang = me.selection.getRange();
				var time = axTools.formatCurDate(new Date(parseInt(me.options.dateObj.serverDate) + (+new Date() - me.options.dateObj.serverDate)), "yyyy-MM-dd HH:mm:ss");
				if (rang.startContainer.parentElement.className.indexOf("editor-free-text") == -1) {
					val = '<span contenteditable="false" user="' + me.options.userInfo.name + '" time="' + time + '" class="editor-new-add-text editor-free-text">' +
						val +
						"</span>"
				}

			}
			me.execCommand("inserthtml", val)
			me.fireEvent("contentchange");
		}
	};
};

AX.plugins['getheight'] = function () {
  var me = this,
    thePlugins = 'getheight';
  me.commands[thePlugins] = {
    execCommand: function (type, height) {
      var $ctrlDom = $(me.document).find('[title*="身高"].ctrl-value')
      return $ctrlDom.text() || ''
    }
  }
}


AX.plugins['insertheight'] = function () {
  var me = this,
    thePlugins = 'insertheight';
  me.commands[thePlugins] = {
    execCommand: function (type, height) {
      var $ctrlDom = $(me.document).find('[title*="身高"].ctrl-value')
      $ctrlDom.text(height)
    }
  }
}

AX.plugins['getweight'] = function () {
  var me = this,
    thePlugins = 'getweight';
  me.commands[thePlugins] = {
    execCommand: function (type, height) {
      var $ctrlDom = $(me.document).find('[title*="体重"].ctrl-value')
      return $ctrlDom.text() || ''
    }
  }
}

AX.plugins['insertweight'] = function () {
  var me = this,
    thePlugins = 'insertweight';
  me.commands[thePlugins] = {
    execCommand: function (type, weight) {
      var $ctrlDom = $(me.document).find('[title*="体重"].ctrl-value')
      $ctrlDom.text(weight)
    }
  }
}

AX.plugins['gettemperature'] = function () {
  var me = this,
    thePlugins = 'gettemperature';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var dom1 = $(me.document).find('[title="T"].ctrl-value');
      var dom2 = $(me.document).find('[title="体温(℃)"].ctrl-value');
      if (dom1.length) {
        return dom1.text() ?  dom1.text() : '';
      }
      if (dom2.length) {
        return dom2.text() ?  dom2.text() : '';
      }
      return ''
    }
  }
}

AX.plugins['getpulse'] = function () {
  var me = this,
    thePlugins = 'getpulse';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var dom1 = $(me.document).find('[title="P"].ctrl-value');
      var dom2 = $(me.document).find('[title="脉搏"].ctrl-value');
      var dom3 = $(me.document).find('[title="正常值域范围是40~120"].ctrl-value');
      if (dom1.length) {
        return dom1.text() ?  dom1.text() : '';
      }
      if (dom2.length) {
        return dom2.text() ?  dom2.text() : '';
      }
      if (dom3.length) {
        return dom3.text() ?  dom3.text() : '';
      }
    }
  }
}

AX.plugins['getbreath'] = function () {
  var me = this,
    thePlugins = 'getbreath';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      return $(me.document).find('[title="R"].ctrl-value').text() || $(me.document).find('[title="正常值域范围是10~30"].ctrl-value').text() || $(me.document).find('[title="呼吸"].ctrl-value').text() || '';
    }
  }
}


AX.plugins['getbmi'] = function () {
  var me = this,
    thePlugins = 'getbmi';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var dom = $(me.document).find('[title="BMI"].ctrl-value');
      return dom.length ? dom.text() : ''
    }
  }
}


AX.plugins['getfirstbloodpressure'] = function () {
  var me = this,
    thePlugins = 'getfirstbloodpressure';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var dom1 = $(me.document).find('[title="第一次收缩压"].ctrl-value');
      var dom2 = $(me.document).find('[title="第一次舒张压"].ctrl-value');
      if (dom1.length && dom2.length) {
        return dom1.text() + '/' + dom2.text()
      } else {
        return ''
      }
    }
  }
}


AX.plugins['getpulsefrequency'] = function () {
  var me = this,
    thePlugins = 'getpulsefrequency';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var dom = $(me.document).find('[title="心率"].ctrl-value');
      return dom.length ? dom.eq(0).text() : ''
    }
  }
}

AX.plugins['getbloodpressure'] = function () {
  var me = this,
    thePlugins = 'getbloodpressure';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var dom1 = $(me.document).find('[title="收缩压(mmHg）"].ctrl-value');
      var dom2 = $(me.document).find('[title="舒张压(mmHg)"].ctrl-value');
      if (dom1.length && dom2.length) {
        return dom1.text() + '/' + dom2.text()
      } else {
        return ''
      }
    }
  }
}

// 获取舒张压
AX.plugins['getdbp'] = function () {
  var me = this,
    thePlugins = 'getdbp';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $dom = $(me.document).find('span[title="舒张压(mmHg)"].ctrl-value').length ? $(me.document).find('span[title="舒张压(mmHg)"].ctrl-value')
                 : $(me.document).find('span[title="正常值域范围是40~120"].ctrl-value').length ? $(me.document).find('span[title="正常值域范围是40~120"].ctrl-value')
                 : $(me.document).find('span[title="舒张压"].ctrl-value')
      return $dom.text()
    }
  }
}


// 获取收缩压
AX.plugins['getsbp'] = function () {
  var me = this,
    thePlugins = 'getsbp';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $dom = $(me.document).find('span[title="收缩压(mmHg）"].ctrl-value').length ? $(me.document).find('span[title="收缩压(mmHg）"].ctrl-value')
                 : $(me.document).find('span[title="正常值域范围是60~200"].ctrl-value').length ?$(me.document).find('span[title="正常值域范围是60~200"].ctrl-value')
                 : $(me.document).find('span[title="收缩压"].ctrl-value');
      return $dom.text()
    }
  }
}

// 获取第一次收缩压
AX.plugins['getfirstsbp'] = function () {
  var me = this,
    thePlugins = 'getfirstsbp';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $dom = $(me.document).find('span[title="第一次收缩压"].ctrl-value');
      return $dom.text()
    }
  }
}

// 获取第一次舒张压
AX.plugins['getfirstdbp'] = function () {
  var me = this,
    thePlugins = 'getfirstdbp';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $dom = $(me.document).find('span[title="第一次舒张压"].ctrl-value');
      return $dom.text()
    }
  }
}

// 获取第二次收缩压
AX.plugins['getsecondsbp'] = function () {
  var me = this,
    thePlugins = 'getsecondsbp';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $dom = $(me.document).find('span[title="第二次收缩压"].ctrl-value');
      return $dom.text()
    }
  }
}

// 获取第二次舒张压
AX.plugins['getseconddbp'] = function () {
  var me = this,
    thePlugins = 'getseconddbp';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $dom = $(me.document).find('span[title="第二次舒张压"].ctrl-value');
      return $dom.text()
    }
  }
}

// 获取健康教育
AX.plugins['gethealthedu'] = function () {
  var me = this,
    thePlugins = 'gethealthedu';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var result = '';
      var $ctrl = $(me.document).find('[paragraphtype="PT_jkjy"]').clone();
      if (!$ctrl.length) {
        return ''
      }
      for(var i = 0; i < $ctrl.length; i++) {
        var $strongDom = $ctrl.find('strong.ctrl-value');
        $strongDom && $strongDom.remove();
        result += $ctrl.eq(i).find('.paragraphContent').text().replace(/<br>/g, '\n');
      }
      return result;
    }
  }
}


// 获取管理计划
AX.plugins['getmanagemetplan'] = function () {
  var me = this,
    thePlugins = 'getmanagemetplan';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var result = '';
      var $ctrl = $(me.document).find('[paragraphtype="PT_gljh"]').clone();
      if (!$ctrl.length) {
        return ''
      }
      for(var i = 0; i < $ctrl.length; i++) {
        var $strongDom = $ctrl.find('strong.ctrl-value');
        $strongDom && $strongDom.remove();
        result += $ctrl.eq(i).find('.paragraphContent').text().replace(/<br>/g, '\n');
      }
      return result;
    }
  }
}


// 获取空腹血糖
AX.plugins['getglu'] = function () {
  var me = this,
    thePlugins = 'getglu';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $ctrl = $(me.document).find('span[title="空腹血糖"].ctrl-value');
      return $ctrl.length ? $ctrl.eq(0).text() : '';
    }
  }
}



AX.plugins['gettgjcmsg'] = function () {
  var me = this,
    thePlugins = 'gettgjcmsg';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var dom = $(me.document).find('[title="体格检查内容"] .paragraphContent');
      var $dom2 = $(me.document).find('[paragraphtype="PT_tgjcnr"] .paragraphContent');
      return dom.length ? dom.text() : $dom2.length ?  $dom2.text() : '';
    }
  }
}

AX.plugins['getzdtext'] = function () {
  var me = this,
    thePlugins = 'getzdtext';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $wrapperDom = $(me.document).find('[title="初步诊断"]');
      var $domTr = $wrapperDom.find('span.tr');
      var diagnoseArr = [];
      if ($domTr.length) {
        for(var i = 0; i < $domTr.length; i++) {
          if ($domTr.eq(i).text() !== '暂无诊断信息') {
            diagnoseArr.push($domTr.eq(i).text());
          }
        }
      }
      return diagnoseArr.join(',');
    }
  }
}


AX.plugins['insertselforders'] = function () {
  var me = this,
    thePlugins = 'insertselforders';
  me.commands[thePlugins] = {
    execCommand: function (type, selfOrders) {
      var $ctrlDom = $(me.document).find('[title*="自备药"].ctrl-value')
      if (!selfOrders || !selfOrders.length) {
        $ctrlDom.html('')
        return
      }
      var result = []
      var orderGroup = [selfOrders[0]]
      result.push(orderGroup)
      for(var i = 1; i < selfOrders.length; i++) {
        if (selfOrders[i].groupNo === selfOrders[i - 1].groupNo) {
          orderGroup.push(selfOrders[i])
        } else {
          orderGroup = [selfOrders[i]]
          result.push(orderGroup)
        }
      }
      if ($ctrlDom) {
        $ctrlDom.html('')
        var selfOrdersText = ''
        for(var i = 0; i < result.length; i++) {
          selfOrdersText += '<span style="display: block;">' + (i + 1) + '、';
          for(j = 0; j < result[i].length; j++) {
            var selfOrder = result[i][j]
            var selfOrderText = selfOrder.orderItemName + '，' + selfOrder.spec + '，' + selfOrder.production + '，' + selfOrder.quantity + selfOrder.unitName
            if(j === 0) {
              selfOrdersText += selfOrderText + '</span>'
            } else {
              selfOrdersText += '<span style="display: block; text-indent: 1.7em">' + selfOrderText + '</span>'
            }
          }
        }
        $ctrlDom.html(selfOrdersText)
      }
    }
  }
}


AX.plugins['isselforders'] = function () {
  var me = this,
    thePlugins = 'isselforders';
  me.commands[thePlugins] = {
    execCommand: function (type) {
      var $ctrlDom = $(me.document).find('[title*="自备药"].ctrl-value')
      return !!$ctrlDom.length
    }
  }
}

/**
 * 水印编辑弹窗
 * @command watermark
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'watermark');
 * ```
 */
AX.plugins['watermark'] = function () {
	var me = this,
		thePlugins = 'watermark';
	me.commands[thePlugins] = {
		execCommand: function (type, isEdit) {
			axTools.commandDialog({
				me:me,
				type: thePlugins,
				isEdit: isEdit,
				cssRules: 'width:700px;height:380px;',
				dialogUrl: 'dialogs/extends/watermark.html'
			});
		}
	};
	var popup = axTools.makePopup({
		me: me,
		type: thePlugins
	});
	// popup.render();
	// me.addListener('mouseover', function (t, evt) {
	// 	axTools.commonEditTip(thePlugins,me,popup,evt);
	// });
};

/**
 * 设置页面水印
 * @command watermarksetting
 * @method execCommand
 * @param { String } cmd 命令字符串
 * @example
 * ```javascript
 * editor.execCommand( 'watermarksetting');
 * ```
 */
AX.plugins["watermarksetting"] = function() {
  var me = this,
    thePlugins = "watermarksetting";
  me.commands[thePlugins] = {
    execCommand: function(type, value) {
      var body = me.document.getElementsByTagName("body")[0];
      if (value) {
        var hiddenBox = me.document.getElementById("watermarkHidden");
        body.style.backgroundImage = "url(" + value + ")";
        if (hiddenBox) {
          hiddenBox.value = value;
        } else {
          var hiddenInput = document.createElement("input");
          hiddenInput.setAttribute("id", "watermarkHidden");
          hiddenInput.setAttribute("type", "hidden");
          hiddenInput.value = value;
          body.appendChild(hiddenInput);
        }
      } else {
        body.style.backgroundImage = "";
      }
    },
    queryCommandValue: function() {
      var hiddenBox = me.document.getElementById("watermarkHidden");
      if (hiddenBox) {
        return hiddenBox.value;
      }
      return "";
    }
  };
};
